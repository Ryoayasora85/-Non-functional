  1- INV-ver-htc01:arn:aws:iam::686753218709:role/OpeAdminRole
  2- INV-ver-sub01:arn:aws:iam::495152581087:role/OpeAdminRole
  3- INV-ver-cer01:arn:aws:iam::339311866652:role/OpeAdminRole
  4- INV-ver-des01:arn:aws:iam::302986797475:role/OpeAdminRole
  5- INV-ver-agw01:arn:aws:iam::859823971378:role/OpeAdminRole
  6- INV-ver-vdm01:arn:aws:iam::497617980196:role/OpeAdminRole
  7- INV-ver-wfi01:arn:aws:iam::932204081418:role/OpeAdminRole
  8- INV-ver-esp01:arn:aws:iam::131000633826:role/OpeAdminRole
  9- INV-ver-rmt01:arn:aws:iam::604584103104:role/OpeAdminRole
 10- INV-ver-esw01:arn:aws:iam::170541451228:role/OpeAdminRole
 11- INV-ver-tcu01:arn:aws:iam::951453431396:role/OpeAdminRole
 12- INV-ver-vky01:arn:aws:iam::207429400733:role/OpeAdminRole
     all- All Environments:select all environments
スクリプトを実行します。
aws cloudformation describe-stacks --query Stacks[*].StackName
{
    "Account": "975196479634", 
    "UserId": "AIDA6GDR5MCJLYN4JQRFZ", 
    "Arn": "arn:aws:iam::975196479634:user/JV010028"
}
{
    "Account": "686753218709", 
    "UserId": "AROAZ7ZNOQCKVQKRYRERL:inv-20190702040712", 
    "Arn": "arn:aws:sts::686753218709:assumed-role/OpeAdminRole/inv-20190702040712"
}
[
inv-ver-htc01-monitoring-lambda
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: \"2010-09-09\"\r\nDescription: \"monitoring-lambda.yml\"\r\nParameters: \r\n  EnvironmentName: \r\n    Default: ver\r\n    Description: \"Environment Name\"\r\n    Type: String\r\n  MicroServiceName: \r\n    Default: cer01\r\n    Description: \"MicroService Name\"\r\n    Type: String\r\n  S3Buckets: \r\n    Default: \"inv-ver-cer01-cfn\"\r\n    Description: \"source s3 backet name\"\r\n    Type: String\r\n  S3Prefix:\r\n    Default: \"monitor-config/\"\r\n    Description: \"source s3 backet file prefix\"\r\n    Type: String\r\n  iniFileName: \r\n    Default: \"monitor.json\"\r\n    Description: \"scenario file name\"\r\n    Type: String\r\n  scenarioSourceLogGroup:\r\n    Description: \"Scenario CWL log group name\"\r\n    Type: \"String\"\r\n  scenarioFilterPattern:\r\n    Default: \"\"\r\n    Description: \"Scenario Monitor CWL log FilterPattern\"\r\n    Type: \"String\"\r\n  programSourceLogGroup:\r\n    Description: \"program CWL log group name\"\r\n    Type: \"String\"\r\n  programFilterPattern:\r\n    Default: ?\"ERROR\" ?\"FATAL\" ?\"WARN\"\r\n    Description: \"program Monitor CWL log FilterPattern\"\r\n    Type: \"String\"\r\nResources:\r\n  IAMRole:\r\n    Type: \"AWS::IAM::Role\"\r\n    Properties: \r\n      AssumeRolePolicyDocument: \r\n        Version: \"2012-10-17\"\r\n        Statement: \r\n          - Effect: Allow\r\n            Principal: \r\n              Service: \"lambda.amazonaws.com\"\r\n            Action: \"sts:AssumeRole\"\r\n      ManagedPolicyArns: \r\n        - \"arn:aws:iam::aws:policy/AmazonSNSFullAccess\"\r\n      Path: \"/\"\r\n      Policies:\r\n        - PolicyName: monitor_lambda_policy\r\n          PolicyDocument:\r\n            Version: '2012-10-17'\r\n            Statement:\r\n              - Effect: Allow\r\n                Action:\r\n                  - cloudwatch:*\r\n                  - logs:*\r\n                  - s3:Get*\r\n                  - s3:List*\r\n                Resource: \"*\"\r\n      RoleName: !Sub inv-${EnvironmentName}-${MicroServiceName}-monitoring-lambda-role\r\n  LambdaLayer:\r\n    Type: \"AWS::Lambda::LayerVersion\"\r\n    Properties:\r\n      CompatibleRuntimes: \r\n        - python3.6\r\n      Content: \r\n        S3Bucket:\r\n          Ref: S3Buckets\r\n        S3Key: CloudwatchAlarm/metrics_mod.zip\r\n      Description: \"monitor_lambda_modules\"\r\n      LayerName: monitor_module\r\n  LambdaFunction: \r\n    DependsOn: \r\n      - IAMRole\r\n    Type: \"AWS::Lambda::Function\"\r\n    Properties: \r\n      Code: \r\n        S3Bucket: \r\n          Ref: S3Buckets\r\n        S3Key: CloudwatchAlarm/monitoring_common_lambda_src.zip           \r\n      FunctionName: !Sub inv-${EnvironmentName}-${MicroServiceName}-monitoring_common_lambda\r\n      Handler: lambda_function.lambda_handler\r\n      Environment: \r\n        Variables: \r\n          ENV: \r\n            Ref: EnvironmentName\r\n          STG: \r\n            Ref: MicroServiceName\r\n          fileName:\r\n            Ref: iniFileName\r\n          s3Bucket:\r\n            Ref: S3Buckets\r\n          s3keyPrefix:\r\n            Ref: S3Prefix\r\n      Role: \r\n        \"Fn::GetAtt\": \r\n          - IAMRole\r\n          - Arn\r\n      Runtime: \"python3.6\"\r\n      MemorySize: 512\r\n      Timeout: 300\r\n      Layers:\r\n        - !Ref LambdaLayer\r\n  LambdaPermission: \r\n    Type: \"AWS::Lambda::Permission\"\r\n    Properties: \r\n      Action: \"lambda:InvokeFunction\"\r\n      FunctionName: \r\n        \"Fn::GetAtt\": \r\n          - LambdaFunction\r\n          - Arn\r\n      Principal: !Sub \"sns.amazonaws.com\"\r\n      SourceArn: !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:inv-${EnvironmentName}-${MicroServiceName}\r\n  ScenarioSubscriptionFilter:\r\n    DependsOn:\r\n      - ScenarioLambdaInvokePermission\r\n    Type: \"AWS::Logs::SubscriptionFilter\"\r\n    Properties:\r\n      LogGroupName: !Ref scenarioSourceLogGroup\r\n      FilterPattern: !Ref scenarioFilterPattern\r\n      DestinationArn: !Join\r\n        - ''\r\n        - - !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:'\r\n          - !Sub inv-${EnvironmentName}-${MicroServiceName}-monitoring_common_lambda\r\n  ScenarioLambdaInvokePermission:\r\n    Type: 'AWS::Lambda::Permission'\r\n    Properties:\r\n      FunctionName:\r\n        \"Fn::GetAtt\": \r\n          - LambdaFunction\r\n          - Arn\r\n      Action: \"lambda:InvokeFunction\"\r\n      Principal: !Sub \"logs.amazonaws.com\"\r\n      SourceAccount: !Ref AWS::AccountId\r\n      SourceArn: !Sub \"arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${scenarioSourceLogGroup}:*\"\r\n  ProgramSubscriptionFilter:\r\n    DependsOn:\r\n      - ProgramLambdaInvokePermission\r\n    Type: \"AWS::Logs::SubscriptionFilter\"\r\n    Properties:\r\n      LogGroupName: !Ref programSourceLogGroup\r\n      FilterPattern: !Ref programFilterPattern\r\n      DestinationArn: !Join\r\n        - ''\r\n        - - !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:'\r\n          - !Sub inv-${EnvironmentName}-${MicroServiceName}-monitoring_common_lambda\r\n  ProgramLambdaInvokePermission:\r\n    Type: 'AWS::Lambda::Permission'\r\n    Properties:\r\n      FunctionName:\r\n        \"Fn::GetAtt\": \r\n          - LambdaFunction\r\n          - Arn\r\n      Action: \"lambda:InvokeFunction\"\r\n      Principal: !Sub \"logs.amazonaws.com\"\r\n      SourceAccount: !Ref AWS::AccountId\r\n      SourceArn: !Sub \"arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${programSourceLogGroup}:*\"\r\nOutputs: \r\n  IAMRole: \r\n    Description: \"IAM Role Name\"\r\n    Value: \r\n      Ref: IAMRole\r\n  SNSTopic: \r\n    Description: \"SNS Topic Name\"\r\n    Value: \r\n      !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:inv-${EnvironmentName}-${MicroServiceName}\r\n  LambdaFunction: \r\n    Description: \"Lambda Function Name\"\r\n    Value: \r\n      Ref: LambdaFunction"
}
Inv-ver-htc01-codepipeline-aurora-ver
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: codepipeline\n\n# ------------------------------------------------------------#\n#  Parameters\n# ------------------------------------------------------------#\nParameters:\n  accountAlias:\n    Type: String\n  accountAliasLowerCase:\n    Type: String\n  appName:\n    Type: String\n  appNamePascalCase:\n    Type: String\n\nResources:\n# ------------------------------------------------------------#\n#  Role\n# ------------------------------------------------------------#\n  codeBuildRoleVer:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement:\n          - Effect: \"Allow\"\n            Principal:\n              Service:\n                - \"codebuild.amazonaws.com\"\n            Action:\n              - \"sts:AssumeRole\"\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess\n        - arn:aws:iam::aws:policy/AmazonS3FullAccess\n        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess\n  codePipelineRoleVer:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement:\n          - Effect: \"Allow\"\n            Principal:\n              Service:\n                - \"codepipeline.amazonaws.com\"\n            Action:\n              - \"sts:AssumeRole\"\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess\n        - arn:aws:iam::aws:policy/AWSCodeCommitFullAccess\n        - arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess\n        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess\n        - arn:aws:iam::aws:policy/AmazonS3FullAccess\n        - arn:aws:iam::aws:policy/CloudWatchFullAccess\n        - arn:aws:iam::aws:policy/AmazonEC2ContainerServiceFullAccess\n# ------------------------------------------------------------#\n#  CodeBuild\n# ------------------------------------------------------------#\n  codeBuildProjectVer:\n    Type: AWS::CodeBuild::Project\n    Properties:\n      Name: !Sub ${accountAliasLowerCase}-${appName}-build-project-ver\n      Artifacts:\n        Type: CODEPIPELINE\n      Description: !Sub Building stage for ${accountAliasLowerCase}-${appName}-build-project-ver\n      Environment:\n        ComputeType: BUILD_GENERAL1_SMALL\n        EnvironmentVariables:\n          - Name: AWS_ACCOUNT_ID\n            Value: !Ref AWS::AccountId\n          - Name: IMAGE_NAME_nginx\n            Value: !Sub ${accountAliasLowerCase}-${appName}-nginx-ecr\n          - Name: CONTAINER_NAME_nginx\n            Value: !Sub ${accountAliasLowerCase}-${appName}-nginx-container\n          - Name: IMAGE_NAME_php\n            Value: !Sub ${accountAliasLowerCase}-${appName}-php-ecr\n          - Name: CONTAINER_NAME_php\n            Value: !Sub ${accountAliasLowerCase}-${appName}-php-container\n        Image: aws/codebuild/docker:18.09.0\n        Type: LINUX_CONTAINER\n        PrivilegedMode: True\n      ServiceRole: !Ref codeBuildRoleVer\n      Source:\n        Type: CODEPIPELINE\n        BuildSpec: |\n          version: 0.2\n          phases:\n            build:\n              commands:\n                - REPOSITORY_URI_PHP=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_NAME_php}\n                - IMAGE_TAG=latest\n                - echo \"[{\\\"name\\\":\\\"${CONTAINER_NAME_php}\\\",\\\"imageUri\\\":\\\"${REPOSITORY_URI_PHP}:${IMAGE_TAG}\\\"}]\"\n                - echo \"[{\\\"name\\\":\\\"${CONTAINER_NAME_php}\\\",\\\"imageUri\\\":\\\"${REPOSITORY_URI_PHP}:${IMAGE_TAG}\\\"}]\" > imagedefinitions.json\n          artifacts:\n              files: imagedefinitions.json\n      TimeoutInMinutes: 30\n# ------------------------------------------------------------#\n#  S3\n# ------------------------------------------------------------#\n  s3bucketforcodepipelineVer:\n    Type: AWS::S3::Bucket\n    Properties:\n      BucketName: !Sub ${accountAliasLowerCase}-${appName}-codepipeline-ver\n# ------------------------------------------------------------#\n#  CodePipeline\n# ------------------------------------------------------------#\n  codePipelineVer:\n    Type: AWS::CodePipeline::Pipeline\n    DependsOn: s3bucketforcodepipelineVer\n    Properties:\n      ArtifactStore:\n        Location: !Ref s3bucketforcodepipelineVer\n        Type: S3\n      Name: !Sub ${accountAliasLowerCase}-${appName}-codepipeline-ver\n      RestartExecutionOnUpdate: false\n      RoleArn: !GetAtt codePipelineRoleVer.Arn\n      Stages:\n        - Name: Source\n          Actions:\n            - Name: SourceAction\n              ActionTypeId:\n                Category: Source\n                Owner: AWS\n                Provider: ECR\n                Version: 1\n              OutputArtifacts:\n                - Name: SourceArtifact\n              Configuration:\n                RepositoryName: !Sub ${accountAliasLowerCase}-${appName}-php-ecr\n              RunOrder: 1\n        - Name: Build\n          Actions:\n            - Name: CodeBuild\n              InputArtifacts:\n                - Name: SourceArtifact\n              ActionTypeId:\n                Category: Build\n                Owner: AWS\n                Provider: CodeBuild\n                Version: 1\n              Configuration:\n                ProjectName: !Ref codeBuildProjectVer\n              OutputArtifacts:\n                - Name: CodebuildOutput\n              RunOrder: 1\n        - Name: Staging\n          Actions:\n            - Name: Deploy2internalService\n              InputArtifacts:\n                - Name: CodebuildOutput\n              ActionTypeId:\n                Category: Deploy\n                Owner: AWS\n                Provider: ECS\n                Version: 1\n              Configuration:\n                ClusterName: !ImportValue cluster\n                FileName: imagedefinitions.json\n                ServiceName:\n                  Fn::ImportValue: !Sub ${appNamePascalCase}Service2\n              OutputArtifacts: []\n              RunOrder: 1\n# ------------------------------------------------------------#\n#  CloudWatch Event\n# ------------------------------------------------------------#\n  cloudWatchEventRoleVer:\n    Type: 'AWS::IAM::Role'\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service:\n                - events.amazonaws.com\n            Action: 'sts:AssumeRole'\n      Path: /\n      Policies:\n        - PolicyName: cwe-pipeline-execution\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Effect: Allow\n                Action: 'codepipeline:StartPipelineExecution'\n                Resource: !Join\n                  - ''\n                  - - 'arn:aws:codepipeline:'\n                    - !Ref 'AWS::Region'\n                    - ':'\n                    - !Ref 'AWS::AccountId'\n                    - ':'\n                    - !Ref codePipelineVer\n  cloudwatchEventsRuleVer:\n    Type: AWS::Events::Rule\n    Properties:\n      EventPattern:\n        source:\n          - aws.ecr\n        detail:\n        detail:\n          eventName:\n            - PutImage\n          requestParameters:\n            repositoryName:\n              - !Sub ${accountAliasLowerCase}-${appName}-php-ecr\n            imageTag:\n              - latest\n      Targets:\n        - Arn:  !Join\n          - ''\n          - - 'arn:aws:codepipeline:'\n            - !Ref 'AWS::Region'\n            - ':'\n            - !Ref 'AWS::AccountId'\n            - ':'\n            - !Ref codePipelineVer\n          Id: !Sub ${accountAliasLowerCase}-${appName}-codepipeline-ver\n          RoleArn: !GetAtt cloudWatchEventRoleVer.Arn\n\n# ------------------------------------------------------------#\n#  Outputs\n# ------------------------------------------------------------#\nOutputs:\n  codeBuildProjectVer:\n    Value: !Ref codeBuildProjectVer\n    Export:\n      Name: !Sub codeBuildProjectVer${appNamePascalCase}\n  s3bucketforcodepipelineVer:\n    Value: !Ref s3bucketforcodepipelineVer\n    Export:\n      Name: !Sub s3bucketforcodepipelineVer${appNamePascalCase}\n"
}
enable-guardduty
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: 2010-09-09\nDescription:\n  \"enable guardduty\"\nResources:\n  GDD:\n    Type: \"AWS::GuardDuty::Detector\"\n    Properties:\n      Enable: true"
}
INV-ver-htc01-fhx29101-ver1-dv
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: Create Service Endpoint\n\nParameters:\n  serviceAlliasLowerCase:\n    Type: String\n  serviceName:\n    Type: String\n  cidr:\n    Type: String\n\nResources:\n\n  endpointSecuritygroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupName: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      GroupDescription: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      Tags:\n        - Key: Name\n          Value: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      VpcId: !ImportValue VPC\n      SecurityGroupIngress:\n        - IpProtocol: tcp\n          FromPort: 80\n          ToPort: 80\n          CidrIp: !Ref cidr\n  endpoint:\n    Type: AWS::EC2::VPCEndpoint\n    Properties:\n      VpcEndpointType: Interface\n      VpcId: !ImportValue VPC\n      SubnetIds:\n        - !ImportValue PrivateSubnet1a\n        - !ImportValue PrivateSubnet1c\n      SecurityGroupIds:\n        - !Ref endpointSecuritygroup\n      ServiceName: !Ref serviceName\n      PrivateDnsEnabled: false\n"
}
INV-ver-htc01-manage-metrics-alarm
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: \"2010-09-09\"\r\nDescription: \"create_metrics_alarm.yaml\"\r\nParameters:\r\n  EnvironmentName:\r\n    Default: \"ver\"\r\n    Description: \"EnvironmentName\"\r\n    Type: String\r\n  MicroServiceName: \r\n    Default: \"cer01\"\r\n    Description: \"MicroServiceName\"\r\n    Type: String\r\n  s3keyprefix: \r\n    Default: \"_manage_metrics_alarm.xlsx\"\r\n    Description: \"excel s3 keys prefix\"\r\n    Type: String\r\n  S3Buckets: \r\n    Default: \"inv-ver-cer01-cfn\"\r\n    Description: \"source s3 backet name\"\r\n    Type: String\r\nResources: \r\n  IAMRole: \r\n    Type: \"AWS::IAM::Role\"\r\n    Properties: \r\n      AssumeRolePolicyDocument: \r\n        Version: \"2012-10-17\"\r\n        Statement: \r\n          - Effect: Allow\r\n            Principal: \r\n              Service: \"lambda.amazonaws.com\"\r\n            Action: \"sts:AssumeRole\"\r\n      ManagedPolicyArns: \r\n        - \"arn:aws:iam::aws:policy/AmazonS3FullAccess\"\r\n      Path: \"/\"\r\n      Policies:\r\n        - PolicyName: manage_metrics_alarm_lambda_policy\r\n          PolicyDocument:\r\n            Version: '2012-10-17'\r\n            Statement:\r\n              - Effect: Allow\r\n                Action:\r\n                  - cloudwatch:*\r\n                  - logs:*\r\n                Resource: \"*\"\r\n      RoleName: !Sub inv-${EnvironmentName}-${MicroServiceName}-manage-metrics-alarm-lambda-role\r\n  LambdaLayer:\r\n    Type: \"AWS::Lambda::LayerVersion\"\r\n    Properties:\r\n      CompatibleRuntimes: \r\n        - python3.6\r\n      Content: \r\n        S3Bucket:\r\n          Ref: S3Buckets\r\n        S3Key: CloudwatchAlarm/metrics_mod.zip\r\n      Description: \"manage_cloudwatch metrics alarm modules\"\r\n      LayerName: metrics_module\r\n  LambdaFunction: \r\n    DependsOn: \r\n      - IAMRole\r\n    Type: \"AWS::Lambda::Function\"\r\n    Properties: \r\n      Code: \r\n        S3Bucket: \r\n          Ref: S3Buckets\r\n        S3Key: CloudwatchAlarm/manage_metrics_alarm_src.zip\r\n      FunctionName: !Sub inv-${EnvironmentName}-${MicroServiceName}-manage-metrics-alarm-lambda\r\n      Handler: lambda_function.lambda_handler\r\n      Environment: \r\n        Variables: \r\n          fileprefix: \r\n            Ref: s3keyprefix\r\n          s3Bucket: !Sub inv-${EnvironmentName}-${MicroServiceName}-manage-metrics-alarm\r\n      Role: \r\n        \"Fn::GetAtt\": \r\n          - IAMRole\r\n          - Arn\r\n      Runtime: \"python3.6\"\r\n      MemorySize: 512\r\n      Timeout: 300\r\n      Layers:\r\n        - !Ref LambdaLayer\r\n  LambdaPermission: \r\n    Type: \"AWS::Lambda::Permission\"\r\n    Properties: \r\n      Action: \"lambda:InvokeFunction\"\r\n      FunctionName: \r\n        \"Fn::GetAtt\": \r\n          - LambdaFunction\r\n          - Arn\r\n      Principal: s3.amazonaws.com\r\n      SourceAccount: !Ref 'AWS::AccountId'\r\n      SourceArn: !Join\r\n        - ''\r\n        - - 'arn:aws:s3:::'\r\n          - !Sub inv-${EnvironmentName}-${MicroServiceName}-manage-metrics-alarm\r\n  S3Bucket:\r\n    Type: \"AWS::S3::Bucket\"\r\n    DependsOn: \r\n      - LambdaPermission\r\n    Properties:\r\n      BucketName: !Sub inv-${EnvironmentName}-${MicroServiceName}-manage-metrics-alarm\r\n      AccessControl: Private\r\n      PublicAccessBlockConfiguration:\r\n        BlockPublicAcls: True\r\n        BlockPublicPolicy: True\r\n        IgnorePublicAcls: True\r\n        RestrictPublicBuckets: True\r\n      NotificationConfiguration:\r\n        LambdaConfigurations:\r\n          - Event: \"s3:ObjectCreated:*\"\r\n            Filter:\r\n              S3Key:\r\n                Rules:\r\n                  - Name: suffix\r\n                    Value: xlsx\r\n            Function: !GetAtt\r\n              - LambdaFunction\r\n              - Arn\r\n  S3BucketPolicy:\r\n    Type: AWS::S3::BucketPolicy\r\n    Properties: \r\n      Bucket: \r\n        Ref: \"S3Bucket\"\r\n      PolicyDocument: \r\n        Version: \"2012-10-17\"\r\n        Statement: \r\n          - \r\n            Action: \r\n              - \"s3:GetObject\"\r\n            Effect: \"Allow\"\r\n            Resource: \r\n              Fn::Join: \r\n                - \"\"\r\n                - \r\n                  - \"arn:aws:s3:::\"\r\n                  - \r\n                    Ref: \"S3Bucket\"\r\n                  - \"/*\"\r\n            Principal: \r\n              AWS:\r\n                Fn::Join:\r\n                  - \"\"\r\n                  - \r\n                    - \"arn:aws:iam::\"\r\n                    - Ref: \"AWS::AccountId\"\r\n                    - \":root\"\r\nOutputs: \r\n  IAMRole: \r\n    Description: \"IAM Role Name\"\r\n    Value: \r\n      Ref: IAMRole\r\n  S3BucketName:\r\n    Value:\r\n      Ref S3BucketName\r\n  LambdaFunction: \r\n    Description: \"Lambda Function Name\"\r\n    Value: \r\n      Ref: LambdaFunction"
}
Inv-ver-htc01-codepipeline-mypage-web-ver
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: codepipeline\n\n# ------------------------------------------------------------#\n#  Parameters\n# ------------------------------------------------------------#\nParameters:\n  accountAlias:\n    Type: String\n  accountAliasLowerCase:\n    Type: String\n  appName:\n    Type: String\n  appNamePascalCase:\n    Type: String\n\nResources:\n# ------------------------------------------------------------#\n#  Role\n# ------------------------------------------------------------#\n  codeBuildRoleVer:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement:\n          - Effect: \"Allow\"\n            Principal:\n              Service:\n                - \"codebuild.amazonaws.com\"\n            Action:\n              - \"sts:AssumeRole\"\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess\n        - arn:aws:iam::aws:policy/AmazonS3FullAccess\n        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess\n  codePipelineRoleVer:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement:\n          - Effect: \"Allow\"\n            Principal:\n              Service:\n                - \"codepipeline.amazonaws.com\"\n            Action:\n              - \"sts:AssumeRole\"\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess\n        - arn:aws:iam::aws:policy/AWSCodeCommitFullAccess\n        - arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess\n        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess\n        - arn:aws:iam::aws:policy/AmazonS3FullAccess\n        - arn:aws:iam::aws:policy/CloudWatchFullAccess\n        - arn:aws:iam::aws:policy/AmazonEC2ContainerServiceFullAccess\n# ------------------------------------------------------------#\n#  CodeBuild\n# ------------------------------------------------------------#\n  codeBuildProjectVer:\n    Type: AWS::CodeBuild::Project\n    Properties:\n      Name: !Sub ${accountAliasLowerCase}-${appName}-build-project-ver\n      Artifacts:\n        Type: CODEPIPELINE\n      Description: !Sub Building stage for ${accountAliasLowerCase}-${appName}-build-project-ver\n      Environment:\n        ComputeType: BUILD_GENERAL1_SMALL\n        EnvironmentVariables:\n          - Name: AWS_ACCOUNT_ID\n            Value: !Ref AWS::AccountId\n          - Name: IMAGE_NAME_nginx\n            Value: !Sub ${accountAliasLowerCase}-${appName}-nginx-ecr\n          - Name: CONTAINER_NAME_nginx\n            Value: !Sub ${accountAliasLowerCase}-${appName}-nginx-container\n          - Name: IMAGE_NAME_php\n            Value: !Sub ${accountAliasLowerCase}-${appName}-php-ecr\n          - Name: CONTAINER_NAME_php\n            Value: !Sub ${accountAliasLowerCase}-${appName}-php-container\n        Image: aws/codebuild/docker:18.09.0\n        Type: LINUX_CONTAINER\n        PrivilegedMode: True\n      ServiceRole: !Ref codeBuildRoleVer\n      Source:\n        Type: CODEPIPELINE\n        BuildSpec: |\n          version: 0.2 \n          phases:\n            build:\n              commands:\n                - REPOSITORY_URI_NGINX=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_NAME_nginx}\n                - REPOSITORY_URI_PHP=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_NAME_php}\n                - IMAGE_TAG=latest\n                - echo \"[{\\\"name\\\":\\\"${CONTAINER_NAME_nginx}\\\",\\\"imageUri\\\":\\\"${REPOSITORY_URI_NGINX}:${IMAGE_TAG}\\\"}, {\\\"name\\\":\\\"${CONTAINER_NAME_php}\\\",\\\"imageUri\\\":\\\"${REPOSITORY_URI_PHP}:${IMAGE_TAG}\\\"}]\"\n                - echo \"[{\\\"name\\\":\\\"${CONTAINER_NAME_nginx}\\\",\\\"imageUri\\\":\\\"${REPOSITORY_URI_NGINX}:${IMAGE_TAG}\\\"}, {\\\"name\\\":\\\"${CONTAINER_NAME_php}\\\",\\\"imageUri\\\":\\\"${REPOSITORY_URI_PHP}:${IMAGE_TAG}\\\"}]\" > imagedefinitions.json\n          artifacts:\n              files: imagedefinitions.json\n      TimeoutInMinutes: 30\n# ------------------------------------------------------------#\n#  S3\n# ------------------------------------------------------------#\n  s3bucketforcodepipelineVer:\n    Type: AWS::S3::Bucket\n    Properties:\n      BucketName: !Sub ${accountAliasLowerCase}-${appName}-codepipeline-ver\n# ------------------------------------------------------------#\n#  CodePipeline\n# ------------------------------------------------------------#\n  codePipelineVer:\n    Type: AWS::CodePipeline::Pipeline\n    DependsOn: s3bucketforcodepipelineVer\n    Properties:\n      ArtifactStore:\n        Location: !Ref s3bucketforcodepipelineVer\n        Type: S3\n      Name: !Sub ${accountAliasLowerCase}-${appName}-codepipeline-ver\n      RestartExecutionOnUpdate: false\n      RoleArn: !GetAtt codePipelineRoleVer.Arn\n      Stages:\n        - Name: Source\n          Actions:\n            - Name: SourceAction\n              ActionTypeId:\n                Category: Source\n                Owner: AWS\n                Provider: ECR\n                Version: 1\n              OutputArtifacts:\n                - Name: SourceArtifact\n              Configuration: \n                RepositoryName: !Sub ${accountAliasLowerCase}-${appName}-php-ecr\n              RunOrder: 1\n        - Name: Build\n          Actions:\n            - Name: CodeBuild\n              InputArtifacts:\n                - Name: SourceArtifact\n              ActionTypeId:\n                Category: Build\n                Owner: AWS\n                Provider: CodeBuild\n                Version: 1\n              Configuration:\n                ProjectName: !Ref codeBuildProjectVer\n              OutputArtifacts:\n                - Name: CodebuildOutput\n              RunOrder: 1\n        - Name: Staging\n          Actions:\n            - Name: Deploy2internalService\n              InputArtifacts:\n                - Name: CodebuildOutput\n              ActionTypeId:\n                Category: Deploy\n                Owner: AWS\n                Provider: ECS\n                Version: 1\n              Configuration:\n                ClusterName: !ImportValue cluster\n                FileName: imagedefinitions.json\n                ServiceName:\n                  Fn::ImportValue: !Sub ${appNamePascalCase}Service\n              OutputArtifacts: []\n              RunOrder: 1\n# ------------------------------------------------------------#\n#  CloudWatch Event\n# ------------------------------------------------------------#\n  cloudWatchEventRoleVer:\n    Type: 'AWS::IAM::Role'\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service:\n                - events.amazonaws.com\n            Action: 'sts:AssumeRole'\n      Path: /\n      Policies:\n        - PolicyName: cwe-pipeline-execution\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Effect: Allow\n                Action: 'codepipeline:StartPipelineExecution'\n                Resource: !Join\n                  - ''\n                  - - 'arn:aws:codepipeline:'\n                    - !Ref 'AWS::Region'\n                    - ':'\n                    - !Ref 'AWS::AccountId'\n                    - ':'\n                    - !Ref codePipelineVer\n  cloudwatchEventsRuleVer:\n    Type: AWS::Events::Rule\n    Properties:\n      EventPattern:\n        source:\n          - aws.ecr\n        detail:\n        detail:\n          eventName:\n            - PutImage\n          requestParameters:\n            repositoryName: \n              - !Sub ${accountAliasLowerCase}-${appName}-php-ecr\n            imageTag: \n              - latest\n      Targets:\n        - Arn:  !Join\n          - ''\n          - - 'arn:aws:codepipeline:'\n            - !Ref 'AWS::Region'\n            - ':'\n            - !Ref 'AWS::AccountId'\n            - ':'\n            - !Ref codePipelineVer\n          Id: !Sub ${accountAliasLowerCase}-${appName}-codepipeline-ver\n          RoleArn: !GetAtt cloudWatchEventRoleVer.Arn\n\n# ------------------------------------------------------------#\n#  Outputs\n# ------------------------------------------------------------#\nOutputs:\n  codeBuildProjectVer:\n    Value: !Ref codeBuildProjectVer\n    Export:\n      Name: !Sub codeBuildProjectVer${appNamePascalCase}\n  s3bucketforcodepipelineVer:\n    Value: !Ref s3bucketforcodepipelineVer\n    Export:\n      Name: !Sub s3bucketforcodepipelineVer${appNamePascalCase}\n"
}
Inv-ver-htc01-mypage-web-service
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: internal ecs service\n\nParameters:\n  accountAlias:\n    Type: String\n  accountAliasLowerCase:\n    Type: String\n  desiredCount:\n    Type: Number\n  appName:\n    Type: String\n  appNamePascalCase:\n    Type: String\n  targetGroup:\n    Type: String\n  securityGroup:\n    Type: String\n  taskDefinition:\n    Type: String\n\nResources:\n  service:\n    Type: AWS::ECS::Service\n    Properties:\n      Cluster: !ImportValue cluster\n      DeploymentConfiguration:\n        MaximumPercent: 200\n        MinimumHealthyPercent: 50\n      DesiredCount: !Ref desiredCount\n      LaunchType: FARGATE\n      LoadBalancers:\n        - ContainerName: !Sub ${accountAliasLowerCase}-${appName}-nginx-container\n          ContainerPort: 80\n          TargetGroupArn:\n            Fn::ImportValue: !Sub ${targetGroup}\n      NetworkConfiguration:\n        AwsvpcConfiguration:\n          AssignPublicIp: DISABLED\n          SecurityGroups:\n            - Fn::ImportValue: !Sub ${securityGroup}\n          Subnets:\n            - !ImportValue PrivateSubnet1a\n            - !ImportValue PrivateSubnet1c\n      ServiceName: !Sub ${accountAliasLowerCase}-${appName}-service\n      TaskDefinition: !Sub ${taskDefinition}\n\nOutputs:\n  service:\n    Value: !Ref service\n    Export:\n      Name: !Sub ${appNamePascalCase}Service\n"
}
Inv-ver-htc01-mypage-api-task-role
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: ecs task definition role\n\nParameters:\n  accountAlias:\n    Type: String\n  appName:\n    Type: String\n\nResources:\n  ecsTaskExecutionRole:\n    Type: AWS::IAM::Role\n    Properties:\n      RoleName : !Sub ${accountAlias}-${appName}-ecsTaskExecutionRole\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement:\n          - Effect: \"Allow\"\n            Principal:\n              Service:\n                - \"ecs-tasks.amazonaws.com\"\n            Action:\n              - \"sts:AssumeRole\"\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy\n        - arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess\n"
}
Inv-ver-htc01-mypage-web-task-role
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: ecs task definition role\n\nParameters:\n  accountAlias:\n    Type: String\n  appName:\n    Type: String\n\nResources:\n  ecsTaskExecutionRole:\n    Type: AWS::IAM::Role\n    Properties:\n      RoleName : !Sub ${accountAlias}-${appName}-ecsTaskExecutionRole\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement:\n          - Effect: \"Allow\"\n            Principal:\n              Service:\n                - \"ecs-tasks.amazonaws.com\"\n            Action:\n              - \"sts:AssumeRole\"\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy\n        - arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess\n"
}
Inv-ver-htc01-connected-web-task-role
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: ecs task definition role\n\nParameters:\n  accountAlias:\n    Type: String\n  appName:\n    Type: String\n\nResources:\n  ecsTaskExecutionRole:\n    Type: AWS::IAM::Role\n    Properties:\n      RoleName : !Sub ${accountAlias}-${appName}-ecsTaskExecutionRole\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement:\n          - Effect: \"Allow\"\n            Principal:\n              Service:\n                - \"ecs-tasks.amazonaws.com\"\n            Action:\n              - \"sts:AssumeRole\"\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy\n        - arn:aws:iam::aws:policy/AmazonS3FullAccess\n        - arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess\n"
}
Inv-ver-htc01-connected-api-task-role
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: ecs task definition role\n\nParameters:\n  accountAlias:\n    Type: String\n  appName:\n    Type: String\n\nResources:\n  ecsTaskExecutionRole:\n    Type: AWS::IAM::Role\n    Properties:\n      RoleName : !Sub ${accountAlias}-${appName}-ecsTaskExecutionRole\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement:\n          - Effect: \"Allow\"\n            Principal:\n              Service:\n                - \"ecs-tasks.amazonaws.com\"\n            Action:\n              - \"sts:AssumeRole\"\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy\n        - arn:aws:iam::aws:policy/AmazonSESFullAccess\n        - arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess\n"
}
Inv-ver-htc01-aurora-task-role
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: ecs task definition role\n\nParameters:\n  accountAlias:\n    Type: String\n  appName:\n    Type: String\n\nResources:\n  ecsTaskExecutionRole:\n    Type: AWS::IAM::Role\n    Properties:\n      RoleName : !Sub ${accountAlias}-${appName}-ecsTaskExecutionRole\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement:\n          - Effect: \"Allow\"\n            Principal:\n              Service:\n                - \"ecs-tasks.amazonaws.com\"\n            Action:\n              - \"sts:AssumeRole\"\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy\n        - arn:aws:iam::aws:policy/AmazonRDSDataFullAccess\n        - arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess\n"
}
Inv-ver-htc01-mypage-web-securitygroup
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: securitygroup\n\nParameters:\n  accountAlias:\n    Type: String\n  appName:\n    Type: String\n  accountAliasLowerCase:\n    Type: String\n  internalSecurityGroupCidr:\n    Type: String\n  appNamePascalCase:\n    Type: String\n\nResources:\n  internalApplicationSecuritygroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupName: !Sub ${accountAliasLowerCase}-internal-${appName}-sg\n      GroupDescription: !Sub ${accountAliasLowerCase}-internal-${appName}-sg\n      Tags:\n        - Key: Name\n          Value: !Sub ${accountAliasLowerCase}-internal-${appName}-sg\n      VpcId: !ImportValue VPC\n      SecurityGroupIngress:\n      - IpProtocol: tcp\n        FromPort: '80'\n        ToPort: '80'\n        CidrIp: !Ref internalSecurityGroupCidr\n\nOutputs:\n  internalApplicationSecuritygroup:\n    Value: !Ref internalApplicationSecuritygroup\n    Export:\n      Name: !Sub internal${appNamePascalCase}Securitygroup\n"
}
Inv-ver-htc01-mypage-web-ecs-loggroup
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: ecs and loggroup\n\nParameters:\n  accountAlias:\n    Type: String\n  accountAliasLowerCase:\n    Type: String\n  logGroupName:\n    Type: String\n  appNamePascalCase:\n    Type: String\n\nResources:\n  logGroup:\n    Type: AWS::Logs::LogGroup\n    Properties:\n      LogGroupName: !Ref logGroupName\n\nOutputs:\n  logGroup:\n    Value: !Ref logGroup\n    Export:\n      Name: !Sub logGroup${appNamePascalCase}"
}
Inv-ver-htc01-mypage-web-ecr
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: codecommit and ecr\n\nParameters:\n  accountAlias:\n    Type: String\n  accountAliasLowerCase:\n    Type: String\n  appName:\n    Type: String\n  appNamePascalCase:\n    Type: String\n\n\nResources:\n  ecrNginx:\n    Type: AWS::ECR::Repository\n    Properties:\n      RepositoryName: !Sub ${accountAliasLowerCase}-${appName}-nginx-ecr\n  ecrPhp:\n    Type: AWS::ECR::Repository\n    Properties:\n      RepositoryName: !Sub ${accountAliasLowerCase}-${appName}-php-ecr\n\nOutputs:\n  ecrNginx:\n    Value: !GetAtt ecrNginx.Arn\n    Export:\n      Name: !Sub ecr${appNamePascalCase}Nginx\n  ecrPhp:\n    Value: !GetAtt ecrPhp.Arn\n    Export:\n      Name: !Sub ecr${appNamePascalCase}Php\n"
}
Inv-ver-htc01-connected-incar-task-role
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: ecs task definition role\n\nParameters:\n  accountAlias:\n    Type: String\n  appNamePascalCase:\n    Type: String\n  appName:\n    Type: String\n\nResources:\n  ecsTaskExecutionRole:\n    Type: AWS::IAM::Role\n    Properties:\n      RoleName : !Sub ${accountAlias}-${appName}-ecsTaskExecutionRole\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement:\n          - Effect: \"Allow\"\n            Principal:\n              Service:\n                - \"ecs-tasks.amazonaws.com\"\n            Action:\n              - \"sts:AssumeRole\"\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy\n        - arn:aws:iam::aws:policy/AmazonS3FullAccess\n        - arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess\nOutputs:\n  ecsTaskExecutionRole:\n    Value: !Ref ecsTaskExecutionRole\n    Export:\n      Name: !Sub ecsTaskExecutionRole${appNamePascalCase}\n"
}
Inv-ver-htc01-codepipeline-mypage-api-ver
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: codepipeline\n\n# ------------------------------------------------------------#\n#  Parameters\n# ------------------------------------------------------------#\nParameters:\n  accountAlias:\n    Type: String\n  accountAliasLowerCase:\n    Type: String\n  appName:\n    Type: String\n  appNamePascalCase:\n    Type: String\n\nResources:\n# ------------------------------------------------------------#\n#  Role\n# ------------------------------------------------------------#\n  codeBuildRoleVer:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement:\n          - Effect: \"Allow\"\n            Principal:\n              Service:\n                - \"codebuild.amazonaws.com\"\n            Action:\n              - \"sts:AssumeRole\"\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess\n        - arn:aws:iam::aws:policy/AmazonS3FullAccess\n        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess\n  codePipelineRoleVer:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement:\n          - Effect: \"Allow\"\n            Principal:\n              Service:\n                - \"codepipeline.amazonaws.com\"\n            Action:\n              - \"sts:AssumeRole\"\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess\n        - arn:aws:iam::aws:policy/AWSCodeCommitFullAccess\n        - arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess\n        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess\n        - arn:aws:iam::aws:policy/AmazonS3FullAccess\n        - arn:aws:iam::aws:policy/CloudWatchFullAccess\n        - arn:aws:iam::aws:policy/AmazonEC2ContainerServiceFullAccess\n# ------------------------------------------------------------#\n#  CodeBuild\n# ------------------------------------------------------------#\n  codeBuildProjectVer:\n    Type: AWS::CodeBuild::Project\n    Properties:\n      Name: !Sub ${accountAliasLowerCase}-${appName}-build-project-ver\n      Artifacts:\n        Type: CODEPIPELINE\n      Description: !Sub Building stage for ${accountAliasLowerCase}-${appName}-build-project-ver\n      Environment:\n        ComputeType: BUILD_GENERAL1_SMALL\n        EnvironmentVariables:\n          - Name: AWS_ACCOUNT_ID\n            Value: !Ref AWS::AccountId\n          - Name: IMAGE_NAME_nginx\n            Value: !Sub ${accountAliasLowerCase}-${appName}-nginx-ecr\n          - Name: CONTAINER_NAME_nginx\n            Value: !Sub ${accountAliasLowerCase}-${appName}-nginx-container\n          - Name: IMAGE_NAME_php\n            Value: !Sub ${accountAliasLowerCase}-${appName}-php-ecr\n          - Name: CONTAINER_NAME_php\n            Value: !Sub ${accountAliasLowerCase}-${appName}-php-container\n        Image: aws/codebuild/docker:18.09.0\n        Type: LINUX_CONTAINER\n        PrivilegedMode: True\n      ServiceRole: !Ref codeBuildRoleVer\n      Source:\n        Type: CODEPIPELINE\n        BuildSpec: |\n          version: 0.2 \n          phases:\n            build:\n              commands:\n                - REPOSITORY_URI_NGINX=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_NAME_nginx}\n                - REPOSITORY_URI_PHP=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_NAME_php}\n                - IMAGE_TAG=latest\n                - echo \"[{\\\"name\\\":\\\"${CONTAINER_NAME_nginx}\\\",\\\"imageUri\\\":\\\"${REPOSITORY_URI_NGINX}:${IMAGE_TAG}\\\"}, {\\\"name\\\":\\\"${CONTAINER_NAME_php}\\\",\\\"imageUri\\\":\\\"${REPOSITORY_URI_PHP}:${IMAGE_TAG}\\\"}]\"\n                - echo \"[{\\\"name\\\":\\\"${CONTAINER_NAME_nginx}\\\",\\\"imageUri\\\":\\\"${REPOSITORY_URI_NGINX}:${IMAGE_TAG}\\\"}, {\\\"name\\\":\\\"${CONTAINER_NAME_php}\\\",\\\"imageUri\\\":\\\"${REPOSITORY_URI_PHP}:${IMAGE_TAG}\\\"}]\" > imagedefinitions.json\n          artifacts:\n              files: imagedefinitions.json\n      TimeoutInMinutes: 30\n# ------------------------------------------------------------#\n#  S3\n# ------------------------------------------------------------#\n  s3bucketforcodepipelineVer:\n    Type: AWS::S3::Bucket\n    Properties:\n      BucketName: !Sub ${accountAliasLowerCase}-${appName}-codepipeline-ver\n# ------------------------------------------------------------#\n#  CodePipeline\n# ------------------------------------------------------------#\n  codePipelineVer:\n    Type: AWS::CodePipeline::Pipeline\n    DependsOn: s3bucketforcodepipelineVer\n    Properties:\n      ArtifactStore:\n        Location: !Ref s3bucketforcodepipelineVer\n        Type: S3\n      Name: !Sub ${accountAliasLowerCase}-${appName}-codepipeline-ver\n      RestartExecutionOnUpdate: false\n      RoleArn: !GetAtt codePipelineRoleVer.Arn\n      Stages:\n        - Name: Source\n          Actions:\n            - Name: SourceAction\n              ActionTypeId:\n                Category: Source\n                Owner: AWS\n                Provider: ECR\n                Version: 1\n              OutputArtifacts:\n                - Name: SourceArtifact\n              Configuration: \n                RepositoryName: !Sub ${accountAliasLowerCase}-${appName}-php-ecr\n              RunOrder: 1\n        - Name: Build\n          Actions:\n            - Name: CodeBuild\n              InputArtifacts:\n                - Name: SourceArtifact\n              ActionTypeId:\n                Category: Build\n                Owner: AWS\n                Provider: CodeBuild\n                Version: 1\n              Configuration:\n                ProjectName: !Ref codeBuildProjectVer\n              OutputArtifacts:\n                - Name: CodebuildOutput\n              RunOrder: 1\n        - Name: Staging\n          Actions:\n            - Name: Deploy2internalService\n              InputArtifacts:\n                - Name: CodebuildOutput\n              ActionTypeId:\n                Category: Deploy\n                Owner: AWS\n                Provider: ECS\n                Version: 1\n              Configuration:\n                ClusterName: !ImportValue cluster\n                FileName: imagedefinitions.json\n                ServiceName:\n                  Fn::ImportValue: !Sub ${appNamePascalCase}Service\n              OutputArtifacts: []\n              RunOrder: 1\n# ------------------------------------------------------------#\n#  CloudWatch Event\n# ------------------------------------------------------------#\n  cloudWatchEventRoleVer:\n    Type: 'AWS::IAM::Role'\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service:\n                - events.amazonaws.com\n            Action: 'sts:AssumeRole'\n      Path: /\n      Policies:\n        - PolicyName: cwe-pipeline-execution\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Effect: Allow\n                Action: 'codepipeline:StartPipelineExecution'\n                Resource: !Join\n                  - ''\n                  - - 'arn:aws:codepipeline:'\n                    - !Ref 'AWS::Region'\n                    - ':'\n                    - !Ref 'AWS::AccountId'\n                    - ':'\n                    - !Ref codePipelineVer\n  cloudwatchEventsRuleVer:\n    Type: AWS::Events::Rule\n    Properties:\n      EventPattern:\n        source:\n          - aws.ecr\n        detail:\n        detail:\n          eventName:\n            - PutImage\n          requestParameters:\n            repositoryName: \n              - !Sub ${accountAliasLowerCase}-${appName}-php-ecr\n            imageTag: \n              - latest\n      Targets:\n        - Arn:  !Join\n          - ''\n          - - 'arn:aws:codepipeline:'\n            - !Ref 'AWS::Region'\n            - ':'\n            - !Ref 'AWS::AccountId'\n            - ':'\n            - !Ref codePipelineVer\n          Id: !Sub ${accountAliasLowerCase}-${appName}-codepipeline-ver\n          RoleArn: !GetAtt cloudWatchEventRoleVer.Arn\n\n# ------------------------------------------------------------#\n#  Outputs\n# ------------------------------------------------------------#\nOutputs:\n  codeBuildProjectVer:\n    Value: !Ref codeBuildProjectVer\n    Export:\n      Name: !Sub codeBuildProjectVer${appNamePascalCase}\n  s3bucketforcodepipelineVer:\n    Value: !Ref s3bucketforcodepipelineVer\n    Export:\n      Name: !Sub s3bucketforcodepipelineVer${appNamePascalCase}\n"
}
Inv-ver-htc01-codepipeline-connected-web-ver
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: codepipeline\n\n# ------------------------------------------------------------#\n#  Parameters\n# ------------------------------------------------------------#\nParameters:\n  accountAlias:\n    Type: String\n  accountAliasLowerCase:\n    Type: String\n  appName:\n    Type: String\n  appNamePascalCase:\n    Type: String\n\nResources:\n# ------------------------------------------------------------#\n#  Role\n# ------------------------------------------------------------#\n  codeBuildRoleVer:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement:\n          - Effect: \"Allow\"\n            Principal:\n              Service:\n                - \"codebuild.amazonaws.com\"\n            Action:\n              - \"sts:AssumeRole\"\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess\n        - arn:aws:iam::aws:policy/AmazonS3FullAccess\n        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess\n  codePipelineRoleVer:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement:\n          - Effect: \"Allow\"\n            Principal:\n              Service:\n                - \"codepipeline.amazonaws.com\"\n            Action:\n              - \"sts:AssumeRole\"\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess\n        - arn:aws:iam::aws:policy/AWSCodeCommitFullAccess\n        - arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess\n        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess\n        - arn:aws:iam::aws:policy/AmazonS3FullAccess\n        - arn:aws:iam::aws:policy/CloudWatchFullAccess\n        - arn:aws:iam::aws:policy/AmazonEC2ContainerServiceFullAccess\n# ------------------------------------------------------------#\n#  CodeBuild\n# ------------------------------------------------------------#\n  codeBuildProjectVer:\n    Type: AWS::CodeBuild::Project\n    Properties:\n      Name: !Sub ${accountAliasLowerCase}-${appName}-build-project-ver\n      Artifacts:\n        Type: CODEPIPELINE\n      Description: !Sub Building stage for ${accountAliasLowerCase}-${appName}-build-project-ver\n      Environment:\n        ComputeType: BUILD_GENERAL1_SMALL\n        EnvironmentVariables:\n          - Name: AWS_ACCOUNT_ID\n            Value: !Ref AWS::AccountId\n          - Name: IMAGE_NAME_nginx\n            Value: !Sub ${accountAliasLowerCase}-${appName}-nginx-ecr\n          - Name: CONTAINER_NAME_nginx\n            Value: !Sub ${accountAliasLowerCase}-${appName}-nginx-container\n          - Name: IMAGE_NAME_php\n            Value: !Sub ${accountAliasLowerCase}-${appName}-php-ecr\n          - Name: CONTAINER_NAME_php\n            Value: !Sub ${accountAliasLowerCase}-${appName}-php-container\n        Image: aws/codebuild/docker:18.09.0\n        Type: LINUX_CONTAINER\n        PrivilegedMode: True\n      ServiceRole: !Ref codeBuildRoleVer\n      Source:\n        Type: CODEPIPELINE\n        BuildSpec: |\n          version: 0.2 \n          phases:\n            build:\n              commands:\n                - REPOSITORY_URI_NGINX=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_NAME_nginx}\n                - REPOSITORY_URI_PHP=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_NAME_php}\n                - IMAGE_TAG=latest\n                - echo \"[{\\\"name\\\":\\\"${CONTAINER_NAME_nginx}\\\",\\\"imageUri\\\":\\\"${REPOSITORY_URI_NGINX}:${IMAGE_TAG}\\\"}, {\\\"name\\\":\\\"${CONTAINER_NAME_php}\\\",\\\"imageUri\\\":\\\"${REPOSITORY_URI_PHP}:${IMAGE_TAG}\\\"}]\"\n                - echo \"[{\\\"name\\\":\\\"${CONTAINER_NAME_nginx}\\\",\\\"imageUri\\\":\\\"${REPOSITORY_URI_NGINX}:${IMAGE_TAG}\\\"}, {\\\"name\\\":\\\"${CONTAINER_NAME_php}\\\",\\\"imageUri\\\":\\\"${REPOSITORY_URI_PHP}:${IMAGE_TAG}\\\"}]\" > imagedefinitions.json\n          artifacts:\n              files: imagedefinitions.json\n      TimeoutInMinutes: 30\n# ------------------------------------------------------------#\n#  S3\n# ------------------------------------------------------------#\n  s3bucketforcodepipelineVer:\n    Type: AWS::S3::Bucket\n    Properties:\n      BucketName: !Sub ${accountAliasLowerCase}-${appName}-codepipeline-ver\n# ------------------------------------------------------------#\n#  CodePipeline\n# ------------------------------------------------------------#\n  codePipelineVer:\n    Type: AWS::CodePipeline::Pipeline\n    DependsOn: s3bucketforcodepipelineVer\n    Properties:\n      ArtifactStore:\n        Location: !Ref s3bucketforcodepipelineVer\n        Type: S3\n      Name: !Sub ${accountAliasLowerCase}-${appName}-codepipeline-ver\n      RestartExecutionOnUpdate: false\n      RoleArn: !GetAtt codePipelineRoleVer.Arn\n      Stages:\n        - Name: Source\n          Actions:\n            - Name: SourceAction\n              ActionTypeId:\n                Category: Source\n                Owner: AWS\n                Provider: ECR\n                Version: 1\n              OutputArtifacts:\n                - Name: SourceArtifact\n              Configuration: \n                RepositoryName: !Sub ${accountAliasLowerCase}-${appName}-php-ecr\n              RunOrder: 1\n        - Name: Build\n          Actions:\n            - Name: CodeBuild\n              InputArtifacts:\n                - Name: SourceArtifact\n              ActionTypeId:\n                Category: Build\n                Owner: AWS\n                Provider: CodeBuild\n                Version: 1\n              Configuration:\n                ProjectName: !Ref codeBuildProjectVer\n              OutputArtifacts:\n                - Name: CodebuildOutput\n              RunOrder: 1\n        - Name: Staging\n          Actions:\n            - Name: Deploy2internalService\n              InputArtifacts:\n                - Name: CodebuildOutput\n              ActionTypeId:\n                Category: Deploy\n                Owner: AWS\n                Provider: ECS\n                Version: 1\n              Configuration:\n                ClusterName: !ImportValue cluster\n                FileName: imagedefinitions.json\n                ServiceName:\n                  Fn::ImportValue: !Sub ${appNamePascalCase}Service\n              OutputArtifacts: []\n              RunOrder: 1\n# ------------------------------------------------------------#\n#  CloudWatch Event\n# ------------------------------------------------------------#\n  cloudWatchEventRoleVer:\n    Type: 'AWS::IAM::Role'\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service:\n                - events.amazonaws.com\n            Action: 'sts:AssumeRole'\n      Path: /\n      Policies:\n        - PolicyName: cwe-pipeline-execution\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Effect: Allow\n                Action: 'codepipeline:StartPipelineExecution'\n                Resource: !Join\n                  - ''\n                  - - 'arn:aws:codepipeline:'\n                    - !Ref 'AWS::Region'\n                    - ':'\n                    - !Ref 'AWS::AccountId'\n                    - ':'\n                    - !Ref codePipelineVer\n  cloudwatchEventsRuleVer:\n    Type: AWS::Events::Rule\n    Properties:\n      EventPattern:\n        source:\n          - aws.ecr\n        detail:\n        detail:\n          eventName:\n            - PutImage\n          requestParameters:\n            repositoryName: \n              - !Sub ${accountAliasLowerCase}-${appName}-php-ecr\n            imageTag: \n              - latest\n      Targets:\n        - Arn:  !Join\n          - ''\n          - - 'arn:aws:codepipeline:'\n            - !Ref 'AWS::Region'\n            - ':'\n            - !Ref 'AWS::AccountId'\n            - ':'\n            - !Ref codePipelineVer\n          Id: !Sub ${accountAliasLowerCase}-${appName}-codepipeline-ver\n          RoleArn: !GetAtt cloudWatchEventRoleVer.Arn\n\n# ------------------------------------------------------------#\n#  Outputs\n# ------------------------------------------------------------#\nOutputs:\n  codeBuildProjectVer:\n    Value: !Ref codeBuildProjectVer\n    Export:\n      Name: !Sub codeBuildProjectVer${appNamePascalCase}\n  s3bucketforcodepipelineVer:\n    Value: !Ref s3bucketforcodepipelineVer\n    Export:\n      Name: !Sub s3bucketforcodepipelineVer${appNamePascalCase}\n"
}
Inv-ver-htc01-codepipeline-connected-incar-ver
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: codepipeline\n\n# ------------------------------------------------------------#\n#  Parameters\n# ------------------------------------------------------------#\nParameters:\n  accountAlias:\n    Type: String\n  accountAliasLowerCase:\n    Type: String\n  appName:\n    Type: String\n  appNamePascalCase:\n    Type: String\n\nResources:\n# ------------------------------------------------------------#\n#  Role\n# ------------------------------------------------------------#\n  codeBuildRoleVer:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement:\n          - Effect: \"Allow\"\n            Principal:\n              Service:\n                - \"codebuild.amazonaws.com\"\n            Action:\n              - \"sts:AssumeRole\"\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess\n        - arn:aws:iam::aws:policy/AmazonS3FullAccess\n        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess\n  codePipelineRoleVer:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement:\n          - Effect: \"Allow\"\n            Principal:\n              Service:\n                - \"codepipeline.amazonaws.com\"\n            Action:\n              - \"sts:AssumeRole\"\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess\n        - arn:aws:iam::aws:policy/AWSCodeCommitFullAccess\n        - arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess\n        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess\n        - arn:aws:iam::aws:policy/AmazonS3FullAccess\n        - arn:aws:iam::aws:policy/CloudWatchFullAccess\n        - arn:aws:iam::aws:policy/AmazonEC2ContainerServiceFullAccess\n# ------------------------------------------------------------#\n#  CodeBuild\n# ------------------------------------------------------------#\n  codeBuildProjectVer:\n    Type: AWS::CodeBuild::Project\n    Properties:\n      Name: !Sub ${accountAliasLowerCase}-${appName}-build-project-ver\n      Artifacts:\n        Type: CODEPIPELINE\n      Description: !Sub Building stage for ${accountAliasLowerCase}-${appName}-build-project-ver\n      Environment:\n        ComputeType: BUILD_GENERAL1_SMALL\n        EnvironmentVariables:\n          - Name: AWS_ACCOUNT_ID\n            Value: !Ref AWS::AccountId\n          - Name: IMAGE_NAME_nginx\n            Value: !Sub ${accountAliasLowerCase}-${appName}-nginx-ecr\n          - Name: CONTAINER_NAME_nginx\n            Value: !Sub ${accountAliasLowerCase}-${appName}-nginx-container\n          - Name: IMAGE_NAME_php\n            Value: !Sub ${accountAliasLowerCase}-${appName}-php-ecr\n          - Name: CONTAINER_NAME_php\n            Value: !Sub ${accountAliasLowerCase}-${appName}-php-container\n        Image: aws/codebuild/docker:18.09.0\n        Type: LINUX_CONTAINER\n        PrivilegedMode: True\n      ServiceRole: !Ref codeBuildRoleVer\n      Source:\n        Type: CODEPIPELINE\n        BuildSpec: |\n          version: 0.2 \n          phases:\n            build:\n              commands:\n                - REPOSITORY_URI_NGINX=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_NAME_nginx}\n                - REPOSITORY_URI_PHP=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_NAME_php}\n                - IMAGE_TAG=latest\n                - echo \"[{\\\"name\\\":\\\"${CONTAINER_NAME_nginx}\\\",\\\"imageUri\\\":\\\"${REPOSITORY_URI_NGINX}:${IMAGE_TAG}\\\"}, {\\\"name\\\":\\\"${CONTAINER_NAME_php}\\\",\\\"imageUri\\\":\\\"${REPOSITORY_URI_PHP}:${IMAGE_TAG}\\\"}]\"\n                - echo \"[{\\\"name\\\":\\\"${CONTAINER_NAME_nginx}\\\",\\\"imageUri\\\":\\\"${REPOSITORY_URI_NGINX}:${IMAGE_TAG}\\\"}, {\\\"name\\\":\\\"${CONTAINER_NAME_php}\\\",\\\"imageUri\\\":\\\"${REPOSITORY_URI_PHP}:${IMAGE_TAG}\\\"}]\" > imagedefinitions.json\n          artifacts:\n              files: imagedefinitions.json\n      TimeoutInMinutes: 30\n# ------------------------------------------------------------#\n#  S3\n# ------------------------------------------------------------#\n  s3bucketforcodepipelineVer:\n    Type: AWS::S3::Bucket\n    Properties:\n      BucketName: !Sub ${accountAliasLowerCase}-${appName}-codepipeline-ver\n# ------------------------------------------------------------#\n#  CodePipeline\n# ------------------------------------------------------------#\n  codePipelineVer:\n    Type: AWS::CodePipeline::Pipeline\n    DependsOn: s3bucketforcodepipelineVer\n    Properties:\n      ArtifactStore:\n        Location: !Ref s3bucketforcodepipelineVer\n        Type: S3\n      Name: !Sub ${accountAliasLowerCase}-${appName}-codepipeline-ver\n      RestartExecutionOnUpdate: false\n      RoleArn: !GetAtt codePipelineRoleVer.Arn\n      Stages:\n        - Name: Source\n          Actions:\n            - Name: SourceAction\n              ActionTypeId:\n                Category: Source\n                Owner: AWS\n                Provider: ECR\n                Version: 1\n              OutputArtifacts:\n                - Name: SourceArtifact\n              Configuration: \n                RepositoryName: !Sub ${accountAliasLowerCase}-${appName}-php-ecr\n              RunOrder: 1\n        - Name: Build\n          Actions:\n            - Name: CodeBuild\n              InputArtifacts:\n                - Name: SourceArtifact\n              ActionTypeId:\n                Category: Build\n                Owner: AWS\n                Provider: CodeBuild\n                Version: 1\n              Configuration:\n                ProjectName: !Ref codeBuildProjectVer\n              OutputArtifacts:\n                - Name: CodebuildOutput\n              RunOrder: 1\n        - Name: Staging\n          Actions:\n            - Name: Deploy2internalService\n              InputArtifacts:\n                - Name: CodebuildOutput\n              ActionTypeId:\n                Category: Deploy\n                Owner: AWS\n                Provider: ECS\n                Version: 1\n              Configuration:\n                ClusterName: !ImportValue cluster\n                FileName: imagedefinitions.json\n                ServiceName:\n                  Fn::ImportValue: !Sub ${appNamePascalCase}Service\n              OutputArtifacts: []\n              RunOrder: 1\n# ------------------------------------------------------------#\n#  CloudWatch Event\n# ------------------------------------------------------------#\n  cloudWatchEventRoleVer:\n    Type: 'AWS::IAM::Role'\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service:\n                - events.amazonaws.com\n            Action: 'sts:AssumeRole'\n      Path: /\n      Policies:\n        - PolicyName: cwe-pipeline-execution\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Effect: Allow\n                Action: 'codepipeline:StartPipelineExecution'\n                Resource: !Join\n                  - ''\n                  - - 'arn:aws:codepipeline:'\n                    - !Ref 'AWS::Region'\n                    - ':'\n                    - !Ref 'AWS::AccountId'\n                    - ':'\n                    - !Ref codePipelineVer\n  cloudwatchEventsRuleVer:\n    Type: AWS::Events::Rule\n    Properties:\n      EventPattern:\n        source:\n          - aws.ecr\n        detail:\n        detail:\n          eventName:\n            - PutImage\n          requestParameters:\n            repositoryName: \n              - !Sub ${accountAliasLowerCase}-${appName}-php-ecr\n            imageTag: \n              - latest\n      Targets:\n        - Arn:  !Join\n          - ''\n          - - 'arn:aws:codepipeline:'\n            - !Ref 'AWS::Region'\n            - ':'\n            - !Ref 'AWS::AccountId'\n            - ':'\n            - !Ref codePipelineVer\n          Id: !Sub ${accountAliasLowerCase}-${appName}-codepipeline-ver\n          RoleArn: !GetAtt cloudWatchEventRoleVer.Arn\n\n# ------------------------------------------------------------#\n#  Outputs\n# ------------------------------------------------------------#\nOutputs:\n  codeBuildProjectVer:\n    Value: !Ref codeBuildProjectVer\n    Export:\n      Name: !Sub codeBuildProjectVer${appNamePascalCase}\n  s3bucketforcodepipelineVer:\n    Value: !Ref s3bucketforcodepipelineVer\n    Export:\n      Name: !Sub s3bucketforcodepipelineVer${appNamePascalCase}\n"
}
Inv-ver-htc01-codepipeline-connected-api-ver
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: codepipeline\n\n# ------------------------------------------------------------#\n#  Parameters\n# ------------------------------------------------------------#\nParameters:\n  accountAlias:\n    Type: String\n  accountAliasLowerCase:\n    Type: String\n  appName:\n    Type: String\n  appNamePascalCase:\n    Type: String\n\nResources:\n# ------------------------------------------------------------#\n#  Role\n# ------------------------------------------------------------#\n  codeBuildRoleVer:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement:\n          - Effect: \"Allow\"\n            Principal:\n              Service:\n                - \"codebuild.amazonaws.com\"\n            Action:\n              - \"sts:AssumeRole\"\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess\n        - arn:aws:iam::aws:policy/AmazonS3FullAccess\n        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess\n  codePipelineRoleVer:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement:\n          - Effect: \"Allow\"\n            Principal:\n              Service:\n                - \"codepipeline.amazonaws.com\"\n            Action:\n              - \"sts:AssumeRole\"\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess\n        - arn:aws:iam::aws:policy/AWSCodeCommitFullAccess\n        - arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess\n        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess\n        - arn:aws:iam::aws:policy/AmazonS3FullAccess\n        - arn:aws:iam::aws:policy/CloudWatchFullAccess\n        - arn:aws:iam::aws:policy/AmazonEC2ContainerServiceFullAccess\n# ------------------------------------------------------------#\n#  CodeBuild\n# ------------------------------------------------------------#\n  codeBuildProjectVer:\n    Type: AWS::CodeBuild::Project\n    Properties:\n      Name: !Sub ${accountAliasLowerCase}-${appName}-build-project-ver\n      Artifacts:\n        Type: CODEPIPELINE\n      Description: !Sub Building stage for ${accountAliasLowerCase}-${appName}-build-project-ver\n      Environment:\n        ComputeType: BUILD_GENERAL1_SMALL\n        EnvironmentVariables:\n          - Name: AWS_ACCOUNT_ID\n            Value: !Ref AWS::AccountId\n          - Name: IMAGE_NAME_nginx\n            Value: !Sub ${accountAliasLowerCase}-${appName}-nginx-ecr\n          - Name: CONTAINER_NAME_nginx\n            Value: !Sub ${accountAliasLowerCase}-${appName}-nginx-container\n          - Name: IMAGE_NAME_php\n            Value: !Sub ${accountAliasLowerCase}-${appName}-php-ecr\n          - Name: CONTAINER_NAME_php\n            Value: !Sub ${accountAliasLowerCase}-${appName}-php-container\n        Image: aws/codebuild/docker:18.09.0\n        Type: LINUX_CONTAINER\n        PrivilegedMode: True\n      ServiceRole: !Ref codeBuildRoleVer\n      Source:\n        Type: CODEPIPELINE\n        BuildSpec: |\n          version: 0.2 \n          phases:\n            build:\n              commands:\n                - REPOSITORY_URI_NGINX=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_NAME_nginx}\n                - REPOSITORY_URI_PHP=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_NAME_php}\n                - IMAGE_TAG=latest\n                - echo \"[{\\\"name\\\":\\\"${CONTAINER_NAME_nginx}\\\",\\\"imageUri\\\":\\\"${REPOSITORY_URI_NGINX}:${IMAGE_TAG}\\\"}, {\\\"name\\\":\\\"${CONTAINER_NAME_php}\\\",\\\"imageUri\\\":\\\"${REPOSITORY_URI_PHP}:${IMAGE_TAG}\\\"}]\"\n                - echo \"[{\\\"name\\\":\\\"${CONTAINER_NAME_nginx}\\\",\\\"imageUri\\\":\\\"${REPOSITORY_URI_NGINX}:${IMAGE_TAG}\\\"}, {\\\"name\\\":\\\"${CONTAINER_NAME_php}\\\",\\\"imageUri\\\":\\\"${REPOSITORY_URI_PHP}:${IMAGE_TAG}\\\"}]\" > imagedefinitions.json\n          artifacts:\n              files: imagedefinitions.json\n      TimeoutInMinutes: 30\n# ------------------------------------------------------------#\n#  S3\n# ------------------------------------------------------------#\n  s3bucketforcodepipelineVer:\n    Type: AWS::S3::Bucket\n    Properties:\n      BucketName: !Sub ${accountAliasLowerCase}-${appName}-codepipeline-ver\n# ------------------------------------------------------------#\n#  CodePipeline\n# ------------------------------------------------------------#\n  codePipelineVer:\n    Type: AWS::CodePipeline::Pipeline\n    DependsOn: s3bucketforcodepipelineVer\n    Properties:\n      ArtifactStore:\n        Location: !Ref s3bucketforcodepipelineVer\n        Type: S3\n      Name: !Sub ${accountAliasLowerCase}-${appName}-codepipeline-ver\n      RestartExecutionOnUpdate: false\n      RoleArn: !GetAtt codePipelineRoleVer.Arn\n      Stages:\n        - Name: Source\n          Actions:\n            - Name: SourceAction\n              ActionTypeId:\n                Category: Source\n                Owner: AWS\n                Provider: ECR\n                Version: 1\n              OutputArtifacts:\n                - Name: SourceArtifact\n              Configuration: \n                RepositoryName: !Sub ${accountAliasLowerCase}-${appName}-php-ecr\n              RunOrder: 1\n        - Name: Build\n          Actions:\n            - Name: CodeBuild\n              InputArtifacts:\n                - Name: SourceArtifact\n              ActionTypeId:\n                Category: Build\n                Owner: AWS\n                Provider: CodeBuild\n                Version: 1\n              Configuration:\n                ProjectName: !Ref codeBuildProjectVer\n              OutputArtifacts:\n                - Name: CodebuildOutput\n              RunOrder: 1\n        - Name: Staging\n          Actions:\n            - Name: Deploy2internalService\n              InputArtifacts:\n                - Name: CodebuildOutput\n              ActionTypeId:\n                Category: Deploy\n                Owner: AWS\n                Provider: ECS\n                Version: 1\n              Configuration:\n                ClusterName: !ImportValue cluster\n                FileName: imagedefinitions.json\n                ServiceName:\n                  Fn::ImportValue: !Sub ${appNamePascalCase}Service\n              OutputArtifacts: []\n              RunOrder: 1\n# ------------------------------------------------------------#\n#  CloudWatch Event\n# ------------------------------------------------------------#\n  cloudWatchEventRoleVer:\n    Type: 'AWS::IAM::Role'\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service:\n                - events.amazonaws.com\n            Action: 'sts:AssumeRole'\n      Path: /\n      Policies:\n        - PolicyName: cwe-pipeline-execution\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Effect: Allow\n                Action: 'codepipeline:StartPipelineExecution'\n                Resource: !Join\n                  - ''\n                  - - 'arn:aws:codepipeline:'\n                    - !Ref 'AWS::Region'\n                    - ':'\n                    - !Ref 'AWS::AccountId'\n                    - ':'\n                    - !Ref codePipelineVer\n  cloudwatchEventsRuleVer:\n    Type: AWS::Events::Rule\n    Properties:\n      EventPattern:\n        source:\n          - aws.ecr\n        detail:\n        detail:\n          eventName:\n            - PutImage\n          requestParameters:\n            repositoryName: \n              - !Sub ${accountAliasLowerCase}-${appName}-php-ecr\n            imageTag: \n              - latest\n      Targets:\n        - Arn:  !Join\n          - ''\n          - - 'arn:aws:codepipeline:'\n            - !Ref 'AWS::Region'\n            - ':'\n            - !Ref 'AWS::AccountId'\n            - ':'\n            - !Ref codePipelineVer\n          Id: !Sub ${accountAliasLowerCase}-${appName}-codepipeline-ver\n          RoleArn: !GetAtt cloudWatchEventRoleVer.Arn\n\n# ------------------------------------------------------------#\n#  Outputs\n# ------------------------------------------------------------#\nOutputs:\n  codeBuildProjectVer:\n    Value: !Ref codeBuildProjectVer\n    Export:\n      Name: !Sub codeBuildProjectVer${appNamePascalCase}\n  s3bucketforcodepipelineVer:\n    Value: !Ref s3bucketforcodepipelineVer\n    Export:\n      Name: !Sub s3bucketforcodepipelineVer${appNamePascalCase}\n"
}
INV-ver-htc01-ver-ecr-access-role
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: codepipeline\n\n# ------------------------------------------------------------#\n#  Parameters\n# ------------------------------------------------------------#\nParameters:\n  accountAllias:\n    Type: String\n  accountAlliasLowerCase:\n    Type: String\n  devAwsAccountId:\n    Type: String\n\nResources:\n# ------------------------------------------------------------#\n#  Role\n# ------------------------------------------------------------#\n  verEcrAccessRole:\n    Type: AWS::IAM::Role\n    Properties:\n      RoleName: ver-ecr-access-role\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement: \n          - Effect: \"Allow\"\n            Principal: \n              AWS: \n                - !Sub arn:aws:iam::${devAwsAccountId}:root\n            Action: \n              - \"sts:AssumeRole\"\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess\n\n# ------------------------------------------------------------#\n#  Outputs\n# ------------------------------------------------------------#\nOutputs:\n  verEcrAccessRole:\n    Value: !Ref verEcrAccessRole\n    Export:\n      Name: verEcrAccessRole"
}
StackSet-InfraAdmin-CreateIamRole-26928f22-0f10-4be5-a6e0-fb3578d658a7
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": {
        "AWSTemplateFormatVersion": "2010-09-09", 
        "Description": "Template for Creating IAM Role to Switch from Internavi Login AWS Account", 
        "Parameters": {
            "TrustedAWSAccountId": {
                "AllowedPattern": "^[0-9]*$", 
                "Type": "String", 
                "Default": "975196479634", 
                "Description": "Trusted AWS Account ID"
            }, 
            "IAMRoleName": {
                "Type": "String", 
                "Default": "InfraAdmin", 
                "Description": "IAM Role Name"
            }
        }, 
        "Resources": {
            "IAMRoleForEngineer": {
                "Type": "AWS::IAM::Role", 
                "Properties": {
                    "AssumeRolePolicyDocument": {
                        "Version": "2012-10-17", 
                        "Statement": [
                            {
                                "Effect": "Allow", 
                                "Principal": {
                                    "AWS": {
                                        "Fn::Join": [
                                            "", 
                                            [
                                                "arn:aws:iam::", 
                                                {
                                                    "Ref": "TrustedAWSAccountId"
                                                }, 
                                                ":user/", 
                                                "JV010031"
                                            ]
                                        ]
                                    }
                                }, 
                                "Action": [
                                    "sts:AssumeRole"
                                ], 
                                "Condition": {
                                    "Bool": {
                                        "aws:MultiFactorAuthPresent": "true"
                                    }
                                }
                            }, 
                            {
                                "Effect": "Allow", 
                                "Principal": {
                                    "AWS": {
                                        "Fn::Join": [
                                            "", 
                                            [
                                                "arn:aws:iam::", 
                                                {
                                                    "Ref": "TrustedAWSAccountId"
                                                }, 
                                                ":user/", 
                                                "JV010024"
                                            ]
                                        ]
                                    }
                                }, 
                                "Action": [
                                    "sts:AssumeRole"
                                ], 
                                "Condition": {
                                    "Bool": {
                                        "aws:MultiFactorAuthPresent": "true"
                                    }
                                }
                            }
                        ]
                    }, 
                    "ManagedPolicyArns": [
                        "arn:aws:iam::aws:policy/AdministratorAccess"
                    ], 
                    "Path": "/", 
                    "RoleName": {
                        "Ref": "IAMRoleName"
                    }
                }
            }
        }, 
        "Outputs": {
            "IAMRoleArn": {
                "Value": {
                    "Fn::GetAtt": [
                        "IAMRoleForEngineer", 
                        "Arn"
                    ]
                }
            }, 
            "LinkForSwitchRole": {
                "Value": {
                    "Fn::Join": [
                        "", 
                        [
                            "https://signin.aws.amazon.com/switchrole?roleName=", 
                            {
                                "Ref": "IAMRoleName"
                            }, 
                            "&account=", 
                            {
                                "Ref": "AWS::AccountId"
                            }
                        ]
                    ]
                }
            }
        }
    }
}
Inv-ver-htc01-mypage-api-service
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: internal ecs service\n\nParameters:\n  accountAlias:\n    Type: String\n  accountAliasLowerCase:\n    Type: String\n  desiredCount:\n    Type: Number\n  taskDefinition:\n    Type: String\n  appName:\n    Type: String\n  appNamePascalCase:\n    Type: String\n  targetGroup:\n    Type: String\n  securityGroup:\n    Type: String\n\nResources:\n  service:\n    Type: AWS::ECS::Service\n    Properties:\n      Cluster: !ImportValue cluster\n      DeploymentConfiguration:\n        MaximumPercent: 200\n        MinimumHealthyPercent: 50\n      DesiredCount: !Ref desiredCount\n      LaunchType: FARGATE\n      LoadBalancers:\n        - ContainerName: !Sub ${accountAliasLowerCase}-${appName}-nginx-container\n          ContainerPort: 80\n          TargetGroupArn:\n            Fn::ImportValue: !Sub ${targetGroup}\n      NetworkConfiguration:\n        AwsvpcConfiguration:\n          AssignPublicIp: DISABLED\n          SecurityGroups:\n            - Fn::ImportValue: !Sub ${securityGroup}\n          Subnets:\n            - !ImportValue PrivateSubnet1a\n            - !ImportValue PrivateSubnet1c\n      ServiceName: !Sub ${accountAliasLowerCase}-${appName}-service\n      TaskDefinition: !Ref taskDefinition\n\nOutputs:\n  service:\n    Value: !Ref service\n    Export:\n      Name: !Sub ${appNamePascalCase}Service\n"
}
Inv-ver-htc01-mypage-api-securitygroup
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: securitygroup\n\nParameters:\n  accountAlias:\n    Type: String\n  appName:\n    Type: String\n  accountAliasLowerCase:\n    Type: String\n  internalSecurityGroupCidr:\n    Type: String\n  appNamePascalCase:\n    Type: String\n  rdsSgId:\n    Type: String\n\nResources:\n  internalApplicationSecuritygroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupName: !Sub ${accountAliasLowerCase}-internal-${appName}-sg\n      GroupDescription: !Sub ${accountAliasLowerCase}-internal-${appName}-sg\n      Tags:\n        - Key: Name\n          Value: !Sub ${accountAliasLowerCase}-internal-${appName}-sg\n      VpcId: !ImportValue VPC\n      SecurityGroupIngress:\n      - IpProtocol: tcp\n        FromPort: '80'\n        ToPort: '80'\n        CidrIp: !Ref internalSecurityGroupCidr\n  internalApplicationSgAuroraDbAccessIngress:\n    Type: 'AWS::EC2::SecurityGroupIngress'\n    Properties:\n      IpProtocol: tcp\n      FromPort: '3306'\n      ToPort: '3306'\n      SourceSecurityGroupId: !Ref internalApplicationSecuritygroup\n      GroupId: !Sub ${rdsSgId}\nOutputs:\n  internalApplicationSecuritygroup:\n    Value: !Ref internalApplicationSecuritygroup\n    Export:\n      Name: !Sub internal${appNamePascalCase}Securitygroup\n"
}
Inv-ver-htc01-mypage-api-task
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: ecs task definition\n\nParameters:\n  accountAlias:\n    Type: String\n  accountAliasLowerCase:\n    Type: String\n  cpu:\n    Type: Number\n  memory:\n    Type: Number\n  imageUriNginx:\n    Type: String\n  imageUriPhp:\n    Type: String\n  appName:\n    Type: String\n  appNamePascalCase:\n    Type: String\n  appEnv:\n    Type: String\n  urlTokenAuth:\n    Type: String\n  dbHost:\n    Type: String\n  dbDatabase:\n    Type: String\n  dbUsername:\n    Type: String\n  dbPassword:\n    Type: String\n  apiYsdBaseUrl:\n    Type: String\n  apiHtcBaseUrl:\n    Type: String\n  apiCarpfBaseUrl:\n    Type: String\n\n\nResources:\n  ecsTaskExecutionRole:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement:\n          - Effect: \"Allow\"\n            Principal:\n              Service:\n                - \"ecs-tasks.amazonaws.com\"\n            Action:\n              - \"sts:AssumeRole\"\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy\n  Taskdefinition:\n    Type: AWS::ECS::TaskDefinition\n    DependsOn: ecsTaskExecutionRole\n    Properties:\n      Family: !Sub ${accountAliasLowerCase}-${appName}-task\n      RequiresCompatibilities:\n        - FARGATE\n      Cpu: !Ref cpu\n      Memory: !Ref memory\n      NetworkMode: awsvpc\n      ExecutionRoleArn: !GetAtt ecsTaskExecutionRole.Arn\n      TaskRoleArn: !GetAtt ecsTaskExecutionRole.Arn\n      ContainerDefinitions:\n        - Name: !Sub ${accountAliasLowerCase}-${appName}-nginx-container\n          Image: !Ref imageUriNginx\n          PortMappings:\n            - ContainerPort: 80\n          LogConfiguration:\n            LogDriver: awslogs\n            Options:\n              awslogs-region: !Ref AWS::Region\n              awslogs-group:\n                Fn::ImportValue: !Sub logGroup${appNamePascalCase}\n              awslogs-stream-prefix: !Sub ${accountAliasLowerCase}\n          VolumesFrom:\n            - SourceContainer: !Sub ${accountAliasLowerCase}-${appName}-php-container\n        - Name: !Sub ${accountAliasLowerCase}-${appName}-php-container\n          Image: !Ref imageUriPhp\n          Environment:\n            - Name: APP_ENV\n              Value: !Sub ${appEnv}\n            - Name: URL_TOKENAUTH\n              Value: !Sub ${urlTokenAuth}\n            - Name: DB_HOST\n              Value: !Sub ${dbHost}\n            - Name: DB_DATABASE\n              Value: !Sub ${dbDatabase}\n            - Name: DB_USERNAME\n              Value: !Sub ${dbUsername}\n            - Name: DB_PASSWORD\n              Value: !Sub ${dbPassword}\n            - Name: API_YSD_BASEURL\n              Value: !Sub ${apiYsdBaseUrl}\n            - Name: API_HTC_BASEURL\n              Value: !Sub ${apiHtcBaseUrl}\n            - Name: API_CARPF_BASEURL\n              Value: !Sub ${apiCarpfBaseUrl}\n          LogConfiguration:\n            LogDriver: awslogs\n            Options:\n              awslogs-region: !Ref AWS::Region\n              awslogs-group:\n                Fn::ImportValue: !Sub logGroup${appNamePascalCase}\n              awslogs-stream-prefix: !Sub ${accountAliasLowerCase}\nOutputs:\n  ecsTaskExecutionRole:\n    Value: !Ref ecsTaskExecutionRole\n    Export:\n      Name: !Sub ecsTaskExecutionRole${appNamePascalCase}\n  Taskdefinition:\n    Value: !Ref Taskdefinition\n    Export:\n      Name: !Sub Taskdefinition${appNamePascalCase}\n"
}
Inv-ver-htc01-mypage-api-ecs-loggroup
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: ecs and loggroup\n\nParameters:\n  accountAlias:\n    Type: String\n  accountAliasLowerCase:\n    Type: String\n  logGroupName:\n    Type: String\n  appNamePascalCase:\n    Type: String\n\nResources:\n  logGroup:\n    Type: AWS::Logs::LogGroup\n    Properties:\n      LogGroupName: !Ref logGroupName\n\nOutputs:\n  logGroup:\n    Value: !Ref logGroup\n    Export:\n      Name: !Sub logGroup${appNamePascalCase}"
}
Inv-ver-htc01-mypage-api-ecr
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: codecommit and ecr\n\nParameters:\n  accountAlias:\n    Type: String\n  accountAliasLowerCase:\n    Type: String\n  appName:\n    Type: String\n  appNamePascalCase:\n    Type: String\n\n\nResources:\n  ecrNginx:\n    Type: AWS::ECR::Repository\n    Properties:\n      RepositoryName: !Sub ${accountAliasLowerCase}-${appName}-nginx-ecr\n  ecrPhp:\n    Type: AWS::ECR::Repository\n    Properties:\n      RepositoryName: !Sub ${accountAliasLowerCase}-${appName}-php-ecr\n\nOutputs:\n  ecrNginx:\n    Value: !GetAtt ecrNginx.Arn\n    Export:\n      Name: !Sub ecr${appNamePascalCase}Nginx\n  ecrPhp:\n    Value: !GetAtt ecrPhp.Arn\n    Export:\n      Name: !Sub ecr${appNamePascalCase}Php\n"
}
Inv-ver-htc01-connected-incar-service
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: internal ecs service\n\nParameters:\n  accountAlias:\n    Type: String\n  accountAliasLowerCase:\n    Type: String\n  desiredCount:\n    Type: Number\n  taskDefinition:\n    Type: String\n  appName:\n    Type: String\n  appNamePascalCase:\n    Type: String\n  targetGroup:\n    Type: String\n  securityGroup:\n    Type: String\n\nResources:\n  service:\n    Type: AWS::ECS::Service\n    Properties:\n      Cluster: !ImportValue cluster\n      DeploymentConfiguration:\n        MaximumPercent: 200\n        MinimumHealthyPercent: 50\n      DesiredCount: !Ref desiredCount\n      LaunchType: FARGATE\n      LoadBalancers:\n        - ContainerName: !Sub ${accountAliasLowerCase}-${appName}-nginx-container\n          ContainerPort: 80\n          TargetGroupArn:\n            Fn::ImportValue: !Sub ${targetGroup}\n      NetworkConfiguration:\n        AwsvpcConfiguration:\n          AssignPublicIp: DISABLED\n          SecurityGroups:\n            - Fn::ImportValue: !Sub ${securityGroup}\n          Subnets:\n            - !ImportValue PrivateSubnet1a\n            - !ImportValue PrivateSubnet1c\n      ServiceName: !Sub ${accountAliasLowerCase}-${appName}-service\n      TaskDefinition: !Sub ${taskDefinition}\n\nOutputs:\n  service:\n    Value: !Ref service\n    Export:\n      Name: !Sub ${appNamePascalCase}Service\n"
}
Inv-ver-htc01-connected-incar-securitygroup
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: securitygroup\n\nParameters:\n  accountAlias:\n    Type: String\n  appName:\n    Type: String\n  accountAliasLowerCase:\n    Type: String\n  internalSecurityGroupCidr:\n    Type: String\n  appNamePascalCase:\n    Type: String\n  redisSgId:\n    Type: String\n  redisPort:\n    Type: String\n\nResources:\n  internalApplicationSecuritygroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupName: !Sub ${accountAliasLowerCase}-internal-${appName}-sg\n      GroupDescription: !Sub ${accountAliasLowerCase}-internal-${appName}-sg\n      Tags:\n        - Key: Name\n          Value: !Sub ${accountAliasLowerCase}-internal-${appName}-sg\n      VpcId: !ImportValue VPC\n      SecurityGroupIngress:\n      - IpProtocol: tcp\n        FromPort: '80'\n        ToPort: '80'\n        CidrIp: !Ref internalSecurityGroupCidr\n  internalApplicationSgRedisAccessIngress:\n    Type: 'AWS::EC2::SecurityGroupIngress'\n    Properties:\n      IpProtocol: tcp\n      FromPort: !Sub ${redisPort}\n      ToPort: !Sub ${redisPort}\n      SourceSecurityGroupId: !Ref internalApplicationSecuritygroup\n      GroupId: !Sub ${redisSgId}\nOutputs:\n  internalApplicationSecuritygroup:\n    Value: !Ref internalApplicationSecuritygroup\n    Export:\n      Name: !Sub internal${appNamePascalCase}Securitygroup\n"
}
Inv-ver-htc01-connected-incar-ecs-loggroup
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: ecs and loggroup\n\nParameters:\n  accountAlias:\n    Type: String\n  accountAliasLowerCase:\n    Type: String\n  logGroupName:\n    Type: String\n  appNamePascalCase:\n    Type: String\n\nResources:\n  logGroup:\n    Type: AWS::Logs::LogGroup\n    Properties:\n      LogGroupName: !Ref logGroupName\n\nOutputs:\n  logGroup:\n    Value: !Ref logGroup\n    Export:\n      Name: !Sub logGroup${appNamePascalCase}"
}
Inv-ver-htc01-connected-incar-ecr
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: codecommit and ecr\n\nParameters:\n  accountAlias:\n    Type: String\n  accountAliasLowerCase:\n    Type: String\n  appName:\n    Type: String\n  appNamePascalCase:\n    Type: String\n\n\nResources:\n  ecrNginx:\n    Type: AWS::ECR::Repository\n    Properties:\n      RepositoryName: !Sub ${accountAliasLowerCase}-${appName}-nginx-ecr\n  ecrPhp:\n    Type: AWS::ECR::Repository\n    Properties:\n      RepositoryName: !Sub ${accountAliasLowerCase}-${appName}-php-ecr\n\nOutputs:\n  ecrNginx:\n    Value: !GetAtt ecrNginx.Arn\n    Export:\n      Name: !Sub ecr${appNamePascalCase}Nginx\n  ecrPhp:\n    Value: !GetAtt ecrPhp.Arn\n    Export:\n      Name: !Sub ecr${appNamePascalCase}Php\n"
}
Inv-ver-htc01-aurora-service
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: internal ecs service\n\nParameters:\n  accountAlias:\n    Type: String\n  accountAliasLowerCase:\n    Type: String\n  desiredCount:\n    Type: Number\n  taskDefinition:\n    Type: String\n  appName:\n    Type: String\n  appNamePascalCase:\n    Type: String\n  securityGroup:\n    Type: String\n\nResources:\n  service:\n    Type: AWS::ECS::Service\n    Properties:\n      Cluster: !ImportValue cluster\n      DeploymentConfiguration:\n        MaximumPercent: 200\n        MinimumHealthyPercent: 50\n      DesiredCount: !Ref desiredCount\n      LaunchType: FARGATE\n      NetworkConfiguration:\n        AwsvpcConfiguration:\n          AssignPublicIp: DISABLED\n          SecurityGroups:\n            - Fn::ImportValue: !Sub ${securityGroup}\n          Subnets:\n            - !ImportValue PrivateSubnet1a\n            - !ImportValue PrivateSubnet1c\n      ServiceName: !Sub ${accountAliasLowerCase}-${appName}-service2\n      TaskDefinition: !Sub ${taskDefinition}\n\nOutputs:\n  service:\n    Value: !Ref service\n    Export:\n      Name: !Sub ${appNamePascalCase}Service2\n"
}
Inv-ver-htc01-aurora-securitygroup
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: codepipeline\n\nParameters:\n  accountAlias:\n    Type: String\n  appName:\n    Type: String\n  accountAliasLowerCase:\n    Type: String\n  internalSecurityGroupCidr:\n    Type: String\n  appNamePascalCase:\n    Type: String\n  rdsSgId:\n    Type: String\n\nResources:\n  internalApplicationSecuritygroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupName: !Sub ${accountAliasLowerCase}-internal-${appName}-sg\n      GroupDescription: !Sub ${accountAliasLowerCase}-internal-${appName}-sg\n      Tags:\n        - Key: Name\n          Value: !Sub ${accountAliasLowerCase}-internal-${appName}-sg\n      VpcId: !ImportValue VPC\n      SecurityGroupIngress:\n      - IpProtocol: tcp\n        FromPort: '80'\n        ToPort: '80'\n        CidrIp: !Ref internalSecurityGroupCidr\n  internalApplicationSgAuroraDbAccessIngress:\n    Type: 'AWS::EC2::SecurityGroupIngress'\n    Properties:\n      IpProtocol: tcp\n      FromPort: '3306'\n      ToPort: '3306'\n      SourceSecurityGroupId: !Ref internalApplicationSecuritygroup\n      GroupId: !Sub ${rdsSgId}\n\nOutputs:\n  internalApplicationSecuritygroup:\n    Value: !Ref internalApplicationSecuritygroup\n    Export:\n      Name: !Sub internal${appNamePascalCase}Securitygroup\n"
}
Inv-ver-htc01-aurora-task
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: ecs task definition\n\nParameters:\n  accountAlias:\n    Type: String\n  accountAliasLowerCase:\n    Type: String\n  cpu:\n    Type: Number\n  memory:\n    Type: Number\n  imageUriPhp:\n    Type: String\n  appName:\n    Type: String\n  appNamePascalCase:\n    Type: String\n  phinxEnv:\n    Type: String\n\nResources:\n  ecsTaskExecutionRole:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement:\n          - Effect: \"Allow\"\n            Principal:\n              Service:\n                - \"ecs-tasks.amazonaws.com\"\n            Action:\n              - \"sts:AssumeRole\"\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy\n        - arn:aws:iam::aws:policy/AmazonRDSDataFullAccess\n  Taskdefinition:\n    Type: AWS::ECS::TaskDefinition\n    DependsOn: ecsTaskExecutionRole\n    Properties:\n      Family: !Sub ${accountAliasLowerCase}-${appName}-task\n      RequiresCompatibilities:\n        - FARGATE\n      Cpu: !Ref cpu\n      Memory: !Ref memory\n      NetworkMode: awsvpc\n      ExecutionRoleArn: !GetAtt ecsTaskExecutionRole.Arn\n      TaskRoleArn: !GetAtt ecsTaskExecutionRole.Arn\n      ContainerDefinitions:\n        - Name: !Sub ${accountAliasLowerCase}-${appName}-php-container\n          Image: !Ref imageUriPhp\n          PortMappings:\n            - ContainerPort: 2022\n          Environment:\n            - Name: PHINX_ENV\n              Value: !Sub ${phinxEnv}\n          LogConfiguration:\n            LogDriver: awslogs\n            Options:\n              awslogs-region: !Ref AWS::Region\n              awslogs-group:\n                Fn::ImportValue: !Sub logGroup${appNamePascalCase}\n              awslogs-stream-prefix: !Sub ${accountAliasLowerCase}\nOutputs:\n  ecsTaskExecutionRole:\n    Value: !Ref ecsTaskExecutionRole\n    Export:\n      Name: !Sub ecsTaskExecutionRole${appNamePascalCase}\n  Taskdefinition:\n    Value: !Ref Taskdefinition\n    Export:\n      Name: !Sub Taskdefinition${appNamePascalCase}\n"
}
Inv-ver-htc01-aurora-ecs-loggroup
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: ecs and loggroup\n\nParameters:\n  accountAlias:\n    Type: String\n  accountAliasLowerCase:\n    Type: String\n  logGroupName:\n    Type: String\n  appNamePascalCase:\n    Type: String\n\nResources:\n  logGroup:\n    Type: AWS::Logs::LogGroup\n    Properties:\n      LogGroupName: !Ref logGroupName\n\nOutputs:\n  logGroup:\n    Value: !Ref logGroup\n    Export:\n      Name: !Sub logGroup${appNamePascalCase}"
}
Inv-ver-htc01-aurora-ecr
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: codecommit and ecr\n\nParameters:\n  accountAlias:\n    Type: String\n  accountAliasLowerCase:\n    Type: String\n  appName:\n    Type: String\n  appNamePascalCase:\n    Type: String\n\n\nResources:\n  ecrPhp:\n    Type: AWS::ECR::Repository\n    Properties:\n      RepositoryName: !Sub ${accountAliasLowerCase}-${appName}-php-ecr\n\nOutputs:\n  ecrPhp:\n    Value: !GetAtt ecrPhp.Arn\n    Export:\n      Name: !Sub ecr${appNamePascalCase}Php\n"
}
Inv-ver-htc01-connected-api-service
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: internal ecs service\n\nParameters:\n  accountAlias:\n    Type: String\n  accountAliasLowerCase:\n    Type: String\n  desiredCount:\n    Type: Number\n  taskDefinition:\n    Type: String\n  appName:\n    Type: String\n  appNamePascalCase:\n    Type: String\n  targetGroup:\n    Type: String\n  securityGroup:\n    Type: String\n\nResources:\n  service:\n    Type: AWS::ECS::Service\n    Properties:\n      Cluster: !ImportValue cluster\n      DeploymentConfiguration:\n        MaximumPercent: 200\n        MinimumHealthyPercent: 50\n      DesiredCount: !Ref desiredCount\n      LaunchType: FARGATE\n      LoadBalancers:\n        - ContainerName: !Sub ${accountAliasLowerCase}-${appName}-nginx-container\n          ContainerPort: 80\n          TargetGroupArn:\n            Fn::ImportValue: !Sub ${targetGroup}\n      NetworkConfiguration:\n        AwsvpcConfiguration:\n          AssignPublicIp: DISABLED\n          SecurityGroups:\n            - Fn::ImportValue: !Sub ${securityGroup}\n          Subnets:\n            - !ImportValue PrivateSubnet1a\n            - !ImportValue PrivateSubnet1c\n      ServiceName: !Sub ${accountAliasLowerCase}-${appName}-service\n      TaskDefinition: !Sub ${taskDefinition}\n\nOutputs:\n  service:\n    Value: !Ref service\n    Export:\n      Name: !Sub ${appNamePascalCase}Service\n"
}
Inv-ver-htc01-connected-api-securitygroup
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: codepipeline\n\nParameters:\n  accountAlias:\n    Type: String\n  appName:\n    Type: String\n  accountAliasLowerCase:\n    Type: String\n  internalSecurityGroupCidr:\n    Type: String\n  appNamePascalCase:\n    Type: String\n  rdsSgId:\n    Type: String\n  redisSgId:\n    Type: String\n\nResources:\n  internalApplicationSecuritygroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupName: !Sub ${accountAliasLowerCase}-internal-${appName}-sg\n      GroupDescription: !Sub ${accountAliasLowerCase}-internal-${appName}-sg\n      Tags:\n        - Key: Name\n          Value: !Sub ${accountAliasLowerCase}-internal-${appName}-sg\n      VpcId: !ImportValue VPC\n      SecurityGroupIngress:\n      - IpProtocol: tcp\n        FromPort: '80'\n        ToPort: '80'\n        CidrIp: !Ref internalSecurityGroupCidr\n  internalApplicationSgAuroraDbAccessIngress:\n    Type: 'AWS::EC2::SecurityGroupIngress'\n    Properties:\n      IpProtocol: tcp\n      FromPort: '3306'\n      ToPort: '3306'\n      SourceSecurityGroupId: !Ref internalApplicationSecuritygroup\n      GroupId: !Sub ${rdsSgId}\n  internalApplicationSgRedisAccessIngress:\n    Type: 'AWS::EC2::SecurityGroupIngress'\n    Properties:\n      IpProtocol: tcp\n      FromPort: '6379'\n      ToPort: '6379'\n      SourceSecurityGroupId: !Ref internalApplicationSecuritygroup\n      GroupId: !Sub ${redisSgId}\nOutputs:\n  internalApplicationSecuritygroup:\n    Value: !Ref internalApplicationSecuritygroup\n    Export:\n      Name: !Sub internal${appNamePascalCase}Securitygroup\n"
}
Inv-ver-htc01-connected-api-task
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: ecs task definition\n\nParameters:\n  accountAlias:\n    Type: String\n  accountAliasLowerCase:\n    Type: String\n  cpu:\n    Type: Number\n  memory:\n    Type: Number\n  imageUriNginx:\n    Type: String\n  imageUriPhp:\n    Type: String\n  appName:\n    Type: String\n  appNamePascalCase:\n    Type: String\n  appEnv:\n    Type: String\n  dbHost:\n    Type: String\n  dbDatabase:\n    Type: String\n  dbUsername:\n    Type: String\n  dbPassword:\n    Type: String\n  redisHost:\n    Type: String\n  apiYsdBaseUrl:\n    Type: String\n  apiHtcBaseUrl:\n    Type: String\n  apiCarpfBaseUrl:\n    Type: String\n  mailDriver:\n    Type: String\n  mailHost:\n    Type: String\n  mailPort:\n    Type: Number\n  mailFromAddress:\n    Type: String\n  mailReturnAddress:\n    Type: String\n  urlPinsreset:\n    Type: String\n\nResources:\n  ecsTaskExecutionRole:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement:\n          - Effect: \"Allow\"\n            Principal:\n              Service:\n                - \"ecs-tasks.amazonaws.com\"\n            Action:\n              - \"sts:AssumeRole\"\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy\n        - arn:aws:iam::aws:policy/AmazonSESFullAccess\n  Taskdefinition:\n    Type: AWS::ECS::TaskDefinition\n    DependsOn: ecsTaskExecutionRole\n    Properties:\n      Family: !Sub ${accountAliasLowerCase}-${appName}-task\n      RequiresCompatibilities:\n        - FARGATE\n      Cpu: !Ref cpu\n      Memory: !Ref memory\n      NetworkMode: awsvpc\n      ExecutionRoleArn: !GetAtt ecsTaskExecutionRole.Arn\n      TaskRoleArn: !GetAtt ecsTaskExecutionRole.Arn\n      ContainerDefinitions:\n        - Name: !Sub ${accountAliasLowerCase}-${appName}-nginx-container\n          Image: !Ref imageUriNginx\n          PortMappings:\n            - ContainerPort: 80\n          Environment:\n            - Name: MYPAGE\n              Value: mypage\n          LogConfiguration:\n            LogDriver: awslogs\n            Options:\n              awslogs-region: !Ref AWS::Region\n              awslogs-group:\n                Fn::ImportValue: !Sub logGroup${appNamePascalCase}\n              awslogs-stream-prefix: !Sub ${accountAliasLowerCase}\n          VolumesFrom:\n            - SourceContainer: !Sub ${accountAliasLowerCase}-${appName}-php-container\n        - Name: !Sub ${accountAliasLowerCase}-${appName}-php-container\n          Image: !Ref imageUriPhp\n          Environment:\n            - Name: APP_ENV\n              Value: !Sub ${appEnv}\n            - Name: DB_HOST\n              Value: !Sub ${dbHost}\n            - Name: DB_DATABASE\n              Value: !Sub ${dbDatabase}\n            - Name: DB_USERNAME\n              Value: !Sub ${dbUsername}\n            - Name: DB_PASSWORD\n              Value: !Sub ${dbPassword}\n            - Name: REDIS_HOST\n              Value: !Sub ${redisHost}\n            - Name: REDIS_PASSWORD\n              Value: 'null'\n            - Name: API_YSD_BASEURL\n              Value: !Sub ${apiYsdBaseUrl}\n            - Name: API_HTC_BASEURL\n              Value: !Sub ${apiHtcBaseUrl}\n            - Name: API_CARPF_BASEURL\n              Value: !Sub ${apiCarpfBaseUrl}\n            - Name: MAIL_DRIVER\n              Value: !Sub ${mailDriver}\n            - Name: MAIL_HOST\n              Value: !Sub ${mailHost}\n            - Name: MAIL_PORT\n              Value: !Sub ${mailPort}\n            - Name: MAIL_FROM_ADDRESS\n              Value: !Sub ${mailFromAddress}\n            - Name: MAIL_RETURN_ADDRESS\n              Value: !Sub ${mailReturnAddress}\n            - Name: URL_PINSRESET\n              Value: !Sub ${urlPinsreset}\n          LogConfiguration:\n            LogDriver: awslogs\n            Options:\n              awslogs-region: !Ref AWS::Region\n              awslogs-group:\n                Fn::ImportValue: !Sub logGroup${appNamePascalCase}\n              awslogs-stream-prefix: !Sub ${accountAliasLowerCase}\nOutputs:\n  ecsTaskExecutionRole:\n    Value: !Ref ecsTaskExecutionRole\n    Export:\n      Name: !Sub ecsTaskExecutionRole${appNamePascalCase}\n  Taskdefinition:\n    Value: !Ref Taskdefinition\n    Export:\n      Name: !Sub Taskdefinition${appNamePascalCase}\n"
}
Inv-ver-htc01-connected-api-ecs-loggroup
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: ecs and loggroup\n\nParameters:\n  accountAlias:\n    Type: String\n  accountAliasLowerCase:\n    Type: String\n  logGroupName:\n    Type: String\n  appNamePascalCase:\n    Type: String\n\nResources:\n  logGroup:\n    Type: AWS::Logs::LogGroup\n    Properties:\n      LogGroupName: !Ref logGroupName\n\nOutputs:\n  logGroup:\n    Value: !Ref logGroup\n    Export:\n      Name: !Sub logGroup${appNamePascalCase}"
}
Inv-ver-htc01-connected-api-ecr
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: codecommit and ecr\n\nParameters:\n  accountAlias:\n    Type: String\n  accountAliasLowerCase:\n    Type: String\n  appName:\n    Type: String\n  appNamePascalCase:\n    Type: String\n\n\nResources:\n  ecrNginx:\n    Type: AWS::ECR::Repository\n    Properties:\n      RepositoryName: !Sub ${accountAliasLowerCase}-${appName}-nginx-ecr\n  ecrPhp:\n    Type: AWS::ECR::Repository\n    Properties:\n      RepositoryName: !Sub ${accountAliasLowerCase}-${appName}-php-ecr\n\nOutputs:\n  ecrNginx:\n    Value: !GetAtt ecrNginx.Arn\n    Export:\n      Name: !Sub ecr${appNamePascalCase}Nginx\n  ecrPhp:\n    Value: !GetAtt ecrPhp.Arn\n    Export:\n      Name: !Sub ecr${appNamePascalCase}Php\n"
}
Inv-ver-htc01-connected-web-service
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: internal ecs service\n\nParameters:\n  accountAlias:\n    Type: String\n  accountAliasLowerCase:\n    Type: String\n  desiredCount:\n    Type: Number\n  taskDefinition:\n    Type: String\n  appName:\n    Type: String\n  appNamePascalCase:\n    Type: String\n  targetGroup:\n    Type: String\n  securityGroup:\n    Type: String\n\nResources:\n  service:\n    Type: AWS::ECS::Service\n    Properties:\n      Cluster: !ImportValue cluster\n      DeploymentConfiguration:\n        MaximumPercent: 200\n        MinimumHealthyPercent: 50\n      DesiredCount: !Ref desiredCount\n      LaunchType: FARGATE\n      LoadBalancers:\n        - ContainerName: !Sub ${accountAliasLowerCase}-${appName}-nginx-container\n          ContainerPort: 80\n          TargetGroupArn:\n            Fn::ImportValue: !Sub ${targetGroup}\n      NetworkConfiguration:\n        AwsvpcConfiguration:\n          AssignPublicIp: DISABLED\n          SecurityGroups:\n            - Fn::ImportValue: !Sub ${securityGroup}\n          Subnets:\n            - !ImportValue PrivateSubnet1a\n            - !ImportValue PrivateSubnet1c\n      ServiceName: !Sub ${accountAliasLowerCase}-${appName}-service\n      TaskDefinition: !Sub ${taskDefinition}\n\nOutputs:\n  service:\n    Value: !Ref service\n    Export:\n      Name: !Sub ${appNamePascalCase}Service\n"
}
INV-ver-htc01-ecs-cluster
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: ecs cluster\n\nParameters:\n  accountAllias:\n    Type: String\n  accountAlliasLowerCase:\n    Type: String\n\nResources:\n  ecs:\n    Type: AWS::ECS::Cluster\n    Properties:\n      ClusterName: !Sub ${accountAlliasLowerCase}-cluster\n\nOutputs:\n  cluster:\n    Value: !Ref ecs\n    Export:\n      Name: cluster\n"
}
Inv-ver-htc01-connected-web-securitygroup
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: codepipeline\n\nParameters:\n  accountAlias:\n    Type: String\n  appName:\n    Type: String\n  accountAliasLowerCase:\n    Type: String\n  internalSecurityGroupCidr:\n    Type: String\n  appNamePascalCase:\n    Type: String\n\nResources:\n  internalApplicationSecuritygroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupName: !Sub ${accountAliasLowerCase}-internal-${appName}-sg\n      GroupDescription: !Sub ${accountAliasLowerCase}-internal-${appName}-sg\n      Tags:\n        - Key: Name\n          Value: !Sub ${accountAliasLowerCase}-internal-${appName}-sg\n      VpcId: !ImportValue VPC\n      SecurityGroupIngress:\n      - IpProtocol: tcp\n        FromPort: '80'\n        ToPort: '80'\n        CidrIp: !Ref internalSecurityGroupCidr\n\nOutputs:\n  internalApplicationSecuritygroup:\n    Value: !Ref internalApplicationSecuritygroup\n    Export:\n      Name: !Sub internal${appNamePascalCase}Securitygroup\n"
}
Inv-ver-htc01-connected-web-task
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: ecs task definition\n\nParameters:\n  accountAlias:\n    Type: String\n  accountAliasLowerCase:\n    Type: String\n  cpu:\n    Type: Number\n  memory:\n    Type: Number\n  imageUriNginx:\n    Type: String\n  imageUriPhp:\n    Type: String\n  appName:\n    Type: String\n  appNamePascalCase:\n    Type: String\n  environment:\n    Type: String\n  fpaAccountId:\n    Type: String\n  stripeApiKey:\n    Type: String\n  bucketName:\n    Type: String\n\nResources:\n  ecsTaskExecutionRole:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement:\n          - Effect: \"Allow\"\n            Principal:\n              Service:\n                - \"ecs-tasks.amazonaws.com\"\n            Action:\n              - \"sts:AssumeRole\"\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy\n        - arn:aws:iam::aws:policy/AmazonS3FullAccess\n  Taskdefinition:\n    Type: AWS::ECS::TaskDefinition\n    DependsOn: ecsTaskExecutionRole\n    Properties:\n      Family: !Sub ${accountAliasLowerCase}-${appName}-task\n      RequiresCompatibilities:\n        - FARGATE\n      Cpu: !Ref cpu\n      Memory: !Ref memory\n      NetworkMode: awsvpc\n      ExecutionRoleArn: !GetAtt ecsTaskExecutionRole.Arn\n      TaskRoleArn: !GetAtt ecsTaskExecutionRole.Arn\n      ContainerDefinitions:\n        - Name: !Sub ${accountAliasLowerCase}-${appName}-nginx-container\n          Image: !Ref imageUriNginx\n          PortMappings:\n            - ContainerPort: 80\n          Environment:\n            - Name: MYPAGE\n              Value: mypage\n          LogConfiguration:\n            LogDriver: awslogs\n            Options:\n              awslogs-region: !Ref AWS::Region\n              awslogs-group:\n                Fn::ImportValue: !Sub logGroup${appNamePascalCase}\n              awslogs-stream-prefix: !Sub ${accountAliasLowerCase}\n          VolumesFrom:\n            - SourceContainer: !Sub ${accountAliasLowerCase}-${appName}-php-container\n        - Name: !Sub ${accountAliasLowerCase}-${appName}-php-container\n          Image: !Ref imageUriPhp\n          Environment:\n            - Name: APP_ENV\n              Value: !Sub ${environment}\n            - Name: APP_DEBUG\n              Value: false\n            - Name: LOG_LEVEL\n              Value: INFO\n            - Name: FPA_ACCOUNT_ID\n              Value: !Sub ${fpaAccountId}\n            - Name: STRIPE_API_KEY\n              Value: !Sub ${stripeApiKey}\n            - Name: AWS_BUCKET\n              Value: !Sub ${bucketName}\n          LogConfiguration:\n            LogDriver: awslogs\n            Options:\n              awslogs-region: !Ref AWS::Region\n              awslogs-group:\n                Fn::ImportValue: !Sub logGroup${appNamePascalCase}\n              awslogs-stream-prefix: !Sub ${accountAliasLowerCase}\nOutputs:\n  ecsTaskExecutionRole:\n    Value: !Ref ecsTaskExecutionRole\n    Export:\n      Name: !Sub ecsTaskExecutionRole${appNamePascalCase}\n  Taskdefinition:\n    Value: !Ref Taskdefinition\n    Export:\n      Name: !Sub Taskdefinition${appNamePascalCase}\n"
}
Inv-ver-htc01-connected-web-ecs-loggroup
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: ecs and loggroup\n\nParameters:\n  accountAlias:\n    Type: String\n  accountAliasLowerCase:\n    Type: String\n  logGroupName:\n    Type: String\n  appNamePascalCase:\n    Type: String\n\nResources:\n  logGroup:\n    Type: AWS::Logs::LogGroup\n    Properties:\n      LogGroupName: !Ref logGroupName\n\nOutputs:\n  logGroup:\n    Value: !Ref logGroup\n    Export:\n      Name: !Sub logGroup${appNamePascalCase}"
}
Inv-ver-htc01-connected-web-ecr
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: codecommit and ecr\n\nParameters:\n  accountAlias:\n    Type: String\n  accountAliasLowerCase:\n    Type: String\n  appName:\n    Type: String\n  appNamePascalCase:\n    Type: String\n\n\nResources:\n  ecrNginx:\n    Type: AWS::ECR::Repository\n    Properties:\n      RepositoryName: !Sub ${accountAliasLowerCase}-${appName}-nginx-ecr\n  ecrPhp:\n    Type: AWS::ECR::Repository\n    Properties:\n      RepositoryName: !Sub ${accountAliasLowerCase}-${appName}-php-ecr\n\nOutputs:\n  ecrNginx:\n    Value: !GetAtt ecrNginx.Arn\n    Export:\n      Name: !Sub ecr${appNamePascalCase}Nginx\n  ecrPhp:\n    Value: !GetAtt ecrPhp.Arn\n    Export:\n      Name: !Sub ecr${appNamePascalCase}Php\n"
}
StackSet-OpeAdmin-CreateIamRole-d8fd7d40-735c-48de-8e23-63be5e6d2392
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "{\n  \"AWSTemplateFormatVersion\" : \"2010-09-09\",\n  \"Description\" : \"Template for Creating IAM Role to Switch from Internavi Login AWS Account\",\n  \"Parameters\" : {\n    \"TrustedAWSAccountId\" : {\n      \"AllowedPattern\" : \"^[0-9]*$\",\n      \"Type\" : \"String\",\n      \"Default\" : \"975196479634\",\n      \"Description\" : \"Trusted AWS Account ID\"\n    },\n    \"IAMRoleName\": {\n      \"Type\": \"String\",\n      \"Default\": \"OpeAdminRole\",\n      \"Description\": \"IAM Role Name\"\n    }\n  },\n  \"Resources\" : {\n    \"IAMRoleForEngineer\": {\n      \"Type\": \"AWS::IAM::Role\",\n      \"Properties\": {\n        \"AssumeRolePolicyDocument\": {\n          \"Version\": \"2012-10-17\",\n          \"Statement\": [\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010002\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010025\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010026\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010027\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010028\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010030\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            }\n          ]\n        },\n        \"ManagedPolicyArns\": [\n          \"arn:aws:iam::aws:policy/AdministratorAccess\"\n        ],\n        \"Path\": \"/\",\n        \"RoleName\": { \"Ref\" : \"IAMRoleName\" }\n      }\n    }\n  },\n  \"Outputs\" : {\n    \"IAMRoleArn\": {\n      \"Value\": { \"Fn::GetAtt\" : [ \"IAMRoleForEngineer\", \"Arn\" ] }\n    },\n    \"LinkForSwitchRole\": {\n      \"Value\": { \"Fn::Join\": [ \"\", [ \"https://signin.aws.amazon.com/switchrole?roleName=\", { \"Ref\" : \"IAMRoleName\" }, \"&account=\", { \"Ref\" : \"AWS::AccountId\" } ] ] }\n    }\n  }\n}\n"
}
INV-ver-htc01-resource-IAMRoleStack-HSBFUL3QDTQ6
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "---\r\nAWSTemplateFormatVersion: \"2010-09-09\"\r\nDescription: 1-1_iam.txt\r\nParameters:\r\n  ServiceName:\r\n    Type: String\r\n  SystemEnvironment:\r\n    Type: String\r\nMappings:\r\n  Region2Principal:\r\n    ap-northeast-1:\r\n      S3Principal: s3.amazonaws.com\r\nResources:\r\n  S3Role:\r\n    Type: AWS::IAM::Role\r\n    Properties: \r\n      AssumeRolePolicyDocument:\r\n        Statement:\r\n        - Effect: Allow\r\n          Principal:\r\n            Service:\r\n            - Fn::FindInMap:\r\n              - Region2Principal\r\n              - Ref: AWS::Region\r\n              - S3Principal\r\n          Action:\r\n          - sts:AssumeRole\r\n      ManagedPolicyArns:\r\n        - !Ref S3Policy\r\n      Path: \"/\"\r\n      RoleName: !Sub \"inv-${SystemEnvironment}-${ServiceName}-app-S3Role\"\r\n  S3Policy:\r\n    Type: AWS::IAM::ManagedPolicy\r\n    Properties:\r\n      Description: !Sub \"Policy for S3 inv-${SystemEnvironment}-${ServiceName}-app Access\"\r\n      PolicyDocument:\r\n        Version: \"2012-10-17\"\r\n        Statement:\r\n        - Effect: Allow\r\n          Action:\r\n          - s3:List*\r\n          - s3:GetObject\r\n          - s3:PutObject\r\n          - s3:DeleteObject\r\n          Resource:\r\n          - !Sub 'arn:aws:s3:::inv-${SystemEnvironment}-${ServiceName}-app/*'\r\n      Path: /\r\n  S3ReadonlyRole:\r\n    Type: AWS::IAM::Role\r\n    Properties: \r\n      RoleName: !Sub \"inv-${SystemEnvironment}-${ServiceName}-app-S3ReadonlyRole\"\r\n      AssumeRolePolicyDocument:\r\n        Statement:\r\n        - Effect: Allow\r\n          Principal:\r\n            Service:\r\n            - Fn::FindInMap:\r\n              - Region2Principal\r\n              - Ref: AWS::Region\r\n              - S3Principal\r\n          Action:\r\n          - sts:AssumeRole\r\n      ManagedPolicyArns: \r\n       - !Ref S3ReadonlyPolicy\r\n      Path: /\r\n  S3ReadonlyPolicy:\r\n    Type: AWS::IAM::ManagedPolicy\r\n    Properties:\r\n      Description:\r\n        !Sub \"Policy for S3 inv-${SystemEnvironment}-${ServiceName}-app Readonly Access\"\r\n      PolicyDocument:\r\n        Version: \"2012-10-17\"\r\n        Statement:\r\n        - Effect: Allow\r\n          Action:\r\n          - s3:List*\r\n          - s3:GetObject\r\n          Resource:\r\n           !Sub 'arn:aws:s3:::inv-${SystemEnvironment}-${ServiceName}-app/*'\r\n        - Effect: Allow\r\n          Action:\r\n          - s3:List*\r\n          - s3:GetObject\r\n          Resource:\r\n            !Sub 'arn:aws:s3:::inv-${SystemEnvironment}-${ServiceName}-app/*'\r\n        - Effect: Allow\r\n          Action:\r\n          - s3:List*\r\n          - s3:PutObject\r\n          - s3:GetObject\r\n          Resource:\r\n          - !Sub 'arn:aws:s3:::inv-${SystemEnvironment}-${ServiceName}-app/*'\r\n      Path: /\r\nOutputs:\r\n  S3Role:\r\n    Value:\r\n      Ref: S3Role\r\n  S3ReadonlyRole:\r\n    Value:\r\n      Ref: S3ReadonlyRole\r\n...\r\n"
}
INV-ver-htc01-resource-ElastiCacheStack-14T5Z79MJ0BAX
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "---\nAWSTemplateFormatVersion: \"2010-09-09\"\nDescription: 5-1_Elasticache.txt\nParameters:\n  SystemEnvironment:\n    Type: String\n  ServiceName:\n    Type: String\n  SubnetIDA:\n    Type: String\n  SubnetIDC:\n    Type: String\n  SecurityGroup:\n    Type: String\n  ElastiCacheRedisNodeType:\n    Type: String\n  ElastiCacheRedisReplicationCount:\n    Type: String\n  ElastiCacheRedisMultiAZ:\n    Type: String\n  ElastiCacheRedisBackupCount:\n    Type: String\n  ElastiCacheRedisBackupWindow:\n    Type: String\n  ElastiCacheRedisMaintenanceWindow:\n    Type: String\nConditions:\n  MultiAZcluster-enabled: !Equals [!Ref ElastiCacheRedisReplicationCount, 1]\nResources:\n  ECacheSubnet:\n    Type: 'AWS::ElastiCache::SubnetGroup'\n    Properties:\n      Description: !Sub \"inv-${SystemEnvironment}-${ServiceName}-cachesubnetgroup\"\n      SubnetIds:\n        - !Ref SubnetIDA\n        - !Ref SubnetIDC\n  ECacheRedisPG:\n    Type: 'AWS::ElastiCache::ParameterGroup'\n    Properties:\n      CacheParameterGroupFamily: redis5.0\n      Description: \"redis cluster Params\"\n  ECacheRedis:\n    Type: 'AWS::ElastiCache::ReplicationGroup'\n    Properties:\n      AutomaticFailoverEnabled: !Ref ElastiCacheRedisMultiAZ\n      AutoMinorVersionUpgrade: false\n      CacheNodeType: !Ref ElastiCacheRedisNodeType\n      CacheParameterGroupName: !Ref ECacheRedisPG\n      CacheSubnetGroupName: !Ref ECacheSubnet\n      Engine: redis\n      EngineVersion: 5.0.0\n      NumCacheClusters: !Ref ElastiCacheRedisReplicationCount\n      Port: 6379\n      SnapshotRetentionLimit: !Ref ElastiCacheRedisBackupCount\n      SnapshotWindow: !Ref ElastiCacheRedisBackupWindow\n      PreferredMaintenanceWindow: !Ref ElastiCacheRedisMaintenanceWindow\n      ReplicationGroupDescription: !Sub \"inv-${SystemEnvironment}-${ServiceName}-rg\"\n      ReplicationGroupId: !Sub \"inv-${SystemEnvironment}-${ServiceName}-rg\"\n      SecurityGroupIds:\n        - !Ref SecurityGroup\nOutputs:\n  EndpointAddress:\n    Value: !GetAtt\n        - ECacheRedis\n        - PrimaryEndPoint.Address\n  EndpointPort:\n    Value: !GetAtt\n        - ECacheRedis\n        - PrimaryEndPoint.Port\n...\n"
}
INV-ver-htc01-resource-AuroraDBStack-1I9EBMCCIP2BH
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "---\nAWSTemplateFormatVersion: \"2010-09-09\"\nDescription: 4-1_rds.txt\nParameters:\n  ServiceName:\n    Type: String\n  VpcId:\n    Type: String\n  SecurityGroup:\n    Type: String\n  AuroraInstanceType:\n    Type: String\n  SubnetIDA:\n    Type: String\n  SubnetIDC:\n    Type: String\n  SystemEnvironment:\n    Type: String\nMappings:\n  DbSettings:\n    DNS:\n      Cluster: db-cluster\n      InstanceA: db-a\n      InstanceC: db-c\n    DbInitialization:\n      ScriptName: dbinit.zip\n    DbBackUpWindow:\n      Value: 14:00-14:30\n    ClusterMaintainanceWindow:\n      Value: Tue:15:00-Tue:15:30\n    DbMaintainanceWindowA:\n      Value: Mon:15:00-Mon:15:30\n    DbMaintainanceWindowC:\n      Value: Fri:15:00-Fri:15:30\nResources:\n  DbSubnetGroup:\n    Type: AWS::RDS::DBSubnetGroup\n    Properties:\n      DBSubnetGroupDescription: Enable RDS Multi-AZ access.\n      SubnetIds:\n      - !Ref SubnetIDA\n      - !Ref SubnetIDC\n  DbClusterParameterGroup:\n    Type: AWS::RDS::DBClusterParameterGroup\n    Properties:\n      Parameters:\n        character_set_client: utf8\n        character_set_connection: utf8\n        character_set_database: utf8\n        character_set_filesystem: utf8\n        character_set_results: utf8\n        character_set_server: utf8\n        time_zone: UTC\n        lower_case_table_names: \"1\"\n      Family: \"aurora-mysql5.7\"\n      Description: !Sub inv-${SystemEnvironment}-${ServiceName}-Db cluster parameter group\n  DbParameterGroup:\n    Type: AWS::RDS::DBParameterGroup\n    Properties:\n      Family: \"aurora-mysql5.7\"\n      Description: !Sub inv-${SystemEnvironment}-${ServiceName}-Db instance parameter group\n  DbCluster:\n    Type: AWS::RDS::DBCluster\n    #DeletionPolicy: Retain\n    Properties:\n      AvailabilityZones:\n      - ap-northeast-1a\n      - ap-northeast-1c\n      BackupRetentionPeriod: 30\n      MasterUsername: !Sub \"${ServiceName}system\"\n      MasterUserPassword: !Sub \"${ServiceName}#system\"\n      DatabaseName: !Sub inv${SystemEnvironment}${ServiceName}Db\n      Engine: aurora-mysql\n      StorageEncrypted: \"true\"\n      DBSubnetGroupName:\n        !Ref DbSubnetGroup\n      VpcSecurityGroupIds:\n      - !Ref SecurityGroup\n      DBClusterParameterGroupName:\n        !Ref DbClusterParameterGroup\n      PreferredBackupWindow:\n        Fn::FindInMap:\n        - DbSettings\n        - DbBackUpWindow\n        - Value\n      PreferredMaintenanceWindow:\n        Fn::FindInMap:\n        - DbSettings\n        - ClusterMaintainanceWindow\n        - Value\n  DbInstanceA:\n    Type: AWS::RDS::DBInstance\n    #DeletionPolicy: Retain\n    Properties:\n      AvailabilityZone: ap-northeast-1a\n      DBSubnetGroupName:\n        !Ref DbSubnetGroup\n      Engine: aurora-mysql\n      DBClusterIdentifier:\n        !Ref DbCluster\n      DBParameterGroupName:\n        !Ref DbParameterGroup\n      DBInstanceIdentifier: !Sub inv${SystemEnvironment}${ServiceName}DbA\n      DBInstanceClass: !Sub \"${AuroraInstanceType}\"\n      PreferredMaintenanceWindow:\n        Fn::FindInMap:\n        - DbSettings\n        - DbMaintainanceWindowA\n        - Value\n  DbInstanceC:\n    Type: AWS::RDS::DBInstance\n    #DeletionPolicy: Retain\n    Properties:\n      AvailabilityZone: ap-northeast-1c\n      DBSubnetGroupName:\n        !Ref DbSubnetGroup\n      Engine: aurora-mysql\n      DBClusterIdentifier:\n        !Ref DbCluster\n      DBParameterGroupName:\n        !Ref DbParameterGroup\n      DBInstanceIdentifier: !Sub inv${SystemEnvironment}${ServiceName}DbC\n      DBInstanceClass: !Sub \"${AuroraInstanceType}\"\n      PreferredMaintenanceWindow:\n        Fn::FindInMap:\n        - DbSettings\n        - DbMaintainanceWindowC\n        - Value\nOutputs:\n  DbInstanceA:\n    Description: InstanceId of the newly created RDS Instance\n    Value: !Ref DbInstanceA\n  DbInstanceC:\n    Description: InstanceId of the newly created RDS Instance\n    Value: !Ref DbInstanceC\n  EndpointAddress:\n    Value: !GetAtt\n        - DbCluster\n        - Endpoint.Address\n  ReadEndpointAddress:\n    Value: !GetAtt\n        - DbCluster\n        - ReadEndpoint.Address\n  EndpointPort:\n    Value: !GetAtt\n        - DbCluster\n        - Endpoint.Port\n  MasterUsername:\n    Value: !Sub \"${ServiceName}system\"\n  MasterUserPassword:\n    Value: !Sub \"${ServiceName}#system\"\n...\n"
}
INV-ver-htc01-resource-S3Stack-1QNV7PNOZAGRU
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "---\nAWSTemplateFormatVersion: \"2010-09-09\"\nDescription: 2-1_s3.txt\nParameters:\n  ServiceName:\n    Type: String\n  SystemEnvironment:\n    Type: String\nResources:\n  S3SystemBucket:\n    Type: AWS::S3::Bucket\n    #DeletionPolicy: Retain\n    Properties:\n      AccessControl: Private\n      BucketName: !Sub inv-${SystemEnvironment}-${ServiceName}-app\n      VersioningConfiguration:\n        Status: Enabled\n  S3SystemBucketPolicy:\n    Type: AWS::S3::BucketPolicy\n    Properties:\n      Bucket:\n        !Ref S3SystemBucket\n      PolicyDocument:\n        Statement:\n        - Sid: DenyIncorrectEncryptionHeader\n          Effect: Deny\n          Principal: '*'\n          Action: s3:PutObject\n          Resource:\n            Fn::Join:\n            - \"\"\n            - - 'arn:aws:s3:::'\n              - !Ref S3SystemBucket\n              - /*\n          Condition:\n            StringNotEquals:\n              s3:x-amz-server-side-encryption: AES256\n        - Sid: DenyUnEncryptedObjectUploads\n          Effect: Deny\n          Principal: '*'\n          Action: s3:PutObject\n          Resource:\n            Fn::Join:\n            - \"\"\n            - - 'arn:aws:s3:::'\n              - !Ref S3SystemBucket\n              - /*\n          Condition:\n            \"Null\":\n              s3:x-amz-server-side-encryption: \"true\"\nOutputs:\n  S3BucketName:\n    Value:\n      !Ref S3SystemBucket\n...\n \n"
}
INV-ver-htc01-resource-SecurityGroupStack-1098GFM8TTTD
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "---\r\nAWSTemplateFormatVersion: 2010-09-09\r\nDescription: 3-1_securitygroup.txt\r\nParameters:\r\n  VpcId:\r\n    Type: String\r\n#  PublicAppSg:\r\n#    Type: AWS::EC2::SecurityGroup::Id\r\n#  InternalAppSg:\r\n#    Type: AWS::EC2::SecurityGroup::Id\r\nResources:\r\n  SgElastiCacheAccess:\r\n    Type: 'AWS::EC2::SecurityGroup'\r\n    Properties:\r\n      GroupDescription: HTC Redis Security Group\r\n      VpcId:\r\n        Ref: VpcId\r\n#  InternalAppSgElastiCacheAccessIngress:\r\n#    Type: 'AWS::EC2::SecurityGroupIngress'\r\n#    Properties:\r\n#      IpProtocol: tcp\r\n#      FromPort: '6379'\r\n#      ToPort: '6379'\r\n#      SourceSecurityGroupId: !Ref InternalAppSg\r\n#      GroupId:\r\n#        !GetAtt\r\n#          - SgElastiCacheAccess\r\n#          - GroupId\r\n#  PublicAppSgElastiCacheAccessIngress:\r\n#    Type: 'AWS::EC2::SecurityGroupIngress'\r\n#    Properties:\r\n#      IpProtocol: tcp\r\n#      FromPort: '6379'\r\n#      ToPort: '6379'\r\n#      SourceSecurityGroupId: !Ref PublicAppSg\r\n#      GroupId:\r\n#        !GetAtt\r\n#          - SgElastiCacheAccess\r\n#          - GroupId\r\n\r\n  SgAuroraDbAccess:\r\n    Type: 'AWS::EC2::SecurityGroup'\r\n    Properties:\r\n      GroupDescription: HTC Db Security Group\r\n      VpcId:\r\n        Ref: VpcId\r\n#  InternalSgAuroraDbAccessIngress:\r\n#    Type: 'AWS::EC2::SecurityGroupIngress'\r\n#    Properties:\r\n#      IpProtocol: tcp\r\n#      FromPort: '3306'\r\n#      ToPort: '3306'\r\n#      SourceSecurityGroupId: !Ref InternalAppSg\r\n#      GroupId:\r\n#        !GetAtt\r\n#          - SgAuroraDbAccess\r\n#          - GroupId\r\n#  PublicSgAuroraDbAccessIngress:\r\n#    Type: 'AWS::EC2::SecurityGroupIngress'\r\n#    Properties:\r\n#      IpProtocol: tcp\r\n#      FromPort: '3306'\r\n#      ToPort: '3306'\r\n#      SourceSecurityGroupId: !Ref PublicAppSg\r\n#      GroupId:\r\n#        !GetAtt\r\n#          - SgAuroraDbAccess\r\n#          - GroupId\r\nOutputs:\r\n  AuroraDbAccessInstance:\r\n    Value:\r\n      Ref: SgAuroraDbAccess\n  ElastiCacheAccessInstance:\r\n    Value:\r\n      Ref: SgElastiCacheAccess\n...\r\n"
}
INV-ver-htc01-resource
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "---\r\nAWSTemplateFormatVersion: \"2010-09-09\"\r\nDescription: 0-1_base.txt\r\nMetadata:\r\n  AWS::CloudFormation::Interface:\r\n    ParameterGroups:\r\n    - Label:\r\n        default: Configuration\r\n      Parameters:\r\n      - SystemEnvironment\r\n      - ServiceName\r\n      - VpcId\r\n      - SubnetIDA\r\n      - SubnetIDC\n#      - InternalAppSg\n#      - PublicAppSg\r\n    - Label:\r\n        default: Configuration for RDS\r\n      Parameters:\r\n      - AuroraInstanceType\n    - Label:\r\n        default: Configuration for ElastiCache\r\n      Parameters:\r\n      - ElastiCacheRedisNodeType\r\n      - ElastiCacheRedisReplicationCount\r\n      - ElastiCacheRedisMultiAZ\r\n      - ElastiCacheRedisBackupCount\r\n      - ElastiCacheRedisBackupWindow\r\n      - ElastiCacheRedisMaintenanceWindow\r\n    ParameterLabels:\r\n      SystemEnvironment:\r\n        default: Environment\r\n      ServiceName:\r\n        default: ServiceName\r\n      VpcId:\r\n        default: VpcId\r\n      SubnetIDA:\r\n        default: SubnetIDA\r\n      SubnetIDC:\r\n        default: SubnetIDC\r\n#      InternalAppSg:\r\n#        default: InternalAppSg\r\n#      PublicAppSg:\r\n#        defualt: PublicAppSg\r\n      AuroraInstanceType:\r\n        default: AuroraInstanceType\r\n      ElastiCacheRedisNodeType:\r\n        default: ElastiCacheRedisNodeType\r\n      ElastiCacheRedisReplicationCount:\r\n        default: ElastiCacheRedisReplicationCount\r\n      ElastiCacheRedisMultiAZ:\n        default: ElastiCacheRedisMultiAZ\r\n      ElastiCacheRedisBackupCount:\r\n        default: ElastiCacheRedisBackupCount\r\n      ElastiCacheRedisBackupWindow:\r\n        default: ElastiCacheRedisBackupWindow\r\n      ElastiCacheRedisMaintenanceWindow:\r\n        default: ElastiCacheRedisMaintenanceWindow\r\nParameters:\r\n  SystemEnvironment:\r\n    Type: String\r\n    Default: dev\r\n    AllowedValues:\r\n    - dev\r\n    - ver\r\n    - prd\r\n    Description: '*(Required)* Environment Identifier'\r\n  ServiceName:\r\n    Type: String\n    Default: htc01\r\n    AllowedValues:\r\n    - htc01\r\n    Description: '*(Required)* ServiceName'\r\n  VpcId:\r\n    Type: AWS::EC2::VPC::Id\r\n    Description: '*(Required)* VPC ID'\r\n  SubnetIDA:\r\n    Type: AWS::EC2::Subnet::Id\r\n    Description: '*(Required)* Subnet ID(ap-northeast-1a)'\r\n  SubnetIDC:\r\n    Type: AWS::EC2::Subnet::Id\r\n    Description: '*(Required)* Subnet ID(ap-northeast-1c)'\r\n#  InternalAppSg:\r\n#    Type: AWS::EC2::SecurityGroup::Id\r\n#  PublicAppSg:\r\n#    Type: AWS::EC2::SecurityGroup::Id\r\n  AuroraInstanceType:\r\n    Type: String\r\n    AllowedValues:\r\n    - db.t2.small\r\n    - db.t2.medium\r\n    - db.t2.large\r\n    - db.t2.xlarge\r\n    - db.t2.2xlarge\r\n    - db.r4.large\r\n    - db.r4.xlarge\r\n    - db.r4.2xlarge\r\n    - db.r4.4xlarge\r\n    - db.r4.8xlarge\r\n    - db.r4.16xlarge\r\n    - db.x1e.xlarge\r\n    - db.x1e.2xlarge\r\n    - db.x1e.4xlarge\r\n    - db.x1e.8xlarge\r\n    - db.x1e.16xlarge\r\n    - db.x1e.32xlarge\r\n    - db.x1.16xlarge\r\n    - db.x1.32xlarge\r\n    - db.m5.large\r\n    - db.m5.xlarge\r\n    - db.m5.2xlarge\r\n    - db.m5.4xlarge\r\n    - db.m5.12xlarge\r\n    - db.m5.24xlarge\r\n    Description: '*(Required)* Aurora Instance Type'\r\n  ElastiCacheRedisNodeType:\r\n    Type: String\r\n    AllowedValues:\r\n    - cache.t2.micro\r\n    - cache.t2.small\r\n    - cache.t2.medium\r\n    - cache.m5.large\r\n    - cache.m5.xlarge\r\n    - cache.m5.2xlarge\r\n    - cache.m5.4xlarge\r\n    - cache.m5.12xlarge\r\n    - cache.m5.24xlarge\r\n    - cache.r5.large\r\n    - cache.r5.xlarge\r\n    - cache.r5.2xlarge\r\n    - cache.r5.4xlarge\r\n    - cache.r5.12xlarge\r\n    - cache.r5.24xlarge\r\n    Description: '*(Required)* Type and the associated memory size of the nodes to be deployed'\r\n  ElastiCacheRedisReplicationCount:\r\n    Type: String\r\n    Default: 2\r\n    AllowedPattern: '[1-5]'\r\n    Description: '*(Required)* Input number of replicas between 0 and 5. Zero replicas will not enable an enhanced cluster with primary/replica roles.'\r\n  ElastiCacheRedisMultiAZ:\r\n    Type: String\r\n    AllowedValues:\r\n    - true\r\n    - false\r\n    Description: '*(Required)* ElastiCache Multi-AZ provides enhanced High Availability through automatic failover to a read replica in case of a primary node failure.'\r\n  ElastiCacheRedisBackupCount:\r\n    Type: String\r\n    Default: 2\r\n    AllowedPattern: '[0-9]|[1-2][0-9]|3[0-5]'\r\n    Description: 'The number of days for which automated backups are retained before they are automatically deleted'\r\n  ElastiCacheRedisBackupWindow:\r\n    Type: String\r\n    Description: 'The time range (in UTC) when ElastiCache takes a daily snapshot of the node group that you specified in the SnapshottingClusterId property. For example, you can specify 05:00-09:00.'\r\n  ElastiCacheRedisMaintenanceWindow:\r\n    Type: String\r\n    Description: 'The weekly time range during which system maintenance can occur. Use the following format to specify a time range: ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). For example, you can specify sun:22:00-sun:23:30 for Sunday from 10 PM to 11:30 PM.'\r\n    Type: String\r\nResources:\r\n  IAMRoleStack:\r\n    Type: AWS::CloudFormation::Stack\r\n    DependsOn: S3Stack\r\n    Properties:\r\n      TemplateURL: !Sub \"https://s3-ap-northeast-1.amazonaws.com/inv-${SystemEnvironment}-${ServiceName}-cfn/resources/1-1_iam.txt\"\r\n      Parameters:\r\n        ServiceName: !Ref ServiceName\r\n        SystemEnvironment: !Ref SystemEnvironment\r\n      TimeoutInMinutes: \"5\"\r\n  S3Stack:\r\n    Type: AWS::CloudFormation::Stack\r\n    Properties:\r\n      TemplateURL: !Sub \"https://s3-ap-northeast-1.amazonaws.com/inv-${SystemEnvironment}-${ServiceName}-cfn/resources/2-1_s3.txt\"\r\n      Parameters:\r\n        ServiceName: !Ref ServiceName\r\n        SystemEnvironment: !Ref SystemEnvironment\r\n      TimeoutInMinutes: \"5\"\r\n  SecurityGroupStack:\r\n    Type: AWS::CloudFormation::Stack\r\n    Properties:\r\n      TemplateURL: !Sub \"https://s3-ap-northeast-1.amazonaws.com/inv-${SystemEnvironment}-${ServiceName}-cfn/resources/3-1_securitygroup.txt\"\r\n      TimeoutInMinutes: \"5\"\r\n      Parameters:\r\n        VpcId: !Ref VpcId\r\n#        PublicAppSg: !Ref PublicAppSg\r\n#        InternalAppSg: !Ref InternalAppSg\r\n  AuroraDBStack:\r\n    Type: AWS::CloudFormation::Stack\r\n    DependsOn: SecurityGroupStack\r\n    Properties:\r\n      TemplateURL: !Sub \"https://s3-ap-northeast-1.amazonaws.com/inv-${SystemEnvironment}-${ServiceName}-cfn/resources/4-1_rds.txt\"\r\n      TimeoutInMinutes: \"30\"\r\n      Parameters:\r\n        ServiceName: !Ref ServiceName\r\n        VpcId: !Ref VpcId\r\n        SecurityGroup:\r\n          !GetAtt\r\n          - SecurityGroupStack\r\n          - Outputs.AuroraDbAccessInstance\r\n        AuroraInstanceType: !Ref AuroraInstanceType\r\n        SubnetIDA: !Ref SubnetIDA\r\n        SubnetIDC: !Ref SubnetIDC\r\n        SystemEnvironment: !Ref SystemEnvironment\r\n  ElastiCacheStack:\r\n    Type: AWS::CloudFormation::Stack\r\n    DependsOn: SecurityGroupStack\r\n    Properties:\r\n      Parameters:\r\n        SystemEnvironment:\r\n          !Ref SystemEnvironment\r\n        ServiceName:\r\n          !Ref ServiceName\r\n        SubnetIDA:\r\n          !Ref SubnetIDA\r\n        SubnetIDC:\r\n          !Ref SubnetIDC\r\n        SecurityGroup:\r\n          !GetAtt\r\n          - SecurityGroupStack\r\n          - Outputs.ElastiCacheAccessInstance\r\n        ElastiCacheRedisNodeType:\r\n          !Ref ElastiCacheRedisNodeType\r\n        ElastiCacheRedisReplicationCount:\r\n          !Ref ElastiCacheRedisReplicationCount\r\n        ElastiCacheRedisMultiAZ:\r\n          !Ref ElastiCacheRedisMultiAZ\r\n        ElastiCacheRedisBackupCount:\r\n          !Ref ElastiCacheRedisBackupCount\r\n        ElastiCacheRedisBackupWindow:\r\n          !Ref ElastiCacheRedisBackupWindow\r\n        ElastiCacheRedisMaintenanceWindow:\r\n          !Ref ElastiCacheRedisMaintenanceWindow\r\n      TemplateURL: !Sub \"https://s3-ap-northeast-1.amazonaws.com/inv-${SystemEnvironment}-${ServiceName}-cfn/resources/5-1_elasticache.txt\"\r\n      TimeoutInMinutes: \"30\"\r\nOutputs:\r\n  ServiceNameEnvironment:\r\n    Value:\r\n      !Join\r\n      - '-'\r\n      - - !Ref ServiceName\r\n        - !Ref SystemEnvironment\r\n...\r\n"
}
INV-ver-htc01-bastion
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: 2010-09-09\nDescription: Bastion EC2\nParameters:\n  accountAllias:\n    Type: String\n  amiId:\n    Type: String\nResources:\n  SSHSecurityGroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      VpcId: !ImportValue VPC\n      GroupName: !Sub ${accountAllias}-bastion-sg\n      GroupDescription: !Sub ${accountAllias}-bastion-sg\n      Tags:\n        - Key: Name\n          Value: !Sub ${accountAllias}-bastion-sg\n  EC2:\n    Type: AWS::EC2::Instance\n    Properties:\n      ImageId: !Ref amiId\n      InstanceType: t3.micro\n      KeyName: !Sub ${accountAllias}-bastion-key\n      NetworkInterfaces:\n        - AssociatePublicIpAddress: true\n          SubnetId: !ImportValue PublicSubnet1a\n          DeviceIndex: 0\n          GroupSet:\n            - !Ref SSHSecurityGroup\n      UserData:\n        Fn::Base64: !Sub |\n          #!/bin/bash\n          yum -y update\n      Tags:\n        - Key: Name\n          Value: !Sub ${accountAllias}-bastion\n  EIP:\n    Type: AWS::EC2::EIP\n    Properties:\n      Domain: vpc\n  AssociateEIP:\n    Type: AWS::EC2::EIPAssociation\n    Properties:\n      EIP: !Ref EIP\n      InstanceId: !Ref EC2\nOutputs:\n  EC2:\n    Value: !Ref EC2\n    Export:\n      Name: BastionEC2\n  EIP:\n    Value: !Ref EIP\n    Export:\n      Name: BastionIP\n"
}
INV-ver-htc01-ver-cer01
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: Create Service Endpoint\n\nParameters:\n  serviceAlliasLowerCase:\n    Type: String\n  serviceName:\n    Type: String\n  cidr:\n    Type: String\n\nResources:\n\n  endpointSecuritygroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupName: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      GroupDescription: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      Tags:\n        - Key: Name\n          Value: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      VpcId: !ImportValue VPC\n      SecurityGroupIngress:\n        - IpProtocol: tcp\n          FromPort: 80\n          ToPort: 80\n          CidrIp: !Ref cidr\n  endpoint:\n    Type: AWS::EC2::VPCEndpoint\n    Properties:\n      VpcEndpointType: Interface\n      VpcId: !ImportValue VPC\n      SubnetIds:\n        - !ImportValue PrivateSubnet1a\n        - !ImportValue PrivateSubnet1c\n      SecurityGroupIds:\n        - !Ref endpointSecuritygroup\n      ServiceName: !Ref serviceName\n      PrivateDnsEnabled: false\n"
}
StackSet-cfn-exec-ec2-b8dd350b-4c69-490f-831e-c43d3dccd36b
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: 2010-09-09\nDescription: CloudFormation Execute EC2\nParameters:\n  amiId:\n    Type: String\n    Default: ami-0d7ed3ddb85b521a6\n  SshCidr1:\n    Type: String\n    Default: 121.2.65.36/32\n  SshCidr2:\n    Type: String\n    Default: 39.110.201.10/32\n  SshCidr3:\n    Type: String\n    Default: 222.11.38.119/32\n  SshCidr4:\n    Type: String\n    Default: 1.21.118.25/32\n  SshCidr5:\n    Type: String\n    Default: 153.163.63.48/32\n  SshCidr6:\n    Type: String\n    Default: 13.231.11.115/32\nResources:\n  EC2Role:\n    Type: \"AWS::IAM::Role\"\n    Properties:\n      RoleName: cfn-exec-ec2-role\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/AdministratorAccess\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement:\n          -\n            Effect: \"Allow\"\n            Principal:\n              Service:\n                - \"ec2.amazonaws.com\"\n            Action:\n              - \"sts:AssumeRole\"\n      Path: \"/\"\n  Profile:\n    Type: AWS::IAM::InstanceProfile\n    Properties:\n      Roles:\n        - !Ref EC2Role\n  SSHSecurityGroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupName: cfn-exec-sg\n      GroupDescription: cfn-exec-sg\n      SecurityGroupIngress:\n      - IpProtocol: tcp\n        FromPort: '22'\n        ToPort: '22'\n        CidrIp: !Ref SshCidr1\n        Description: Classmethod\n      - IpProtocol: tcp\n        FromPort: '22'\n        ToPort: '22'\n        CidrIp: !Ref SshCidr2\n        Description: Classmethod\n      - IpProtocol: tcp\n        FromPort: '22'\n        ToPort: '22'\n        CidrIp: !Ref SshCidr3\n        Description: Classmethod\n      - IpProtocol: tcp\n        FromPort: '22'\n        ToPort: '22'\n        CidrIp: !Ref SshCidr4\n        Description: Classmethod\n      - IpProtocol: tcp\n        FromPort: '22'\n        ToPort: '22'\n        CidrIp: !Ref SshCidr5\n        Description: Classmethod\n      - IpProtocol: tcp\n        FromPort: '22'\n        ToPort: '22'\n        CidrIp: !Ref SshCidr6\n        Description: Classmethod\n      Tags:\n        - Key: Name\n          Value: cfn-exec-sg\n  EC2:\n    Type: AWS::EC2::Instance\n    Properties:\n      ImageId: !Ref amiId\n      InstanceType: t3.micro\n      KeyName: cfn-exec-key\n      IamInstanceProfile: !Ref Profile\n      NetworkInterfaces:\n        - AssociatePublicIpAddress: true\n          DeviceIndex: 0\n          GroupSet:\n            - !GetAtt SSHSecurityGroup.GroupId\n      UserData:\n        Fn::Base64: !Sub |\n          #!/bin/bash\n          yum -y update\n          yum -y install git\n      Tags:\n        - Key: Name\n          Value: cfn-exec\n  EIP:\n    Type: AWS::EC2::EIP\n    Properties:\n      Domain: vpc\n  AssociateEIP:\n    Type: AWS::EC2::EIPAssociation\n    Properties:\n      EIP: !Ref EIP\n      InstanceId: !Ref EC2\nOutputs:\n  EC2:\n    Value: !Ref EC2\n    Export:\n      Name: cfn-exex-ec2\n  EIP:\n    Value: !Ref EIP\n    Export:\n      Name: cfn-exex-IP\n"
}
INV-ver-htc01-mypage-api
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: Create Service Endpoint\n\nParameters:\n  arrowedAccountId1:\n    Type: String\n  apiName:\n    Type: String\n\nResources:\n  internalTargetGroup:\n    Type: AWS::ElasticLoadBalancingV2::TargetGroup\n    Properties:\n      HealthCheckIntervalSeconds: 30\n      HealthCheckPath: /healthcheck\n      HealthCheckPort: 80\n      HealthCheckProtocol: HTTP\n      HealthCheckTimeoutSeconds: 6\n      HealthyThresholdCount: 3\n      Name: !Sub ${apiName}-internal-tg\n      Port: 80\n      Protocol: TCP\n      UnhealthyThresholdCount: 3\n      TargetType: ip\n      VpcId: !ImportValue VPC\n  internalNlb:\n    Type: AWS::ElasticLoadBalancingV2::LoadBalancer\n    Properties:\n      Name: !Sub ${apiName}-internal-nlb\n      Scheme: internal\n      Subnets:\n        - !ImportValue PrivateSubnet1a\n        - !ImportValue PrivateSubnet1c\n      Tags:\n        - Key: Name\n          Value: !Sub ${apiName}-internal-nlb\n      Type: network\n      LoadBalancerAttributes:\n        - Key: load_balancing.cross_zone.enabled\n          Value: true\n  internallistnener:\n    Type: AWS::ElasticLoadBalancingV2::Listener\n    Properties:\n      DefaultActions:\n        - TargetGroupArn: !Ref internalTargetGroup\n          Type: forward\n      LoadBalancerArn: !Ref internalNlb\n      Port: 80\n      Protocol: TCP\n\n  endpointService:\n    Type: \"AWS::EC2::VPCEndpointService\"\n    Properties:\n      NetworkLoadBalancerArns:\n        - !Ref internalNlb\n      AcceptanceRequired: false\n  servicePermisstions:\n    Type: \"AWS::EC2::VPCEndpointServicePermissions\"\n    Properties:\n      AllowedPrincipals:\n        - !Sub arn:aws:iam::${arrowedAccountId1}:root\n      ServiceId: !Ref endpointService\n\nOutputs:\n  internalTargetGroup:\n    Value: !Ref internalTargetGroup\n    Export:\n      Name: !Sub ${apiName}-internalTargetGroup\n  internalNlb:\n    Value: !Ref internalNlb\n    Export:\n      Name: !Sub ${apiName}-internalNlb\n  endpointService:\n    Value: !Ref endpointService\n    Export:\n      Name: !Sub ${apiName}-endpointService\n"
}
INV-ver-htc01-mypage-web
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: Create Service Endpoint\n\nParameters:\n  arrowedAccountId1:\n    Type: String\n  apiName:\n    Type: String\n\nResources:\n  internalTargetGroup:\n    Type: AWS::ElasticLoadBalancingV2::TargetGroup\n    Properties:\n      HealthCheckIntervalSeconds: 30\n      HealthCheckPath: /healthcheck\n      HealthCheckPort: 80\n      HealthCheckProtocol: HTTP\n      HealthCheckTimeoutSeconds: 6\n      HealthyThresholdCount: 3\n      Name: !Sub ${apiName}-internal-tg\n      Port: 80\n      Protocol: TCP\n      UnhealthyThresholdCount: 3\n      TargetType: ip\n      VpcId: !ImportValue VPC\n  internalNlb:\n    Type: AWS::ElasticLoadBalancingV2::LoadBalancer\n    Properties:\n      Name: !Sub ${apiName}-internal-nlb\n      Scheme: internal\n      Subnets:\n        - !ImportValue PrivateSubnet1a\n        - !ImportValue PrivateSubnet1c\n      Tags:\n        - Key: Name\n          Value: !Sub ${apiName}-internal-nlb\n      Type: network\n      LoadBalancerAttributes:\n        - Key: load_balancing.cross_zone.enabled\n          Value: true\n  internallistnener:\n    Type: AWS::ElasticLoadBalancingV2::Listener\n    Properties:\n      DefaultActions:\n        - TargetGroupArn: !Ref internalTargetGroup\n          Type: forward\n      LoadBalancerArn: !Ref internalNlb\n      Port: 80\n      Protocol: TCP\n\n  endpointService:\n    Type: \"AWS::EC2::VPCEndpointService\"\n    Properties:\n      NetworkLoadBalancerArns:\n        - !Ref internalNlb\n      AcceptanceRequired: false\n  servicePermisstions:\n    Type: \"AWS::EC2::VPCEndpointServicePermissions\"\n    Properties:\n      AllowedPrincipals:\n        - !Sub arn:aws:iam::${arrowedAccountId1}:root\n      ServiceId: !Ref endpointService\n\nOutputs:\n  internalTargetGroup:\n    Value: !Ref internalTargetGroup\n    Export:\n      Name: !Sub ${apiName}-internalTargetGroup\n  internalNlb:\n    Value: !Ref internalNlb\n    Export:\n      Name: !Sub ${apiName}-internalNlb\n  endpointService:\n    Value: !Ref endpointService\n    Export:\n      Name: !Sub ${apiName}-endpointService\n"
}
INV-ver-htc01-connected-web
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: Create Service Endpoint\n\nParameters:\n  arrowedAccountId1:\n    Type: String\n  apiName:\n    Type: String\n\nResources:\n  internalTargetGroup:\n    Type: AWS::ElasticLoadBalancingV2::TargetGroup\n    Properties:\n      HealthCheckIntervalSeconds: 30\n      HealthCheckPath: /healthcheck\n      HealthCheckPort: 80\n      HealthCheckProtocol: HTTP\n      HealthCheckTimeoutSeconds: 6\n      HealthyThresholdCount: 3\n      Name: !Sub ${apiName}-internal-tg\n      Port: 80\n      Protocol: TCP\n      UnhealthyThresholdCount: 3\n      TargetType: ip\n      VpcId: !ImportValue VPC\n  internalNlb:\n    Type: AWS::ElasticLoadBalancingV2::LoadBalancer\n    Properties:\n      Name: !Sub ${apiName}-internal-nlb\n      Scheme: internal\n      Subnets:\n        - !ImportValue PrivateSubnet1a\n        - !ImportValue PrivateSubnet1c\n      Tags:\n        - Key: Name\n          Value: !Sub ${apiName}-internal-nlb\n      Type: network\n      LoadBalancerAttributes:\n        - Key: load_balancing.cross_zone.enabled\n          Value: true\n  internallistnener:\n    Type: AWS::ElasticLoadBalancingV2::Listener\n    Properties:\n      DefaultActions:\n        - TargetGroupArn: !Ref internalTargetGroup\n          Type: forward\n      LoadBalancerArn: !Ref internalNlb\n      Port: 80\n      Protocol: TCP\n\n  endpointService:\n    Type: \"AWS::EC2::VPCEndpointService\"\n    Properties:\n      NetworkLoadBalancerArns:\n        - !Ref internalNlb\n      AcceptanceRequired: false\n  servicePermisstions:\n    Type: \"AWS::EC2::VPCEndpointServicePermissions\"\n    Properties:\n      AllowedPrincipals:\n        - !Sub arn:aws:iam::${arrowedAccountId1}:root\n      ServiceId: !Ref endpointService\n\nOutputs:\n  internalTargetGroup:\n    Value: !Ref internalTargetGroup\n    Export:\n      Name: !Sub ${apiName}-internalTargetGroup\n  internalNlb:\n    Value: !Ref internalNlb\n    Export:\n      Name: !Sub ${apiName}-internalNlb\n  endpointService:\n    Value: !Ref endpointService\n    Export:\n      Name: !Sub ${apiName}-endpointService\n"
}
INV-ver-htc01-connected-incar
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: Create Service Endpoint\n\nParameters:\n  arrowedAccountId1:\n    Type: String\n  apiName:\n    Type: String\n\nResources:\n  internalTargetGroup:\n    Type: AWS::ElasticLoadBalancingV2::TargetGroup\n    Properties:\n      HealthCheckIntervalSeconds: 30\n      HealthCheckPath: /healthcheck\n      HealthCheckPort: 80\n      HealthCheckProtocol: HTTP\n      HealthCheckTimeoutSeconds: 6\n      HealthyThresholdCount: 3\n      Name: !Sub ${apiName}-internal-tg\n      Port: 80\n      Protocol: TCP\n      UnhealthyThresholdCount: 3\n      TargetType: ip\n      VpcId: !ImportValue VPC\n  internalNlb:\n    Type: AWS::ElasticLoadBalancingV2::LoadBalancer\n    Properties:\n      Name: !Sub ${apiName}-internal-nlb\n      Scheme: internal\n      Subnets:\n        - !ImportValue PrivateSubnet1a\n        - !ImportValue PrivateSubnet1c\n      Tags:\n        - Key: Name\n          Value: !Sub ${apiName}-internal-nlb\n      Type: network\n      LoadBalancerAttributes:\n        - Key: load_balancing.cross_zone.enabled\n          Value: true\n  internallistnener:\n    Type: AWS::ElasticLoadBalancingV2::Listener\n    Properties:\n      DefaultActions:\n        - TargetGroupArn: !Ref internalTargetGroup\n          Type: forward\n      LoadBalancerArn: !Ref internalNlb\n      Port: 80\n      Protocol: TCP\n\n  endpointService:\n    Type: \"AWS::EC2::VPCEndpointService\"\n    Properties:\n      NetworkLoadBalancerArns:\n        - !Ref internalNlb\n      AcceptanceRequired: false\n  servicePermisstions:\n    Type: \"AWS::EC2::VPCEndpointServicePermissions\"\n    Properties:\n      AllowedPrincipals:\n        - !Sub arn:aws:iam::${arrowedAccountId1}:root\n      ServiceId: !Ref endpointService\n\nOutputs:\n  internalTargetGroup:\n    Value: !Ref internalTargetGroup\n    Export:\n      Name: !Sub ${apiName}-internalTargetGroup\n  internalNlb:\n    Value: !Ref internalNlb\n    Export:\n      Name: !Sub ${apiName}-internalNlb\n  endpointService:\n    Value: !Ref endpointService\n    Export:\n      Name: !Sub ${apiName}-endpointService\n"
}
INV-ver-htc01-connected-api
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: Create Service Endpoint\n\nParameters:\n  arrowedAccountId1:\n    Type: String\n  arrowedAccountId2:\n    Type: String\n  apiName:\n    Type: String\n\nResources:\n  internalTargetGroup:\n    Type: AWS::ElasticLoadBalancingV2::TargetGroup\n    Properties:\n      HealthCheckIntervalSeconds: 30\n      HealthCheckPath: /healthcheck\n      HealthCheckPort: 80\n      HealthCheckProtocol: HTTP\n      HealthCheckTimeoutSeconds: 6\n      HealthyThresholdCount: 3\n      Name: !Sub ${apiName}-internal-tg\n      Port: 80\n      Protocol: TCP\n      UnhealthyThresholdCount: 3\n      TargetType: ip\n      VpcId: !ImportValue VPC\n  internalNlb:\n    Type: AWS::ElasticLoadBalancingV2::LoadBalancer\n    Properties:\n      Name: !Sub ${apiName}-internal-nlb\n      Scheme: internal\n      Subnets:\n        - !ImportValue PrivateSubnet1a\n        - !ImportValue PrivateSubnet1c\n      Tags:\n        - Key: Name\n          Value: !Sub ${apiName}-internal-nlb\n      Type: network\n      LoadBalancerAttributes:\n        - Key: load_balancing.cross_zone.enabled\n          Value: true\n  internallistnener:\n    Type: AWS::ElasticLoadBalancingV2::Listener\n    Properties:\n      DefaultActions:\n        - TargetGroupArn: !Ref internalTargetGroup\n          Type: forward\n      LoadBalancerArn: !Ref internalNlb\n      Port: 80\n      Protocol: TCP\n\n  endpointService:\n    Type: \"AWS::EC2::VPCEndpointService\"\n    Properties:\n      NetworkLoadBalancerArns:\n        - !Ref internalNlb\n      AcceptanceRequired: false\n  servicePermisstions:\n    Type: \"AWS::EC2::VPCEndpointServicePermissions\"\n    Properties:\n      AllowedPrincipals:\n        - !Sub arn:aws:iam::${arrowedAccountId1}:root\n        - !Sub arn:aws:iam::${arrowedAccountId2}:root\n      ServiceId: !Ref endpointService\n\nOutputs:\n  internalTargetGroup:\n    Value: !Ref internalTargetGroup\n    Export:\n      Name: !Sub ${apiName}-internalTargetGroup\n  internalNlb:\n    Value: !Ref internalNlb\n    Export:\n      Name: !Sub ${apiName}-internalNlb\n  endpointService:\n    Value: !Ref endpointService\n    Export:\n      Name: !Sub ${apiName}-endpointService\n"
}
INV-ver-htc01-web-ver-sub01
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: Create Service Endpoint\n\nParameters:\n  serviceAlliasLowerCase:\n    Type: String\n  serviceName:\n    Type: String\n  cidr:\n    Type: String\n\nResources:\n\n  endpointSecuritygroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupName: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      GroupDescription: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      Tags:\n        - Key: Name\n          Value: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      VpcId: !ImportValue VPC\n      SecurityGroupIngress:\n        - IpProtocol: tcp\n          FromPort: 80\n          ToPort: 80\n          CidrIp: !Ref cidr\n  endpoint:\n    Type: AWS::EC2::VPCEndpoint\n    Properties:\n      VpcEndpointType: Interface\n      VpcId: !ImportValue VPC\n      SubnetIds:\n        - !ImportValue PrivateSubnet1a\n        - !ImportValue PrivateSubnet1c\n      SecurityGroupIds:\n        - !Ref endpointSecuritygroup\n      ServiceName: !Ref serviceName\n      PrivateDnsEnabled: false\n"
}
INV-ver-htc01-vehicle-api-ver-ysd
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: Create Service Endpoint\n\nParameters:\n  serviceAlliasLowerCase:\n    Type: String\n  serviceName:\n    Type: String\n  cidr:\n    Type: String\n\nResources:\n\n  endpointSecuritygroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupName: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      GroupDescription: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      Tags:\n        - Key: Name\n          Value: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      VpcId: !ImportValue VPC\n      SecurityGroupIngress:\n        - IpProtocol: tcp\n          FromPort: 80\n          ToPort: 80\n          CidrIp: !Ref cidr\n  endpoint:\n    Type: AWS::EC2::VPCEndpoint\n    Properties:\n      VpcEndpointType: Interface\n      VpcId: !ImportValue VPC\n      SubnetIds:\n        - !ImportValue PrivateSubnet1a\n        - !ImportValue PrivateSubnet1c\n      SecurityGroupIds:\n        - !Ref endpointSecuritygroup\n      ServiceName: !Ref serviceName\n      PrivateDnsEnabled: false\n"
}
INV-ver-htc01-tnk401-ver1-dv-ysd
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: Create Service Endpoint\n\nParameters:\n  serviceAlliasLowerCase:\n    Type: String\n  serviceName:\n    Type: String\n  cidr:\n    Type: String\n\nResources:\n\n  endpointSecuritygroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupName: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      GroupDescription: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      Tags:\n        - Key: Name\n          Value: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      VpcId: !ImportValue VPC\n      SecurityGroupIngress:\n        - IpProtocol: tcp\n          FromPort: 80\n          ToPort: 80\n          CidrIp: !Ref cidr\n  endpoint:\n    Type: AWS::EC2::VPCEndpoint\n    Properties:\n      VpcEndpointType: Interface\n      VpcId: !ImportValue VPC\n      SubnetIds:\n        - !ImportValue PrivateSubnet1a\n        - !ImportValue PrivateSubnet1c\n      SecurityGroupIds:\n        - !Ref endpointSecuritygroup\n      ServiceName: !Ref serviceName\n      PrivateDnsEnabled: false\n"
}
INV-ver-htc01-fpa9101-ver2-dv
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: Create Service Endpoint\n\nParameters:\n  serviceAlliasLowerCase:\n    Type: String\n  serviceName:\n    Type: String\n  cidr:\n    Type: String\n\nResources:\n\n  endpointSecuritygroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupName: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      GroupDescription: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      Tags:\n        - Key: Name\n          Value: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      VpcId: !ImportValue VPC\n      SecurityGroupIngress:\n        - IpProtocol: tcp\n          FromPort: 80\n          ToPort: 80\n          CidrIp: !Ref cidr\n  endpoint:\n    Type: AWS::EC2::VPCEndpoint\n    Properties:\n      VpcEndpointType: Interface\n      VpcId: !ImportValue VPC\n      SubnetIds:\n        - !ImportValue PrivateSubnet1a\n        - !ImportValue PrivateSubnet1c\n      SecurityGroupIds:\n        - !Ref endpointSecuritygroup\n      ServiceName: !Ref serviceName\n      PrivateDnsEnabled: false\n"
}
INV-ver-htc01-fpa9101-ver1-dv
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: Create Service Endpoint\n\nParameters:\n  serviceAlliasLowerCase:\n    Type: String\n  serviceName:\n    Type: String\n  cidr:\n    Type: String\n\nResources:\n\n  endpointSecuritygroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupName: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      GroupDescription: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      Tags:\n        - Key: Name\n          Value: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      VpcId: !ImportValue VPC\n      SecurityGroupIngress:\n        - IpProtocol: tcp\n          FromPort: 80\n          ToPort: 80\n          CidrIp: !Ref cidr\n  endpoint:\n    Type: AWS::EC2::VPCEndpoint\n    Properties:\n      VpcEndpointType: Interface\n      VpcId: !ImportValue VPC\n      SubnetIds:\n        - !ImportValue PrivateSubnet1a\n        - !ImportValue PrivateSubnet1c\n      SecurityGroupIds:\n        - !Ref endpointSecuritygroup\n      ServiceName: !Ref serviceName\n      PrivateDnsEnabled: false\n"
}
INV-ver-htc01-ap1-ver-ysd
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: Create Service Endpoint\n\nParameters:\n  serviceAlliasLowerCase:\n    Type: String\n  serviceName:\n    Type: String\n  cidr:\n    Type: String\n\nResources:\n\n  endpointSecuritygroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupName: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      GroupDescription: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      Tags:\n        - Key: Name\n          Value: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      VpcId: !ImportValue VPC\n      SecurityGroupIngress:\n        - IpProtocol: tcp\n          FromPort: 80\n          ToPort: 80\n          CidrIp: !Ref cidr\n  endpoint:\n    Type: AWS::EC2::VPCEndpoint\n    Properties:\n      VpcEndpointType: Interface\n      VpcId: !ImportValue VPC\n      SubnetIds:\n        - !ImportValue PrivateSubnet1a\n        - !ImportValue PrivateSubnet1c\n      SecurityGroupIds:\n        - !Ref endpointSecuritygroup\n      ServiceName: !Ref serviceName\n      PrivateDnsEnabled: false\n"
}
StackSet-ver-htc01-createIamRole-b4d483a5-8cf1-4d95-85e3-2b235b4d5fbc
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "{\n  \"AWSTemplateFormatVersion\" : \"2010-09-09\",\n  \"Description\" : \"Template for Creating IAM Role to Switch from Internavi Login AWS Account\",\n  \"Parameters\" : {\n    \"TrustedAWSAccountId\" : {\n      \"AllowedPattern\" : \"^[0-9]*$\",\n      \"Type\" : \"String\",\n      \"Default\" : \"975196479634\",\n      \"Description\" : \"Trusted AWS Account ID\"\n    },\n    \"IAMRoleName\": {\n      \"Type\": \"String\",\n      \"Default\": \"SolDeveloper\",\n      \"Description\": \"IAM Role Name\"\n    },\n    \"IAMPolicyType\": {\n      \"Type\": \"String\",\n      \"Default\": \"SolUser\",\n      \"Description\": \"IAM Policy Type\",\n      \"AllowedValues\": [ \"SolUser\", \"Admin\" ]\n    }\n  },\n  \"Conditions\" : {\n    \"user\"        : { \"Fn::Equals\" : [{\"Ref\" : \"IAMPolicyType\"}, \"SolUser\" ]},\n    \"admin\"        : { \"Fn::Equals\" : [{\"Ref\" : \"IAMPolicyType\"}, \"Admin\" ]}\n  },\n  \"Resources\" : {\n    \"IAMRoleForAdmin\": {\n      \"Type\": \"AWS::IAM::Role\",\n      \"Condition\" : \"admin\",\n      \"Properties\": {\n        \"AssumeRolePolicyDocument\": {\n          \"Version\": \"2012-10-17\",\n          \"Statement\": [\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV020001\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV020002\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV020003\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV020004\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV020005\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV020006\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV020007\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV020008\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV020009\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV020010\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV020014\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            }\n          ]\n        },\n        \"ManagedPolicyArns\": [\n          \"arn:aws:iam::aws:policy/AdministratorAccess\"\n        ],\n        \"Path\": \"/\",\n        \"RoleName\": { \"Ref\" : \"IAMRoleName\" }\n      }\n    },\n    \"IAMRoleForUser\": {\n      \"Type\": \"AWS::IAM::Role\",\n      \"Condition\" : \"user\",\n      \"Properties\": {\n        \"AssumeRolePolicyDocument\": {\n          \"Version\": \"2012-10-17\",\n          \"Statement\": [\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV020001\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV020002\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV020003\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV020004\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV020005\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV020006\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV020007\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV020008\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV020009\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV020010\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV020014\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            }\n          ]\n        },\n        \"ManagedPolicyArns\": [\n          \"arn:aws:iam::aws:policy/ReadOnlyAccess\",\n          \"arn:aws:iam::aws:policy/AWSCodeCommitPowerUser\"\n        ],\n        \"Path\": \"/\",\n        \"RoleName\": { \"Ref\" : \"IAMRoleName\" }\n      }\n    }\n  },\n  \"Outputs\" : {\n    \"IAMRoleAdminArn\": {\n      \"Value\": { \"Fn::GetAtt\" : [ \"IAMRoleForAdmin\", \"Arn\" ] },\n      \"Condition\" : \"admin\"\n    },\n    \"IAMRoleUserArn\": {\n      \"Value\": { \"Fn::GetAtt\" : [ \"IAMRoleForUser\", \"Arn\" ] },\n      \"Condition\" : \"user\"\n    },\n    \"LinkForSwitchRole\": {\n      \"Value\": { \"Fn::Join\": [ \"\", [ \"https://signin.aws.amazon.com/switchrole?roleName=\", { \"Ref\" : \"IAMRoleName\" }, \"&account=\", { \"Ref\" : \"AWS::AccountId\" } ] ] }\n    }\n  }\n}\n"
}
INV-ver-htc01-vpc-base
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "---\nAWSTemplateFormatVersion: '2010-09-09'\nDescription: VPC Network Template\nParameters:\n  SolName:\n    Type: String\n    Default: base01\n    Description: Solution Name.\n  SubSolName:\n    Type: String\n    Default: base\n    Description: Solution Name.\n  EnvName:\n    Type: String\n    Default: dev\n    Description: Env Name.\n  domain2:\n    Type: String\n  VPCCIDR:\n    Description: First and Second Octet of VPC, For example xxx.xxx\n    Type: String\n    Default: '10.0'\n    AllowedPattern: \"^(10\\\\.([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])|172\\\\.(1[6-9]|2[0-9]|3[0-1])|192\\\\.168)$\"\n    ConstraintDescription: xxx.xxx\nMappings:\n  StackConfig:\n    VPC:\n      CIDR: \".0.0/16\"\n    PublicSubnet1:\n      CIDR: \".0.0/24\"\n    PublicSubnet2:\n      CIDR: \".1.0/24\"\n    PrivateSubnet1:\n      CIDR: \".10.0/24\"\n    PrivateSubnet2:\n      CIDR: \".11.0/24\"\n\nResources:\n  VPC:\n    Type: AWS::EC2::VPC\n    Properties:\n      CidrBlock: !Sub\n        - ${VPCCIDR}${SubCIDR}\n        - SubCIDR: {\"Fn::FindInMap\": [ StackConfig, VPC, CIDR ]}\n      EnableDnsSupport: 'true'\n      EnableDnsHostnames: 'true'\n      InstanceTenancy: default\n      Tags:\n      - Key: Name\n        Value: !Sub INV-${EnvName}-${SolName}\n  InternetGateway:\n    Type: AWS::EC2::InternetGateway\n    Properties:\n      Tags:\n      - Key: Name\n        Value: !Sub INV-${EnvName}-${SolName}\n  AttachGateway:\n    Type: AWS::EC2::VPCGatewayAttachment\n    Properties:\n      VpcId: !Ref VPC\n      InternetGatewayId: !Ref InternetGateway\n\n  PublicSubnet1a:\n    Type: AWS::EC2::Subnet\n    DependsOn: AttachGateway\n    Properties:\n      AvailabilityZone: !Select [ 0, \"Fn::GetAZs\": {Ref: \"AWS::Region\"}]\n      CidrBlock: !Sub\n        - ${VPCCIDR}${SubCIDR}\n        - SubCIDR: {\"Fn::FindInMap\": [ StackConfig, PublicSubnet1, CIDR ]}\n      MapPublicIpOnLaunch: 'true'\n      Tags:\n      - Key: Name\n        Value: !Sub INV-${EnvName}-${SolName}-PublicSubnet1a\n      VpcId: !Ref VPC\n  PublicSubnet1c:\n    Type: AWS::EC2::Subnet\n    DependsOn: AttachGateway\n    Properties:\n      AvailabilityZone: !Select [ 1, \"Fn::GetAZs\": {Ref: \"AWS::Region\"}]\n      CidrBlock: !Sub\n        - ${VPCCIDR}${SubCIDR}\n        - SubCIDR: {\"Fn::FindInMap\": [ StackConfig, PublicSubnet2, CIDR ]}\n      MapPublicIpOnLaunch: 'true'\n      Tags:\n      - Key: Name\n        Value: !Sub INV-${EnvName}-${SolName}-PublicSubnet1c\n      VpcId: !Ref VPC\n  PrivateSubnet1a:\n    Type: AWS::EC2::Subnet\n    DependsOn: AttachGateway\n    Properties:\n      AvailabilityZone: !Select [ 0, \"Fn::GetAZs\": {Ref: \"AWS::Region\"}]\n      CidrBlock: !Sub\n        - ${VPCCIDR}${SubCIDR}\n        - SubCIDR: {\"Fn::FindInMap\": [ StackConfig, PrivateSubnet1, CIDR ]}\n      MapPublicIpOnLaunch: 'true'\n      Tags:\n      - Key: Name\n        Value: !Sub INV-${EnvName}-${SolName}-PrivateSubnet1a\n      VpcId: !Ref VPC\n  PrivateSubnet1c:\n    Type: AWS::EC2::Subnet\n    DependsOn: AttachGateway\n    Properties:\n      AvailabilityZone: !Select [ 1, \"Fn::GetAZs\": {Ref: \"AWS::Region\"}]\n      CidrBlock: !Sub\n        - ${VPCCIDR}${SubCIDR}\n        - SubCIDR: {\"Fn::FindInMap\": [ StackConfig, PrivateSubnet2, CIDR ]}\n      MapPublicIpOnLaunch: 'true'\n      Tags:\n      - Key: Name\n        Value: !Sub INV-${EnvName}-${SolName}-PrivateSubnet1c\n      VpcId: !Ref VPC\n\n  EIP1a:\n    Type: AWS::EC2::EIP\n    Properties:\n      Domain: vpc\n  NAT1a:\n    Type: AWS::EC2::NatGateway\n    Properties:\n      AllocationId:\n        Fn::GetAtt:\n          - EIP1a\n          - AllocationId\n      SubnetId: !Ref PublicSubnet1a\n      Tags:\n        - Key: Name\n          Value: !Sub INV-${EnvName}-${SolName}-NGW1a\n\n  EIP1c:\n    Type: AWS::EC2::EIP\n    Properties:\n      Domain: vpc\n  NAT1c:\n    Type: AWS::EC2::NatGateway\n    Properties:\n      AllocationId:\n        Fn::GetAtt:\n          - EIP1c\n          - AllocationId\n      SubnetId: !Ref PublicSubnet1c\n      Tags:\n        - Key: Name\n          Value: !Sub INV-${EnvName}-${SolName}-NGW1c\n\n  PublicRouteTable:\n    Type: AWS::EC2::RouteTable\n    DependsOn: AttachGateway\n    Properties:\n      VpcId: !Ref VPC\n      Tags:\n      - Key: Name\n        Value: !Sub INV-${EnvName}-${SolName}-PublicRoute\n  PublicRoute:\n    Type: AWS::EC2::Route\n    DependsOn: AttachGateway\n    Properties:\n      RouteTableId: !Ref PublicRouteTable\n      DestinationCidrBlock: 0.0.0.0/0\n      GatewayId: !Ref InternetGateway\n  PrivateRouteTable1a:\n    Type: AWS::EC2::RouteTable\n    DependsOn: NAT1a\n    Properties:\n      VpcId: !Ref VPC\n      Tags:\n      - Key: Name\n        Value: !Sub INV-${EnvName}-${SolName}-PrivateRoute1a\n  PrivateRoute1a:\n    Type: AWS::EC2::Route\n    DependsOn: NAT1a\n    Properties:\n      RouteTableId: !Ref PrivateRouteTable1a\n      DestinationCidrBlock: 0.0.0.0/0\n      NatGatewayId: !Ref NAT1a\n  PrivateRouteTable1c:\n    Type: AWS::EC2::RouteTable\n    DependsOn: NAT1c\n    Properties:\n      VpcId: !Ref VPC\n      Tags:\n      - Key: Name\n        Value: !Sub INV-${EnvName}-${SolName}-PrivateRoute1c\n  PrivateRoute1c:\n    Type: AWS::EC2::Route\n    DependsOn: NAT1c\n    Properties:\n      RouteTableId: !Ref PrivateRouteTable1c\n      DestinationCidrBlock: 0.0.0.0/0\n      NatGatewayId: !Ref NAT1c\n\n  PublicSubnet1aRouteTableAssociation:\n    Type: AWS::EC2::SubnetRouteTableAssociation\n    Properties:\n      SubnetId: !Ref PublicSubnet1a\n      RouteTableId: !Ref PublicRouteTable\n  PublicSubnet1cRouteTableAssociation:\n    Type: AWS::EC2::SubnetRouteTableAssociation\n    Properties:\n      SubnetId: !Ref PublicSubnet1c\n      RouteTableId: !Ref PublicRouteTable\n  PrivateSubnet1aRouteTableAssociation:\n    Type: AWS::EC2::SubnetRouteTableAssociation\n    Properties:\n      SubnetId: !Ref PrivateSubnet1a\n      RouteTableId: !Ref PrivateRouteTable1a\n  PrivateSubnet1cRouteTableAssociation:\n    Type: AWS::EC2::SubnetRouteTableAssociation\n    Properties:\n      SubnetId: !Ref PrivateSubnet1c\n      RouteTableId: !Ref PrivateRouteTable1c\n\n  DNS1:\n    Type: \"AWS::Route53::HostedZone\"\n    Properties:\n      HostedZoneConfig:\n        Comment: INV-LocalDomain\n      Name: internal-internavi\n      VPCs:\n        -\n          VPCId: !Ref VPC\n          VPCRegion: !Ref AWS::Region\n      HostedZoneTags:\n        -\n          Key: \"Name\"\n          Value: !Sub INV-${EnvName}-${SolName}\n\n  DNS2:\n    Type: \"AWS::Route53::HostedZone\"\n    Properties:\n      HostedZoneConfig:\n        Comment: INV-LocalDomain\n      Name: !Ref domain2\n      VPCs:\n        -\n          VPCId: !Ref VPC\n          VPCRegion: !Ref AWS::Region\n      HostedZoneTags:\n        -\n          Key: \"Name\"\n          Value: !Sub INV-${EnvName}-${SolName}\n\n  FlowLogBucket:\n    Type: AWS::S3::Bucket\n    Properties:\n        BucketName: !Join\n          - \"-\"\n          -\n            - inv\n            - !Ref EnvName\n            - !Ref SolName\n            - !Ref VPC\n  FlowLogBucketPolicy:\n    Type: AWS::S3::BucketPolicy\n    DependsOn: NAT1c\n    Properties:\n      Bucket: !Ref FlowLogBucket\n      PolicyDocument:\n        Statement:\n          -\n            Action:\n              - \"s3:PutObject\"\n            Effect: \"Allow\"\n            Resource:\n              Fn::Join:\n                - \"\"\n                -\n                  - \"arn:aws:s3:::\"\n                  - !Ref FlowLogBucket\n                  - \"/*\"\n            Principal:\n              Service: \"delivery.logs.amazonaws.com\"\n            Condition:\n              StringEquals:\n                s3:x-amz-acl: bucket-owner-full-control\n          -\n            Action:\n              - \"s3:GetBucketAcl\"\n            Effect: \"Allow\"\n            Resource:\n              Fn::Join:\n                - \"\"\n                -\n                  - \"arn:aws:s3:::\"\n                  - !Ref FlowLogBucket\n            Principal:\n              Service: \"delivery.logs.amazonaws.com\"\n  FlowLog:\n    Type: AWS::EC2::FlowLog\n    DependsOn: FlowLogBucketPolicy\n    Properties:\n      LogDestinationType : \"s3\"\n      LogDestination : !Join\n        - \"\"\n        -\n          - \"arn:aws:s3:::\"\n          - !Ref FlowLogBucket\n          - /FlowLogs/\n      ResourceType : VPC\n      ResourceId : !Ref VPC\n      TrafficType : ALL\n\n  S3Endpoint:\n    Type: AWS::EC2::VPCEndpoint\n    Properties:\n      RouteTableIds:\n        - !Ref PublicRouteTable\n        - !Ref PrivateRouteTable1a\n        - !Ref PrivateRouteTable1c\n      ServiceName: !Join\n        - ''\n        - - com.amazonaws.\n          - !Ref 'AWS::Region'\n          - .s3\n      VpcId: !Ref VPC\n  DynamoEndpoint:\n    Type: AWS::EC2::VPCEndpoint\n    Properties:\n      RouteTableIds:\n        - !Ref PublicRouteTable\n        - !Ref PrivateRouteTable1a\n        - !Ref PrivateRouteTable1c\n      ServiceName: !Join\n        - ''\n        - - com.amazonaws.\n          - !Ref 'AWS::Region'\n          - .dynamodb\n      VpcId: !Ref VPC\n  Certificate:\n    Type: AWS::CertificateManager::Certificate\n    Properties:\n      DomainName: !Sub '*.${EnvName}-${SubSolName}.cloud.internavi.ne.jp'\n      SubjectAlternativeNames:\n        - '*.cloud.internavi.ne.jp'\n      ValidationMethod: DNS\n\nOutputs:\n  VPC:\n    Value: !Ref VPC\n    Export:\n      Name: VPC\n  PublicSubnet1a:\n    Value: !Ref PublicSubnet1a\n    Export:\n      Name: PublicSubnet1a\n  PublicSubnet1c:\n    Value: !Ref PublicSubnet1c\n    Export:\n      Name: PublicSubnet1c\n  PrivateSubnet1a:\n    Value: !Ref PrivateSubnet1a\n    Export:\n      Name: PrivateSubnet1a\n  PrivateSubnet1c:\n    Value: !Ref PrivateSubnet1c\n    Export:\n      Name: PrivateSubnet1c\n  PublicRouteTable:\n    Value: !Ref PublicRouteTable\n    Export:\n      Name: PublicRouteTable\n  PrivateRouteTable1a:\n    Value: !Ref PrivateRouteTable1a\n    Export:\n      Name: PrivateRouteTable1a\n  PrivateRouteTable1c:\n    Value: !Ref PrivateRouteTable1c\n    Export:\n      Name: PrivateRouteTable1c\n  DNS1:\n    Value: !Ref DNS1\n    Export:\n      Name: DNS1\n  DNS2:\n    Value: !Ref DNS2\n    Export:\n      Name: DNS2\n"
}
INV-ver-htc01-codecommit-ecr
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: codecommit and ecr\n\nParameters:\n  accountAllias:\n    Type: String\n  accountAlliasLowerCase:\n    Type: String\n\n\nResources:\n  codecommit:\n    Type: AWS::CodeCommit::Repository\n    Properties:\n      RepositoryName: !Sub ${accountAllias}-codecommit\n      RepositoryDescription: !Sub ${accountAllias}-codecommit\n  codecommitcfn:\n    Type: AWS::CodeCommit::Repository\n    Properties:\n      RepositoryName: !Sub ${accountAllias}-cfn\n      RepositoryDescription: !Sub ${accountAllias}-cfn\n  ecr:\n    Type: AWS::ECR::Repository\n    Properties: \n      RepositoryName: !Sub ${accountAlliasLowerCase}-ecr\n\nOutputs:\n  codecommit:\n    Value: !Ref codecommit\n    Export:\n      Name: codecommit\n  codecommitcfn:\n    Value: !Ref codecommitcfn\n    Export:\n      Name: codecommitcfn\n  ecr:\n    Value: !GetAtt ecr.Arn\n    Export:\n      Name: ecr\n\n"
}
StackSet-HmAdmin-createIamRole-116af66d-3f88-4af5-beed-41917afe4be2
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "{\n  \"AWSTemplateFormatVersion\" : \"2010-09-09\",\n  \"Description\" : \"Template for Creating IAM Role to Switch from Internavi Login AWS Account\",\n  \"Parameters\" : {\n    \"TrustedAWSAccountId\" : {\n      \"AllowedPattern\" : \"^[0-9]*$\",\n      \"Type\" : \"String\",\n      \"Default\" : \"975196479634\",\n      \"Description\" : \"Trusted AWS Account ID\"\n    },\n    \"IAMRoleName\": {\n      \"Type\": \"String\",\n      \"Default\": \"HmAdmin\",\n      \"Description\": \"IAM Role Name\"\n    }\n  },\n  \"Resources\" : {\n    \"IAMRoleForEngineer\": {\n      \"Type\": \"AWS::IAM::Role\",\n      \"Properties\": {\n        \"AssumeRolePolicyDocument\": {\n          \"Version\": \"2012-10-17\",\n          \"Statement\": [\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"J0322720\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"J0116063\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JP300063\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JP310643\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JP311734\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            }\n          ]\n        },\n        \"ManagedPolicyArns\": [\n          \"arn:aws:iam::aws:policy/AdministratorAccess\"\n        ],\n        \"Path\": \"/\",\n        \"RoleName\": { \"Ref\" : \"IAMRoleName\" }\n      }\n    }\n  },\n  \"Outputs\" : {\n    \"IAMRoleArn\": {\n      \"Value\": { \"Fn::GetAtt\" : [ \"IAMRoleForEngineer\", \"Arn\" ] }\n    },\n    \"LinkForSwitchRole\": {\n      \"Value\": { \"Fn::Join\": [ \"\", [ \"https://signin.aws.amazon.com/switchrole?roleName=\", { \"Ref\" : \"IAMRoleName\" }, \"&account=\", { \"Ref\" : \"AWS::AccountId\" } ] ] }\n    }\n  }\n}\n"
}
StackSet-cm-cm-hamada-koji-iamRole-234553f7-8e7c-4ad5-9b31-d4afbdb56b9d
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": {
        "AWSTemplateFormatVersion": "2010-09-09", 
        "Description": "Template for Creating IAM Role to Switch from Classmethod AWS Account", 
        "Parameters": {
            "TrustedAWSAccountId": {
                "AllowedPattern": "^[0-9]*$", 
                "Type": "String", 
                "Default": "", 
                "Description": "Trusted AWS Account ID"
            }, 
            "IAMUserName": {
                "AllowedPattern": "^cm-[a-z.]*$", 
                "Type": "String", 
                "Default": "cm-xxx.xxx", 
                "Description": "IAM Role Name"
            }
        }, 
        "Resources": {
            "IAMRoleForCmEngineer": {
                "Type": "AWS::IAM::Role", 
                "Properties": {
                    "AssumeRolePolicyDocument": {
                        "Version": "2012-10-17", 
                        "Statement": [
                            {
                                "Effect": "Allow", 
                                "Principal": {
                                    "AWS": {
                                        "Fn::Join": [
                                            "", 
                                            [
                                                "arn:aws:iam::", 
                                                {
                                                    "Ref": "TrustedAWSAccountId"
                                                }, 
                                                ":user/", 
                                                {
                                                    "Ref": "IAMUserName"
                                                }
                                            ]
                                        ]
                                    }
                                }, 
                                "Action": [
                                    "sts:AssumeRole"
                                ], 
                                "Condition": {
                                    "Bool": {
                                        "aws:MultiFactorAuthPresent": "true"
                                    }
                                }
                            }
                        ]
                    }, 
                    "ManagedPolicyArns": [
                        "arn:aws:iam::aws:policy/AdministratorAccess"
                    ], 
                    "Path": "/", 
                    "RoleName": {
                        "Ref": "IAMUserName"
                    }
                }
            }
        }, 
        "Outputs": {
            "IAMRoleArn": {
                "Value": {
                    "Fn::GetAtt": [
                        "IAMRoleForCmEngineer", 
                        "Arn"
                    ]
                }
            }, 
            "LinkForSwitchRole": {
                "Value": {
                    "Fn::Join": [
                        "", 
                        [
                            "https://signin.aws.amazon.com/switchrole?roleName=", 
                            {
                                "Ref": "IAMUserName"
                            }, 
                            "&account=", 
                            {
                                "Ref": "AWS::AccountId"
                            }
                        ]
                    ]
                }
            }
        }
    }
}
StackSetsExecutionRole
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: 2010-09-09\nDescription: Configure the AWSCloudFormationStackSetExecutionRole to support AWS CloudFormation StackSets in a managed account.\n\nParameters:\n  MasterAccountId:\n    Type: String\n    Description: AWS Account Id of the master account (the account in which StackSets will be created).\n    MaxLength: 12\n    MinLength: 12\n\nResources:\n  ExecutionRole:\n    Type: AWS::IAM::Role\n    Properties:\n      RoleName: AWSCloudFormationStackSetExecutionRole\n      AssumeRolePolicyDocument: \n        Version: 2012-10-17\n        Statement: \n          - Effect: Allow\n            Principal: \n              AWS:\n                - !Ref MasterAccountId\n            Action: \n              - sts:AssumeRole\n      Path: /\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/AdministratorAccess\n"
}
cm-kikuchi-shuji-iamRole
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": {
        "AWSTemplateFormatVersion": "2010-09-09", 
        "Description": "Template for Creating IAM Role to Switch from Classmethod AWS Account", 
        "Parameters": {
            "TrustedAWSAccountId": {
                "AllowedPattern": "^[0-9]*$", 
                "Type": "String", 
                "Default": "", 
                "Description": "Trusted AWS Account ID"
            }, 
            "IAMUserName": {
                "AllowedPattern": "^cm-[a-z.]*$", 
                "Type": "String", 
                "Default": "cm-xxx.xxx", 
                "Description": "IAM Role Name"
            }
        }, 
        "Resources": {
            "IAMRoleForCmEngineer": {
                "Type": "AWS::IAM::Role", 
                "Properties": {
                    "AssumeRolePolicyDocument": {
                        "Version": "2012-10-17", 
                        "Statement": [
                            {
                                "Effect": "Allow", 
                                "Principal": {
                                    "AWS": {
                                        "Fn::Join": [
                                            "", 
                                            [
                                                "arn:aws:iam::", 
                                                {
                                                    "Ref": "TrustedAWSAccountId"
                                                }, 
                                                ":user/", 
                                                {
                                                    "Ref": "IAMUserName"
                                                }
                                            ]
                                        ]
                                    }
                                }, 
                                "Action": [
                                    "sts:AssumeRole"
                                ], 
                                "Condition": {
                                    "Bool": {
                                        "aws:MultiFactorAuthPresent": "true"
                                    }
                                }
                            }
                        ]
                    }, 
                    "ManagedPolicyArns": [
                        "arn:aws:iam::aws:policy/AdministratorAccess"
                    ], 
                    "Path": "/", 
                    "RoleName": {
                        "Ref": "IAMUserName"
                    }
                }
            }
        }, 
        "Outputs": {
            "IAMRoleArn": {
                "Value": {
                    "Fn::GetAtt": [
                        "IAMRoleForCmEngineer", 
                        "Arn"
                    ]
                }
            }, 
            "LinkForSwitchRole": {
                "Value": {
                    "Fn::Join": [
                        "", 
                        [
                            "https://signin.aws.amazon.com/switchrole?roleName=", 
                            {
                                "Ref": "IAMUserName"
                            }, 
                            "&account=", 
                            {
                                "Ref": "AWS::AccountId"
                            }
                        ]
                    ]
                }
            }
        }
    }
}
]
スクリプトを終了します
  1- INV-ver-htc01:arn:aws:iam::686753218709:role/OpeAdminRole
  2- INV-ver-sub01:arn:aws:iam::495152581087:role/OpeAdminRole
  3- INV-ver-cer01:arn:aws:iam::339311866652:role/OpeAdminRole
  4- INV-ver-des01:arn:aws:iam::302986797475:role/OpeAdminRole
  5- INV-ver-agw01:arn:aws:iam::859823971378:role/OpeAdminRole
  6- INV-ver-vdm01:arn:aws:iam::497617980196:role/OpeAdminRole
  7- INV-ver-wfi01:arn:aws:iam::932204081418:role/OpeAdminRole
  8- INV-ver-esp01:arn:aws:iam::131000633826:role/OpeAdminRole
  9- INV-ver-rmt01:arn:aws:iam::604584103104:role/OpeAdminRole
 10- INV-ver-esw01:arn:aws:iam::170541451228:role/OpeAdminRole
 11- INV-ver-tcu01:arn:aws:iam::951453431396:role/OpeAdminRole
 12- INV-ver-vky01:arn:aws:iam::207429400733:role/OpeAdminRole
     all- All Environments:select all environments
スクリプトを実行します。
aws cloudformation describe-stacks --query Stacks[*].StackName
{
    "Account": "975196479634", 
    "UserId": "AIDA6GDR5MCJLYN4JQRFZ", 
    "Arn": "arn:aws:iam::975196479634:user/JV010028"
}
{
    "Account": "495152581087", 
    "UserId": "AROAXGSLEZHPUFBBN22KP:inv-20190702040750", 
    "Arn": "arn:aws:sts::495152581087:assumed-role/OpeAdminRole/inv-20190702040750"
}
[
inv-ver-sub01-monitoring-lambda
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: \"2010-09-09\"\r\nDescription: \"monitoring-lambda.yml\"\r\nParameters: \r\n  EnvironmentName: \r\n    Default: ver\r\n    Description: \"Environment Name\"\r\n    Type: String\r\n  MicroServiceName: \r\n    Default: cer01\r\n    Description: \"MicroService Name\"\r\n    Type: String\r\n  S3Buckets: \r\n    Default: \"inv-ver-cer01-cfn\"\r\n    Description: \"source s3 backet name\"\r\n    Type: String\r\n  S3Prefix:\r\n    Default: \"monitor-config/\"\r\n    Description: \"source s3 backet file prefix\"\r\n    Type: String\r\n  iniFileName: \r\n    Default: \"monitor.json\"\r\n    Description: \"scenario file name\"\r\n    Type: String\r\n  scenarioSourceLogGroup:\r\n    Description: \"Scenario CWL log group name\"\r\n    Type: \"String\"\r\n  scenarioFilterPattern:\r\n    Default: \"\"\r\n    Description: \"Scenario Monitor CWL log FilterPattern\"\r\n    Type: \"String\"\r\n  programSourceLogGroup:\r\n    Description: \"program CWL log group name\"\r\n    Type: \"String\"\r\n  programFilterPattern:\r\n    Default: ?\"ERROR\" ?\"FATAL\" ?\"WARN\"\r\n    Description: \"program Monitor CWL log FilterPattern\"\r\n    Type: \"String\"\r\nResources:\r\n  IAMRole:\r\n    Type: \"AWS::IAM::Role\"\r\n    Properties: \r\n      AssumeRolePolicyDocument: \r\n        Version: \"2012-10-17\"\r\n        Statement: \r\n          - Effect: Allow\r\n            Principal: \r\n              Service: \"lambda.amazonaws.com\"\r\n            Action: \"sts:AssumeRole\"\r\n      ManagedPolicyArns: \r\n        - \"arn:aws:iam::aws:policy/AmazonSNSFullAccess\"\r\n      Path: \"/\"\r\n      Policies:\r\n        - PolicyName: monitor_lambda_policy\r\n          PolicyDocument:\r\n            Version: '2012-10-17'\r\n            Statement:\r\n              - Effect: Allow\r\n                Action:\r\n                  - cloudwatch:*\r\n                  - logs:*\r\n                  - s3:Get*\r\n                  - s3:List*\r\n                Resource: \"*\"\r\n      RoleName: !Sub inv-${EnvironmentName}-${MicroServiceName}-monitoring-lambda-role\r\n  LambdaLayer:\r\n    Type: \"AWS::Lambda::LayerVersion\"\r\n    Properties:\r\n      CompatibleRuntimes: \r\n        - python3.6\r\n      Content: \r\n        S3Bucket:\r\n          Ref: S3Buckets\r\n        S3Key: CloudwatchAlarm/metrics_mod.zip\r\n      Description: \"monitor_lambda_modules\"\r\n      LayerName: monitor_module\r\n  LambdaFunction: \r\n    DependsOn: \r\n      - IAMRole\r\n    Type: \"AWS::Lambda::Function\"\r\n    Properties: \r\n      Code: \r\n        S3Bucket: \r\n          Ref: S3Buckets\r\n        S3Key: CloudwatchAlarm/monitoring_common_lambda_src.zip           \r\n      FunctionName: !Sub inv-${EnvironmentName}-${MicroServiceName}-monitoring_common_lambda\r\n      Handler: lambda_function.lambda_handler\r\n      Environment: \r\n        Variables: \r\n          ENV: \r\n            Ref: EnvironmentName\r\n          STG: \r\n            Ref: MicroServiceName\r\n          fileName:\r\n            Ref: iniFileName\r\n          s3Bucket:\r\n            Ref: S3Buckets\r\n          s3keyPrefix:\r\n            Ref: S3Prefix\r\n      Role: \r\n        \"Fn::GetAtt\": \r\n          - IAMRole\r\n          - Arn\r\n      Runtime: \"python3.6\"\r\n      MemorySize: 512\r\n      Timeout: 300\r\n      Layers:\r\n        - !Ref LambdaLayer\r\n  LambdaPermission: \r\n    Type: \"AWS::Lambda::Permission\"\r\n    Properties: \r\n      Action: \"lambda:InvokeFunction\"\r\n      FunctionName: \r\n        \"Fn::GetAtt\": \r\n          - LambdaFunction\r\n          - Arn\r\n      Principal: !Sub \"sns.amazonaws.com\"\r\n      SourceArn: !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:inv-${EnvironmentName}-${MicroServiceName}\r\n  ScenarioSubscriptionFilter:\r\n    DependsOn:\r\n      - ScenarioLambdaInvokePermission\r\n    Type: \"AWS::Logs::SubscriptionFilter\"\r\n    Properties:\r\n      LogGroupName: !Ref scenarioSourceLogGroup\r\n      FilterPattern: !Ref scenarioFilterPattern\r\n      DestinationArn: !Join\r\n        - ''\r\n        - - !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:'\r\n          - !Sub inv-${EnvironmentName}-${MicroServiceName}-monitoring_common_lambda\r\n  ScenarioLambdaInvokePermission:\r\n    Type: 'AWS::Lambda::Permission'\r\n    Properties:\r\n      FunctionName:\r\n        \"Fn::GetAtt\": \r\n          - LambdaFunction\r\n          - Arn\r\n      Action: \"lambda:InvokeFunction\"\r\n      Principal: !Sub \"logs.amazonaws.com\"\r\n      SourceAccount: !Ref AWS::AccountId\r\n      SourceArn: !Sub \"arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${scenarioSourceLogGroup}:*\"\r\n  ProgramSubscriptionFilter:\r\n    DependsOn:\r\n      - ProgramLambdaInvokePermission\r\n    Type: \"AWS::Logs::SubscriptionFilter\"\r\n    Properties:\r\n      LogGroupName: !Ref programSourceLogGroup\r\n      FilterPattern: !Ref programFilterPattern\r\n      DestinationArn: !Join\r\n        - ''\r\n        - - !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:'\r\n          - !Sub inv-${EnvironmentName}-${MicroServiceName}-monitoring_common_lambda\r\n  ProgramLambdaInvokePermission:\r\n    Type: 'AWS::Lambda::Permission'\r\n    Properties:\r\n      FunctionName:\r\n        \"Fn::GetAtt\": \r\n          - LambdaFunction\r\n          - Arn\r\n      Action: \"lambda:InvokeFunction\"\r\n      Principal: !Sub \"logs.amazonaws.com\"\r\n      SourceAccount: !Ref AWS::AccountId\r\n      SourceArn: !Sub \"arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${programSourceLogGroup}:*\"\r\nOutputs: \r\n  IAMRole: \r\n    Description: \"IAM Role Name\"\r\n    Value: \r\n      Ref: IAMRole\r\n  SNSTopic: \r\n    Description: \"SNS Topic Name\"\r\n    Value: \r\n      !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:inv-${EnvironmentName}-${MicroServiceName}\r\n  LambdaFunction: \r\n    Description: \"Lambda Function Name\"\r\n    Value: \r\n      Ref: LambdaFunction"
}
enable-guardduty
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: 2010-09-09\nDescription:\n  \"enable guardduty\"\nResources:\n  GDD:\n    Type: \"AWS::GuardDuty::Detector\"\n    Properties:\n      Enable: true"
}
INV-ver-sub01-gtc-role
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: IAM for GTC\n\n# ------------------------------------------------------------#\n#  Parameters\n# ------------------------------------------------------------#\nParameters:\n  trustedRole1:\n    Type: String\n  resourceArn:\n    Type: String\n\nResources:\n# ------------------------------------------------------------#\n#  Role\n# ------------------------------------------------------------#\n  accessPolicy:\n      Type: AWS::IAM::ManagedPolicy\n      Properties:\n        ManagedPolicyName: gtcKinesisAccessPlicy\n        Description: \"Policy for Kinsis\"\n        Path: \"/\"\n        PolicyDocument:\n          Version: \"2012-10-17\"\n          Statement:\n            -\n              Effect: \"Allow\"\n              Action:\n                - kinesis:ListStreams\n                - kinesis:PutRecord\n                - kinesis:PutRecords\n              Resource: !Ref resourceArn\n  gtcRole:\n    Type: AWS::IAM::Role\n    Properties:\n      RoleName: gtc-role\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement:\n          - Effect: \"Allow\"\n            Principal:\n              AWS:\n                - !Ref trustedRole1\n            Action:\n              - \"sts:AssumeRole\"\n      ManagedPolicyArns:\n        - !Ref accessPolicy\n      MaxSessionDuration: 43200\n\n# ------------------------------------------------------------#\n#  Outputs\n# ------------------------------------------------------------#\nOutputs:\n  verEcrAccessRole:\n    Value: !Ref gtcRole\n    Export:\n      Name: gtcRole\n"
}
INV-ver-sub01-manage-metrics-alarm
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: \"2010-09-09\"\r\nDescription: \"create_metrics_alarm.yaml\"\r\nParameters:\r\n  EnvironmentName:\r\n    Default: \"ver\"\r\n    Description: \"EnvironmentName\"\r\n    Type: String\r\n  MicroServiceName: \r\n    Default: \"cer01\"\r\n    Description: \"MicroServiceName\"\r\n    Type: String\r\n  s3keyprefix: \r\n    Default: \"_manage_metrics_alarm.xlsx\"\r\n    Description: \"excel s3 keys prefix\"\r\n    Type: String\r\n  S3Buckets: \r\n    Default: \"inv-ver-cer01-cfn\"\r\n    Description: \"source s3 backet name\"\r\n    Type: String\r\nResources: \r\n  IAMRole: \r\n    Type: \"AWS::IAM::Role\"\r\n    Properties: \r\n      AssumeRolePolicyDocument: \r\n        Version: \"2012-10-17\"\r\n        Statement: \r\n          - Effect: Allow\r\n            Principal: \r\n              Service: \"lambda.amazonaws.com\"\r\n            Action: \"sts:AssumeRole\"\r\n      ManagedPolicyArns: \r\n        - \"arn:aws:iam::aws:policy/AmazonS3FullAccess\"\r\n      Path: \"/\"\r\n      Policies:\r\n        - PolicyName: manage_metrics_alarm_lambda_policy\r\n          PolicyDocument:\r\n            Version: '2012-10-17'\r\n            Statement:\r\n              - Effect: Allow\r\n                Action:\r\n                  - cloudwatch:*\r\n                  - logs:*\r\n                Resource: \"*\"\r\n      RoleName: !Sub inv-${EnvironmentName}-${MicroServiceName}-manage-metrics-alarm-lambda-role\r\n  LambdaLayer:\r\n    Type: \"AWS::Lambda::LayerVersion\"\r\n    Properties:\r\n      CompatibleRuntimes: \r\n        - python3.6\r\n      Content: \r\n        S3Bucket:\r\n          Ref: S3Buckets\r\n        S3Key: CloudwatchAlarm/metrics_mod.zip\r\n      Description: \"manage_cloudwatch metrics alarm modules\"\r\n      LayerName: metrics_module\r\n  LambdaFunction: \r\n    DependsOn: \r\n      - IAMRole\r\n    Type: \"AWS::Lambda::Function\"\r\n    Properties: \r\n      Code: \r\n        S3Bucket: \r\n          Ref: S3Buckets\r\n        S3Key: CloudwatchAlarm/manage_metrics_alarm_src.zip\r\n      FunctionName: !Sub inv-${EnvironmentName}-${MicroServiceName}-manage-metrics-alarm-lambda\r\n      Handler: lambda_function.lambda_handler\r\n      Environment: \r\n        Variables: \r\n          fileprefix: \r\n            Ref: s3keyprefix\r\n          s3Bucket: !Sub inv-${EnvironmentName}-${MicroServiceName}-manage-metrics-alarm\r\n      Role: \r\n        \"Fn::GetAtt\": \r\n          - IAMRole\r\n          - Arn\r\n      Runtime: \"python3.6\"\r\n      MemorySize: 512\r\n      Timeout: 300\r\n      Layers:\r\n        - !Ref LambdaLayer\r\n  LambdaPermission: \r\n    Type: \"AWS::Lambda::Permission\"\r\n    Properties: \r\n      Action: \"lambda:InvokeFunction\"\r\n      FunctionName: \r\n        \"Fn::GetAtt\": \r\n          - LambdaFunction\r\n          - Arn\r\n      Principal: s3.amazonaws.com\r\n      SourceAccount: !Ref 'AWS::AccountId'\r\n      SourceArn: !Join\r\n        - ''\r\n        - - 'arn:aws:s3:::'\r\n          - !Sub inv-${EnvironmentName}-${MicroServiceName}-manage-metrics-alarm\r\n  S3Bucket:\r\n    Type: \"AWS::S3::Bucket\"\r\n    DependsOn: \r\n      - LambdaPermission\r\n    Properties:\r\n      BucketName: !Sub inv-${EnvironmentName}-${MicroServiceName}-manage-metrics-alarm\r\n      AccessControl: Private\r\n      PublicAccessBlockConfiguration:\r\n        BlockPublicAcls: True\r\n        BlockPublicPolicy: True\r\n        IgnorePublicAcls: True\r\n        RestrictPublicBuckets: True\r\n      NotificationConfiguration:\r\n        LambdaConfigurations:\r\n          - Event: \"s3:ObjectCreated:*\"\r\n            Filter:\r\n              S3Key:\r\n                Rules:\r\n                  - Name: suffix\r\n                    Value: xlsx\r\n            Function: !GetAtt\r\n              - LambdaFunction\r\n              - Arn\r\n  S3BucketPolicy:\r\n    Type: AWS::S3::BucketPolicy\r\n    Properties: \r\n      Bucket: \r\n        Ref: \"S3Bucket\"\r\n      PolicyDocument: \r\n        Version: \"2012-10-17\"\r\n        Statement: \r\n          - \r\n            Action: \r\n              - \"s3:GetObject\"\r\n            Effect: \"Allow\"\r\n            Resource: \r\n              Fn::Join: \r\n                - \"\"\r\n                - \r\n                  - \"arn:aws:s3:::\"\r\n                  - \r\n                    Ref: \"S3Bucket\"\r\n                  - \"/*\"\r\n            Principal: \r\n              AWS:\r\n                Fn::Join:\r\n                  - \"\"\r\n                  - \r\n                    - \"arn:aws:iam::\"\r\n                    - Ref: \"AWS::AccountId\"\r\n                    - \":root\"\r\nOutputs: \r\n  IAMRole: \r\n    Description: \"IAM Role Name\"\r\n    Value: \r\n      Ref: IAMRole\r\n  S3BucketName:\r\n    Value:\r\n      Ref S3BucketName\r\n  LambdaFunction: \r\n    Description: \"Lambda Function Name\"\r\n    Value: \r\n      Ref: LambdaFunction"
}
StackSet-InfraAdmin-CreateIamRole-86ab5b02-e188-4cbb-9f7b-a89b0149b77b
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": {
        "AWSTemplateFormatVersion": "2010-09-09", 
        "Description": "Template for Creating IAM Role to Switch from Internavi Login AWS Account", 
        "Parameters": {
            "TrustedAWSAccountId": {
                "AllowedPattern": "^[0-9]*$", 
                "Type": "String", 
                "Default": "975196479634", 
                "Description": "Trusted AWS Account ID"
            }, 
            "IAMRoleName": {
                "Type": "String", 
                "Default": "InfraAdmin", 
                "Description": "IAM Role Name"
            }
        }, 
        "Resources": {
            "IAMRoleForEngineer": {
                "Type": "AWS::IAM::Role", 
                "Properties": {
                    "AssumeRolePolicyDocument": {
                        "Version": "2012-10-17", 
                        "Statement": [
                            {
                                "Effect": "Allow", 
                                "Principal": {
                                    "AWS": {
                                        "Fn::Join": [
                                            "", 
                                            [
                                                "arn:aws:iam::", 
                                                {
                                                    "Ref": "TrustedAWSAccountId"
                                                }, 
                                                ":user/", 
                                                "JV010031"
                                            ]
                                        ]
                                    }
                                }, 
                                "Action": [
                                    "sts:AssumeRole"
                                ], 
                                "Condition": {
                                    "Bool": {
                                        "aws:MultiFactorAuthPresent": "true"
                                    }
                                }
                            }, 
                            {
                                "Effect": "Allow", 
                                "Principal": {
                                    "AWS": {
                                        "Fn::Join": [
                                            "", 
                                            [
                                                "arn:aws:iam::", 
                                                {
                                                    "Ref": "TrustedAWSAccountId"
                                                }, 
                                                ":user/", 
                                                "JV010024"
                                            ]
                                        ]
                                    }
                                }, 
                                "Action": [
                                    "sts:AssumeRole"
                                ], 
                                "Condition": {
                                    "Bool": {
                                        "aws:MultiFactorAuthPresent": "true"
                                    }
                                }
                            }
                        ]
                    }, 
                    "ManagedPolicyArns": [
                        "arn:aws:iam::aws:policy/AdministratorAccess"
                    ], 
                    "Path": "/", 
                    "RoleName": {
                        "Ref": "IAMRoleName"
                    }
                }
            }
        }, 
        "Outputs": {
            "IAMRoleArn": {
                "Value": {
                    "Fn::GetAtt": [
                        "IAMRoleForEngineer", 
                        "Arn"
                    ]
                }
            }, 
            "LinkForSwitchRole": {
                "Value": {
                    "Fn::Join": [
                        "", 
                        [
                            "https://signin.aws.amazon.com/switchrole?roleName=", 
                            {
                                "Ref": "IAMRoleName"
                            }, 
                            "&account=", 
                            {
                                "Ref": "AWS::AccountId"
                            }
                        ]
                    ]
                }
            }
        }
    }
}
StackSet-OpeAdmin-CreateIamRole-f9773319-c970-42fd-8a22-51180bc016cc
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "{\n  \"AWSTemplateFormatVersion\" : \"2010-09-09\",\n  \"Description\" : \"Template for Creating IAM Role to Switch from Internavi Login AWS Account\",\n  \"Parameters\" : {\n    \"TrustedAWSAccountId\" : {\n      \"AllowedPattern\" : \"^[0-9]*$\",\n      \"Type\" : \"String\",\n      \"Default\" : \"975196479634\",\n      \"Description\" : \"Trusted AWS Account ID\"\n    },\n    \"IAMRoleName\": {\n      \"Type\": \"String\",\n      \"Default\": \"OpeAdminRole\",\n      \"Description\": \"IAM Role Name\"\n    }\n  },\n  \"Resources\" : {\n    \"IAMRoleForEngineer\": {\n      \"Type\": \"AWS::IAM::Role\",\n      \"Properties\": {\n        \"AssumeRolePolicyDocument\": {\n          \"Version\": \"2012-10-17\",\n          \"Statement\": [\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010002\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010025\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010026\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010027\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010028\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010030\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            }\n          ]\n        },\n        \"ManagedPolicyArns\": [\n          \"arn:aws:iam::aws:policy/AdministratorAccess\"\n        ],\n        \"Path\": \"/\",\n        \"RoleName\": { \"Ref\" : \"IAMRoleName\" }\n      }\n    }\n  },\n  \"Outputs\" : {\n    \"IAMRoleArn\": {\n      \"Value\": { \"Fn::GetAtt\" : [ \"IAMRoleForEngineer\", \"Arn\" ] }\n    },\n    \"LinkForSwitchRole\": {\n      \"Value\": { \"Fn::Join\": [ \"\", [ \"https://signin.aws.amazon.com/switchrole?roleName=\", { \"Ref\" : \"IAMRoleName\" }, \"&account=\", { \"Ref\" : \"AWS::AccountId\" } ] ] }\n    }\n  }\n}\n"
}
INV-ver-sub01-autoscaling-service
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: 2010-09-09\nDescription: ecs authoscaling definition\n\nParameters:\n  accountAllias:\n    Type: String\n  accountAlliasLowerCase:\n    Type: String\n\n  minCapacity:\n    Type: Number\n  maxCapacity:\n    Type: Number\n\nMappings:\n  Autoscale:\n    CPU:\n      UpUsage: 80\n      DownUsage: 30\n\nResources:\n\n  parserAutoScalingRole:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Statement:\n        - Effect: Allow\n          Principal:\n            Service:\n              - application-autoscaling.amazonaws.com\n          Action: \"sts:AssumeRole\"\n      Path: /\n      Policies:\n      - PolicyName: !Sub ${accountAlliasLowerCase}-service-autoscaling\n        PolicyDocument:\n          Statement:\n          - Effect: Allow\n            Action:\n              - application-autoscaling:*\n              - cloudwatch:DescribeAlarms\n              - cloudwatch:PutMetricAlarm\n              - ecs:DescribeServices\n              - ecs:UpdateService\n            Resource: \"*\"\n\n  # Nginx????\n  parserTargetForProxy:\n    Type: AWS::ApplicationAutoScaling::ScalableTarget\n    Properties:\n      MaxCapacity: !Ref maxCapacity\n      MinCapacity: !Ref minCapacity\n      ResourceId: !Join ['/', ['service', !ImportValue cluster, !Join ['', [!Ref accountAlliasLowerCase, '-internal-service-proxy']]]]\n      RoleARN: !GetAtt parserAutoScalingRole.Arn\n      ScalableDimension: ecs:service:DesiredCount\n      ServiceNamespace: ecs\n  ScaleUpPolicyForProxy:\n    Type: AWS::ApplicationAutoScaling::ScalingPolicy\n    Properties:\n      PolicyName: !Sub ${accountAlliasLowerCase}-scaleup-policy-internal-service-proxy\n      PolicyType: StepScaling\n      ScalingTargetId: !Ref parserTargetForProxy\n      StepScalingPolicyConfiguration:\n        AdjustmentType: ChangeInCapacity\n        MetricAggregationType: Average\n        Cooldown: 60\n        StepAdjustments:\n          - MetricIntervalLowerBound: 0\n            ScalingAdjustment: 1\n  CPUUtilizationTooHighAlarmForProxy:\n    Type: AWS::CloudWatch::Alarm\n    Properties:\n      AlarmDescription: 'Average CPU utilization over last 1 minutes higher than 80%'\n      AlarmName: !Sub ${accountAlliasLowerCase}-cpu-high-alarm-internal-service-proxy\n      Namespace: 'AWS/ECS'\n      Dimensions:\n        - Name: ClusterName\n          Value: !ImportValue cluster\n        - Name: ServiceName\n          Value: !Sub ${accountAlliasLowerCase}-internal-service-proxy\n      MetricName: CPUUtilization\n      ComparisonOperator: GreaterThanThreshold\n      Statistic: Average\n      Period: 60\n      EvaluationPeriods: 1\n      Threshold: !FindInMap [Autoscale, CPU, UpUsage]\n      AlarmActions:\n        - !Ref ScaleUpPolicyForProxy\n  ScaleDownPolicyForProxy:\n    Type: AWS::ApplicationAutoScaling::ScalingPolicy\n    Properties:\n      PolicyName: !Sub ${accountAlliasLowerCase}-scaledown-policy-internal-service-proxy\n      PolicyType: StepScaling\n      ScalingTargetId: !Ref parserTargetForProxy\n      StepScalingPolicyConfiguration:\n        AdjustmentType: ChangeInCapacity\n        MetricAggregationType: Average\n        Cooldown: 60\n        StepAdjustments:\n          - MetricIntervalUpperBound: 0\n            ScalingAdjustment: -1\n  CPUUtilizationTooLowAlarmForProxy:\n    Type: AWS::CloudWatch::Alarm\n    Properties:\n      AlarmDescription: 'Average CPU utilization over last 1 minutes lower than 30%'\n      AlarmName: !Sub ${accountAlliasLowerCase}-cpu-low-alarm-internal-service-proxy\n      Namespace: 'AWS/ECS'\n      Dimensions:\n        - Name: ClusterName\n          Value: !ImportValue cluster\n        - Name: ServiceName\n          Value: !Sub ${accountAlliasLowerCase}-internal-service-proxy\n      MetricName: CPUUtilization\n      ComparisonOperator: LessThanThreshold\n      Statistic: Average\n      Period: 60\n      EvaluationPeriods: 1\n      Threshold: !FindInMap [Autoscale, CPU, DownUsage]\n      AlarmActions:\n        - !Ref ScaleDownPolicyForProxy\n\n  # ?????API\n  parserTargetForUpdateMaster:\n    Type: AWS::ApplicationAutoScaling::ScalableTarget\n    Properties:\n      MaxCapacity: !Ref maxCapacity\n      MinCapacity: !Ref minCapacity\n      ResourceId: !Join ['/', ['service', !ImportValue cluster, !Join ['', [!Ref accountAlliasLowerCase, '-internal-service-api-updatemaster']]]]\n      RoleARN: !GetAtt parserAutoScalingRole.Arn\n      ScalableDimension: ecs:service:DesiredCount\n      ServiceNamespace: ecs\n  ScaleUpPolicyForUpdateMaster:\n    Type: AWS::ApplicationAutoScaling::ScalingPolicy\n    Properties:\n      PolicyName: !Sub ${accountAlliasLowerCase}-scaleup-policy-internal-service-api-updatemaster\n      PolicyType: StepScaling\n      ScalingTargetId: !Ref parserTargetForUpdateMaster\n      StepScalingPolicyConfiguration:\n        AdjustmentType: ChangeInCapacity\n        MetricAggregationType: Average\n        Cooldown: 60\n        StepAdjustments:\n          - MetricIntervalLowerBound: 0\n            ScalingAdjustment: 1\n  CPUUtilizationTooHighAlarmForUpdateMaster:\n    Type: AWS::CloudWatch::Alarm\n    Properties:\n      AlarmDescription: 'Average CPU utilization over last 1 minutes higher than 80%'\n      AlarmName: !Sub ${accountAlliasLowerCase}-cpu-high-alarm-internal-service-api-updatemaster\n      Namespace: 'AWS/ECS'\n      Dimensions:\n        - Name: ClusterName\n          Value: !ImportValue cluster\n        - Name: ServiceName\n          Value: !Sub ${accountAlliasLowerCase}-internal-service-api-updatemaster\n      MetricName: CPUUtilization\n      ComparisonOperator: GreaterThanThreshold\n      Statistic: Average\n      Period: 60\n      EvaluationPeriods: 1\n      Threshold: !FindInMap [Autoscale, CPU, UpUsage]\n      AlarmActions:\n        - !Ref ScaleUpPolicyForUpdateMaster\n  ScaleDownPolicyForUpdateMaster:\n    Type: AWS::ApplicationAutoScaling::ScalingPolicy\n    Properties:\n      PolicyName: !Sub ${accountAlliasLowerCase}-scaledown-policy-internal-service-api-updatemaster\n      PolicyType: StepScaling\n      ScalingTargetId: !Ref parserTargetForUpdateMaster\n      StepScalingPolicyConfiguration:\n        AdjustmentType: ChangeInCapacity\n        MetricAggregationType: Average\n        Cooldown: 60\n        StepAdjustments:\n          - MetricIntervalUpperBound: 0\n            ScalingAdjustment: -1\n  CPUUtilizationTooLowAlarmForUpdateMaster:\n    Type: AWS::CloudWatch::Alarm\n    Properties:\n      AlarmDescription: 'Average CPU utilization over last 1 minutes lower than 30%'\n      AlarmName: !Sub ${accountAlliasLowerCase}-cpu-low-alarm-internal-service-api-updatemaster\n      Namespace: 'AWS/ECS'\n      Dimensions:\n        - Name: ClusterName\n          Value: !ImportValue cluster\n        - Name: ServiceName\n          Value: !Sub ${accountAlliasLowerCase}-internal-service-api-updatemaster\n      MetricName: CPUUtilization\n      ComparisonOperator: LessThanThreshold\n      Statistic: Average\n      Period: 60\n      EvaluationPeriods: 1\n      Threshold: !FindInMap [Autoscale, CPU, DownUsage]\n      AlarmActions:\n        - !Ref ScaleDownPolicyForUpdateMaster\n\n  # ????API\n  parserTargetForPutAuthorityData:\n    Type: AWS::ApplicationAutoScaling::ScalableTarget\n    Properties:\n      MaxCapacity: !Ref maxCapacity\n      MinCapacity: !Ref minCapacity\n      ResourceId: !Join ['/', ['service', !ImportValue cluster, !Join ['', [!Ref accountAlliasLowerCase, '-internal-service-api-putauthoritydata']]]]\n      RoleARN: !GetAtt parserAutoScalingRole.Arn\n      ScalableDimension: ecs:service:DesiredCount\n      ServiceNamespace: ecs\n  ScaleUpPolicyForPutAuthorityData:\n    Type: AWS::ApplicationAutoScaling::ScalingPolicy\n    Properties:\n      PolicyName: !Sub ${accountAlliasLowerCase}-scaleup-policy-internal-service-api-putauthoritydata\n      PolicyType: StepScaling\n      ScalingTargetId: !Ref parserTargetForPutAuthorityData\n      StepScalingPolicyConfiguration:\n        AdjustmentType: ChangeInCapacity\n        MetricAggregationType: Average\n        Cooldown: 60\n        StepAdjustments:\n          - MetricIntervalLowerBound: 0\n            ScalingAdjustment: 1\n  CPUUtilizationTooHighAlarmForPutAuthorityData:\n    Type: AWS::CloudWatch::Alarm\n    Properties:\n      AlarmDescription: 'Average CPU utilization over last 1 minutes higher than 80%'\n      AlarmName: !Sub ${accountAlliasLowerCase}-cpu-high-alarm-internal-service-api-putauthoritydata\n      Namespace: 'AWS/ECS'\n      Dimensions:\n        - Name: ClusterName\n          Value: !ImportValue cluster\n        - Name: ServiceName\n          Value: !Sub ${accountAlliasLowerCase}-internal-service-api-putauthoritydata\n      MetricName: CPUUtilization\n      ComparisonOperator: GreaterThanThreshold\n      Statistic: Average\n      Period: 60\n      EvaluationPeriods: 1\n      Threshold: !FindInMap [Autoscale, CPU, UpUsage]\n      AlarmActions:\n        - !Ref ScaleUpPolicyForPutAuthorityData\n  ScaleDownPolicyForPutAuthorityData:\n    Type: AWS::ApplicationAutoScaling::ScalingPolicy\n    Properties:\n      PolicyName: !Sub ${accountAlliasLowerCase}-scaledown-policy-internal-service-api-putauthoritydata\n      PolicyType: StepScaling\n      ScalingTargetId: !Ref parserTargetForPutAuthorityData\n      StepScalingPolicyConfiguration:\n        AdjustmentType: ChangeInCapacity\n        MetricAggregationType: Average\n        Cooldown: 60\n        StepAdjustments:\n          - MetricIntervalUpperBound: 0\n            ScalingAdjustment: -1\n  CPUUtilizationTooLowAlarmForPutAuthorityData:\n    Type: AWS::CloudWatch::Alarm\n    Properties:\n      AlarmDescription: 'Average CPU utilization over last 1 minutes lower than 30%'\n      AlarmName: !Sub ${accountAlliasLowerCase}-cpu-low-alarm-internal-service-api-putauthoritydata\n      Namespace: 'AWS/ECS'\n      Dimensions:\n        - Name: ClusterName\n          Value: !ImportValue cluster\n        - Name: ServiceName\n          Value: !Sub ${accountAlliasLowerCase}-internal-service-api-putauthoritydata\n      MetricName: CPUUtilization\n      ComparisonOperator: LessThanThreshold\n      Statistic: Average\n      Period: 60\n      EvaluationPeriods: 1\n      Threshold: !FindInMap [Autoscale, CPU, DownUsage]\n      AlarmActions:\n        - !Ref ScaleDownPolicyForPutAuthorityData\n\n  # ????API\n  parserTargetForGetAuthorityStatus:\n    Type: AWS::ApplicationAutoScaling::ScalableTarget\n    Properties:\n      MaxCapacity: !Ref maxCapacity\n      MinCapacity: !Ref minCapacity\n      ResourceId: !Join ['/', ['service', !ImportValue cluster, !Join ['', [!Ref accountAlliasLowerCase, '-internal-service-api-getauthoritystatus']]]]\n      RoleARN: !GetAtt parserAutoScalingRole.Arn\n      ScalableDimension: ecs:service:DesiredCount\n      ServiceNamespace: ecs\n  ScaleUpPolicyForGetAuthorityStatus:\n    Type: AWS::ApplicationAutoScaling::ScalingPolicy\n    Properties:\n      PolicyName: !Sub ${accountAlliasLowerCase}-scaleup-policy-internal-service-api-getauthoritystatus\n      PolicyType: StepScaling\n      ScalingTargetId: !Ref parserTargetForGetAuthorityStatus\n      StepScalingPolicyConfiguration:\n        AdjustmentType: ChangeInCapacity\n        MetricAggregationType: Average\n        Cooldown: 60\n        StepAdjustments:\n          - MetricIntervalLowerBound: 0\n            ScalingAdjustment: 1\n  CPUUtilizationTooHighAlarmForGetAuthorityStatus:\n    Type: AWS::CloudWatch::Alarm\n    Properties:\n      AlarmDescription: 'Average CPU utilization over last 1 minutes higher than 80%'\n      AlarmName: !Sub ${accountAlliasLowerCase}-cpu-high-alarm-internal-service-api-getauthoritystatus\n      Namespace: 'AWS/ECS'\n      Dimensions:\n        - Name: ClusterName\n          Value: !ImportValue cluster\n        - Name: ServiceName\n          Value: !Sub ${accountAlliasLowerCase}-internal-service-api-getauthoritystatus\n      MetricName: CPUUtilization\n      ComparisonOperator: GreaterThanThreshold\n      Statistic: Average\n      Period: 60\n      EvaluationPeriods: 1\n      Threshold: !FindInMap [Autoscale, CPU, UpUsage]\n      AlarmActions:\n        - !Ref ScaleUpPolicyForGetAuthorityStatus\n  ScaleDownPolicyForGetAuthorityStatus:\n    Type: AWS::ApplicationAutoScaling::ScalingPolicy\n    Properties:\n      PolicyName: !Sub ${accountAlliasLowerCase}-scaledown-policy-internal-service-api-getauthoritystatus\n      PolicyType: StepScaling\n      ScalingTargetId: !Ref parserTargetForGetAuthorityStatus\n      StepScalingPolicyConfiguration:\n        AdjustmentType: ChangeInCapacity\n        MetricAggregationType: Average\n        Cooldown: 60\n        StepAdjustments:\n          - MetricIntervalUpperBound: 0\n            ScalingAdjustment: -1\n  CPUUtilizationTooLowAlarmForGetAuthorityStatus:\n    Type: AWS::CloudWatch::Alarm\n    Properties:\n      AlarmDescription: 'Average CPU utilization over last 1 minutes lower than 30%'\n      AlarmName: !Sub ${accountAlliasLowerCase}-cpu-low-alarm-internal-service-api-getauthoritystatus\n      Namespace: 'AWS/ECS'\n      Dimensions:\n        - Name: ClusterName\n          Value: !ImportValue cluster\n        - Name: ServiceName\n          Value: !Sub ${accountAlliasLowerCase}-internal-service-api-getauthoritystatus\n      MetricName: CPUUtilization\n      ComparisonOperator: LessThanThreshold\n      Statistic: Average\n      Period: 60\n      EvaluationPeriods: 1\n      Threshold: !FindInMap [Autoscale, CPU, DownUsage]\n      AlarmActions:\n        - !Ref ScaleDownPolicyForGetAuthorityStatus\n\n  # ?????????API\n  parserTargetForGetSaleHistoryForWiFi:\n    Type: AWS::ApplicationAutoScaling::ScalableTarget\n    Properties:\n      MaxCapacity: !Ref maxCapacity\n      MinCapacity: !Ref minCapacity\n      ResourceId: !Join ['/', ['service', !ImportValue cluster, !Join ['', [!Ref accountAlliasLowerCase, '-internal-service-api-getsalehistoryforwifi']]]]\n      RoleARN: !GetAtt parserAutoScalingRole.Arn\n      ScalableDimension: ecs:service:DesiredCount\n      ServiceNamespace: ecs\n  ScaleUpPolicyForGetSaleHistoryForWiFi:\n    Type: AWS::ApplicationAutoScaling::ScalingPolicy\n    Properties:\n      PolicyName: !Sub ${accountAlliasLowerCase}-scaleup-policy-internal-service-api-getsalehistoryforwifi\n      PolicyType: StepScaling\n      ScalingTargetId: !Ref parserTargetForGetSaleHistoryForWiFi\n      StepScalingPolicyConfiguration:\n        AdjustmentType: ChangeInCapacity\n        MetricAggregationType: Average\n        Cooldown: 60\n        StepAdjustments:\n          - MetricIntervalLowerBound: 0\n            ScalingAdjustment: 1\n  CPUUtilizationTooHighAlarmForGetSaleHistoryForWiFi:\n    Type: AWS::CloudWatch::Alarm\n    Properties:\n      AlarmDescription: 'Average CPU utilization over last 1 minutes higher than 80%'\n      AlarmName: !Sub ${accountAlliasLowerCase}-cpu-high-alarm-internal-service-api-getsalehistoryforwifi\n      Namespace: 'AWS/ECS'\n      Dimensions:\n        - Name: ClusterName\n          Value: !ImportValue cluster\n        - Name: ServiceName\n          Value: !Sub ${accountAlliasLowerCase}-internal-service-api-getsalehistoryforwifi\n      MetricName: CPUUtilization\n      ComparisonOperator: GreaterThanThreshold\n      Statistic: Average\n      Period: 60\n      EvaluationPeriods: 1\n      Threshold: !FindInMap [Autoscale, CPU, UpUsage]\n      AlarmActions:\n        - !Ref ScaleUpPolicyForGetSaleHistoryForWiFi\n  ScaleDownPolicyForGetSaleHistoryForWiFi:\n    Type: AWS::ApplicationAutoScaling::ScalingPolicy\n    Properties:\n      PolicyName: !Sub ${accountAlliasLowerCase}-scaledown-policy-internal-service-api-getsalehistoryforwifi\n      PolicyType: StepScaling\n      ScalingTargetId: !Ref parserTargetForGetSaleHistoryForWiFi\n      StepScalingPolicyConfiguration:\n        AdjustmentType: ChangeInCapacity\n        MetricAggregationType: Average\n        Cooldown: 60\n        StepAdjustments:\n          - MetricIntervalUpperBound: 0\n            ScalingAdjustment: -1\n  CPUUtilizationTooLowAlarmForGetSaleHistoryForWiFi:\n    Type: AWS::CloudWatch::Alarm\n    Properties:\n      AlarmDescription: 'Average CPU utilization over last 1 minutes lower than 30%'\n      AlarmName: !Sub ${accountAlliasLowerCase}-cpu-low-alarm-internal-service-api-getsalehistoryforwifi\n      Namespace: 'AWS/ECS'\n      Dimensions:\n        - Name: ClusterName\n          Value: !ImportValue cluster\n        - Name: ServiceName\n          Value: !Sub ${accountAlliasLowerCase}-internal-service-api-getsalehistoryforwifi\n      MetricName: CPUUtilization\n      ComparisonOperator: LessThanThreshold\n      Statistic: Average\n      Period: 60\n      EvaluationPeriods: 1\n      Threshold: !FindInMap [Autoscale, CPU, DownUsage]\n      AlarmActions:\n        - !Ref ScaleDownPolicyForGetSaleHistoryForWiFi\n\n  # ????API\n  parserTargetForUseAuthority:\n    Type: AWS::ApplicationAutoScaling::ScalableTarget\n    Properties:\n      MaxCapacity: !Ref maxCapacity\n      MinCapacity: !Ref minCapacity\n      ResourceId: !Join ['/', ['service', !ImportValue cluster, !Join ['', [!Ref accountAlliasLowerCase, '-internal-service-api-useauthority']]]]\n      RoleARN: !GetAtt parserAutoScalingRole.Arn\n      ScalableDimension: ecs:service:DesiredCount\n      ServiceNamespace: ecs\n  ScaleUpPolicyForUseAuthority:\n    Type: AWS::ApplicationAutoScaling::ScalingPolicy\n    Properties:\n      PolicyName: !Sub ${accountAlliasLowerCase}-scaleup-policy-internal-service-api-useauthority\n      PolicyType: StepScaling\n      ScalingTargetId: !Ref parserTargetForUseAuthority\n      StepScalingPolicyConfiguration:\n        AdjustmentType: ChangeInCapacity\n        MetricAggregationType: Average\n        Cooldown: 60\n        StepAdjustments:\n          - MetricIntervalLowerBound: 0\n            ScalingAdjustment: 1\n  CPUUtilizationTooHighAlarmForUseAuthority:\n    Type: AWS::CloudWatch::Alarm\n    Properties:\n      AlarmDescription: 'Average CPU utilization over last 1 minutes higher than 80%'\n      AlarmName: !Sub ${accountAlliasLowerCase}-cpu-high-alarm-internal-service-api-useauthority\n      Namespace: 'AWS/ECS'\n      Dimensions:\n        - Name: ClusterName\n          Value: !ImportValue cluster\n        - Name: ServiceName\n          Value: !Sub ${accountAlliasLowerCase}-internal-service-api-useauthority\n      MetricName: CPUUtilization\n      ComparisonOperator: GreaterThanThreshold\n      Statistic: Average\n      Period: 60\n      EvaluationPeriods: 1\n      Threshold: !FindInMap [Autoscale, CPU, UpUsage]\n      AlarmActions:\n        - !Ref ScaleUpPolicyForUseAuthority\n  ScaleDownPolicyForUseAuthority:\n    Type: AWS::ApplicationAutoScaling::ScalingPolicy\n    Properties:\n      PolicyName: !Sub ${accountAlliasLowerCase}-scaledown-policy-internal-service-api-useauthority\n      PolicyType: StepScaling\n      ScalingTargetId: !Ref parserTargetForUseAuthority\n      StepScalingPolicyConfiguration:\n        AdjustmentType: ChangeInCapacity\n        MetricAggregationType: Average\n        Cooldown: 60\n        StepAdjustments:\n          - MetricIntervalUpperBound: 0\n            ScalingAdjustment: -1\n  CPUUtilizationTooLowAlarmForUseAuthority:\n    Type: AWS::CloudWatch::Alarm\n    Properties:\n      AlarmDescription: 'Average CPU utilization over last 1 minutes lower than 30%'\n      AlarmName: !Sub ${accountAlliasLowerCase}-cpu-low-alarm-internal-service-api-useauthority\n      Namespace: 'AWS/ECS'\n      Dimensions:\n        - Name: ClusterName\n          Value: !ImportValue cluster\n        - Name: ServiceName\n          Value: !Sub ${accountAlliasLowerCase}-internal-service-api-useauthority\n      MetricName: CPUUtilization\n      ComparisonOperator: LessThanThreshold\n      Statistic: Average\n      Period: 60\n      EvaluationPeriods: 1\n      Threshold: !FindInMap [Autoscale, CPU, DownUsage]\n      AlarmActions:\n        - !Ref ScaleDownPolicyForUseAuthority\n\n  # ??????API\n  parserTargetForAuthorityRollback:\n    Type: AWS::ApplicationAutoScaling::ScalableTarget\n    Properties:\n      MaxCapacity: !Ref maxCapacity\n      MinCapacity: !Ref minCapacity\n      ResourceId: !Join ['/', ['service', !ImportValue cluster, !Join ['', [!Ref accountAlliasLowerCase, '-internal-service-api-authorityrollback']]]]\n      RoleARN: !GetAtt parserAutoScalingRole.Arn\n      ScalableDimension: ecs:service:DesiredCount\n      ServiceNamespace: ecs\n  ScaleUpPolicyForAuthorityRollback:\n    Type: AWS::ApplicationAutoScaling::ScalingPolicy\n    Properties:\n      PolicyName: !Sub ${accountAlliasLowerCase}-scaleup-policy-internal-service-api-authorityrollback\n      PolicyType: StepScaling\n      ScalingTargetId: !Ref parserTargetForAuthorityRollback\n      StepScalingPolicyConfiguration:\n        AdjustmentType: ChangeInCapacity\n        MetricAggregationType: Average\n        Cooldown: 60\n        StepAdjustments:\n          - MetricIntervalLowerBound: 0\n            ScalingAdjustment: 1\n  CPUUtilizationTooHighAlarmForAuthorityRollback:\n    Type: AWS::CloudWatch::Alarm\n    Properties:\n      AlarmDescription: 'Average CPU utilization over last 1 minutes higher than 80%'\n      AlarmName: !Sub ${accountAlliasLowerCase}-cpu-high-alarm-internal-service-api-authorityrollback\n      Namespace: 'AWS/ECS'\n      Dimensions:\n        - Name: ClusterName\n          Value: !ImportValue cluster\n        - Name: ServiceName\n          Value: !Sub ${accountAlliasLowerCase}-internal-service-api-authorityrollback\n      MetricName: CPUUtilization\n      ComparisonOperator: GreaterThanThreshold\n      Statistic: Average\n      Period: 60\n      EvaluationPeriods: 1\n      Threshold: !FindInMap [Autoscale, CPU, UpUsage]\n      AlarmActions:\n        - !Ref ScaleUpPolicyForAuthorityRollback\n  ScaleDownPolicyForAuthorityRollback:\n    Type: AWS::ApplicationAutoScaling::ScalingPolicy\n    Properties:\n      PolicyName: !Sub ${accountAlliasLowerCase}-scaledown-policy-internal-service-api-authorityrollback\n      PolicyType: StepScaling\n      ScalingTargetId: !Ref parserTargetForAuthorityRollback\n      StepScalingPolicyConfiguration:\n        AdjustmentType: ChangeInCapacity\n        MetricAggregationType: Average\n        Cooldown: 60\n        StepAdjustments:\n          - MetricIntervalUpperBound: 0\n            ScalingAdjustment: -1\n  CPUUtilizationTooLowAlarmForAuthorityRollback:\n    Type: AWS::CloudWatch::Alarm\n    Properties:\n      AlarmDescription: 'Average CPU utilization over last 1 minutes lower than 30%'\n      AlarmName: !Sub ${accountAlliasLowerCase}-cpu-low-alarm-internal-service-api-authorityrollback\n      Namespace: 'AWS/ECS'\n      Dimensions:\n        - Name: ClusterName\n          Value: !ImportValue cluster\n        - Name: ServiceName\n          Value: !Sub ${accountAlliasLowerCase}-internal-service-api-authorityrollback\n      MetricName: CPUUtilization\n      ComparisonOperator: LessThanThreshold\n      Statistic: Average\n      Period: 60\n      EvaluationPeriods: 1\n      Threshold: !FindInMap [Autoscale, CPU, DownUsage]\n      AlarmActions:\n        - !Ref ScaleDownPolicyForAuthorityRollback\n\n  # ???????API\n  parserTargetForGetSalePlanForWiFi:\n    Type: AWS::ApplicationAutoScaling::ScalableTarget\n    Properties:\n      MaxCapacity: !Ref maxCapacity\n      MinCapacity: !Ref minCapacity\n      ResourceId: !Join ['/', ['service', !ImportValue cluster, !Join ['', [!Ref accountAlliasLowerCase, '-internal-service-api-getsaleplanforwifi']]]]\n      RoleARN: !GetAtt parserAutoScalingRole.Arn\n      ScalableDimension: ecs:service:DesiredCount\n      ServiceNamespace: ecs\n  ScaleUpPolicyForGetSalePlanForWiFi:\n    Type: AWS::ApplicationAutoScaling::ScalingPolicy\n    Properties:\n      PolicyName: !Sub ${accountAlliasLowerCase}-scaleup-policy-internal-service-api-getsaleplanforwifi\n      PolicyType: StepScaling\n      ScalingTargetId: !Ref parserTargetForGetSalePlanForWiFi\n      StepScalingPolicyConfiguration:\n        AdjustmentType: ChangeInCapacity\n        MetricAggregationType: Average\n        Cooldown: 60\n        StepAdjustments:\n          - MetricIntervalLowerBound: 0\n            ScalingAdjustment: 1\n  CPUUtilizationTooHighAlarmForGetSalePlanForWiFi:\n    Type: AWS::CloudWatch::Alarm\n    Properties:\n      AlarmDescription: 'Average CPU utilization over last 1 minutes higher than 80%'\n      AlarmName: !Sub ${accountAlliasLowerCase}-cpu-high-alarm-internal-service-api-getsaleplanforwifi\n      Namespace: 'AWS/ECS'\n      Dimensions:\n        - Name: ClusterName\n          Value: !ImportValue cluster\n        - Name: ServiceName\n          Value: !Sub ${accountAlliasLowerCase}-internal-service-api-getsaleplanforwifi\n      MetricName: CPUUtilization\n      ComparisonOperator: GreaterThanThreshold\n      Statistic: Average\n      Period: 60\n      EvaluationPeriods: 1\n      Threshold: !FindInMap [Autoscale, CPU, UpUsage]\n      AlarmActions:\n        - !Ref ScaleUpPolicyForGetSalePlanForWiFi\n  ScaleDownPolicyForGetSalePlanForWiFi:\n    Type: AWS::ApplicationAutoScaling::ScalingPolicy\n    Properties:\n      PolicyName: !Sub ${accountAlliasLowerCase}-scaledown-policy-internal-service-api-getsaleplanforwifi\n      PolicyType: StepScaling\n      ScalingTargetId: !Ref parserTargetForGetSalePlanForWiFi\n      StepScalingPolicyConfiguration:\n        AdjustmentType: ChangeInCapacity\n        MetricAggregationType: Average\n        Cooldown: 60\n        StepAdjustments:\n          - MetricIntervalUpperBound: 0\n            ScalingAdjustment: -1\n  CPUUtilizationTooLowAlarmForGetSalePlanForWiFi:\n    Type: AWS::CloudWatch::Alarm\n    Properties:\n      AlarmDescription: 'Average CPU utilization over last 1 minutes lower than 30%'\n      AlarmName: !Sub ${accountAlliasLowerCase}-cpu-low-alarm-internal-service-api-getsaleplanforwifi\n      Namespace: 'AWS/ECS'\n      Dimensions:\n        - Name: ClusterName\n          Value: !ImportValue cluster\n        - Name: ServiceName\n          Value: !Sub ${accountAlliasLowerCase}-internal-service-api-getsaleplanforwifi\n      MetricName: CPUUtilization\n      ComparisonOperator: LessThanThreshold\n      Statistic: Average\n      Period: 60\n      EvaluationPeriods: 1\n      Threshold: !FindInMap [Autoscale, CPU, DownUsage]\n      AlarmActions:\n        - !Ref ScaleDownPolicyForGetSalePlanForWiFi\n\n  # ??????API\n  parserTargetForGetUseHistory:\n    Type: AWS::ApplicationAutoScaling::ScalableTarget\n    Properties:\n      MaxCapacity: !Ref maxCapacity\n      MinCapacity: !Ref minCapacity\n      ResourceId: !Join ['/', ['service', !ImportValue cluster, !Join ['', [!Ref accountAlliasLowerCase, '-internal-service-api-getusehistory']]]]\n      RoleARN: !GetAtt parserAutoScalingRole.Arn\n      ScalableDimension: ecs:service:DesiredCount\n      ServiceNamespace: ecs\n  ScaleUpPolicyForGetUseHistory:\n    Type: AWS::ApplicationAutoScaling::ScalingPolicy\n    Properties:\n      PolicyName: !Sub ${accountAlliasLowerCase}-scaleup-policy-internal-service-api-getusehistory\n      PolicyType: StepScaling\n      ScalingTargetId: !Ref parserTargetForGetUseHistory\n      StepScalingPolicyConfiguration:\n        AdjustmentType: ChangeInCapacity\n        MetricAggregationType: Average\n        Cooldown: 60\n        StepAdjustments:\n          - MetricIntervalLowerBound: 0\n            ScalingAdjustment: 1\n  CPUUtilizationTooHighAlarmForGetUseHistory:\n    Type: AWS::CloudWatch::Alarm\n    Properties:\n      AlarmDescription: 'Average CPU utilization over last 1 minutes higher than 80%'\n      AlarmName: !Sub ${accountAlliasLowerCase}-cpu-high-alarm-internal-service-api-getusehistory\n      Namespace: 'AWS/ECS'\n      Dimensions:\n        - Name: ClusterName\n          Value: !ImportValue cluster\n        - Name: ServiceName\n          Value: !Sub ${accountAlliasLowerCase}-internal-service-api-getusehistory\n      MetricName: CPUUtilization\n      ComparisonOperator: GreaterThanThreshold\n      Statistic: Average\n      Period: 60\n      EvaluationPeriods: 1\n      Threshold: !FindInMap [Autoscale, CPU, UpUsage]\n      AlarmActions:\n        - !Ref ScaleUpPolicyForGetUseHistory\n  ScaleDownPolicyForGetUseHistory:\n    Type: AWS::ApplicationAutoScaling::ScalingPolicy\n    Properties:\n      PolicyName: !Sub ${accountAlliasLowerCase}-scaledown-policy-internal-service-api-getusehistory\n      PolicyType: StepScaling\n      ScalingTargetId: !Ref parserTargetForGetUseHistory\n      StepScalingPolicyConfiguration:\n        AdjustmentType: ChangeInCapacity\n        MetricAggregationType: Average\n        Cooldown: 60\n        StepAdjustments:\n          - MetricIntervalUpperBound: 0\n            ScalingAdjustment: -1\n  CPUUtilizationTooLowAlarmForGetUseHistory:\n    Type: AWS::CloudWatch::Alarm\n    Properties:\n      AlarmDescription: 'Average CPU utilization over last 1 minutes lower than 30%'\n      AlarmName: !Sub ${accountAlliasLowerCase}-cpu-low-alarm-internal-service-api-getusehistory\n      Namespace: 'AWS/ECS'\n      Dimensions:\n        - Name: ClusterName\n          Value: !ImportValue cluster\n        - Name: ServiceName\n          Value: !Sub ${accountAlliasLowerCase}-internal-service-api-getusehistory\n      MetricName: CPUUtilization\n      ComparisonOperator: LessThanThreshold\n      Statistic: Average\n      Period: 60\n      EvaluationPeriods: 1\n      Threshold: !FindInMap [Autoscale, CPU, DownUsage]\n      AlarmActions:\n        - !Ref ScaleDownPolicyForGetUseHistory\n\n  # QQ???????API\n  parserTargetForQqCallInfoUpdate:\n    Type: AWS::ApplicationAutoScaling::ScalableTarget\n    Properties:\n      MaxCapacity: !Ref maxCapacity\n      MinCapacity: !Ref minCapacity\n      ResourceId: !Join ['/', ['service', !ImportValue cluster, !Join ['', [!Ref accountAlliasLowerCase, '-internal-service-api-qqcallinfoupdate']]]]\n      RoleARN: !GetAtt parserAutoScalingRole.Arn\n      ScalableDimension: ecs:service:DesiredCount\n      ServiceNamespace: ecs\n  ScaleUpPolicyForQqCallInfoUpdate:\n    Type: AWS::ApplicationAutoScaling::ScalingPolicy\n    Properties:\n      PolicyName: !Sub ${accountAlliasLowerCase}-scaleup-policy-internal-service-api-qqcallinfoupdate\n      PolicyType: StepScaling\n      ScalingTargetId: !Ref parserTargetForQqCallInfoUpdate\n      StepScalingPolicyConfiguration:\n        AdjustmentType: ChangeInCapacity\n        MetricAggregationType: Average\n        Cooldown: 60\n        StepAdjustments:\n          - MetricIntervalLowerBound: 0\n            ScalingAdjustment: 1\n  CPUUtilizationTooHighAlarmForQqCallInfoUpdate:\n    Type: AWS::CloudWatch::Alarm\n    Properties:\n      AlarmDescription: 'Average CPU utilization over last 1 minutes higher than 80%'\n      AlarmName: !Sub ${accountAlliasLowerCase}-cpu-high-alarm-internal-service-api-qqcallinfoupdate\n      Namespace: 'AWS/ECS'\n      Dimensions:\n        - Name: ClusterName\n          Value: !ImportValue cluster\n        - Name: ServiceName\n          Value: !Sub ${accountAlliasLowerCase}-internal-service-api-qqcallinfoupdate\n      MetricName: CPUUtilization\n      ComparisonOperator: GreaterThanThreshold\n      Statistic: Average\n      Period: 60\n      EvaluationPeriods: 1\n      Threshold: !FindInMap [Autoscale, CPU, UpUsage]\n      AlarmActions:\n        - !Ref ScaleUpPolicyForQqCallInfoUpdate\n  ScaleDownPolicyForQqCallInfoUpdate:\n    Type: AWS::ApplicationAutoScaling::ScalingPolicy\n    Properties:\n      PolicyName: !Sub ${accountAlliasLowerCase}-scaledown-policy-internal-service-api-qqcallinfoupdate\n      PolicyType: StepScaling\n      ScalingTargetId: !Ref parserTargetForQqCallInfoUpdate\n      StepScalingPolicyConfiguration:\n        AdjustmentType: ChangeInCapacity\n        MetricAggregationType: Average\n        Cooldown: 60\n        StepAdjustments:\n          - MetricIntervalUpperBound: 0\n            ScalingAdjustment: -1\n  CPUUtilizationTooLowAlarmForQqCallInfoUpdate:\n    Type: AWS::CloudWatch::Alarm\n    Properties:\n      AlarmDescription: 'Average CPU utilization over last 1 minutes lower than 30%'\n      AlarmName: !Sub ${accountAlliasLowerCase}-cpu-low-alarm-internal-service-api-qqcallinfoupdate\n      Namespace: 'AWS/ECS'\n      Dimensions:\n        - Name: ClusterName\n          Value: !ImportValue cluster\n        - Name: ServiceName\n          Value: !Sub ${accountAlliasLowerCase}-internal-service-api-qqcallinfoupdate\n      MetricName: CPUUtilization\n      ComparisonOperator: LessThanThreshold\n      Statistic: Average\n      Period: 60\n      EvaluationPeriods: 1\n      Threshold: !FindInMap [Autoscale, CPU, DownUsage]\n      AlarmActions:\n        - !Ref ScaleDownPolicyForQqCallInfoUpdate\n\n  # ???????????API\n  parserTargetForMyDealerInfoUpdate:\n    Type: AWS::ApplicationAutoScaling::ScalableTarget\n    Properties:\n      MaxCapacity: !Ref maxCapacity\n      MinCapacity: !Ref minCapacity\n      ResourceId: !Join ['/', ['service', !ImportValue cluster, !Join ['', [!Ref accountAlliasLowerCase, '-internal-service-api-mydealerinfoupdate']]]]\n      RoleARN: !GetAtt parserAutoScalingRole.Arn\n      ScalableDimension: ecs:service:DesiredCount\n      ServiceNamespace: ecs\n  ScaleUpPolicyForMyDealerInfoUpdate:\n    Type: AWS::ApplicationAutoScaling::ScalingPolicy\n    Properties:\n      PolicyName: !Sub ${accountAlliasLowerCase}-scaleup-policy-internal-service-api-mydealerinfoupdate\n      PolicyType: StepScaling\n      ScalingTargetId: !Ref parserTargetForMyDealerInfoUpdate\n      StepScalingPolicyConfiguration:\n        AdjustmentType: ChangeInCapacity\n        MetricAggregationType: Average\n        Cooldown: 60\n        StepAdjustments:\n          - MetricIntervalLowerBound: 0\n            ScalingAdjustment: 1\n  CPUUtilizationTooHighAlarmForMyDealerInfoUpdate:\n    Type: AWS::CloudWatch::Alarm\n    Properties:\n      AlarmDescription: 'Average CPU utilization over last 1 minutes higher than 80%'\n      AlarmName: !Sub ${accountAlliasLowerCase}-cpu-high-alarm-internal-service-api-mydealerinfoupdate\n      Namespace: 'AWS/ECS'\n      Dimensions:\n        - Name: ClusterName\n          Value: !ImportValue cluster\n        - Name: ServiceName\n          Value: !Sub ${accountAlliasLowerCase}-internal-service-api-mydealerinfoupdate\n      MetricName: CPUUtilization\n      ComparisonOperator: GreaterThanThreshold\n      Statistic: Average\n      Period: 60\n      EvaluationPeriods: 1\n      Threshold: !FindInMap [Autoscale, CPU, UpUsage]\n      AlarmActions:\n        - !Ref ScaleUpPolicyForMyDealerInfoUpdate\n  ScaleDownPolicyForMyDealerInfoUpdate:\n    Type: AWS::ApplicationAutoScaling::ScalingPolicy\n    Properties:\n      PolicyName: !Sub ${accountAlliasLowerCase}-scaledown-policy-internal-service-api-mydealerinfoupdate\n      PolicyType: StepScaling\n      ScalingTargetId: !Ref parserTargetForMyDealerInfoUpdate\n      StepScalingPolicyConfiguration:\n        AdjustmentType: ChangeInCapacity\n        MetricAggregationType: Average\n        Cooldown: 60\n        StepAdjustments:\n          - MetricIntervalUpperBound: 0\n            ScalingAdjustment: -1\n  CPUUtilizationTooLowAlarmForMyDealerInfoUpdate:\n    Type: AWS::CloudWatch::Alarm\n    Properties:\n      AlarmDescription: 'Average CPU utilization over last 1 minutes lower than 30%'\n      AlarmName: !Sub ${accountAlliasLowerCase}-cpu-low-alarm-internal-service-api-mydealerinfoupdate\n      Namespace: 'AWS/ECS'\n      Dimensions:\n        - Name: ClusterName\n          Value: !ImportValue cluster\n        - Name: ServiceName\n          Value: !Sub ${accountAlliasLowerCase}-internal-service-api-mydealerinfoupdate\n      MetricName: CPUUtilization\n      ComparisonOperator: LessThanThreshold\n      Statistic: Average\n      Period: 60\n      EvaluationPeriods: 1\n      Threshold: !FindInMap [Autoscale, CPU, DownUsage]\n      AlarmActions:\n        - !Ref ScaleDownPolicyForMyDealerInfoUpdate\n\n  # ??????????API\n  parserTargetForGtcOpeningProvisioning:\n    Type: AWS::ApplicationAutoScaling::ScalableTarget\n    Properties:\n      MaxCapacity: !Ref maxCapacity\n      MinCapacity: !Ref minCapacity\n      ResourceId: !Join ['/', ['service', !ImportValue cluster, !Join ['', [!Ref accountAlliasLowerCase, '-internal-service-api-gtcopeningprovisioning']]]]\n      RoleARN: !GetAtt parserAutoScalingRole.Arn\n      ScalableDimension: ecs:service:DesiredCount\n      ServiceNamespace: ecs\n  ScaleUpPolicyForGtcOpeningProvisioning:\n    Type: AWS::ApplicationAutoScaling::ScalingPolicy\n    Properties:\n      PolicyName: !Sub ${accountAlliasLowerCase}-scaleup-policy-internal-service-api-gtcopeningprovisioning\n      PolicyType: StepScaling\n      ScalingTargetId: !Ref parserTargetForGtcOpeningProvisioning\n      StepScalingPolicyConfiguration:\n        AdjustmentType: ChangeInCapacity\n        MetricAggregationType: Average\n        Cooldown: 60\n        StepAdjustments:\n          - MetricIntervalLowerBound: 0\n            ScalingAdjustment: 1\n  CPUUtilizationTooHighAlarmForGtcOpeningProvisioning:\n    Type: AWS::CloudWatch::Alarm\n    Properties:\n      AlarmDescription: 'Average CPU utilization over last 1 minutes higher than 80%'\n      AlarmName: !Sub ${accountAlliasLowerCase}-cpu-high-alarm-internal-service-api-gtcopeningprovisioning\n      Namespace: 'AWS/ECS'\n      Dimensions:\n        - Name: ClusterName\n          Value: !ImportValue cluster\n        - Name: ServiceName\n          Value: !Sub ${accountAlliasLowerCase}-internal-service-api-gtcopeningprovisioning\n      MetricName: CPUUtilization\n      ComparisonOperator: GreaterThanThreshold\n      Statistic: Average\n      Period: 60\n      EvaluationPeriods: 1\n      Threshold: !FindInMap [Autoscale, CPU, UpUsage]\n      AlarmActions:\n        - !Ref ScaleUpPolicyForGtcOpeningProvisioning\n  ScaleDownPolicyForGtcOpeningProvisioning:\n    Type: AWS::ApplicationAutoScaling::ScalingPolicy\n    Properties:\n      PolicyName: !Sub ${accountAlliasLowerCase}-scaledown-policy-internal-service-api-gtcopeningprovisioning\n      PolicyType: StepScaling\n      ScalingTargetId: !Ref parserTargetForGtcOpeningProvisioning\n      StepScalingPolicyConfiguration:\n        AdjustmentType: ChangeInCapacity\n        MetricAggregationType: Average\n        Cooldown: 60\n        StepAdjustments:\n          - MetricIntervalUpperBound: 0\n            ScalingAdjustment: -1\n  CPUUtilizationTooLowAlarmForGtcOpeningProvisioning:\n    Type: AWS::CloudWatch::Alarm\n    Properties:\n      AlarmDescription: 'Average CPU utilization over last 1 minutes lower than 30%'\n      AlarmName: !Sub ${accountAlliasLowerCase}-cpu-low-alarm-internal-service-api-gtcopeningprovisioning\n      Namespace: 'AWS/ECS'\n      Dimensions:\n        - Name: ClusterName\n          Value: !ImportValue cluster\n        - Name: ServiceName\n          Value: !Sub ${accountAlliasLowerCase}-internal-service-api-gtcopeningprovisioning\n      MetricName: CPUUtilization\n      ComparisonOperator: LessThanThreshold\n      Statistic: Average\n      Period: 60\n      EvaluationPeriods: 1\n      Threshold: !FindInMap [Autoscale, CPU, DownUsage]\n      AlarmActions:\n        - !Ref ScaleDownPolicyForGtcOpeningProvisioning\n\n  # ??????????API\n  parserTargetForGtcClosingProvisioning:\n    Type: AWS::ApplicationAutoScaling::ScalableTarget\n    Properties:\n      MaxCapacity: !Ref maxCapacity\n      MinCapacity: !Ref minCapacity\n      ResourceId: !Join ['/', ['service', !ImportValue cluster, !Join ['', [!Ref accountAlliasLowerCase, '-internal-service-api-gtcclosingprovisioning']]]]\n      RoleARN: !GetAtt parserAutoScalingRole.Arn\n      ScalableDimension: ecs:service:DesiredCount\n      ServiceNamespace: ecs\n  ScaleUpPolicyForGtcClosingProvisioning:\n    Type: AWS::ApplicationAutoScaling::ScalingPolicy\n    Properties:\n      PolicyName: !Sub ${accountAlliasLowerCase}-scaleup-policy-internal-service-api-gtcclosingprovisioning\n      PolicyType: StepScaling\n      ScalingTargetId: !Ref parserTargetForGtcClosingProvisioning\n      StepScalingPolicyConfiguration:\n        AdjustmentType: ChangeInCapacity\n        MetricAggregationType: Average\n        Cooldown: 60\n        StepAdjustments:\n          - MetricIntervalLowerBound: 0\n            ScalingAdjustment: 1\n  CPUUtilizationTooHighAlarmForGtcClosingProvisioning:\n    Type: AWS::CloudWatch::Alarm\n    Properties:\n      AlarmDescription: 'Average CPU utilization over last 1 minutes higher than 80%'\n      AlarmName: !Sub ${accountAlliasLowerCase}-cpu-high-alarm-internal-service-api-gtcclosingprovisioning\n      Namespace: 'AWS/ECS'\n      Dimensions:\n        - Name: ClusterName\n          Value: !ImportValue cluster\n        - Name: ServiceName\n          Value: !Sub ${accountAlliasLowerCase}-internal-service-api-gtcclosingprovisioning\n      MetricName: CPUUtilization\n      ComparisonOperator: GreaterThanThreshold\n      Statistic: Average\n      Period: 60\n      EvaluationPeriods: 1\n      Threshold: !FindInMap [Autoscale, CPU, UpUsage]\n      AlarmActions:\n        - !Ref ScaleUpPolicyForGtcClosingProvisioning\n  ScaleDownPolicyForGtcClosingProvisioning:\n    Type: AWS::ApplicationAutoScaling::ScalingPolicy\n    Properties:\n      PolicyName: !Sub ${accountAlliasLowerCase}-scaledown-policy-internal-service-api-gtcclosingprovisioning\n      PolicyType: StepScaling\n      ScalingTargetId: !Ref parserTargetForGtcClosingProvisioning\n      StepScalingPolicyConfiguration:\n        AdjustmentType: ChangeInCapacity\n        MetricAggregationType: Average\n        Cooldown: 60\n        StepAdjustments:\n          - MetricIntervalUpperBound: 0\n            ScalingAdjustment: -1\n  CPUUtilizationTooLowAlarmForGtcClosingProvisioning:\n    Type: AWS::CloudWatch::Alarm\n    Properties:\n      AlarmDescription: 'Average CPU utilization over last 1 minutes lower than 30%'\n      AlarmName: !Sub ${accountAlliasLowerCase}-cpu-low-alarm-internal-service-api-gtcclosingprovisioning\n      Namespace: 'AWS/ECS'\n      Dimensions:\n        - Name: ClusterName\n          Value: !ImportValue cluster\n        - Name: ServiceName\n          Value: !Sub ${accountAlliasLowerCase}-internal-service-api-gtcclosingprovisioning\n      MetricName: CPUUtilization\n      ComparisonOperator: LessThanThreshold\n      Statistic: Average\n      Period: 60\n      EvaluationPeriods: 1\n      Threshold: !FindInMap [Autoscale, CPU, DownUsage]\n      AlarmActions:\n        - !Ref ScaleDownPolicyForGtcClosingProvisioning\n\nOutputs:\n  parserAutoScalingRole:\n    Value: !Ref parserAutoScalingRole\n    Export:\n      Name: parserAutoScalingRole\n"
}
INV-ver-sub01-codepipeline-app-ver
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: codepipeline\n\n# ------------------------------------------------------------#\n#  Parameters\n# ------------------------------------------------------------#\nParameters:\n  accountAllias:\n    Type: String\n  accountAlliasLowerCase:\n    Type: String\n\nResources:\n# ------------------------------------------------------------#\n#  Role\n# ------------------------------------------------------------#\n  codeBuildRoleAppVer:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement: \n          - Effect: \"Allow\"\n            Principal: \n              Service: \n                - \"codebuild.amazonaws.com\"\n            Action: \n              - \"sts:AssumeRole\"\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess\n        - arn:aws:iam::aws:policy/AmazonS3FullAccess\n        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess\n  codePipelineRoleAppVer:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement: \n          - Effect: \"Allow\"\n            Principal: \n              Service: \n                - \"codepipeline.amazonaws.com\"\n            Action: \n              - \"sts:AssumeRole\"\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess\n        - arn:aws:iam::aws:policy/AWSCodeCommitFullAccess\n        - arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess\n        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess\n        - arn:aws:iam::aws:policy/AmazonS3FullAccess\n        - arn:aws:iam::aws:policy/CloudWatchFullAccess\n        - arn:aws:iam::aws:policy/AmazonEC2ContainerServiceFullAccess\n\n# ------------------------------------------------------------#\n#  CodeBuildProject\n# ------------------------------------------------------------#\n  codeBuildProjectAppVer:\n    Type: AWS::CodeBuild::Project\n    Properties:\n      Name: !Sub ${accountAlliasLowerCase}-build-project-app-ver\n      Artifacts:\n        Type: CODEPIPELINE\n      Description: !Sub Building stage for ${accountAlliasLowerCase}\n      Environment:\n        ComputeType: BUILD_GENERAL1_SMALL\n        EnvironmentVariables:\n          - Name: AWS_ACCOUNT_ID\n            Value: !Ref AWS::AccountId\n          - Name: IMAGE_NAME_APP\n            Value: !Sub ${accountAlliasLowerCase}-ecr-app\n          - Name: CONTAINER_NAME_APP\n            Value: app\n          - Name: IMAGE_NAME_BATCH\n            Value: !Sub ${accountAlliasLowerCase}-ecr-batch\n          - Name: CONTAINER_NAME_BATCH\n            Value: batch\n        Image: aws/codebuild/docker:18.09.0\n        Type: LINUX_CONTAINER\n        PrivilegedMode: True\n      ServiceRole: !Ref codeBuildRoleAppVer\n      Source:\n        Type: CODEPIPELINE\n        BuildSpec: |\n          version: 0.2 \n          phases:\n            build:\n              commands:\n                - REPOSITORY_URI_APP=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_NAME_APP}\n                - REPOSITORY_URI_BATCH=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_NAME_BATCH}\n                - IMAGE_TAG=latest\n                - echo \"[{\\\"name\\\":\\\"${CONTAINER_NAME_APP}\\\",\\\"imageUri\\\":\\\"${REPOSITORY_URI_APP}:${IMAGE_TAG}\\\"}]\"\n                - echo \"[{\\\"name\\\":\\\"${CONTAINER_NAME_APP}\\\",\\\"imageUri\\\":\\\"${REPOSITORY_URI_APP}:${IMAGE_TAG}\\\"}]\" > imagedefinitions-app.json\n                - echo \"[{\\\"name\\\":\\\"${CONTAINER_NAME_BATCH}\\\",\\\"imageUri\\\":\\\"${REPOSITORY_URI_BATCH}:${IMAGE_TAG}\\\"}]\"\n                - echo \"[{\\\"name\\\":\\\"${CONTAINER_NAME_BATCH}\\\",\\\"imageUri\\\":\\\"${REPOSITORY_URI_BATCH}:${IMAGE_TAG}\\\"}]\" > imagedefinitions-batch.json\n          artifacts:\n              files:\n                - imagedefinitions-app.json\n                - imagedefinitions-batch.json\n      TimeoutInMinutes: 30\n# ------------------------------------------------------------#\n#  S3\n# ------------------------------------------------------------#\n  s3bucketforcodepipelineAppVer:\n    Type: AWS::S3::Bucket\n    Properties:\n      BucketName: !Sub ${accountAlliasLowerCase}-codepipeline-app-ver\n# ------------------------------------------------------------#\n#  CodePipeline\n# ------------------------------------------------------------#\n  codePipelineAppVer:\n    Type: AWS::CodePipeline::Pipeline\n    DependsOn: s3bucketforcodepipelineAppVer\n    Properties:\n      ArtifactStore:\n        Location: !Ref s3bucketforcodepipelineAppVer\n        Type: S3\n      Name: !Sub ${accountAlliasLowerCase}-codepipeline-app-ver\n      RestartExecutionOnUpdate: false\n      RoleArn: !GetAtt codePipelineRoleAppVer.Arn\n      Stages:\n        - Name: Source\n          Actions:\n            - Name: SourceAction\n              ActionTypeId: \n                Category: Source\n                Owner: AWS\n                Provider: ECR\n                Version: 1\n              OutputArtifacts: \n                - Name: SourceOutput\n              Configuration: \n                RepositoryName: !Sub ${accountAlliasLowerCase}-ecr-app\n              RunOrder: 1\n        - Name: Build\n          Actions:\n            - Name: CodeBuild\n              InputArtifacts:\n                - Name: SourceOutput\n              ActionTypeId: \n                Category: Build\n                Owner: AWS\n                Provider: CodeBuild\n                Version: 1\n              Configuration: \n                ProjectName: !Ref codeBuildProjectAppVer\n              OutputArtifacts: \n                - Name: CodebuildOutput\n              RunOrder: 1\n        - Name: Staging\n          Actions:\n            - Name: api-app-getsalehistoryforwifi\n              InputArtifacts:\n                - Name: CodebuildOutput\n              ActionTypeId: \n                Category: Deploy\n                Owner: AWS\n                Provider: ECS\n                Version: 1\n              Configuration:\n                ClusterName: !ImportValue cluster\n                FileName: imagedefinitions-app.json\n                ServiceName: !ImportValue internalServiceForGetSaleHistoryForWiFi\n              OutputArtifacts: []\n              RunOrder: 1\n            - Name: api-app-getsaleplanforwifi\n              InputArtifacts:\n                - Name: CodebuildOutput\n              ActionTypeId: \n                Category: Deploy\n                Owner: AWS\n                Provider: ECS\n                Version: 1\n              Configuration:\n                ClusterName: !ImportValue cluster\n                FileName: imagedefinitions-app.json\n                ServiceName: !ImportValue internalServiceForGetSalePlanForWiFi\n              OutputArtifacts: []\n              RunOrder: 1\n            - Name: api-app-getauthoritystatus\n              InputArtifacts:\n                - Name: CodebuildOutput\n              ActionTypeId: \n                Category: Deploy\n                Owner: AWS\n                Provider: ECS\n                Version: 1\n              Configuration:\n                ClusterName: !ImportValue cluster\n                FileName: imagedefinitions-app.json\n                ServiceName: !ImportValue internalServiceForGetAuthorityStatus\n              OutputArtifacts: []\n              RunOrder: 1\n            - Name: api-app-useauthority\n              InputArtifacts:\n                - Name: CodebuildOutput\n              ActionTypeId: \n                Category: Deploy\n                Owner: AWS\n                Provider: ECS\n                Version: 1\n              Configuration:\n                ClusterName: !ImportValue cluster\n                FileName: imagedefinitions-app.json\n                ServiceName: !ImportValue internalServiceForUseAuthority\n              OutputArtifacts: []\n              RunOrder: 1\n            - Name: api-app-authorityrollback\n              InputArtifacts:\n                - Name: CodebuildOutput\n              ActionTypeId: \n                Category: Deploy\n                Owner: AWS\n                Provider: ECS\n                Version: 1\n              Configuration:\n                ClusterName: !ImportValue cluster\n                FileName: imagedefinitions-app.json\n                ServiceName: !ImportValue internalServiceForAuthorityRollback\n              OutputArtifacts: []\n              RunOrder: 1\n            - Name: api-app-updatemaster\n              InputArtifacts:\n                - Name: CodebuildOutput\n              ActionTypeId: \n                Category: Deploy\n                Owner: AWS\n                Provider: ECS\n                Version: 1\n              Configuration:\n                ClusterName: !ImportValue cluster\n                FileName: imagedefinitions-app.json\n                ServiceName: !ImportValue internalServiceForUpdateMaster\n              OutputArtifacts: []\n              RunOrder: 1\n            - Name: api-app-putauthoritydata\n              InputArtifacts:\n                - Name: CodebuildOutput\n              ActionTypeId: \n                Category: Deploy\n                Owner: AWS\n                Provider: ECS\n                Version: 1\n              Configuration:\n                ClusterName: !ImportValue cluster\n                FileName: imagedefinitions-app.json\n                ServiceName: !ImportValue internalServiceForPutAuthorityData\n              OutputArtifacts: []\n              RunOrder: 1\n            - Name: api-app-getusehistory\n              InputArtifacts:\n                - Name: CodebuildOutput\n              ActionTypeId: \n                Category: Deploy\n                Owner: AWS\n                Provider: ECS\n                Version: 1\n              Configuration:\n                ClusterName: !ImportValue cluster\n                FileName: imagedefinitions-app.json\n                ServiceName: !ImportValue internalServiceForGetUseHistory\n              OutputArtifacts: []\n              RunOrder: 1\n            - Name: api-app-qqcallinfoupdate\n              InputArtifacts:\n                - Name: CodebuildOutput\n              ActionTypeId: \n                Category: Deploy\n                Owner: AWS\n                Provider: ECS\n                Version: 1\n              Configuration:\n                ClusterName: !ImportValue cluster\n                FileName: imagedefinitions-app.json\n                ServiceName: !ImportValue internalServiceForQqCallInfoUpdate\n              OutputArtifacts: []\n              RunOrder: 1\n            - Name: api-app-mydealerinfoupdate\n              InputArtifacts:\n                - Name: CodebuildOutput\n              ActionTypeId: \n                Category: Deploy\n                Owner: AWS\n                Provider: ECS\n                Version: 1\n              Configuration:\n                ClusterName: !ImportValue cluster\n                FileName: imagedefinitions-app.json\n                ServiceName: !ImportValue internalServiceForMyDealerInfoUpdate\n              OutputArtifacts: []\n              RunOrder: 1\n            - Name: api-app-gtcopeningprovisioning\n              InputArtifacts:\n                - Name: CodebuildOutput\n              ActionTypeId: \n                Category: Deploy\n                Owner: AWS\n                Provider: ECS\n                Version: 1\n              Configuration:\n                ClusterName: !ImportValue cluster\n                FileName: imagedefinitions-app.json\n                ServiceName: !ImportValue internalServiceForGtcOpeningProvisioning\n              OutputArtifacts: []\n              RunOrder: 1\n            - Name: api-app-gtcclosingprovisioning\n              InputArtifacts:\n                - Name: CodebuildOutput\n              ActionTypeId: \n                Category: Deploy\n                Owner: AWS\n                Provider: ECS\n                Version: 1\n              Configuration:\n                ClusterName: !ImportValue cluster\n                FileName: imagedefinitions-app.json\n                ServiceName: !ImportValue internalServiceForGtcClosingProvisioning\n              OutputArtifacts: []\n              RunOrder: 1\n            - Name: screen-app-provisioning\n              InputArtifacts:\n                - Name: CodebuildOutput\n              ActionTypeId: \n                Category: Deploy\n                Owner: AWS\n                Provider: ECS\n                Version: 1\n              Configuration:\n                ClusterName: !ImportValue cluster\n                FileName: imagedefinitions-app.json\n                ServiceName: !ImportValue publicServiceForProvisioning\n              OutputArtifacts: []\n              RunOrder: 1\n            - Name: screen-app-msg\n              InputArtifacts:\n                - Name: CodebuildOutput\n              ActionTypeId: \n                Category: Deploy\n                Owner: AWS\n                Provider: ECS\n                Version: 1\n              Configuration:\n                ClusterName: !ImportValue cluster\n                FileName: imagedefinitions-app.json\n                ServiceName: !ImportValue publicServiceForMsg\n              OutputArtifacts: []\n              RunOrder: 1\n            - Name: batch-bunsekidatachushutsu\n              InputArtifacts:\n                - Name: CodebuildOutput\n              ActionTypeId: \n                Category: Deploy\n                Owner: AWS\n                Provider: ECS\n                Version: 1\n              Configuration:\n                ClusterName: !ImportValue cluster\n                FileName: imagedefinitions-batch.json\n                ServiceName: !ImportValue internalServiceForBunsekiDataChushutsu\n              OutputArtifacts: []\n              RunOrder: 1\n            - Name: batch-e-call-riyoukanou-daisuu\n              InputArtifacts:\n                - Name: CodebuildOutput\n              ActionTypeId: \n                Category: Deploy\n                Owner: AWS\n                Provider: ECS\n                Version: 1\n              Configuration:\n                ClusterName: !ImportValue cluster\n                FileName: imagedefinitions-batch.json\n                ServiceName: !ImportValue internalServiceForECallRiyoukanouDaisuu\n              OutputArtifacts: []\n              RunOrder: 1\n            - Name: batch-riyouzansolutiontsuchi\n              InputArtifacts:\n                - Name: CodebuildOutput\n              ActionTypeId: \n                Category: Deploy\n                Owner: AWS\n                Provider: ECS\n                Version: 1\n              Configuration:\n                ClusterName: !ImportValue cluster\n                FileName: imagedefinitions-batch.json\n                ServiceName: !ImportValue internalServiceForRiyouZanSolutionTsuchi\n              OutputArtifacts: []\n              RunOrder: 1\n            - Name: batch-provisioning-resend\n              InputArtifacts:\n                - Name: CodebuildOutput\n              ActionTypeId: \n                Category: Deploy\n                Owner: AWS\n                Provider: ECS\n                Version: 1\n              Configuration:\n                ClusterName: !ImportValue cluster\n                FileName: imagedefinitions-batch.json\n                ServiceName: !ImportValue internalServiceForProvisioningResend\n              OutputArtifacts: []\n              RunOrder: 1\n            - Name: batch-provisioning-resend-ivi\n              InputArtifacts:\n                - Name: CodebuildOutput\n              ActionTypeId: \n                Category: Deploy\n                Owner: AWS\n                Provider: ECS\n                Version: 1\n              Configuration:\n                ClusterName: !ImportValue cluster\n                FileName: imagedefinitions-batch.json\n                ServiceName: !ImportValue internalServiceForProvisioningResendIvi\n              OutputArtifacts: []\n              RunOrder: 1\n# ------------------------------------------------------------#\n#  CloudWatch\n# ------------------------------------------------------------#\n  cloudWatchEventRoleAppVer:\n    Type: 'AWS::IAM::Role'\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service:\n                - events.amazonaws.com\n            Action: 'sts:AssumeRole'\n      Path: /\n      Policies:\n        - PolicyName: cwe-pipeline-execution\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Effect: Allow\n                Action: 'codepipeline:StartPipelineExecution'\n                Resource: !Join \n                  - ''\n                  - - 'arn:aws:codepipeline:'\n                    - !Ref 'AWS::Region'\n                    - ':'\n                    - !Ref 'AWS::AccountId'\n                    - ':'\n                    - !Ref codePipelineAppVer\n  cloudwatchEventsRuleAppVer:\n    Type: AWS::Events::Rule\n    Properties:\n      EventPattern:\n        source:\n          - aws.ecr\n        detail:\n          eventName:\n            - PutImage\n          requestParameters:\n            repositoryName: \n              - !Sub ${accountAlliasLowerCase}-ecr-app\n            imageTag: \n              - latest\n      Targets:\n        - Arn:  !Join \n          - ''\n          - - 'arn:aws:codepipeline:'\n            - !Ref 'AWS::Region'\n            - ':'\n            - !Ref 'AWS::AccountId'\n            - ':'\n            - !Ref codePipelineAppVer\n          Id: !Sub ${accountAlliasLowerCase}-codepipeline-app-ver\n          RoleArn: !GetAtt cloudWatchEventRoleAppVer.Arn\n\n# ------------------------------------------------------------#\n#  Output\n# ------------------------------------------------------------#\nOutputs:\n  codeBuildRoleAppVer:\n    Value: !Ref codeBuildRoleAppVer\n    Export:\n      Name: codeBuildRoleAppVer\n  codePipelineRoleAppVer:\n    Value: !Ref codePipelineRoleAppVer\n    Export:\n      Name: codePipelineRoleAppVer\n  codeBuildProjectAppVer:\n    Value: !Ref codeBuildProjectAppVer\n    Export:\n      Name: codeBuildProjectAppVer\n  s3bucketforcodepipelineAppVer:\n    Value: !Ref s3bucketforcodepipelineAppVer\n    Export:\n      Name: s3bucketforcodepipelineAppVer\n  codePipelineAppVer:\n    Value: !Ref codePipelineAppVer\n    Export:\n      Name: codePipelineAppVer\n  cloudWatchEventRoleAppVer:\n    Value: !Ref cloudWatchEventRoleAppVer\n    Export:\n      Name: cloudWatchEventRoleAppVer\n  cloudwatchEventsRuleAppVer:\n    Value: !Ref cloudwatchEventsRuleAppVer\n    Export:\n      Name: cloudwatchEventsRuleAppVer\n\n"
}
INV-ver-sub01-codepipeline-nginx-ver
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: codepipeline\n\n# ------------------------------------------------------------#\n#  Parameters\n# ------------------------------------------------------------#\nParameters:\n  accountAllias:\n    Type: String\n  accountAlliasLowerCase:\n    Type: String\n\nResources:\n# ------------------------------------------------------------#\n#  Role\n# ------------------------------------------------------------#\n  codeBuildRoleNginxVer:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement: \n          - Effect: \"Allow\"\n            Principal: \n              Service: \n                - \"codebuild.amazonaws.com\"\n            Action: \n              - \"sts:AssumeRole\"\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess\n        - arn:aws:iam::aws:policy/AmazonS3FullAccess\n        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess\n  codePipelineRoleNginxVer:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement: \n          - Effect: \"Allow\"\n            Principal: \n              Service: \n                - \"codepipeline.amazonaws.com\"\n            Action: \n              - \"sts:AssumeRole\"\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess\n        - arn:aws:iam::aws:policy/AWSCodeCommitFullAccess\n        - arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess\n        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess\n        - arn:aws:iam::aws:policy/AmazonS3FullAccess\n        - arn:aws:iam::aws:policy/CloudWatchFullAccess\n        - arn:aws:iam::aws:policy/AmazonEC2ContainerServiceFullAccess\n\n# ------------------------------------------------------------#\n#  CodeBuildProject\n# ------------------------------------------------------------#\n  codeBuildProjectNginxVer:\n    Type: AWS::CodeBuild::Project\n    Properties:\n      Name: !Sub ${accountAlliasLowerCase}-build-project-ver\n      Artifacts:\n        Type: CODEPIPELINE\n      Description: !Sub Building stage for ${accountAlliasLowerCase}\n      Environment:\n        ComputeType: BUILD_GENERAL1_SMALL\n        EnvironmentVariables:\n          - Name: AWS_ACCOUNT_ID\n            Value: !Ref AWS::AccountId\n          - Name: IMAGE_NAME_API\n            Value: !Sub ${accountAlliasLowerCase}-ecr-api-nginx\n          - Name: CONTAINER_NAME_API\n            Value: api-nginx\n          - Name: IMAGE_NAME_PROXY\n            Value: !Sub ${accountAlliasLowerCase}-ecr-proxy-nginx\n          - Name: CONTAINER_NAME_PROXY\n            Value: proxy-nginx\n          - Name: IMAGE_NAME_SCREEN\n            Value: !Sub ${accountAlliasLowerCase}-ecr-screen-nginx\n          - Name: CONTAINER_NAME_SCREEN\n            Value: screen-nginx\n        Image: aws/codebuild/docker:18.09.0\n        Type: LINUX_CONTAINER\n        PrivilegedMode: True\n      ServiceRole: !Ref codeBuildRoleNginxVer\n      Source:\n        Type: CODEPIPELINE\n        BuildSpec: |\n          version: 0.2 \n          phases:\n            build:\n              commands:\n                - REPOSITORY_URI_API=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_NAME_API}\n                - REPOSITORY_URI_PROXY=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_NAME_PROXY}\n                - REPOSITORY_URI_SCREEN=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_NAME_SCREEN}\n                - IMAGE_TAG=latest\n                - echo \"[{\\\"name\\\":\\\"${CONTAINER_NAME_API}\\\",\\\"imageUri\\\":\\\"${REPOSITORY_URI_API}:${IMAGE_TAG}\\\"}]\"\n                - echo \"[{\\\"name\\\":\\\"${CONTAINER_NAME_API}\\\",\\\"imageUri\\\":\\\"${REPOSITORY_URI_API}:${IMAGE_TAG}\\\"}]\" > imagedefinitions-api.json\n                - echo \"[{\\\"name\\\":\\\"${CONTAINER_NAME_PROXY}\\\",\\\"imageUri\\\":\\\"${REPOSITORY_URI_PROXY}:${IMAGE_TAG}\\\"}]\"\n                - echo \"[{\\\"name\\\":\\\"${CONTAINER_NAME_PROXY}\\\",\\\"imageUri\\\":\\\"${REPOSITORY_URI_PROXY}:${IMAGE_TAG}\\\"}]\" > imagedefinitions-proxy.json\n                - echo \"[{\\\"name\\\":\\\"${CONTAINER_NAME_SCREEN}\\\",\\\"imageUri\\\":\\\"${REPOSITORY_URI_SCREEN}:${IMAGE_TAG}\\\"}]\"\n                - echo \"[{\\\"name\\\":\\\"${CONTAINER_NAME_SCREEN}\\\",\\\"imageUri\\\":\\\"${REPOSITORY_URI_SCREEN}:${IMAGE_TAG}\\\"}]\" > imagedefinitions-screen.json\n          artifacts:\n              files:\n                - imagedefinitions-api.json\n                - imagedefinitions-proxy.json\n                - imagedefinitions-screen.json\n      TimeoutInMinutes: 30\n# ------------------------------------------------------------#\n#  S3\n# ------------------------------------------------------------#\n  s3bucketforcodepipelineNginxVer:\n    Type: AWS::S3::Bucket\n    Properties:\n      BucketName: !Sub ${accountAlliasLowerCase}-codepipeline-nginx-ver\n# ------------------------------------------------------------#\n#  CodePipeline\n# ------------------------------------------------------------#\n  codePipelineNginxVer:\n    Type: AWS::CodePipeline::Pipeline\n    DependsOn: s3bucketforcodepipelineNginxVer\n    Properties:\n      ArtifactStore:\n        Location: !Ref s3bucketforcodepipelineNginxVer \n        Type: S3\n      Name: !Sub ${accountAlliasLowerCase}-codepipeline-nginx-ver\n      RestartExecutionOnUpdate: false\n      RoleArn: !GetAtt codePipelineRoleNginxVer.Arn\n      Stages:\n        - Name: Source\n          Actions:\n            - Name: SourceAction\n              ActionTypeId: \n                Category: Source\n                Owner: AWS\n                Provider: ECR\n                Version: 1\n              OutputArtifacts: \n                - Name: SourceOutput\n              Configuration: \n                RepositoryName: !Sub ${accountAlliasLowerCase}-ecr-api-nginx\n              RunOrder: 1\n        - Name: Build\n          Actions:\n            - Name: CodeBuild\n              InputArtifacts:\n                - Name: SourceOutput\n              ActionTypeId: \n                Category: Build\n                Owner: AWS\n                Provider: CodeBuild\n                Version: 1\n              Configuration: \n                ProjectName: !Ref codeBuildProjectNginxVer\n              OutputArtifacts: \n                - Name: CodebuildOutput\n              RunOrder: 1\n        - Name: Staging\n          Actions:\n            - Name: api-nginx-getsalehistoryforwifi\n              InputArtifacts:\n                - Name: CodebuildOutput\n              ActionTypeId: \n                Category: Deploy\n                Owner: AWS\n                Provider: ECS\n                Version: 1\n              Configuration:\n                ClusterName: !ImportValue cluster\n                FileName: imagedefinitions-api.json\n                ServiceName: !ImportValue internalServiceForGetSaleHistoryForWiFi\n              OutputArtifacts: []\n              RunOrder: 1\n            - Name: api-nginx-getsaleplanforwifi\n              InputArtifacts:\n                - Name: CodebuildOutput\n              ActionTypeId: \n                Category: Deploy\n                Owner: AWS\n                Provider: ECS\n                Version: 1\n              Configuration:\n                ClusterName: !ImportValue cluster\n                FileName: imagedefinitions-api.json\n                ServiceName: !ImportValue internalServiceForGetSalePlanForWiFi\n              OutputArtifacts: []\n              RunOrder: 1\n            - Name: api-nginx-getauthoritystatus\n              InputArtifacts:\n                - Name: CodebuildOutput\n              ActionTypeId: \n                Category: Deploy\n                Owner: AWS\n                Provider: ECS\n                Version: 1\n              Configuration:\n                ClusterName: !ImportValue cluster\n                FileName: imagedefinitions-api.json\n                ServiceName: !ImportValue internalServiceForGetAuthorityStatus\n              OutputArtifacts: []\n              RunOrder: 1\n            - Name: api-nginx-useauthority\n              InputArtifacts:\n                - Name: CodebuildOutput\n              ActionTypeId: \n                Category: Deploy\n                Owner: AWS\n                Provider: ECS\n                Version: 1\n              Configuration:\n                ClusterName: !ImportValue cluster\n                FileName: imagedefinitions-api.json\n                ServiceName: !ImportValue internalServiceForUseAuthority\n              OutputArtifacts: []\n              RunOrder: 1\n            - Name: api-nginx-authorityrollback\n              InputArtifacts:\n                - Name: CodebuildOutput\n              ActionTypeId: \n                Category: Deploy\n                Owner: AWS\n                Provider: ECS\n                Version: 1\n              Configuration:\n                ClusterName: !ImportValue cluster\n                FileName: imagedefinitions-api.json\n                ServiceName: !ImportValue internalServiceForAuthorityRollback\n              OutputArtifacts: []\n              RunOrder: 1\n            - Name: api-nginx-updatemaster\n              InputArtifacts:\n                - Name: CodebuildOutput\n              ActionTypeId: \n                Category: Deploy\n                Owner: AWS\n                Provider: ECS\n                Version: 1\n              Configuration:\n                ClusterName: !ImportValue cluster\n                FileName: imagedefinitions-api.json\n                ServiceName: !ImportValue internalServiceForUpdateMaster\n              OutputArtifacts: []\n              RunOrder: 1\n            - Name: api-nginx-putauthoritydata\n              InputArtifacts:\n                - Name: CodebuildOutput\n              ActionTypeId: \n                Category: Deploy\n                Owner: AWS\n                Provider: ECS\n                Version: 1\n              Configuration:\n                ClusterName: !ImportValue cluster\n                FileName: imagedefinitions-api.json\n                ServiceName: !ImportValue internalServiceForPutAuthorityData\n              OutputArtifacts: []\n              RunOrder: 1\n            - Name: api-nginx-getusehistory\n              InputArtifacts:\n                - Name: CodebuildOutput\n              ActionTypeId: \n                Category: Deploy\n                Owner: AWS\n                Provider: ECS\n                Version: 1\n              Configuration:\n                ClusterName: !ImportValue cluster\n                FileName: imagedefinitions-api.json\n                ServiceName: !ImportValue internalServiceForGetUseHistory\n              OutputArtifacts: []\n              RunOrder: 1\n            - Name: api-nginx-qqcallinfoupdate\n              InputArtifacts:\n                - Name: CodebuildOutput\n              ActionTypeId: \n                Category: Deploy\n                Owner: AWS\n                Provider: ECS\n                Version: 1\n              Configuration:\n                ClusterName: !ImportValue cluster\n                FileName: imagedefinitions-api.json\n                ServiceName: !ImportValue internalServiceForQqCallInfoUpdate\n              OutputArtifacts: []\n              RunOrder: 1\n            - Name: api-nginx-mydealerinfoupdate\n              InputArtifacts:\n                - Name: CodebuildOutput\n              ActionTypeId: \n                Category: Deploy\n                Owner: AWS\n                Provider: ECS\n                Version: 1\n              Configuration:\n                ClusterName: !ImportValue cluster\n                FileName: imagedefinitions-api.json\n                ServiceName: !ImportValue internalServiceForMyDealerInfoUpdate\n              OutputArtifacts: []\n              RunOrder: 1\n            - Name: api-nginx-gtcopeningprovisioning\n              InputArtifacts:\n                - Name: CodebuildOutput\n              ActionTypeId: \n                Category: Deploy\n                Owner: AWS\n                Provider: ECS\n                Version: 1\n              Configuration:\n                ClusterName: !ImportValue cluster\n                FileName: imagedefinitions-api.json\n                ServiceName: !ImportValue internalServiceForGtcOpeningProvisioning\n              OutputArtifacts: []\n              RunOrder: 1\n            - Name: api-nginx-gtcclosingprovisioning\n              InputArtifacts:\n                - Name: CodebuildOutput\n              ActionTypeId: \n                Category: Deploy\n                Owner: AWS\n                Provider: ECS\n                Version: 1\n              Configuration:\n                ClusterName: !ImportValue cluster\n                FileName: imagedefinitions-api.json\n                ServiceName: !ImportValue internalServiceForGtcClosingProvisioning\n              OutputArtifacts: []\n              RunOrder: 1\n            - Name: proxy-nginx\n              InputArtifacts:\n                - Name: CodebuildOutput\n              ActionTypeId: \n                Category: Deploy\n                Owner: AWS\n                Provider: ECS\n                Version: 1\n              Configuration:\n                ClusterName: !ImportValue cluster\n                FileName: imagedefinitions-proxy.json\n                ServiceName: !ImportValue internalServiceForProxy\n              OutputArtifacts: []\n              RunOrder: 1\n            - Name: screen-nginx-provisioning\n              InputArtifacts:\n                - Name: CodebuildOutput\n              ActionTypeId: \n                Category: Deploy\n                Owner: AWS\n                Provider: ECS\n                Version: 1\n              Configuration:\n                ClusterName: !ImportValue cluster\n                FileName: imagedefinitions-screen.json\n                ServiceName: !ImportValue publicServiceForProvisioning\n              OutputArtifacts: []\n              RunOrder: 1\n            - Name: screen-nginx-msg\n              InputArtifacts:\n                - Name: CodebuildOutput\n              ActionTypeId: \n                Category: Deploy\n                Owner: AWS\n                Provider: ECS\n                Version: 1\n              Configuration:\n                ClusterName: !ImportValue cluster\n                FileName: imagedefinitions-screen.json\n                ServiceName: !ImportValue publicServiceForMsg\n              OutputArtifacts: []\n              RunOrder: 1\n# ------------------------------------------------------------#\n#  CloudWatch\n# ------------------------------------------------------------#\n  cloudWatchEventRoleNginxVer:\n    Type: 'AWS::IAM::Role'\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service:\n                - events.amazonaws.com\n            Action: 'sts:AssumeRole'\n      Path: /\n      Policies:\n        - PolicyName: cwe-pipeline-execution\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Effect: Allow\n                Action: 'codepipeline:StartPipelineExecution'\n                Resource: !Join \n                  - ''\n                  - - 'arn:aws:codepipeline:'\n                    - !Ref 'AWS::Region'\n                    - ':'\n                    - !Ref 'AWS::AccountId'\n                    - ':'\n                    - !Ref codePipelineNginxVer\n  cloudwatchEventsRuleNginxVer:\n    Type: AWS::Events::Rule\n    Properties:\n      EventPattern:\n        source:\n          - aws.ecr\n        detail:\n          eventName:\n            - PutImage\n          requestParameters:\n            repositoryName: \n              - !Sub ${accountAlliasLowerCase}-ecr-api-nginx\n            imageTag: \n              - latest\n      Targets:\n        - Arn:  !Join \n          - ''\n          - - 'arn:aws:codepipeline:'\n            - !Ref 'AWS::Region'\n            - ':'\n            - !Ref 'AWS::AccountId'\n            - ':'\n            - !Ref codePipelineNginxVer\n          Id: !Sub ${accountAlliasLowerCase}-codepipeline-nginx-ver\n          RoleArn: !GetAtt cloudWatchEventRoleNginxVer.Arn\n\n# ------------------------------------------------------------#\n#  Output\n# ------------------------------------------------------------#\nOutputs:\n  codeBuildRoleNginxVer:\n    Value: !Ref codeBuildRoleNginxVer\n    Export:\n      Name: codeBuildRoleNginxVer\n  codePipelineRoleNginxVer:\n    Value: !Ref codePipelineRoleNginxVer\n    Export:\n      Name: codePipelineRoleNginxVer\n  codeBuildProjectNginxVer:\n    Value: !Ref codeBuildProjectNginxVer\n    Export:\n      Name: codeBuildProjectNginxVer\n  s3bucketforcodepipelineNginxVer:\n    Value: !Ref s3bucketforcodepipelineNginxVer\n    Export:\n      Name: s3bucketforcodepipelineNginxVer\n  codePipelineNginxVer:\n    Value: !Ref codePipelineNginxVer\n    Export:\n      Name: codePipelineNginxVer\n  cloudWatchEventRoleNginxVer:\n    Value: !Ref cloudWatchEventRoleNginxVer\n    Export:\n      Name: cloudWatchEventRoleNginxVer\n  cloudwatchEventsRuleNginxVer:\n    Value: !Ref cloudwatchEventsRuleNginxVer\n    Export:\n      Name: cloudwatchEventsRuleNginxVer\n\n"
}
INV-ver-sub01-scheduler-task
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: 2010-09-09\nDescription: task scheduler\n\nParameters:\n  accountAllias:\n    Type: String\n  accountAlliasLowerCase:\n    Type: String\n\n  scheduleBunsekiDataChushutsu:\n    Type: String\n  scheduleRiyouZanSolutionTsuchi:\n    Type: String\n  scheduleECallRiyoukanouDaisuu:\n    Type: String\n\n  taskdefinitionForBunsekiDataChushutsu:\n    Type: String\n  taskdefinitionForRiyouZanSolutionTsuchi:\n    Type: String\n  taskdefinitionForECallRiyoukanouDaisuu:\n    Type: String\n\nResources:\n\n  scheduleTaskRole:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: \"Allow\"\n            Principal:\n              Service:\n                - events.amazonaws.com\n            Action:\n              - \"sts:AssumeRole\"\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceEventsRole\n\n  # ????????????\n  scheduleTaskForBunsekiDataChushutsu:\n    Type: AWS::Events::Rule\n    Properties:\n      State: ENABLED\n      ScheduleExpression: !Ref scheduleBunsekiDataChushutsu\n      Targets:\n        - Arn: !ImportValue clusterArn\n          EcsParameters:\n            TaskCount: 1\n            TaskDefinitionArn: !Ref taskdefinitionForBunsekiDataChushutsu\n          Id: !Sub ${accountAlliasLowerCase}-bunseki-data-chushutsu\n          RoleArn: !GetAtt scheduleTaskRole.Arn\n\n  # ?????????????????\n  scheduleTaskForRiyouZanSolutionTsuchi:\n    Type: AWS::Events::Rule\n    Properties:\n      State: ENABLED\n      ScheduleExpression: !Ref scheduleRiyouZanSolutionTsuchi\n      Targets:\n        - Arn: !ImportValue clusterArn\n          EcsParameters:\n            TaskCount: 1\n            TaskDefinitionArn: !Ref taskdefinitionForRiyouZanSolutionTsuchi\n          Id: !Sub ${accountAlliasLowerCase}-riyou-zan-solution-tsuchi\n          RoleArn: !GetAtt scheduleTaskRole.Arn\n\n  # ????e-call???????????\n  scheduleTaskForECallRiyoukanouDaisuu:\n    Type: AWS::Events::Rule\n    Properties:\n      State: ENABLED\n      ScheduleExpression: !Ref scheduleECallRiyoukanouDaisuu\n      Targets:\n        - Arn: !ImportValue clusterArn\n          EcsParameters:\n            TaskCount: 1\n            TaskDefinitionArn: !Ref taskdefinitionForECallRiyoukanouDaisuu\n          Id: !Sub ${accountAlliasLowerCase}-e-call-riyoukanou-daisuu\n          RoleArn: !GetAtt scheduleTaskRole.Arn\n\nOutputs:\n  scheduleTaskForBunsekiDataChushutsu:\n    Value: !Ref scheduleTaskForBunsekiDataChushutsu\n    Export:\n      Name: scheduleTaskForBunsekiDataChushutsu\n  scheduleTaskForBunsekiDataChushutsuArn:\n    Value: !GetAtt scheduleTaskForBunsekiDataChushutsu.Arn\n    Export:\n      Name: scheduleTaskForBunsekiDataChushutsuArn\n\n  scheduleTaskForRiyouZanSolutionTsuchi:\n    Value: !Ref scheduleTaskForRiyouZanSolutionTsuchi\n    Export:\n      Name: scheduleTaskForRiyouZanSolutionTsuchi\n  scheduleTaskForRiyouZanSolutionTsuchiArn:\n    Value: !GetAtt scheduleTaskForRiyouZanSolutionTsuchi.Arn\n    Export:\n      Name: scheduleTaskForRiyouZanSolutionTsuchiArn\n\n  scheduleTaskForECallRiyoukanouDaisuu:\n    Value: !Ref scheduleTaskForECallRiyoukanouDaisuu\n    Export:\n      Name: scheduleTaskForECallRiyoukanouDaisuu\n  scheduleTaskForECallRiyoukanouDaisuuArn:\n    Value: !GetAtt scheduleTaskForECallRiyoukanouDaisuu.Arn\n    Export:\n      Name: scheduleTaskForECallRiyoukanouDaisuuArn\n"
}
INV-ver-sub01-internal-service-batch
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: 2010-09-09\nDescription: internal ecs service\n\nParameters:\n  accountAllias:\n    Type: String\n  accountAlliasLowerCase:\n    Type: String\n\n  desiredCountZero:\n    Type: Number\n  desiredCountOne:\n    Type: Number\n\n  taskdefinitionForBunsekiDataChushutsu:\n    Type: String\n  taskdefinitionForRiyouZanSolutionTsuchi:\n    Type: String\n  taskdefinitionForECallRiyoukanouDaisuu:\n    Type: String\n  taskdefinitionForProvisioningResend:\n    Type: String\n  taskdefinitionForProvisioningResendIvi:\n    Type: String\n\nResources:\n\n  # ??????????\n  internalServiceForBunsekiDataChushutsu:\n    Type: AWS::ECS::Service\n    Properties:\n      Cluster: !ImportValue cluster\n      DeploymentConfiguration:\n        MaximumPercent: 200\n        MinimumHealthyPercent: 50\n      DesiredCount: !Ref desiredCountZero\n      LaunchType: FARGATE\n      NetworkConfiguration:\n        AwsvpcConfiguration:\n          AssignPublicIp: DISABLED\n          SecurityGroups:\n            - !ImportValue internalApplicationSecuritygroup\n          Subnets:\n            - !ImportValue PrivateSubnet1a\n            - !ImportValue PrivateSubnet1c\n      ServiceName: !Sub ${accountAlliasLowerCase}-internal-service-batch-bunseki-data-chushutsu\n      TaskDefinition: !Ref taskdefinitionForBunsekiDataChushutsu\n\n  # ???????????????\n  internalServiceForRiyouZanSolutionTsuchi:\n    Type: AWS::ECS::Service\n    Properties:\n      Cluster: !ImportValue cluster\n      DeploymentConfiguration:\n        MaximumPercent: 200\n        MinimumHealthyPercent: 50\n      DesiredCount: !Ref desiredCountZero\n      LaunchType: FARGATE\n      NetworkConfiguration:\n        AwsvpcConfiguration:\n          AssignPublicIp: DISABLED\n          SecurityGroups:\n            - !ImportValue internalApplicationSecuritygroup\n          Subnets:\n            - !ImportValue PrivateSubnet1a\n            - !ImportValue PrivateSubnet1c\n      ServiceName: !Sub ${accountAlliasLowerCase}-internal-service-batch-riyou-zan-solution-tsuchi\n      TaskDefinition: !Ref taskdefinitionForRiyouZanSolutionTsuchi\n\n  # e-call?????????????\n  internalServiceForECallRiyoukanouDaisuu:\n    Type: AWS::ECS::Service\n    Properties:\n      Cluster: !ImportValue cluster\n      DeploymentConfiguration:\n        MaximumPercent: 200\n        MinimumHealthyPercent: 50\n      DesiredCount: !Ref desiredCountZero\n      LaunchType: FARGATE\n      NetworkConfiguration:\n        AwsvpcConfiguration:\n          AssignPublicIp: DISABLED\n          SecurityGroups:\n            - !ImportValue internalApplicationSecuritygroup\n          Subnets:\n            - !ImportValue PrivateSubnet1a\n            - !ImportValue PrivateSubnet1c\n      ServiceName: !Sub ${accountAlliasLowerCase}-internal-service-batch-e-call-riyoukanou-daisuu\n      TaskDefinition: !Ref taskdefinitionForECallRiyoukanouDaisuu\n\n  # ????????TCU?????\n  internalServiceForProvisioningResend:\n    Type: AWS::ECS::Service\n    Properties:\n      Cluster: !ImportValue cluster\n      DeploymentConfiguration:\n        MaximumPercent: 200\n        MinimumHealthyPercent: 50\n      DesiredCount: !Ref desiredCountOne\n      LaunchType: FARGATE\n      NetworkConfiguration:\n        AwsvpcConfiguration:\n          AssignPublicIp: DISABLED\n          SecurityGroups:\n            - !ImportValue internalApplicationSecuritygroup\n          Subnets:\n            - !ImportValue PrivateSubnet1a\n            - !ImportValue PrivateSubnet1c\n      ServiceName: !Sub ${accountAlliasLowerCase}-internal-service-batch-provisioning-resend\n      TaskDefinition: !Ref taskdefinitionForProvisioningResend\n\n  # ????????IVI?????\n  internalServiceForProvisioningResendIvi:\n    Type: AWS::ECS::Service\n    Properties:\n      Cluster: !ImportValue cluster\n      DeploymentConfiguration:\n        MaximumPercent: 200\n        MinimumHealthyPercent: 50\n      DesiredCount: !Ref desiredCountOne\n      LaunchType: FARGATE\n      NetworkConfiguration:\n        AwsvpcConfiguration:\n          AssignPublicIp: DISABLED\n          SecurityGroups:\n            - !ImportValue internalApplicationSecuritygroup\n          Subnets:\n            - !ImportValue PrivateSubnet1a\n            - !ImportValue PrivateSubnet1c\n      ServiceName: !Sub ${accountAlliasLowerCase}-internal-service-batch-provisioning-resend-ivi\n      TaskDefinition: !Ref taskdefinitionForProvisioningResendIvi\n\nOutputs:\n  internalServiceForBunsekiDataChushutsu:\n    Value: !Ref internalServiceForBunsekiDataChushutsu\n    Export:\n      Name: internalServiceForBunsekiDataChushutsu\n  internalServiceForRiyouZanSolutionTsuchi:\n    Value: !Ref internalServiceForRiyouZanSolutionTsuchi\n    Export:\n      Name: internalServiceForRiyouZanSolutionTsuchi\n  internalServiceForECallRiyoukanouDaisuu:\n    Value: !Ref internalServiceForECallRiyoukanouDaisuu\n    Export:\n      Name: internalServiceForECallRiyoukanouDaisuu\n  internalServiceForProvisioningResend:\n    Value: !Ref internalServiceForProvisioningResend\n    Export:\n      Name: internalServiceForProvisioningResend\n  internalServiceForProvisioningResendIvi:\n    Value: !Ref internalServiceForProvisioningResendIvi\n    Export:\n      Name: internalServiceForProvisioningResendIvi\n"
}
INV-ver-sub01-internal-service
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: 2010-09-09\nDescription: internal ecs service\n\nParameters:\n  accountAllias:\n    Type: String\n  accountAlliasLowerCase:\n    Type: String\n\n  proxyDesiredCount:\n    Type: Number\n\n  updateMasterDesiredCount:\n    Type: Number\n  putAuthorityDataDesiredCount:\n    Type: Number\n  getAuthorityStatusDesiredCount:\n    Type: Number\n  getSaleHistoryForWiFiDesiredCount:\n    Type: Number\n  useAuthorityDesiredCount:\n    Type: Number\n  authorityRollbackDesiredCount:\n    Type: Number\n  getSalePlanForWiFiDesiredCount:\n    Type: Number\n  getUseHistoryDesiredCount:\n    Type: Number\n  qqCallInfoUpdateDesiredCount:\n    Type: Number\n  myDealerInfoUpdateDesiredCount:\n    Type: Number\n  gtcOpeningProvisioningDesiredCount:\n    Type: Number\n  gtcClosingProvisioningDesiredCount:\n    Type: Number\n\n  taskdefinitionForProxy:\n    Type: String\n  taskdefinitionForApi:\n    Type: String\n\nResources:\n\n  # Nginx????\n  internalServiceForProxy:\n    Type: AWS::ECS::Service\n    Properties:\n      Cluster: !ImportValue cluster\n      DeploymentConfiguration:\n        MaximumPercent: 200\n        MinimumHealthyPercent: 50\n      DesiredCount: !Ref proxyDesiredCount\n      LaunchType: FARGATE\n      LoadBalancers:\n        - ContainerName: proxy-nginx\n          ContainerPort: 80\n          TargetGroupArn: !ImportValue internalTargetGroup\n      NetworkConfiguration:\n        AwsvpcConfiguration:\n          AssignPublicIp: DISABLED\n          SecurityGroups:\n            - !ImportValue internalApplicationSecuritygroup\n          Subnets:\n            - !ImportValue PrivateSubnet1a\n            - !ImportValue PrivateSubnet1c\n      ServiceName: !Sub ${accountAlliasLowerCase}-internal-service-proxy\n      TaskDefinition: !Ref taskdefinitionForProxy\n\n  # ?????API\n  serviceDiscoveryForUpdateMaster:\n    Type: AWS::ServiceDiscovery::Service\n    Properties:\n      HealthCheckCustomConfig:\n        FailureThreshold: 1\n      DnsConfig:\n        DnsRecords:\n          - Type: A\n            TTL: 60\n        NamespaceId: !ImportValue privateDnsNamespaceId\n      Name: update-master\n  internalServiceForUpdateMaster:\n    Type: AWS::ECS::Service\n    Properties:\n      Cluster: !ImportValue cluster\n      DeploymentConfiguration:\n        MaximumPercent: 200\n        MinimumHealthyPercent: 50\n      DesiredCount: !Ref updateMasterDesiredCount\n      LaunchType: FARGATE\n      ServiceRegistries:\n        - RegistryArn: !GetAtt serviceDiscoveryForUpdateMaster.Arn\n      NetworkConfiguration:\n        AwsvpcConfiguration:\n          AssignPublicIp: DISABLED\n          SecurityGroups:\n            - !ImportValue internalApplicationSecuritygroup\n          Subnets:\n            - !ImportValue PrivateSubnet1a\n            - !ImportValue PrivateSubnet1c\n      ServiceName: !Sub ${accountAlliasLowerCase}-internal-service-api-updatemaster\n      TaskDefinition: !Ref taskdefinitionForApi\n\n  # ????API\n  serviceDiscoveryForPutAuthorityData:\n    Type: AWS::ServiceDiscovery::Service\n    Properties:\n      HealthCheckCustomConfig:\n        FailureThreshold: 1\n      DnsConfig:\n        DnsRecords:\n          - Type: A\n            TTL: 60\n        NamespaceId: !ImportValue privateDnsNamespaceId\n      Name: put-authority-data\n  internalServiceForPutAuthorityData:\n    Type: AWS::ECS::Service\n    Properties:\n      Cluster: !ImportValue cluster\n      DeploymentConfiguration:\n        MaximumPercent: 200\n        MinimumHealthyPercent: 50\n      DesiredCount: !Ref putAuthorityDataDesiredCount\n      LaunchType: FARGATE\n      ServiceRegistries:\n        - RegistryArn: !GetAtt serviceDiscoveryForPutAuthorityData.Arn\n      NetworkConfiguration:\n        AwsvpcConfiguration:\n          AssignPublicIp: DISABLED\n          SecurityGroups:\n            - !ImportValue internalApplicationSecuritygroup\n          Subnets:\n            - !ImportValue PrivateSubnet1a\n            - !ImportValue PrivateSubnet1c\n      ServiceName: !Sub ${accountAlliasLowerCase}-internal-service-api-putauthoritydata\n      TaskDefinition: !Ref taskdefinitionForApi\n\n  # ????API\n  serviceDiscoveryForGetAuthorityStatus:\n    Type: AWS::ServiceDiscovery::Service\n    Properties:\n      HealthCheckCustomConfig:\n        FailureThreshold: 1\n      DnsConfig:\n        DnsRecords:\n          - Type: A\n            TTL: 60\n        NamespaceId: !ImportValue privateDnsNamespaceId\n      Name: get-authority-status\n  internalServiceForGetAuthorityStatus:\n    Type: AWS::ECS::Service\n    Properties:\n      Cluster: !ImportValue cluster\n      DeploymentConfiguration:\n        MaximumPercent: 200\n        MinimumHealthyPercent: 50\n      DesiredCount: !Ref getAuthorityStatusDesiredCount\n      LaunchType: FARGATE\n      ServiceRegistries:\n        - RegistryArn: !GetAtt serviceDiscoveryForGetAuthorityStatus.Arn\n      NetworkConfiguration:\n        AwsvpcConfiguration:\n          AssignPublicIp: DISABLED\n          SecurityGroups:\n            - !ImportValue internalApplicationSecuritygroup\n          Subnets:\n            - !ImportValue PrivateSubnet1a\n            - !ImportValue PrivateSubnet1c\n      ServiceName: !Sub ${accountAlliasLowerCase}-internal-service-api-getauthoritystatus\n      TaskDefinition: !Ref taskdefinitionForApi\n\n  # ?????????API\n  serviceDiscoveryForGetSaleHistoryForWiFi:\n    Type: AWS::ServiceDiscovery::Service\n    Properties:\n      HealthCheckCustomConfig:\n        FailureThreshold: 1\n      DnsConfig:\n        DnsRecords:\n          - Type: A\n            TTL: 60\n        NamespaceId: !ImportValue privateDnsNamespaceId\n      Name: get-sale-history-for-wifi\n  internalServiceForGetSaleHistoryForWiFi:\n    Type: AWS::ECS::Service\n    Properties:\n      Cluster: !ImportValue cluster\n      DeploymentConfiguration:\n        MaximumPercent: 200\n        MinimumHealthyPercent: 50\n      DesiredCount: !Ref getSaleHistoryForWiFiDesiredCount\n      LaunchType: FARGATE\n      ServiceRegistries:\n        - RegistryArn: !GetAtt serviceDiscoveryForGetSaleHistoryForWiFi.Arn\n      NetworkConfiguration:\n        AwsvpcConfiguration:\n          AssignPublicIp: DISABLED\n          SecurityGroups:\n            - !ImportValue internalApplicationSecuritygroup\n          Subnets:\n            - !ImportValue PrivateSubnet1a\n            - !ImportValue PrivateSubnet1c\n      ServiceName: !Sub ${accountAlliasLowerCase}-internal-service-api-getsalehistoryforwifi\n      TaskDefinition: !Ref taskdefinitionForApi\n\n  # ????API\n  serviceDiscoveryForUseAuthority:\n    Type: AWS::ServiceDiscovery::Service\n    Properties:\n      HealthCheckCustomConfig:\n        FailureThreshold: 1\n      DnsConfig:\n        DnsRecords:\n          - Type: A\n            TTL: 60\n        NamespaceId: !ImportValue privateDnsNamespaceId\n      Name: use-authority\n  internalServiceForUseAuthority:\n    Type: AWS::ECS::Service\n    Properties:\n      Cluster: !ImportValue cluster\n      DeploymentConfiguration:\n        MaximumPercent: 200\n        MinimumHealthyPercent: 50\n      DesiredCount: !Ref useAuthorityDesiredCount\n      LaunchType: FARGATE\n      ServiceRegistries:\n        - RegistryArn: !GetAtt serviceDiscoveryForUseAuthority.Arn\n      NetworkConfiguration:\n        AwsvpcConfiguration:\n          AssignPublicIp: DISABLED\n          SecurityGroups:\n            - !ImportValue internalApplicationSecuritygroup\n          Subnets:\n            - !ImportValue PrivateSubnet1a\n            - !ImportValue PrivateSubnet1c\n      ServiceName: !Sub ${accountAlliasLowerCase}-internal-service-api-useauthority\n      TaskDefinition: !Ref taskdefinitionForApi\n\n  # ??????API\n  serviceDiscoveryForAuthorityRollback:\n    Type: AWS::ServiceDiscovery::Service\n    Properties:\n      HealthCheckCustomConfig:\n        FailureThreshold: 1\n      DnsConfig:\n        DnsRecords:\n          - Type: A\n            TTL: 60\n        NamespaceId: !ImportValue privateDnsNamespaceId\n      Name: authority-rollback\n  internalServiceForAuthorityRollback:\n    Type: AWS::ECS::Service\n    Properties:\n      Cluster: !ImportValue cluster\n      DeploymentConfiguration:\n        MaximumPercent: 200\n        MinimumHealthyPercent: 50\n      DesiredCount: !Ref authorityRollbackDesiredCount\n      LaunchType: FARGATE\n      ServiceRegistries:\n        - RegistryArn: !GetAtt serviceDiscoveryForAuthorityRollback.Arn\n      NetworkConfiguration:\n        AwsvpcConfiguration:\n          AssignPublicIp: DISABLED\n          SecurityGroups:\n            - !ImportValue internalApplicationSecuritygroup\n          Subnets:\n            - !ImportValue PrivateSubnet1a\n            - !ImportValue PrivateSubnet1c\n      ServiceName: !Sub ${accountAlliasLowerCase}-internal-service-api-authorityrollback\n      TaskDefinition: !Ref taskdefinitionForApi\n\n  # ???????API\n  serviceDiscoveryForGetSalePlanForWiFi:\n    Type: AWS::ServiceDiscovery::Service\n    Properties:\n      HealthCheckCustomConfig:\n        FailureThreshold: 1\n      DnsConfig:\n        DnsRecords:\n          - Type: A\n            TTL: 60\n        NamespaceId: !ImportValue privateDnsNamespaceId\n      Name: get-sale-plan-for-wifi\n  internalServiceForGetSalePlanForWiFi:\n    Type: AWS::ECS::Service\n    Properties:\n      Cluster: !ImportValue cluster\n      DeploymentConfiguration:\n        MaximumPercent: 200\n        MinimumHealthyPercent: 50\n      DesiredCount: !Ref getSalePlanForWiFiDesiredCount\n      LaunchType: FARGATE\n      ServiceRegistries:\n        - RegistryArn: !GetAtt serviceDiscoveryForGetSalePlanForWiFi.Arn\n      NetworkConfiguration:\n        AwsvpcConfiguration:\n          AssignPublicIp: DISABLED\n          SecurityGroups:\n            - !ImportValue internalApplicationSecuritygroup\n          Subnets:\n            - !ImportValue PrivateSubnet1a\n            - !ImportValue PrivateSubnet1c\n      ServiceName: !Sub ${accountAlliasLowerCase}-internal-service-api-getsaleplanforwifi\n      TaskDefinition: !Ref taskdefinitionForApi\n\n  # ??????API\n  serviceDiscoveryForGetUseHistory:\n    Type: AWS::ServiceDiscovery::Service\n    Properties:\n      HealthCheckCustomConfig:\n        FailureThreshold: 1\n      DnsConfig:\n        DnsRecords:\n          - Type: A\n            TTL: 60\n        NamespaceId: !ImportValue privateDnsNamespaceId\n      Name: get-use-history\n  internalServiceForGetUseHistory:\n    Type: AWS::ECS::Service\n    Properties:\n      Cluster: !ImportValue cluster\n      DeploymentConfiguration:\n        MaximumPercent: 200\n        MinimumHealthyPercent: 50\n      DesiredCount: !Ref getUseHistoryDesiredCount\n      LaunchType: FARGATE\n      ServiceRegistries:\n        - RegistryArn: !GetAtt serviceDiscoveryForGetUseHistory.Arn\n      NetworkConfiguration:\n        AwsvpcConfiguration:\n          AssignPublicIp: DISABLED\n          SecurityGroups:\n            - !ImportValue internalApplicationSecuritygroup\n          Subnets:\n            - !ImportValue PrivateSubnet1a\n            - !ImportValue PrivateSubnet1c\n      ServiceName: !Sub ${accountAlliasLowerCase}-internal-service-api-getusehistory\n      TaskDefinition: !Ref taskdefinitionForApi\n\n  # QQ???????API\n  serviceDiscoveryForQqCallInfoUpdate:\n    Type: AWS::ServiceDiscovery::Service\n    Properties:\n      HealthCheckCustomConfig:\n        FailureThreshold: 1\n      DnsConfig:\n        DnsRecords:\n          - Type: A\n            TTL: 60\n        NamespaceId: !ImportValue privateDnsNamespaceId\n      Name: qq-call-info-update\n  internalServiceForQqCallInfoUpdate:\n    Type: AWS::ECS::Service\n    Properties:\n      Cluster: !ImportValue cluster\n      DeploymentConfiguration:\n        MaximumPercent: 200\n        MinimumHealthyPercent: 50\n      DesiredCount: !Ref qqCallInfoUpdateDesiredCount\n      LaunchType: FARGATE\n      ServiceRegistries:\n        - RegistryArn: !GetAtt serviceDiscoveryForQqCallInfoUpdate.Arn\n      NetworkConfiguration:\n        AwsvpcConfiguration:\n          AssignPublicIp: DISABLED\n          SecurityGroups:\n            - !ImportValue internalApplicationSecuritygroup\n          Subnets:\n            - !ImportValue PrivateSubnet1a\n            - !ImportValue PrivateSubnet1c\n      ServiceName: !Sub ${accountAlliasLowerCase}-internal-service-api-qqcallinfoupdate\n      TaskDefinition: !Ref taskdefinitionForApi\n\n  # ???????????API\n  serviceDiscoveryForMyDealerInfoUpdate:\n    Type: AWS::ServiceDiscovery::Service\n    Properties:\n      HealthCheckCustomConfig:\n        FailureThreshold: 1\n      DnsConfig:\n        DnsRecords:\n          - Type: A\n            TTL: 60\n        NamespaceId: !ImportValue privateDnsNamespaceId\n      Name: my-dealer-info-update\n  internalServiceForMyDealerInfoUpdate:\n    Type: AWS::ECS::Service\n    Properties:\n      Cluster: !ImportValue cluster\n      DeploymentConfiguration:\n        MaximumPercent: 200\n        MinimumHealthyPercent: 50\n      DesiredCount: !Ref myDealerInfoUpdateDesiredCount\n      LaunchType: FARGATE\n      ServiceRegistries:\n        - RegistryArn: !GetAtt serviceDiscoveryForMyDealerInfoUpdate.Arn\n      NetworkConfiguration:\n        AwsvpcConfiguration:\n          AssignPublicIp: DISABLED\n          SecurityGroups:\n            - !ImportValue internalApplicationSecuritygroup\n          Subnets:\n            - !ImportValue PrivateSubnet1a\n            - !ImportValue PrivateSubnet1c\n      ServiceName: !Sub ${accountAlliasLowerCase}-internal-service-api-mydealerinfoupdate\n      TaskDefinition: !Ref taskdefinitionForApi\n\n  # ??????????API\n  serviceDiscoveryForGtcOpeningProvisioning:\n    Type: AWS::ServiceDiscovery::Service\n    Properties:\n      HealthCheckCustomConfig:\n        FailureThreshold: 1\n      DnsConfig:\n        DnsRecords:\n          - Type: A\n            TTL: 60\n        NamespaceId: !ImportValue privateDnsNamespaceId\n      Name: gtc-opening-provisioning\n  internalServiceForGtcOpeningProvisioning:\n    Type: AWS::ECS::Service\n    Properties:\n      Cluster: !ImportValue cluster\n      DeploymentConfiguration:\n        MaximumPercent: 200\n        MinimumHealthyPercent: 50\n      DesiredCount: !Ref gtcOpeningProvisioningDesiredCount\n      LaunchType: FARGATE\n      ServiceRegistries:\n        - RegistryArn: !GetAtt serviceDiscoveryForGtcOpeningProvisioning.Arn\n      NetworkConfiguration:\n        AwsvpcConfiguration:\n          AssignPublicIp: DISABLED\n          SecurityGroups:\n            - !ImportValue internalApplicationSecuritygroup\n          Subnets:\n            - !ImportValue PrivateSubnet1a\n            - !ImportValue PrivateSubnet1c\n      ServiceName: !Sub ${accountAlliasLowerCase}-internal-service-api-gtcopeningprovisioning\n      TaskDefinition: !Ref taskdefinitionForApi\n\n  # ??????????API\n  serviceDiscoveryForGtcClosingProvisioning:\n    Type: AWS::ServiceDiscovery::Service\n    Properties:\n      HealthCheckCustomConfig:\n        FailureThreshold: 1\n      DnsConfig:\n        DnsRecords:\n          - Type: A\n            TTL: 60\n        NamespaceId: !ImportValue privateDnsNamespaceId\n      Name: gtc-closing-provisioning\n  internalServiceForGtcClosingProvisioning:\n    Type: AWS::ECS::Service\n    Properties:\n      Cluster: !ImportValue cluster\n      DeploymentConfiguration:\n        MaximumPercent: 200\n        MinimumHealthyPercent: 50\n      DesiredCount: !Ref gtcClosingProvisioningDesiredCount\n      LaunchType: FARGATE\n      ServiceRegistries:\n        - RegistryArn: !GetAtt serviceDiscoveryForGtcClosingProvisioning.Arn\n      NetworkConfiguration:\n        AwsvpcConfiguration:\n          AssignPublicIp: DISABLED\n          SecurityGroups:\n            - !ImportValue internalApplicationSecuritygroup\n          Subnets:\n            - !ImportValue PrivateSubnet1a\n            - !ImportValue PrivateSubnet1c\n      ServiceName: !Sub ${accountAlliasLowerCase}-internal-service-api-gtcclosingprovisioning\n      TaskDefinition: !Ref taskdefinitionForApi\n\nOutputs:\n  internalServiceForProxy:\n    Value: !Ref internalServiceForProxy\n    Export:\n      Name: internalServiceForProxy\n  internalServiceForUpdateMaster:\n    Value: !Ref internalServiceForUpdateMaster\n    Export:\n      Name: internalServiceForUpdateMaster\n  internalServiceForPutAuthorityData:\n    Value: !Ref internalServiceForPutAuthorityData\n    Export:\n      Name: internalServiceForPutAuthorityData\n  internalServiceForGetAuthorityStatus:\n    Value: !Ref internalServiceForGetAuthorityStatus\n    Export:\n      Name: internalServiceForGetAuthorityStatus\n  internalServiceForGetSaleHistoryForWiFi:\n    Value: !Ref internalServiceForGetSaleHistoryForWiFi\n    Export:\n      Name: internalServiceForGetSaleHistoryForWiFi\n  internalServiceForUseAuthority:\n    Value: !Ref internalServiceForUseAuthority\n    Export:\n      Name: internalServiceForUseAuthority\n  internalServiceForAuthorityRollback:\n    Value: !Ref internalServiceForAuthorityRollback\n    Export:\n      Name: internalServiceForAuthorityRollback\n  internalServiceForGetSalePlanForWiFi:\n    Value: !Ref internalServiceForGetSalePlanForWiFi\n    Export:\n      Name: internalServiceForGetSalePlanForWiFi\n  internalServiceForGetUseHistory:\n    Value: !Ref internalServiceForGetUseHistory\n    Export:\n      Name: internalServiceForGetUseHistory\n  internalServiceForQqCallInfoUpdate:\n    Value: !Ref internalServiceForQqCallInfoUpdate\n    Export:\n      Name: internalServiceForQqCallInfoUpdate\n  internalServiceForMyDealerInfoUpdate:\n    Value: !Ref internalServiceForMyDealerInfoUpdate\n    Export:\n      Name: internalServiceForMyDealerInfoUpdate\n  internalServiceForGtcOpeningProvisioning:\n    Value: !Ref internalServiceForGtcOpeningProvisioning\n    Export:\n      Name: internalServiceForGtcOpeningProvisioning\n  internalServiceForGtcClosingProvisioning:\n    Value: !Ref internalServiceForGtcClosingProvisioning\n    Export:\n      Name: internalServiceForGtcClosingProvisioning\n"
}
INV-ver-sub01-public-service
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: public ecs service\n\nParameters:\n  accountAllias:\n    Type: String\n  accountAlliasLowerCase:\n    Type: String\n  msgDesiredCount:\n    Type: Number\n  provDesiredCount:\n    Type: Number\n\n  taskdefinitionForScreen:\n    Type: String\n\nResources:\n  # MSG?????????\n  publicServiceForMsg:\n    Type: AWS::ECS::Service\n    Properties:\n      Cluster: !ImportValue cluster\n      DeploymentConfiguration:\n        MaximumPercent: 200\n        MinimumHealthyPercent: 50\n      DesiredCount: !Ref msgDesiredCount\n      LaunchType: FARGATE\n      LoadBalancers:\n        - ContainerName: screen-nginx\n          ContainerPort: 80\n          TargetGroupArn: !ImportValue publicAlbTargetGroupForMsg\n      NetworkConfiguration:\n        AwsvpcConfiguration:\n          AssignPublicIp: DISABLED\n          SecurityGroups:\n            - !ImportValue internalApplicationSecuritygroup\n          Subnets:\n            - !ImportValue PrivateSubnet1a\n            - !ImportValue PrivateSubnet1c\n      ServiceName: !Sub ${accountAlliasLowerCase}-public-service-screen-msg\n      TaskDefinition: !Ref taskdefinitionForScreen\n\n  # ??????????????\n  publicServiceForProvisioning:\n    Type: AWS::ECS::Service\n    Properties:\n      Cluster: !ImportValue cluster\n      DeploymentConfiguration:\n        MaximumPercent: 200\n        MinimumHealthyPercent: 50\n      DesiredCount: !Ref provDesiredCount\n      LaunchType: FARGATE\n      LoadBalancers:\n        - ContainerName: screen-nginx\n          ContainerPort: 80\n          TargetGroupArn: !ImportValue publicAlbTargetGroupForProvisioning\n      NetworkConfiguration:\n        AwsvpcConfiguration:\n          AssignPublicIp: DISABLED\n          SecurityGroups:\n            - !ImportValue internalApplicationSecuritygroup\n          Subnets:\n            - !ImportValue PrivateSubnet1a\n            - !ImportValue PrivateSubnet1c\n      ServiceName: !Sub ${accountAlliasLowerCase}-public-service-screen-provisioning\n      TaskDefinition: !Ref taskdefinitionForScreen\n\nOutputs:\n  publicServiceForMsg:\n    Value: !Ref publicServiceForMsg\n    Export:\n      Name: publicServiceForMsg\n  publicServiceForProvisioning:\n    Value: !Ref publicServiceForProvisioning\n    Export:\n      Name: publicServiceForProvisioning\n\n"
}
INV-ver-sub01-kinesis-user
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: 2010-09-09\nDescription: IAM User for Kinesis Access\nParameters:\n  streamArns:\n    Type: String\n    Default: \"*\"\n  userName:\n    Type: String\n    Default: \"*\"\nResources:\n  kinesisPolicy:\n    Type: AWS::IAM::ManagedPolicy\n    Properties:\n      ManagedPolicyName: kinesis-put-policy\n#      Groups:\n#        - !Ref Group1\n      PolicyDocument:\n        Version: \"2012-10-17\"\n        Statement:\n          -\n            Effect: \"Allow\"\n            Action:\n              - \"kinesis:PutRecord\"\n            Resource: !Ref streamArns\n  Group1:\n    Type: AWS::IAM::Group\n    Properties:\n      GroupName: kinesis-user-group\n      ManagedPolicyArns:\n        - !Ref kinesisPolicy\n  User1:\n    Type: AWS::IAM::User\n    Properties:\n      Groups:\n        - !Ref Group1\n      UserName: !Ref userName\nOutputs:\n  User1:\n    Value: !Ref User1\n    Export:\n      Name: kinesisUser\n  Group1:\n    Value: !Ref Group1\n    Export:\n      Name: kinesisUserGroup\n"
}
INV-ver-sub01-kinesis-lambda
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: 2010-09-09\nDescription: kinesis and lambda\n\nParameters:\n  accountAllias:\n    Type: String\n  accountAlliasLowerCase:\n    Type: String\n\n  deployS3BucketName:\n    Type: String\n  deployS3FileNameProvisioning:\n    Type: String\n    Default: provisioningResultNotification.zip\n  deployS3FileNameWipeHu:\n    Type: String\n    Default: wipeHuResultNotification.zip\n  deployS3FileNameWipeTcu:\n    Type: String\n    Default: wipeTcuResultNotification.zip\n  deployS3FileNameDataUpload:\n    Type: String\n    Default: dataUploadResultNotification.zip\n\n  appEnv:\n    Type: String\n  dbHost:\n    Type: String\n  dbDatabase:\n    Type: String\n  dbUsername:\n    Type: String\n  dbPassword:\n    Type: String\n\nResources:\n\n  lambdaBasicExecutionRole:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service:\n                - lambda.amazonaws.com\n            Action:\n              - sts:AssumeRole\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaKinesisExecutionRole\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole\n      RoleName: !Sub ${accountAlliasLowerCase}-lambdaBasicExecutionRole\n\n  # GTC provisioning-result-notification\n  kinesisStreamForProvisioningResultNotification:\n    Type: AWS::Kinesis::Stream\n    Properties:\n      Name: !Sub ${accountAlliasLowerCase}-kinesis-stream-provisioning-result-notification\n      ShardCount: 3\n      Tags:\n        - Key: Name\n          Value: !Sub ${accountAlliasLowerCase}-kinesis-stream-provisioning-result-notification\n  lambdaForProvisioningResultNotification:\n    Type: AWS::Lambda::Function\n    Properties:\n      Code:\n        S3Bucket: !Ref deployS3BucketName\n        S3Key: !Ref deployS3FileNameProvisioning\n      Handler: provisioningResultNotification\n      Runtime: go1.x\n      Timeout: 5\n      MemorySize: 512\n      ReservedConcurrentExecutions: 10\n      Role: !GetAtt lambdaBasicExecutionRole.Arn\n      Environment:\n        Variables:\n          APP_ENV: !Ref appEnv\n          APP_NAME: sub\n          DB_HOST: !Ref dbHost\n          DB_DATABASE: !Ref dbDatabase\n          DB_USERNAME: !Ref dbUsername\n          DB_PASSWORD: !Ref dbPassword\n      VpcConfig:\n        SecurityGroupIds:\n          - !ImportValue dbSecurityGroupId\n        SubnetIds:\n          - !ImportValue PrivateSubnet1a\n          - !ImportValue PrivateSubnet1c\n      Tags:\n        - Key: Name\n          Value: !Sub ${accountAlliasLowerCase}-lambda-provisioning-result-notification\n  lambdaProvisioningResultNotificationEventSourceMapping:\n    Type: AWS::Lambda::EventSourceMapping\n    Properties:\n      FunctionName: !GetAtt lambdaForProvisioningResultNotification.Arn\n      EventSourceArn: !GetAtt kinesisStreamForProvisioningResultNotification.Arn\n      StartingPosition: TRIM_HORIZON\n  logGroupProvisioningResultNotification:\n    Type: AWS::Logs::LogGroup\n    Properties:\n      LogGroupName: !Sub /aws/lambda/${lambdaForProvisioningResultNotification}\n\n  # GTC wipe-hu-result-notification\n  kinesisStreamForWipeHuResultNotification:\n    Type: AWS::Kinesis::Stream\n    Properties:\n      Name: !Sub ${accountAlliasLowerCase}-kinesis-stream-wipe-hu-result-notification\n      ShardCount: 3\n      Tags:\n        - Key: Name\n          Value: !Sub ${accountAlliasLowerCase}-kinesis-stream-wipe-hu-result-notification\n  lambdaForWipeHuResultNotification:\n    Type: AWS::Lambda::Function\n    Properties:\n      Code:\n        S3Bucket: !Ref deployS3BucketName\n        S3Key: !Ref deployS3FileNameWipeHu\n      Handler: wipeHuResultNotification\n      Runtime: go1.x\n      Timeout: 5\n      MemorySize: 512\n      ReservedConcurrentExecutions: 10\n      Role: !GetAtt lambdaBasicExecutionRole.Arn\n      Environment:\n        Variables:\n          APP_ENV: !Ref appEnv\n          APP_NAME: sub\n          DB_HOST: !Ref dbHost\n          DB_DATABASE: !Ref dbDatabase\n          DB_USERNAME: !Ref dbUsername\n          DB_PASSWORD: !Ref dbPassword\n      VpcConfig:\n        SecurityGroupIds:\n          - !ImportValue dbSecurityGroupId\n        SubnetIds:\n          - !ImportValue PrivateSubnet1a\n          - !ImportValue PrivateSubnet1c\n      Tags:\n        - Key: Name\n          Value: !Sub ${accountAlliasLowerCase}-lambda-wipe-hu-result-notification\n  lambdaWipeHuResultNotificationEventSourceMapping:\n    Type: AWS::Lambda::EventSourceMapping\n    Properties:\n      FunctionName: !GetAtt lambdaForWipeHuResultNotification.Arn\n      EventSourceArn: !GetAtt kinesisStreamForWipeHuResultNotification.Arn\n      StartingPosition: TRIM_HORIZON\n  logGroupWipeHuResultNotification:\n    Type: AWS::Logs::LogGroup\n    Properties:\n      LogGroupName: !Sub /aws/lambda/${lambdaForWipeHuResultNotification}\n\n  # GTC wipe-tcu-result-notification\n  kinesisStreamForWipeTcuResultNotification:\n    Type: AWS::Kinesis::Stream\n    Properties:\n      Name: !Sub ${accountAlliasLowerCase}-kinesis-stream-wipe-tcu-result-notification\n      ShardCount: 3\n      Tags:\n        - Key: Name\n          Value: !Sub ${accountAlliasLowerCase}-kinesis-stream-wipe-tcu-result-notification\n  lambdaForWipeTcuResultNotification:\n    Type: AWS::Lambda::Function\n    Properties:\n      Code:\n        S3Bucket: !Ref deployS3BucketName\n        S3Key: !Ref deployS3FileNameWipeTcu\n      Handler: wipeTcuResultNotification\n      Runtime: go1.x\n      Timeout: 5\n      MemorySize: 512\n      ReservedConcurrentExecutions: 10\n      Role: !GetAtt lambdaBasicExecutionRole.Arn\n      Environment:\n        Variables:\n          APP_ENV: !Ref appEnv\n          APP_NAME: sub\n          DB_HOST: !Ref dbHost\n          DB_DATABASE: !Ref dbDatabase\n          DB_USERNAME: !Ref dbUsername\n          DB_PASSWORD: !Ref dbPassword\n      VpcConfig:\n        SecurityGroupIds:\n          - !ImportValue dbSecurityGroupId\n        SubnetIds:\n          - !ImportValue PrivateSubnet1a\n          - !ImportValue PrivateSubnet1c\n      Tags:\n        - Key: Name\n          Value: !Sub ${accountAlliasLowerCase}-lambda-wipe-tcu-result-notification\n  lambdaWipeTcuResultNotificationEventSourceMapping:\n    Type: AWS::Lambda::EventSourceMapping\n    Properties:\n      FunctionName: !GetAtt lambdaForWipeTcuResultNotification.Arn\n      EventSourceArn: !GetAtt kinesisStreamForWipeTcuResultNotification.Arn\n      StartingPosition: TRIM_HORIZON\n  logGroupWipeTcuResultNotification:\n    Type: AWS::Logs::LogGroup\n    Properties:\n      LogGroupName: !Sub /aws/lambda/${lambdaForWipeTcuResultNotification}\n\n  # GTC data-upload-result-notification\n  kinesisStreamForDataUploadResultNotification:\n    Type: AWS::Kinesis::Stream\n    Properties:\n      Name: !Sub ${accountAlliasLowerCase}-kinesis-stream-data-upload-result-notification\n      ShardCount: 3\n      Tags:\n        - Key: Name\n          Value: !Sub ${accountAlliasLowerCase}-kinesis-stream-data-upload-result-notification\n  lambdaForDataUploadResultNotification:\n    Type: AWS::Lambda::Function\n    Properties:\n      Code:\n        S3Bucket: !Ref deployS3BucketName\n        S3Key: !Ref deployS3FileNameDataUpload\n      Handler: dataUploadResultNotification\n      Runtime: go1.x\n      Timeout: 5\n      MemorySize: 512\n      ReservedConcurrentExecutions: 10\n      Role: !GetAtt lambdaBasicExecutionRole.Arn\n      Environment:\n        Variables:\n          APP_ENV: !Ref appEnv\n          APP_NAME: sub\n          DB_HOST: !Ref dbHost\n          DB_DATABASE: !Ref dbDatabase\n          DB_USERNAME: !Ref dbUsername\n          DB_PASSWORD: !Ref dbPassword\n      VpcConfig:\n        SecurityGroupIds:\n          - !ImportValue dbSecurityGroupId\n        SubnetIds:\n          - !ImportValue PrivateSubnet1a\n          - !ImportValue PrivateSubnet1c\n      Tags:\n        - Key: Name\n          Value: !Sub ${accountAlliasLowerCase}-lambda-data-upload-result-notification\n  lambdaDataUploadResultNotificationEventSourceMapping:\n    Type: AWS::Lambda::EventSourceMapping\n    Properties:\n      FunctionName: !GetAtt lambdaForDataUploadResultNotification.Arn\n      EventSourceArn: !GetAtt kinesisStreamForDataUploadResultNotification.Arn\n      StartingPosition: TRIM_HORIZON\n  logGroupDataUploadResultNotification:\n    Type: AWS::Logs::LogGroup\n    Properties:\n      LogGroupName: !Sub /aws/lambda/${lambdaForDataUploadResultNotification}\n\nOutputs:\n  kinesisStreamForProvisioningResultNotification:\n    Value: !Ref kinesisStreamForProvisioningResultNotification\n    Export:\n      Name: kinesisStreamForProvisioningResultNotification\n  lambdaForProvisioningResultNotification:\n    Value: !Ref lambdaForProvisioningResultNotification\n    Export:\n      Name: lambdaForProvisioningResultNotification\n  kinesisStreamForWipeHuResultNotification:\n    Value: !Ref kinesisStreamForWipeHuResultNotification\n    Export:\n      Name: kinesisStreamForWipeHuResultNotification\n  lambdaForWipeHuResultNotification:\n    Value: !Ref lambdaForWipeHuResultNotification\n    Export:\n      Name: lambdaForWipeHuResultNotification\n  kinesisStreamForWipeTcuResultNotification:\n    Value: !Ref kinesisStreamForWipeTcuResultNotification\n    Export:\n      Name: kinesisStreamForWipeTcuResultNotification\n  lambdaForWipeTcuResultNotification:\n    Value: !Ref lambdaForWipeTcuResultNotification\n    Export:\n      Name: lambdaForWipeTcuResultNotification\n  kinesisStreamForDataUploadResultNotification:\n    Value: !Ref kinesisStreamForDataUploadResultNotification\n    Export:\n      Name: kinesisStreamForDataUploadResultNotification\n  lambdaForDataUploadResultNotification:\n    Value: !Ref lambdaForDataUploadResultNotification\n    Export:\n      Name: lambdaForDataUploadResultNotification\n"
}
INV-ver-sub01-codepipeline-lambda
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: 2010-09-09\nDescription: codepipeline for lambda\n\nParameters:\n# ------------------------------------------------------------#\n#  Parameters\n# ------------------------------------------------------------#\n  accountAllias:\n    Type: String\n  accountAlliasLowerCase:\n    Type: String\n  codeCommitName:\n    Type: String\n  codeCommitArn:\n    Type: String\n\nResources:\n# ------------------------------------------------------------#\n#  Role\n# ------------------------------------------------------------#\n  codeBuildRoleLambda:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service:\n                - codebuild.amazonaws.com\n            Action:\n              - sts:AssumeRole\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/AdministratorAccess\n  codePipelineRoleLambda:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service:\n                - codepipeline.amazonaws.com\n            Action:\n              - sts:AssumeRole\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/AWSCodeCommitFullAccess\n        - arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess\n        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess\n        - arn:aws:iam::aws:policy/AmazonS3FullAccess\n        - arn:aws:iam::aws:policy/CloudWatchFullAccess\n# ------------------------------------------------------------#\n#  CodeBuildProject\n# ------------------------------------------------------------#\n  codeBuildProjectLambda:\n    Type: AWS::CodeBuild::Project\n    Properties:\n      Name: !Sub ${accountAlliasLowerCase}-build-lambda\n      ServiceRole: !Ref codeBuildRoleLambda\n      Artifacts:\n        Type: CODEPIPELINE\n      Description: !Sub Building stage for ${accountAlliasLowerCase}\n      Environment:\n        ComputeType: BUILD_GENERAL1_SMALL\n        EnvironmentVariables:\n          - Name: AWS_REGION\n            Value: !Ref AWS::Region\n          - Name: AWS_ACCOUNT_ID\n            Value: !Ref AWS::AccountId\n          - Name: ACCOUNT_ALLIAS\n            Value: !Ref accountAllias\n          - Name: ACCOUNT_ALLIAS_LOWER_CASE\n            Value: !Ref accountAlliasLowerCase\n          - Name: CFN_S3_BUCKET_NAME\n            Value: !Sub ${accountAlliasLowerCase}-cfn\n          - Name: DEPLOY_S3_BUCKET_NAME\n            Value: !Sub ${accountAlliasLowerCase}-lambda-deploy\n          - Name: CFN_STACK_NAME\n            Value: !Sub ${accountAllias}-kinesis-lambda\n          - Name: CFN_TEMPLATE\n            Value: kinesis-lambda.yml\n        Image: aws/codebuild/golang:1.11\n        Type: LINUX_CONTAINER\n        PrivilegedMode: false\n      Source:\n        Type: CODEPIPELINE\n      TimeoutInMinutes: 30\n# ------------------------------------------------------------#\n#  S3\n# ------------------------------------------------------------#\n  s3BucketForCodepipelineLambda:\n    Type: AWS::S3::Bucket\n    Properties:\n      BucketName: !Sub ${accountAlliasLowerCase}-codepipeline-lambda\n# ------------------------------------------------------------#\n#  CodePipeline\n# ------------------------------------------------------------#\n  codepipeline:\n    Type: AWS::CodePipeline::Pipeline\n    Properties:\n      Name: !Sub ${accountAlliasLowerCase}-codepipeline-lambda\n      RoleArn: !GetAtt codePipelineRoleLambda.Arn\n      ArtifactStore:\n        Location: !Ref s3BucketForCodepipelineLambda\n        Type: S3\n      Stages:\n        - Name: Source\n          Actions:\n            - Name: Source\n              ActionTypeId:\n                Category: Source\n                Owner: AWS\n                Provider: CodeCommit\n                Version: 1\n              OutputArtifacts:\n                - Name: SourceOutput\n              Configuration:\n                PollForSourceChanges: false\n                RepositoryName: !Ref codeCommitName\n                BranchName: master\n              RunOrder: 1\n        - Name: Build\n          Actions:\n            - Name: CodeBuild\n              ActionTypeId:\n                Category: Build\n                Owner: AWS\n                Provider: CodeBuild\n                Version: 1\n              InputArtifacts:\n                - Name: SourceOutput\n              OutputArtifacts:\n                - Name: CodebuildOutput\n              Configuration:\n                ProjectName: !Ref codeBuildProjectLambda\n              RunOrder: 1\n# ------------------------------------------------------------#\n#  CloudWatch\n# ------------------------------------------------------------#\n  cloudWatchEventRole:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service:\n                - events.amazonaws.com\n            Action: sts:AssumeRole\n      Path: /\n      Policies:\n        - PolicyName: cwe-pipeline-execution\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Effect: Allow\n                Action: codepipeline:StartPipelineExecution\n                Resource: !Join\n                  - ''\n                  - - 'arn:aws:codepipeline:'\n                    - !Ref AWS::Region\n                    - ':'\n                    - !Ref AWS::AccountId\n                    - ':'\n                    - !Ref codepipeline\n  cloudwatchEventsRule:\n    Type: AWS::Events::Rule\n    Properties:\n      EventPattern:\n        source:\n          - aws.codecommit\n        detail-type:\n          - CodeCommit Repository State Change\n        resources:\n          - !Ref codeCommitArn\n        detail:\n          event:\n            - referenceCreated\n            - referenceUpdated\n          referenceType:\n            - branch\n          referenceName:\n            - master\n      Targets:\n        - Arn: !Join\n          - ''\n          - - 'arn:aws:codepipeline:'\n            - !Ref AWS::Region\n            - ':'\n            - !Ref AWS::AccountId\n            - ':'\n            - !Ref codepipeline\n          Id: !Sub ${accountAlliasLowerCase}-codepipeline-lambda\n          RoleArn: !GetAtt cloudWatchEventRole.Arn\n"
}
INV-ver-sub01-ver-ecr-access-role
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: codepipeline\n\n# ------------------------------------------------------------#\n#  Parameters\n# ------------------------------------------------------------#\nParameters:\n  accountAllias:\n    Type: String\n  accountAlliasLowerCase:\n    Type: String\n  devAwsAccountId:\n    Type: String\n\nResources:\n# ------------------------------------------------------------#\n#  Role\n# ------------------------------------------------------------#\n  verEcrAccessRole:\n    Type: AWS::IAM::Role\n    Properties:\n      RoleName: ver-ecr-access-role\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement: \n          - Effect: \"Allow\"\n            Principal: \n              AWS: \n                - !Sub arn:aws:iam::${devAwsAccountId}:root\n            Action: \n              - \"sts:AssumeRole\"\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess\n\n# ------------------------------------------------------------#\n#  Outputs\n# ------------------------------------------------------------#\nOutputs:\n  verEcrAccessRole:\n    Value: !Ref verEcrAccessRole\n    Export:\n      Name: verEcrAccessRole"
}
INV-ver-sub01-parameter-store
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: 2010-09-09\nDescription: parameter store\n\nParameters:\n  accountAllias:\n    Type: String\n  accountAlliasLowerCase:\n    Type: String\n\n  appEnv:\n    Type: String\n  gtcIamAccessKey:\n    Type: String\n  gtcIamSecretKey:\n    Type: String\n  gtcApiKey:\n    Type: String\n  gtcExternalSystemId:\n    Type: String\n  resolv:\n    Type: String\n\nResources:\n\n  parameterStoreResolv:\n    Type: AWS::SSM::Parameter\n    Properties:\n      Type: String\n      Name: RESOLV\n      Value: !Ref resolv\n\n  parameterStoreAppEnv:\n    Type: AWS::SSM::Parameter\n    Properties:\n      AllowedPattern: \"^(development|staging|production)$\"\n      Type: String\n      Name: APP_ENV\n      Value: !Ref appEnv\n\n  parameterStoreGtcIamAccessKey:\n    Type: AWS::SSM::Parameter\n    Properties:\n      Type: String\n      Name: GTC_IAM_ACCESS_KEY\n      Value: !Ref gtcIamAccessKey\n\n  parameterStoreGtcIamSecretKey:\n    Type: AWS::SSM::Parameter\n    Properties:\n      Type: String\n      Name: GTC_IAM_SECRET_KEY\n      Value: !Ref gtcIamSecretKey\n\n  parameterStoreGtcApiKey:\n    Type: AWS::SSM::Parameter\n    Properties:\n      Type: String\n      Name: GTC_API_KEY\n      Value: !Ref gtcApiKey\n\n  parameterStoreGtcExternalSystemId:\n    Type: AWS::SSM::Parameter\n    Properties:\n      Type: String\n      Name: GTC_EXTERNAL_SYSTEM_ID\n      Value: !Ref gtcExternalSystemId\n\n  parameterStoreDbHost:\n    Type: AWS::SSM::Parameter\n    Properties:\n      Type: String\n      Name: DB_HOST\n      Value: !ImportValue dbClusterEndpoint\n\n  parameterStoreDbDatabase:\n    Type: AWS::SSM::Parameter\n    Properties:\n      Type: String\n      Name: DB_DATABASE\n      Value: !ImportValue dbDatabase\n\n  parameterStoreDbUsername:\n    Type: AWS::SSM::Parameter\n    Properties:\n      Type: String\n      Name: DB_USERNAME\n      Value: !ImportValue dbUsername\n\n  parameterStoreDbPassword:\n    Type: AWS::SSM::Parameter\n    Properties:\n      Type: String\n      Name: DB_PASSWORD\n      Value: !ImportValue dbPassword\n\nOutputs:\n  parameterStoreResolv:\n    Value: !Ref parameterStoreResolv\n    Export:\n      Name: parameterStoreResolv\n\n  parameterStoreAppEnv:\n    Value: !Ref parameterStoreAppEnv\n    Export:\n      Name: parameterStoreAppEnv\n  parameterStoreGtcIamAccessKey:\n    Value: !Ref parameterStoreGtcIamAccessKey\n    Export:\n      Name: parameterStoreGtcIamAccessKey\n  parameterStoreGtcIamSecretKey:\n    Value: !Ref parameterStoreGtcIamSecretKey\n    Export:\n      Name: parameterStoreGtcIamSecretKey\n  parameterStoreGtcApiKey:\n    Value: !Ref parameterStoreGtcApiKey\n    Export:\n      Name: parameterStoreGtcApiKey\n  parameterStoreGtcExternalSystemId:\n    Value: !Ref parameterStoreGtcExternalSystemId\n    Export:\n      Name: parameterStoreGtcExternalSystemId\n\n  parameterStoreDbHost:\n    Value: !Ref parameterStoreDbHost\n    Export:\n      Name: parameterStoreDbHost\n  parameterStoreDbDatabase:\n    Value: !Ref parameterStoreDbDatabase\n    Export:\n      Name: parameterStoreDbDatabase\n  parameterStoreDbUsername:\n    Value: !Ref parameterStoreDbUsername\n    Export:\n      Name: parameterStoreDbUsername\n  parameterStoreDbPassword:\n    Value: !Ref parameterStoreDbPassword\n    Export:\n      Name: parameterStoreDbPassword\n"
}
INV-ver-sub01-rds
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: 2010-09-09\nDescription: Create RDS Service\n\nParameters:\n  accountAllias:\n    Type: String\n  accountAlliasLowerCase:\n    Type: String\n  internalSecurityGroupCidr:\n    Type: String\n\n  instanceType:\n    Type: String\n\n  dbDatabase:\n    Type: String\n  dbUsername:\n    Type: String\n  dbPassword:\n    Type: String\n\nResources:\n\n  dbSubnetGroup:\n    Type: AWS::RDS::DBSubnetGroup\n    Properties:\n      DBSubnetGroupName: !Sub ${accountAlliasLowerCase}-rds-subnetgroup\n      DBSubnetGroupDescription: !Sub ${accountAlliasLowerCase}-rds-subnetgroup\n      SubnetIds:\n        - !ImportValue PrivateSubnet1a\n        - !ImportValue PrivateSubnet1c\n      Tags:\n        - Key: Name\n          Value: !Sub ${accountAlliasLowerCase}-rds-subnetgroup\n\n  dbSecurityGroups:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupName: !Sub ${accountAlliasLowerCase}-rds-sg\n      GroupDescription: !Sub ${accountAlliasLowerCase}-rds-sg\n      Tags:\n        - Key: Name\n          Value: !Sub ${accountAlliasLowerCase}-rds-sg\n      VpcId: !ImportValue VPC\n      SecurityGroupIngress:\n      - IpProtocol: tcp\n        FromPort: 3306\n        ToPort: 3306\n        CidrIp: !Ref internalSecurityGroupCidr\n\n  dbClusterParameterGroup:\n    Type: AWS::RDS::DBClusterParameterGroup\n    Properties:\n      Description: !Sub ${accountAlliasLowerCase}-rds-clusterparametergroup\n      Family: aurora-mysql5.7\n      Parameters:\n        time_zone: Asia/Tokyo\n        character_set_client: utf8mb4\n        character_set_connection: utf8mb4\n        character_set_filesystem: utf8mb4\n        character_set_results: utf8mb4\n        character_set_server: utf8mb4\n        server_audit_logging: 1\n        server_audit_events: QUERY\n      Tags:\n        - Key: Name\n          Value: !Sub ${accountAlliasLowerCase}-rds-clusterparametergroup\n\n  dbInstanceParameterGroup:\n    Type: AWS::RDS::DBParameterGroup\n    Properties:\n      Description: !Sub ${accountAlliasLowerCase}-rds-instanceparametergroup\n      Family: aurora-mysql5.7\n      Parameters:\n        log_output: FILE\n        general_log: 1\n        slow_query_log: 1\n        long_query_time: 0\n      Tags:\n        - Key: Name\n          Value: !Sub ${accountAlliasLowerCase}-rds-instanceparametergroup\n\n  dbInstanceOptionGroup:\n    Type: AWS::RDS::OptionGroup\n    Properties:\n      EngineName: aurora-mysql\n      MajorEngineVersion: 5.7\n      OptionGroupDescription: !Sub ${accountAlliasLowerCase}-rds-optiongroup\n      Tags:\n        - Key: Name\n          Value: !Sub ${accountAlliasLowerCase}-rds-optiongroup\n\n  dbCluster:\n    Type: AWS::RDS::DBCluster\n    Properties:\n      DBClusterIdentifier: !Sub ${accountAlliasLowerCase}-rds-cluster\n      Engine: aurora-mysql\n      EngineVersion: 5.7\n      EngineMode: provisioned\n      DatabaseName: !Ref dbDatabase\n      MasterUsername: !Ref dbUsername\n      MasterUserPassword: !Ref dbPassword\n      DBClusterParameterGroupName: !Ref dbClusterParameterGroup\n      DBSubnetGroupName: !Ref dbSubnetGroup\n      EnableCloudwatchLogsExports:\n        - general\n        - error\n        - slowquery\n        - audit\n      VpcSecurityGroupIds:\n        - !GetAtt dbSecurityGroups.GroupId\n      Tags:\n        - Key: Name\n          Value: !Sub ${accountAlliasLowerCase}-rds-cluster\n\n  dbInstance:\n    Type: AWS::RDS::DBInstance\n    Properties:\n      Engine: aurora-mysql\n      EngineVersion: 5.7\n      DBInstanceClass: !Ref instanceType\n      DBClusterIdentifier: !Ref dbCluster\n      DBSubnetGroupName: !Ref dbSubnetGroup\n      OptionGroupName: !Ref dbInstanceOptionGroup\n      DBParameterGroupName: !Ref dbInstanceParameterGroup\n      PubliclyAccessible: False\n      Tags:\n        - Key: Name\n          Value: !Sub ${accountAlliasLowerCase}-rds-instance\n\nOutputs:\n  dbClusterEndpoint:\n    Value: !GetAtt dbCluster.Endpoint.Address\n    Export:\n      Name: dbClusterEndpoint\n  dbSecurityGroupId:\n    Value: !GetAtt dbSecurityGroups.GroupId\n    Export:\n      Name: dbSecurityGroupId\n  dbInstance:\n    Value: !Ref dbInstance\n    Export:\n      Name: dbInstance\n\n  dbDatabase:\n    Value: !Ref dbDatabase\n    Export:\n      Name: dbDatabase\n  dbUsername:\n    Value: !Ref dbUsername\n    Export:\n      Name: dbUsername\n  dbPassword:\n    Value: !Ref dbPassword\n    Export:\n      Name: dbPassword\n"
}
INV-ver-sub01-task
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: 2010-09-09\nDescription: ecs task definition\n\nParameters:\n  accountAllias:\n    Type: String\n  accountAlliasLowerCase:\n    Type: String\n\n  cpuProxy:\n    Type: Number\n  memoryProxy:\n    Type: Number\n  cpuApi:\n    Type: Number\n  memoryApi:\n    Type: Number\n  cpuScreen:\n    Type: Number\n  memoryScreen:\n    Type: Number\n  cpuBatch:\n    Type: Number\n  memoryBatch:\n    Type: Number\n\n  imageUriProxyNginx:\n    Type: String\n  imageUriApiNginx:\n    Type: String\n  imageUriScreenNginx:\n    Type: String\n  imageUriApp:\n    Type: String\n  imageUriBatch:\n    Type: String\n\n  appEnv:\n    Type: String\n  resolv:\n    Type: String\n  dbHost:\n    Type: String\n  dbDatabase:\n    Type: String\n  dbUsername:\n    Type: String\n  dbPassword:\n    Type: String\n\n  gtcIamAccessKey:\n    Type: String\n  gtcIamSecretKey:\n    Type: String\n  gtcApiKey:\n    Type: String\n  gtcExternalSystemId:\n    Type: String\n\nResources:\n\n  ecsTaskExecutionRole:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service:\n                - ecs-tasks.amazonaws.com\n            Action:\n              - sts:AssumeRole\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy\n      RoleName: !Sub ${accountAlliasLowerCase}-ecsTaskExecutionRole\n  ecsTaskBatchExecutionRole:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service:\n                - ecs-tasks.amazonaws.com\n            Action:\n              - sts:AssumeRole\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy\n        - arn:aws:iam::aws:policy/AmazonS3FullAccess\n      RoleName: !Sub ${accountAlliasLowerCase}-ecsTaskBatchExecutionRole\n\n  # Proxy??????\n  TaskdefinitionForProxy:\n    Type: AWS::ECS::TaskDefinition\n    DependsOn: ecsTaskExecutionRole\n    Properties:\n      Family: !Sub ${accountAlliasLowerCase}-task-proxy\n      RequiresCompatibilities:\n        - FARGATE\n      Cpu: !Ref cpuProxy\n      Memory: !Ref memoryProxy\n      NetworkMode: awsvpc\n      ExecutionRoleArn: !GetAtt ecsTaskExecutionRole.Arn\n      TaskRoleArn: !GetAtt ecsTaskExecutionRole.Arn\n      ContainerDefinitions:\n        - Name: proxy-nginx\n          Image: !Sub ${imageUriProxyNginx}:latest\n          PortMappings:\n            - ContainerPort: 80\n          Environment:\n            - Name: RESOLV\n              Value: !Ref resolv\n          LogConfiguration:\n            LogDriver: awslogs\n            Options:\n              awslogs-region: !Ref AWS::Region\n              awslogs-group: !ImportValue logGroupNginx\n              awslogs-stream-prefix: proxy\n\n  # ??API??????\n  TaskdefinitionForApi:\n    Type: AWS::ECS::TaskDefinition\n    DependsOn: ecsTaskExecutionRole\n    Properties:\n      Family: !Sub ${accountAlliasLowerCase}-task-api\n      RequiresCompatibilities:\n        - FARGATE\n      Cpu: !Ref cpuApi\n      Memory: !Ref memoryApi\n      NetworkMode: awsvpc\n      ExecutionRoleArn: !GetAtt ecsTaskExecutionRole.Arn\n      TaskRoleArn: !GetAtt ecsTaskExecutionRole.Arn\n      ContainerDefinitions:\n        - Name: api-nginx\n          Image: !Sub ${imageUriApiNginx}:latest\n          PortMappings:\n            - ContainerPort: 80\n          HealthCheck:\n            Command: [ \"CMD-SHELL\", \"curl -f http://localhost/healthcheck || exit 1\" ]\n            Interval: 30\n            Retries: 3\n            StartPeriod: 3\n            Timeout: 3\n          Environment:\n            - Name: APP_ENV\n              Value: !Ref appEnv\n            - Name: DB_HOST\n              Value: !Ref dbHost\n            - Name: DB_DATABASE\n              Value: !Ref dbDatabase\n            - Name: DB_USERNAME\n              Value: !Ref dbUsername\n            - Name: DB_PASSWORD\n              Value: !Ref dbPassword\n            - Name: GTC_IAM_ACCESS_KEY\n              Value: !Ref gtcIamAccessKey\n            - Name: GTC_IAM_SECRET_KEY\n              Value: !Ref gtcIamSecretKey\n            - Name: GTC_API_KEY\n              Value: !Ref gtcApiKey\n            - Name: GTC_EXTERNAL_SYSTEM_ID\n              Value: !Ref gtcExternalSystemId\n          LogConfiguration:\n            LogDriver: awslogs\n            Options:\n              awslogs-region: !Ref AWS::Region\n              awslogs-group: !ImportValue logGroupNginx\n              awslogs-stream-prefix: api\n        - Name: app\n          Image: !Sub ${imageUriApp}:latest\n          PortMappings:\n            - ContainerPort: 9000\n          LogConfiguration:\n            LogDriver: awslogs\n            Options:\n              awslogs-region: !Ref AWS::Region\n              awslogs-group: !ImportValue logGroupPhp\n              awslogs-stream-prefix: api\n\n  # ????????\n  TaskdefinitionForScreen:\n    Type: AWS::ECS::TaskDefinition\n    DependsOn: ecsTaskExecutionRole\n    Properties:\n      Family: !Sub ${accountAlliasLowerCase}-task-screen\n      RequiresCompatibilities:\n        - FARGATE\n      Cpu: !Ref cpuScreen\n      Memory: !Ref memoryScreen\n      NetworkMode: awsvpc\n      ExecutionRoleArn: !GetAtt ecsTaskExecutionRole.Arn\n      TaskRoleArn: !GetAtt ecsTaskExecutionRole.Arn\n      ContainerDefinitions:\n        - Name: screen-nginx\n          Image: !Sub ${imageUriScreenNginx}:latest\n          PortMappings:\n            - ContainerPort: 80\n          Environment:\n            - Name: APP_ENV\n              Value: !Ref appEnv\n            - Name: DB_HOST\n              Value: !Ref dbHost\n            - Name: DB_DATABASE\n              Value: !Ref dbDatabase\n            - Name: DB_USERNAME\n              Value: !Ref dbUsername\n            - Name: DB_PASSWORD\n              Value: !Ref dbPassword\n            - Name: GTC_IAM_ACCESS_KEY\n              Value: !Ref gtcIamAccessKey\n            - Name: GTC_IAM_SECRET_KEY\n              Value: !Ref gtcIamSecretKey\n            - Name: GTC_API_KEY\n              Value: !Ref gtcApiKey\n            - Name: GTC_EXTERNAL_SYSTEM_ID\n              Value: !Ref gtcExternalSystemId\n          LogConfiguration:\n            LogDriver: awslogs\n            Options:\n              awslogs-region: !Ref AWS::Region\n              awslogs-group: !ImportValue logGroupNginx\n              awslogs-stream-prefix: screen\n        - Name: app\n          Image: !Sub ${imageUriApp}:latest\n          PortMappings:\n            - ContainerPort: 9000\n          LogConfiguration:\n            LogDriver: awslogs\n            Options:\n              awslogs-region: !Ref AWS::Region\n              awslogs-group: !ImportValue logGroupPhp\n              awslogs-stream-prefix: screen\n\n  # ??????????????????\n  TaskdefinitionForBunsekiDataChushutsu:\n    Type: AWS::ECS::TaskDefinition\n    DependsOn: ecsTaskBatchExecutionRole\n    Properties:\n      Family: !Sub ${accountAlliasLowerCase}-task-batch-bunsekidatachushutsu\n      RequiresCompatibilities:\n        - FARGATE\n      Cpu: !Ref cpuBatch\n      Memory: !Ref memoryBatch\n      NetworkMode: awsvpc\n      ExecutionRoleArn: !GetAtt ecsTaskBatchExecutionRole.Arn\n      TaskRoleArn: !GetAtt ecsTaskBatchExecutionRole.Arn\n      ContainerDefinitions:\n        - Name: batch\n          Image: !Sub ${imageUriBatch}:latest\n          Environment:\n            - Name: BATCH_MODE\n              Value: bunseki_data_chushutsu\n            - Name: APP_ENV\n              Value: !Ref appEnv\n            - Name: DB_HOST\n              Value: !Ref dbHost\n            - Name: DB_DATABASE\n              Value: !Ref dbDatabase\n            - Name: DB_USERNAME\n              Value: !Ref dbUsername\n            - Name: DB_PASSWORD\n              Value: !Ref dbPassword\n            - Name: GTC_IAM_ACCESS_KEY\n              Value: !Ref gtcIamAccessKey\n            - Name: GTC_IAM_SECRET_KEY\n              Value: !Ref gtcIamSecretKey\n            - Name: GTC_API_KEY\n              Value: !Ref gtcApiKey\n            - Name: GTC_EXTERNAL_SYSTEM_ID\n              Value: !Ref gtcExternalSystemId\n          LogConfiguration:\n            LogDriver: awslogs\n            Options:\n              awslogs-region: !Ref AWS::Region\n              awslogs-group: !ImportValue logGroupPhp\n              awslogs-stream-prefix: batch\n\n  # ???????????????????????\n  TaskdefinitionForRiyouZanSolutionTsuchi:\n    Type: AWS::ECS::TaskDefinition\n    DependsOn: ecsTaskBatchExecutionRole\n    Properties:\n      Family: !Sub ${accountAlliasLowerCase}-task-batch-riyouzansolutiontsuchi\n      RequiresCompatibilities:\n        - FARGATE\n      Cpu: !Ref cpuBatch\n      Memory: !Ref memoryBatch\n      NetworkMode: awsvpc\n      ExecutionRoleArn: !GetAtt ecsTaskBatchExecutionRole.Arn\n      TaskRoleArn: !GetAtt ecsTaskBatchExecutionRole.Arn\n      ContainerDefinitions:\n        - Name: batch\n          Image: !Sub ${imageUriBatch}:latest\n          Environment:\n            - Name: BATCH_MODE\n              Value: riyou_zan_solution_tsuchi\n            - Name: APP_ENV\n              Value: !Ref appEnv\n            - Name: DB_HOST\n              Value: !Ref dbHost\n            - Name: DB_DATABASE\n              Value: !Ref dbDatabase\n            - Name: DB_USERNAME\n              Value: !Ref dbUsername\n            - Name: DB_PASSWORD\n              Value: !Ref dbPassword\n            - Name: GTC_IAM_ACCESS_KEY\n              Value: !Ref gtcIamAccessKey\n            - Name: GTC_IAM_SECRET_KEY\n              Value: !Ref gtcIamSecretKey\n            - Name: GTC_API_KEY\n              Value: !Ref gtcApiKey\n            - Name: GTC_EXTERNAL_SYSTEM_ID\n              Value: !Ref gtcExternalSystemId\n          LogConfiguration:\n            LogDriver: awslogs\n            Options:\n              awslogs-region: !Ref AWS::Region\n              awslogs-group: !ImportValue logGroupPhp\n              awslogs-stream-prefix: batch\n\n  # ????e-call?????????????????\n  TaskdefinitionForECallRiyoukanouDaisuu:\n    Type: AWS::ECS::TaskDefinition\n    DependsOn: ecsTaskBatchExecutionRole\n    Properties:\n      Family: !Sub ${accountAlliasLowerCase}-task-batch-e-call-riyoukanou-daisuu\n      RequiresCompatibilities:\n        - FARGATE\n      Cpu: !Ref cpuBatch\n      Memory: !Ref memoryBatch\n      NetworkMode: awsvpc\n      ExecutionRoleArn: !GetAtt ecsTaskBatchExecutionRole.Arn\n      TaskRoleArn: !GetAtt ecsTaskBatchExecutionRole.Arn\n      ContainerDefinitions:\n        - Name: batch\n          Image: !Sub ${imageUriBatch}:latest\n          Environment:\n            - Name: BATCH_MODE\n              Value: e_call_riyoukanou_daisuu\n            - Name: APP_ENV\n              Value: !Ref appEnv\n            - Name: DB_HOST\n              Value: !Ref dbHost\n            - Name: DB_DATABASE\n              Value: !Ref dbDatabase\n            - Name: DB_USERNAME\n              Value: !Ref dbUsername\n            - Name: DB_PASSWORD\n              Value: !Ref dbPassword\n            - Name: GTC_IAM_ACCESS_KEY\n              Value: !Ref gtcIamAccessKey\n            - Name: GTC_IAM_SECRET_KEY\n              Value: !Ref gtcIamSecretKey\n            - Name: GTC_API_KEY\n              Value: !Ref gtcApiKey\n            - Name: GTC_EXTERNAL_SYSTEM_ID\n              Value: !Ref gtcExternalSystemId\n          LogConfiguration:\n            LogDriver: awslogs\n            Options:\n              awslogs-region: !Ref AWS::Region\n              awslogs-group: !ImportValue logGroupPhp\n              awslogs-stream-prefix: batch\n\n  # ?????????????????????\n  TaskdefinitionForProvisioningResend:\n    Type: AWS::ECS::TaskDefinition\n    DependsOn: ecsTaskBatchExecutionRole\n    Properties:\n      Family: !Sub ${accountAlliasLowerCase}-task-batch-provisioning-resend\n      RequiresCompatibilities:\n        - FARGATE\n      Cpu: !Ref cpuBatch\n      Memory: !Ref memoryBatch\n      NetworkMode: awsvpc\n      ExecutionRoleArn: !GetAtt ecsTaskBatchExecutionRole.Arn\n      TaskRoleArn: !GetAtt ecsTaskBatchExecutionRole.Arn\n      ContainerDefinitions:\n        - Name: batch\n          Image: !Sub ${imageUriBatch}:latest\n          Environment:\n            - Name: BATCH_MODE\n              Value: provisioning_resend\n            - Name: APP_ENV\n              Value: !Ref appEnv\n            - Name: DB_HOST\n              Value: !Ref dbHost\n            - Name: DB_DATABASE\n              Value: !Ref dbDatabase\n            - Name: DB_USERNAME\n              Value: !Ref dbUsername\n            - Name: DB_PASSWORD\n              Value: !Ref dbPassword\n            - Name: GTC_IAM_ACCESS_KEY\n              Value: !Ref gtcIamAccessKey\n            - Name: GTC_IAM_SECRET_KEY\n              Value: !Ref gtcIamSecretKey\n            - Name: GTC_API_KEY\n              Value: !Ref gtcApiKey\n            - Name: GTC_EXTERNAL_SYSTEM_ID\n              Value: !Ref gtcExternalSystemId\n          LogConfiguration:\n            LogDriver: awslogs\n            Options:\n              awslogs-region: !Ref AWS::Region\n              awslogs-group: !ImportValue logGroupPhp\n              awslogs-stream-prefix: batch\n\n  # ??????????????IvI???????\n  TaskdefinitionForProvisioningResendIvi:\n    Type: AWS::ECS::TaskDefinition\n    DependsOn: ecsTaskBatchExecutionRole\n    Properties:\n      Family: !Sub ${accountAlliasLowerCase}-task-batch-provisioning-resend-ivi\n      RequiresCompatibilities:\n        - FARGATE\n      Cpu: !Ref cpuBatch\n      Memory: !Ref memoryBatch\n      NetworkMode: awsvpc\n      ExecutionRoleArn: !GetAtt ecsTaskBatchExecutionRole.Arn\n      TaskRoleArn: !GetAtt ecsTaskBatchExecutionRole.Arn\n      ContainerDefinitions:\n        - Name: batch\n          Image: !Sub ${imageUriBatch}:latest\n          Environment:\n            - Name: BATCH_MODE\n              Value: provisioning_resend_ivi\n            - Name: APP_ENV\n              Value: !Ref appEnv\n            - Name: DB_HOST\n              Value: !Ref dbHost\n            - Name: DB_DATABASE\n              Value: !Ref dbDatabase\n            - Name: DB_USERNAME\n              Value: !Ref dbUsername\n            - Name: DB_PASSWORD\n              Value: !Ref dbPassword\n            - Name: GTC_IAM_ACCESS_KEY\n              Value: !Ref gtcIamAccessKey\n            - Name: GTC_IAM_SECRET_KEY\n              Value: !Ref gtcIamSecretKey\n            - Name: GTC_API_KEY\n              Value: !Ref gtcApiKey\n            - Name: GTC_EXTERNAL_SYSTEM_ID\n              Value: !Ref gtcExternalSystemId\n          LogConfiguration:\n            LogDriver: awslogs\n            Options:\n              awslogs-region: !Ref AWS::Region\n              awslogs-group: !ImportValue logGroupPhp\n              awslogs-stream-prefix: batch\n\nOutputs:\n  ecsTaskExecutionRole:\n    Value: !Ref ecsTaskExecutionRole\n    Export:\n      Name: ecsTaskExecutionRole\n  ecsTaskExecutionRoleArn:\n    Value: !GetAtt ecsTaskExecutionRole.Arn\n    Export:\n      Name: ecsTaskExecutionRoleArn\n  ecsTaskBatchExecutionRole:\n    Value: !Ref ecsTaskBatchExecutionRole\n    Export:\n      Name: ecsTaskBatchExecutionRole\n  ecsTaskBatchExecutionRoleArn:\n    Value: !GetAtt ecsTaskBatchExecutionRole.Arn\n    Export:\n      Name: ecsTaskBatchExecutionRoleArn\n\n  taskdefinitionForProxy:\n    Value: !Ref TaskdefinitionForProxy\n    Export:\n      Name: taskdefinitionForProxy\n  taskdefinitionForApi:\n    Value: !Ref TaskdefinitionForApi\n    Export:\n      Name: taskdefinitionForApi\n  taskdefinitionForScreen:\n    Value: !Ref TaskdefinitionForScreen\n    Export:\n      Name: taskdefinitionForScreen\n\n  taskdefinitionForBunsekiDataChushutsu:\n    Value: !Ref TaskdefinitionForBunsekiDataChushutsu\n    Export:\n      Name: taskdefinitionForBunsekiDataChushutsu\n  taskdefinitionForRiyouZanSolutionTsuchi:\n    Value: !Ref TaskdefinitionForRiyouZanSolutionTsuchi\n    Export:\n      Name: taskdefinitionForRiyouZanSolutionTsuchi\n  taskdefinitionForECallRiyoukanouDaisuu:\n    Value: !Ref TaskdefinitionForECallRiyoukanouDaisuu\n    Export:\n      Name: taskdefinitionForECallRiyoukanouDaisuu\n  taskdefinitionForProvisioningResend:\n    Value: !Ref TaskdefinitionForProvisioningResend\n    Export:\n      Name: taskdefinitionForProvisioningResend\n  taskdefinitionForProvisioningResendIvi:\n    Value: !Ref TaskdefinitionForProvisioningResendIvi\n    Export:\n      Name: taskdefinitionForProvisioningResendIvi\n"
}
INV-ver-sub01-privatednsnamespace
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: 2010-09-09\nDescription: private dns namespace\n\nParameters:\n  accountAllias:\n    Type: String\n  accountAlliasLowerCase:\n    Type: String\n  dnsNamespace:\n    Type: String\n\nResources:\n\n  privateDnsNamespace:\n    Type: AWS::ServiceDiscovery::PrivateDnsNamespace\n    Properties:\n      Vpc: !ImportValue VPC\n      Description: !Ref dnsNamespace\n      Name: !Ref dnsNamespace\n\nOutputs:\n  privateDnsNamespace:\n    Value: !Ref privateDnsNamespace\n    Export:\n      Name: privateDnsNamespace\n  privateDnsNamespaceId:\n    Value: !GetAtt privateDnsNamespace.Id\n    Export:\n      Name: privateDnsNamespaceId\n"
}
INV-ver-sub01-public-alb
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: 2010-09-09\nDescription: public security group and alb\n\nParameters:\n  accountAllias:\n    Type: String\n  accountAlliasLowerCase:\n    Type: String\n  internalSecurityGroupCidr:\n    Type: String\n  publicSecurityGroupCidr:\n    Type: String\n  albCertificateArn:\n    Type: String\n\nResources:\n  publicAlbSecuritygroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupName: !Sub ${accountAlliasLowerCase}-public-alb-sg\n      GroupDescription: !Sub ${accountAlliasLowerCase}-public-alb-sg\n      Tags:\n        - Key: Name\n          Value: !Sub ${accountAlliasLowerCase}-public-alb-sg\n      VpcId: !ImportValue VPC\n      SecurityGroupIngress:\n      - IpProtocol: tcp\n        FromPort: 443\n        ToPort: 443\n        CidrIp: !Ref publicSecurityGroupCidr\n\n  # MSG?????????\n  publicAlbTargetGroupForMsg:\n    Type: AWS::ElasticLoadBalancingV2::TargetGroup\n    Properties:\n      HealthCheckIntervalSeconds: 30\n      HealthCheckPath: /healthcheck\n      HealthCheckPort: 80\n      HealthCheckProtocol: HTTP\n      HealthCheckTimeoutSeconds: 6\n      HealthyThresholdCount: 3\n      Name: !Sub ${accountAlliasLowerCase}-public-alb-tg-msg\n      Port: 80\n      Protocol: HTTP\n      UnhealthyThresholdCount: 3\n      TargetType: ip\n      VpcId: !ImportValue VPC\n  publicAlbForMsg:\n    Type: AWS::ElasticLoadBalancingV2::LoadBalancer\n    Properties:\n      Name: !Sub ${accountAlliasLowerCase}-public-alb-msg\n      Type: application\n      Scheme: internet-facing\n      SecurityGroups:\n        - !Ref publicAlbSecuritygroup\n      Subnets:\n        - !ImportValue PublicSubnet1a\n        - !ImportValue PublicSubnet1c\n      Tags:\n        - Key: Name\n          Value: !Sub ${accountAlliasLowerCase}-public-alb-msg\n  publicAlblistnenerForMsg:\n    Type: AWS::ElasticLoadBalancingV2::Listener\n    Properties:\n      DefaultActions:\n        - TargetGroupArn: !Ref publicAlbTargetGroupForMsg\n          Type: forward\n      LoadBalancerArn: !Ref publicAlbForMsg\n      Certificates:\n        - CertificateArn: !Ref albCertificateArn\n      Port: 443\n      Protocol: HTTPS\n\n  # ??????????????\n  publicAlbTargetGroupForProvisioning:\n    Type: AWS::ElasticLoadBalancingV2::TargetGroup\n    Properties:\n      HealthCheckIntervalSeconds: 30\n      HealthCheckPath: /healthcheck\n      HealthCheckPort: 80\n      HealthCheckProtocol: HTTP\n      HealthCheckTimeoutSeconds: 6\n      HealthyThresholdCount: 3\n      Name: !Sub ${accountAlliasLowerCase}-public-alb-tg-prov\n      Port: 80\n      Protocol: HTTP\n      UnhealthyThresholdCount: 3\n      TargetType: ip\n      VpcId: !ImportValue VPC\n  publicAlbForProvisioning:\n    Type: AWS::ElasticLoadBalancingV2::LoadBalancer\n    Properties:\n      Name: !Sub ${accountAlliasLowerCase}-public-alb-prov\n      Type: application\n      Scheme: internet-facing\n      SecurityGroups:\n        - !Ref publicAlbSecuritygroup\n      Subnets:\n        - !ImportValue PublicSubnet1a\n        - !ImportValue PublicSubnet1c\n      Tags:\n        - Key: Name\n          Value: !Sub ${accountAlliasLowerCase}-public-alb-prov\n  publicAlblistnenerForProvisioning:\n    Type: AWS::ElasticLoadBalancingV2::Listener\n    Properties:\n      DefaultActions:\n        - TargetGroupArn: !Ref publicAlbTargetGroupForProvisioning\n          Type: forward\n      LoadBalancerArn: !Ref publicAlbForProvisioning\n      Certificates:\n        - CertificateArn: !Ref albCertificateArn\n      Port: 443\n      Protocol: HTTPS\n\nOutputs:\n  publicAlbSecuritygroup:\n    Value: !Ref publicAlbSecuritygroup\n    Export:\n      Name: publicAlbSecuritygroup\n\n  publicAlbTargetGroupForMsg:\n    Value: !Ref publicAlbTargetGroupForMsg\n    Export:\n      Name: publicAlbTargetGroupForMsg\n  publicAlbTargetGroupForProvisioning:\n    Value: !Ref publicAlbTargetGroupForProvisioning\n    Export:\n      Name: publicAlbTargetGroupForProvisioning\n  publicAlbForMsg:\n    Value: !Ref publicAlbForMsg\n    Export:\n      Name: publicAlbForMsg\n\n  publicAlbForProvisioning:\n    Value: !Ref publicAlbForProvisioning\n    Export:\n      Name: publicAlbForProvisioning\n  publicAlblistnenerForMsg:\n    Value: !Ref publicAlblistnenerForMsg\n    Export:\n      Name: publicAlblistnenerForMsg\n  publicAlblistnenerForProvisioning:\n    Value: !Ref publicAlblistnenerForProvisioning\n    Export:\n      Name: publicAlblistnenerForProvisioning\n"
}
INV-ver-sub01-ecs-loggroup
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: 2010-09-09\nDescription: ecs and loggroup\n\nParameters:\n  accountAllias:\n    Type: String\n  accountAlliasLowerCase:\n    Type: String\n\nResources:\n  ecs:\n    Type: AWS::ECS::Cluster\n    Properties:\n      ClusterName: !Sub ${accountAlliasLowerCase}-cluster\n  logGroup:\n    Type: AWS::Logs::LogGroup\n    Properties:\n      LogGroupName: ecs\n  logGroupPhp:\n    Type: AWS::Logs::LogGroup\n    Properties:\n      LogGroupName: php\n  logGroupNginx:\n    Type: AWS::Logs::LogGroup\n    Properties:\n      LogGroupName: nginx\n\nOutputs:\n  cluster:\n    Value: !Ref ecs\n    Export:\n      Name: cluster\n  clusterArn:\n    Value: !GetAtt ecs.Arn\n    Export:\n      Name: clusterArn\n  logGroup:\n    Value: !Ref logGroup\n    Export:\n      Name: logGroup\n  logGroupPhp:\n    Value: !Ref logGroupPhp\n    Export:\n      Name: logGroupPhp\n  logGroupNginx:\n    Value: !Ref logGroupNginx\n    Export:\n      Name: logGroupNginx\n"
}
StackSet-cfn-exec-ec2-d0809973-0645-488d-a2b6-f5322ed49458
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: 2010-09-09\nDescription: CloudFormation Execute EC2\nParameters:\n  amiId:\n    Type: String\n    Default: ami-0d7ed3ddb85b521a6\n  SshCidr1:\n    Type: String\n    Default: 121.2.65.36/32\n  SshCidr2:\n    Type: String\n    Default: 39.110.201.10/32\n  SshCidr3:\n    Type: String\n    Default: 222.11.38.119/32\n  SshCidr4:\n    Type: String\n    Default: 1.21.118.25/32\n  SshCidr5:\n    Type: String\n    Default: 153.163.63.48/32\n  SshCidr6:\n    Type: String\n    Default: 13.231.11.115/32\nResources:\n  EC2Role:\n    Type: \"AWS::IAM::Role\"\n    Properties:\n      RoleName: cfn-exec-ec2-role\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/AdministratorAccess\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement:\n          -\n            Effect: \"Allow\"\n            Principal:\n              Service:\n                - \"ec2.amazonaws.com\"\n            Action:\n              - \"sts:AssumeRole\"\n      Path: \"/\"\n  Profile:\n    Type: AWS::IAM::InstanceProfile\n    Properties:\n      Roles:\n        - !Ref EC2Role\n  SSHSecurityGroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupName: cfn-exec-sg\n      GroupDescription: cfn-exec-sg\n      SecurityGroupIngress:\n      - IpProtocol: tcp\n        FromPort: '22'\n        ToPort: '22'\n        CidrIp: !Ref SshCidr1\n        Description: Classmethod\n      - IpProtocol: tcp\n        FromPort: '22'\n        ToPort: '22'\n        CidrIp: !Ref SshCidr2\n        Description: Classmethod\n      - IpProtocol: tcp\n        FromPort: '22'\n        ToPort: '22'\n        CidrIp: !Ref SshCidr3\n        Description: Classmethod\n      - IpProtocol: tcp\n        FromPort: '22'\n        ToPort: '22'\n        CidrIp: !Ref SshCidr4\n        Description: Classmethod\n      - IpProtocol: tcp\n        FromPort: '22'\n        ToPort: '22'\n        CidrIp: !Ref SshCidr5\n        Description: Classmethod\n      - IpProtocol: tcp\n        FromPort: '22'\n        ToPort: '22'\n        CidrIp: !Ref SshCidr6\n        Description: Classmethod\n      Tags:\n        - Key: Name\n          Value: cfn-exec-sg\n  EC2:\n    Type: AWS::EC2::Instance\n    Properties:\n      ImageId: !Ref amiId\n      InstanceType: t3.micro\n      KeyName: cfn-exec-key\n      IamInstanceProfile: !Ref Profile\n      NetworkInterfaces:\n        - AssociatePublicIpAddress: true\n          DeviceIndex: 0\n          GroupSet:\n            - !GetAtt SSHSecurityGroup.GroupId\n      UserData:\n        Fn::Base64: !Sub |\n          #!/bin/bash\n          yum -y update\n          yum -y install git\n      Tags:\n        - Key: Name\n          Value: cfn-exec\n  EIP:\n    Type: AWS::EC2::EIP\n    Properties:\n      Domain: vpc\n  AssociateEIP:\n    Type: AWS::EC2::EIPAssociation\n    Properties:\n      EIP: !Ref EIP\n      InstanceId: !Ref EC2\nOutputs:\n  EC2:\n    Value: !Ref EC2\n    Export:\n      Name: cfn-exex-ec2\n  EIP:\n    Value: !Ref EIP\n    Export:\n      Name: cfn-exex-IP\n"
}
INV-ver-sub01-tnk401-ver1-dv
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: Create Service Endpoint\n\nParameters:\n  serviceAlliasLowerCase:\n    Type: String\n  serviceName:\n    Type: String\n  cidr:\n    Type: String\n\nResources:\n\n  endpointSecuritygroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupName: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      GroupDescription: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      Tags:\n        - Key: Name\n          Value: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      VpcId: !ImportValue VPC\n      SecurityGroupIngress:\n        - IpProtocol: tcp\n          FromPort: 80\n          ToPort: 80\n          CidrIp: !Ref cidr\n  endpoint:\n    Type: AWS::EC2::VPCEndpoint\n    Properties:\n      VpcEndpointType: Interface\n      VpcId: !ImportValue VPC\n      SubnetIds:\n        - !ImportValue PrivateSubnet1a\n        - !ImportValue PrivateSubnet1c\n      SecurityGroupIds:\n        - !Ref endpointSecuritygroup\n      ServiceName: !Ref serviceName\n      PrivateDnsEnabled: false\n"
}
INV-ver-sub01-bastion
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: 2010-09-09\nDescription: Bastion EC2\nParameters:\n  accountAllias:\n    Type: String\n  amiId:\n    Type: String\nResources:\n  SSHSecurityGroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      VpcId: !ImportValue VPC\n      GroupName: !Sub ${accountAllias}-bastion-sg\n      GroupDescription: !Sub ${accountAllias}-bastion-sg\n      Tags:\n        - Key: Name\n          Value: !Sub ${accountAllias}-bastion-sg\n  EC2:\n    Type: AWS::EC2::Instance\n    Properties:\n      ImageId: !Ref amiId\n      InstanceType: t3.micro\n      KeyName: !Sub ${accountAllias}-bastion-key\n      NetworkInterfaces:\n        - AssociatePublicIpAddress: true\n          SubnetId: !ImportValue PublicSubnet1a\n          DeviceIndex: 0\n          GroupSet:\n            - !Ref SSHSecurityGroup\n      UserData:\n        Fn::Base64: !Sub |\n          #!/bin/bash\n          yum -y update\n      Tags:\n        - Key: Name\n          Value: !Sub ${accountAllias}-bastion\n  EIP:\n    Type: AWS::EC2::EIP\n    Properties:\n      Domain: vpc\n  AssociateEIP:\n    Type: AWS::EC2::EIPAssociation\n    Properties:\n      EIP: !Ref EIP\n      InstanceId: !Ref EC2\nOutputs:\n  EC2:\n    Value: !Ref EC2\n    Export:\n      Name: BastionEC2\n  EIP:\n    Value: !Ref EIP\n    Export:\n      Name: BastionIP\n"
}
INV-ver-sub01-endpointService
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: Create Service Endpoint\n\nParameters:\n  arrowedAccountId1:\n    Type: String\n  arrowedAccountId2:\n    Type: String\n  arrowedAccountId3:\n    Type: String\n  arrowedAccountId4:\n    Type: String\n  arrowedAccountId5:\n    Type: String\n  arrowedAccountId6:\n    Type: String\n\nResources:\n  endpointService:\n    Type: \"AWS::EC2::VPCEndpointService\"\n    Properties:\n      NetworkLoadBalancerArns:\n        - !ImportValue internalNlb\n      AcceptanceRequired: false\n  servicePermisstions:\n    Type: \"AWS::EC2::VPCEndpointServicePermissions\"\n    Properties:\n      AllowedPrincipals:\n        - !Sub arn:aws:iam::${arrowedAccountId1}:root\n        - !Sub arn:aws:iam::${arrowedAccountId2}:root\n        - !Sub arn:aws:iam::${arrowedAccountId3}:root\n        - !Sub arn:aws:iam::${arrowedAccountId4}:root\n        - !Sub arn:aws:iam::${arrowedAccountId5}:root\n        - !Sub arn:aws:iam::${arrowedAccountId6}:root\n      ServiceId: !Ref endpointService\n\nOutputs:\n  servicePermisstions:\n    Value: !Ref servicePermisstions\n    Export:\n      Name: servicePermisstions\n"
}
INV-ver-sub01-internal-nlb
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: internal security group and nlb\n\nParameters:\n  accountAllias:\n    Type: String\n  accountAlliasLowerCase:\n    Type: String\n  internalSecurityGroupCidr:\n    Type: String\n\nResources:\n  internalApplicationSecuritygroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupName: !Sub ${accountAlliasLowerCase}-internal-application-sg\n      GroupDescription: !Sub ${accountAlliasLowerCase}-internal-application-sg\n      Tags:\n        - Key: Name\n          Value: !Sub ${accountAlliasLowerCase}-internal-application-sg\n      VpcId: !ImportValue VPC\n      SecurityGroupIngress:\n      - IpProtocol: tcp\n        FromPort: '80'\n        ToPort: '80'\n        CidrIp: !Ref internalSecurityGroupCidr\n  internalTargetGroup:\n    Type: AWS::ElasticLoadBalancingV2::TargetGroup\n    Properties:\n      HealthCheckIntervalSeconds: 30\n      HealthCheckPath: /healthcheck\n      HealthCheckPort: 80\n      HealthCheckProtocol: HTTP\n      HealthCheckTimeoutSeconds: 6\n      HealthyThresholdCount: 3\n      Name: !Sub ${accountAlliasLowerCase}-internal-tg\n      Port: 80\n      Protocol: TCP\n      UnhealthyThresholdCount: 3\n      TargetType: ip\n      VpcId: !ImportValue VPC\n  internalNlb:\n    Type: AWS::ElasticLoadBalancingV2::LoadBalancer\n    Properties:\n      Name: !Sub ${accountAlliasLowerCase}-internal-nlb\n      Scheme: internal\n      Subnets:\n        - !ImportValue PrivateSubnet1a\n        - !ImportValue PrivateSubnet1c\n      Tags:\n        - Key: Name\n          Value: !Sub ${accountAlliasLowerCase}-internal-nlb\n      Type: network\n  internallistnener:\n    Type: AWS::ElasticLoadBalancingV2::Listener\n    Properties:\n      DefaultActions:\n        - TargetGroupArn: !Ref internalTargetGroup\n          Type: forward\n      LoadBalancerArn: !Ref internalNlb\n      Port: 80\n      Protocol: TCP\n\nOutputs:\n  internalApplicationSecuritygroup:\n    Value: !Ref internalApplicationSecuritygroup\n    Export:\n      Name: internalApplicationSecuritygroup\n  internalTargetGroup:\n    Value: !Ref internalTargetGroup\n    Export:\n      Name: internalTargetGroup\n  internalNlb:\n    Value: !Ref internalNlb\n    Export:\n      Name: internalNlb\n  internallistnener:\n    Value: !Ref internallistnener\n    Export:\n      Name: internallistnener\n\n\n"
}
INV-ver-sub01-service-ver-wfi01
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: Create Service Endpoint\n\nParameters:\n  serviceAlliasLowerCase:\n    Type: String\n  serviceName:\n    Type: String\n  cidr:\n    Type: String\n\nResources:\n\n  endpointSecuritygroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupName: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      GroupDescription: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      Tags:\n        - Key: Name\n          Value: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      VpcId: !ImportValue VPC\n      SecurityGroupIngress:\n        - IpProtocol: tcp\n          FromPort: 80\n          ToPort: 80\n          CidrIp: !Ref cidr\n  endpoint:\n    Type: AWS::EC2::VPCEndpoint\n    Properties:\n      VpcEndpointType: Interface\n      VpcId: !ImportValue VPC\n      SubnetIds:\n        - !ImportValue PrivateSubnet1a\n        - !ImportValue PrivateSubnet1c\n      SecurityGroupIds:\n        - !Ref endpointSecuritygroup\n      ServiceName: !Ref serviceName\n      PrivateDnsEnabled: false\n"
}
INV-ver-sub01-ap1-ver-ysd
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: Create Service Endpoint\n\nParameters:\n  serviceAlliasLowerCase:\n    Type: String\n  serviceName:\n    Type: String\n  cidr:\n    Type: String\n\nResources:\n\n  endpointSecuritygroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupName: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      GroupDescription: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      Tags:\n        - Key: Name\n          Value: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      VpcId: !ImportValue VPC\n      SecurityGroupIngress:\n        - IpProtocol: tcp\n          FromPort: 80\n          ToPort: 80\n          CidrIp: !Ref cidr\n  endpoint:\n    Type: AWS::EC2::VPCEndpoint\n    Properties:\n      VpcEndpointType: Interface\n      VpcId: !ImportValue VPC\n      SubnetIds:\n        - !ImportValue PrivateSubnet1a\n        - !ImportValue PrivateSubnet1c\n      SecurityGroupIds:\n        - !Ref endpointSecuritygroup\n      ServiceName: !Ref serviceName\n      PrivateDnsEnabled: false\n"
}
StackSet-ver-sub01-createIamRole-f4aa6c3e-2f3a-496f-89d5-3273da630807
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "{\n  \"AWSTemplateFormatVersion\" : \"2010-09-09\",\n  \"Description\" : \"Template for Creating IAM Role to Switch from Internavi Login AWS Account\",\n  \"Parameters\" : {\n    \"TrustedAWSAccountId\" : {\n      \"AllowedPattern\" : \"^[0-9]*$\",\n      \"Type\" : \"String\",\n      \"Default\" : \"975196479634\",\n      \"Description\" : \"Trusted AWS Account ID\"\n    },\n    \"IAMRoleName\": {\n      \"Type\": \"String\",\n      \"Default\": \"SolDeveloper\",\n      \"Description\": \"IAM Role Name\"\n    },\n    \"IAMPolicyType\": {\n      \"Type\": \"String\",\n      \"Default\": \"SolUser\",\n      \"Description\": \"IAM Policy Type\",\n      \"AllowedValues\": [ \"SolUser\", \"Admin\" ]\n    }\n  },\n  \"Conditions\" : {\n    \"user\"        : { \"Fn::Equals\" : [{\"Ref\" : \"IAMPolicyType\"}, \"SolUser\" ]},\n    \"admin\"        : { \"Fn::Equals\" : [{\"Ref\" : \"IAMPolicyType\"}, \"Admin\" ]}\n  },\n  \"Resources\" : {\n    \"IAMRoleForAdmin\": {\n      \"Type\": \"AWS::IAM::Role\",\n      \"Condition\" : \"admin\",\n      \"Properties\": {\n        \"AssumeRolePolicyDocument\": {\n          \"Version\": \"2012-10-17\",\n          \"Statement\": [\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010004\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010013\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010014\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010015\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010016\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            }\n          ]\n        },\n        \"ManagedPolicyArns\": [\n          \"arn:aws:iam::aws:policy/AdministratorAccess\"\n        ],\n        \"Path\": \"/\",\n        \"RoleName\": { \"Ref\" : \"IAMRoleName\" }\n      }\n    },\n    \"IAMRoleForUser\": {\n      \"Type\": \"AWS::IAM::Role\",\n      \"Condition\" : \"user\",\n      \"Properties\": {\n        \"AssumeRolePolicyDocument\": {\n          \"Version\": \"2012-10-17\",\n          \"Statement\": [\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010004\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010013\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010014\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010015\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010016\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            }\n          ]\n        },\n        \"ManagedPolicyArns\": [\n          \"arn:aws:iam::aws:policy/ReadOnlyAccess\",\n          \"arn:aws:iam::aws:policy/AWSCodeCommitPowerUser\"\n        ],\n        \"Path\": \"/\",\n        \"RoleName\": { \"Ref\" : \"IAMRoleName\" }\n      }\n    }\n  },\n  \"Outputs\" : {\n    \"IAMRoleAdminArn\": {\n      \"Value\": { \"Fn::GetAtt\" : [ \"IAMRoleForAdmin\", \"Arn\" ] },\n      \"Condition\" : \"admin\"\n    },\n    \"IAMRoleUserArn\": {\n      \"Value\": { \"Fn::GetAtt\" : [ \"IAMRoleForUser\", \"Arn\" ] },\n      \"Condition\" : \"user\"\n    },\n    \"LinkForSwitchRole\": {\n      \"Value\": { \"Fn::Join\": [ \"\", [ \"https://signin.aws.amazon.com/switchrole?roleName=\", { \"Ref\" : \"IAMRoleName\" }, \"&account=\", { \"Ref\" : \"AWS::AccountId\" } ] ] }\n    }\n  }\n}\n"
}
INV-ver-sub01-vpc-base
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "---\nAWSTemplateFormatVersion: '2010-09-09'\nDescription: VPC Network Template\nParameters:\n  SolName:\n    Type: String\n    Default: base01\n    Description: Solution Name.\n  SubSolName:\n    Type: String\n    Default: base\n    Description: Solution Name.\n  EnvName:\n    Type: String\n    Default: dev\n    Description: Env Name.\n  domain2:\n    Type: String\n  VPCCIDR:\n    Description: First and Second Octet of VPC, For example xxx.xxx\n    Type: String\n    Default: '10.0'\n    AllowedPattern: \"^(10\\\\.([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])|172\\\\.(1[6-9]|2[0-9]|3[0-1])|192\\\\.168)$\"\n    ConstraintDescription: xxx.xxx\nMappings:\n  StackConfig:\n    VPC:\n      CIDR: \".0.0/16\"\n    PublicSubnet1:\n      CIDR: \".0.0/24\"\n    PublicSubnet2:\n      CIDR: \".1.0/24\"\n    PrivateSubnet1:\n      CIDR: \".10.0/24\"\n    PrivateSubnet2:\n      CIDR: \".11.0/24\"\n\nResources:\n  VPC:\n    Type: AWS::EC2::VPC\n    Properties:\n      CidrBlock: !Sub\n        - ${VPCCIDR}${SubCIDR}\n        - SubCIDR: {\"Fn::FindInMap\": [ StackConfig, VPC, CIDR ]}\n      EnableDnsSupport: 'true'\n      EnableDnsHostnames: 'true'\n      InstanceTenancy: default\n      Tags:\n      - Key: Name\n        Value: !Sub INV-${EnvName}-${SolName}\n  InternetGateway:\n    Type: AWS::EC2::InternetGateway\n    Properties:\n      Tags:\n      - Key: Name\n        Value: !Sub INV-${EnvName}-${SolName}\n  AttachGateway:\n    Type: AWS::EC2::VPCGatewayAttachment\n    Properties:\n      VpcId: !Ref VPC\n      InternetGatewayId: !Ref InternetGateway\n\n  PublicSubnet1a:\n    Type: AWS::EC2::Subnet\n    DependsOn: AttachGateway\n    Properties:\n      AvailabilityZone: !Select [ 0, \"Fn::GetAZs\": {Ref: \"AWS::Region\"}]\n      CidrBlock: !Sub\n        - ${VPCCIDR}${SubCIDR}\n        - SubCIDR: {\"Fn::FindInMap\": [ StackConfig, PublicSubnet1, CIDR ]}\n      MapPublicIpOnLaunch: 'true'\n      Tags:\n      - Key: Name\n        Value: !Sub INV-${EnvName}-${SolName}-PublicSubnet1a\n      VpcId: !Ref VPC\n  PublicSubnet1c:\n    Type: AWS::EC2::Subnet\n    DependsOn: AttachGateway\n    Properties:\n      AvailabilityZone: !Select [ 1, \"Fn::GetAZs\": {Ref: \"AWS::Region\"}]\n      CidrBlock: !Sub\n        - ${VPCCIDR}${SubCIDR}\n        - SubCIDR: {\"Fn::FindInMap\": [ StackConfig, PublicSubnet2, CIDR ]}\n      MapPublicIpOnLaunch: 'true'\n      Tags:\n      - Key: Name\n        Value: !Sub INV-${EnvName}-${SolName}-PublicSubnet1c\n      VpcId: !Ref VPC\n  PrivateSubnet1a:\n    Type: AWS::EC2::Subnet\n    DependsOn: AttachGateway\n    Properties:\n      AvailabilityZone: !Select [ 0, \"Fn::GetAZs\": {Ref: \"AWS::Region\"}]\n      CidrBlock: !Sub\n        - ${VPCCIDR}${SubCIDR}\n        - SubCIDR: {\"Fn::FindInMap\": [ StackConfig, PrivateSubnet1, CIDR ]}\n      MapPublicIpOnLaunch: 'true'\n      Tags:\n      - Key: Name\n        Value: !Sub INV-${EnvName}-${SolName}-PrivateSubnet1a\n      VpcId: !Ref VPC\n  PrivateSubnet1c:\n    Type: AWS::EC2::Subnet\n    DependsOn: AttachGateway\n    Properties:\n      AvailabilityZone: !Select [ 1, \"Fn::GetAZs\": {Ref: \"AWS::Region\"}]\n      CidrBlock: !Sub\n        - ${VPCCIDR}${SubCIDR}\n        - SubCIDR: {\"Fn::FindInMap\": [ StackConfig, PrivateSubnet2, CIDR ]}\n      MapPublicIpOnLaunch: 'true'\n      Tags:\n      - Key: Name\n        Value: !Sub INV-${EnvName}-${SolName}-PrivateSubnet1c\n      VpcId: !Ref VPC\n\n  EIP1a:\n    Type: AWS::EC2::EIP\n    Properties:\n      Domain: vpc\n  NAT1a:\n    Type: AWS::EC2::NatGateway\n    Properties:\n      AllocationId:\n        Fn::GetAtt:\n          - EIP1a\n          - AllocationId\n      SubnetId: !Ref PublicSubnet1a\n      Tags:\n        - Key: Name\n          Value: !Sub INV-${EnvName}-${SolName}-NGW1a\n\n  EIP1c:\n    Type: AWS::EC2::EIP\n    Properties:\n      Domain: vpc\n  NAT1c:\n    Type: AWS::EC2::NatGateway\n    Properties:\n      AllocationId:\n        Fn::GetAtt:\n          - EIP1c\n          - AllocationId\n      SubnetId: !Ref PublicSubnet1c\n      Tags:\n        - Key: Name\n          Value: !Sub INV-${EnvName}-${SolName}-NGW1c\n\n  PublicRouteTable:\n    Type: AWS::EC2::RouteTable\n    DependsOn: AttachGateway\n    Properties:\n      VpcId: !Ref VPC\n      Tags:\n      - Key: Name\n        Value: !Sub INV-${EnvName}-${SolName}-PublicRoute\n  PublicRoute:\n    Type: AWS::EC2::Route\n    DependsOn: AttachGateway\n    Properties:\n      RouteTableId: !Ref PublicRouteTable\n      DestinationCidrBlock: 0.0.0.0/0\n      GatewayId: !Ref InternetGateway\n  PrivateRouteTable1a:\n    Type: AWS::EC2::RouteTable\n    DependsOn: NAT1a\n    Properties:\n      VpcId: !Ref VPC\n      Tags:\n      - Key: Name\n        Value: !Sub INV-${EnvName}-${SolName}-PrivateRoute1a\n  PrivateRoute1a:\n    Type: AWS::EC2::Route\n    DependsOn: NAT1a\n    Properties:\n      RouteTableId: !Ref PrivateRouteTable1a\n      DestinationCidrBlock: 0.0.0.0/0\n      NatGatewayId: !Ref NAT1a\n  PrivateRouteTable1c:\n    Type: AWS::EC2::RouteTable\n    DependsOn: NAT1c\n    Properties:\n      VpcId: !Ref VPC\n      Tags:\n      - Key: Name\n        Value: !Sub INV-${EnvName}-${SolName}-PrivateRoute1c\n  PrivateRoute1c:\n    Type: AWS::EC2::Route\n    DependsOn: NAT1c\n    Properties:\n      RouteTableId: !Ref PrivateRouteTable1c\n      DestinationCidrBlock: 0.0.0.0/0\n      NatGatewayId: !Ref NAT1c\n\n  PublicSubnet1aRouteTableAssociation:\n    Type: AWS::EC2::SubnetRouteTableAssociation\n    Properties:\n      SubnetId: !Ref PublicSubnet1a\n      RouteTableId: !Ref PublicRouteTable\n  PublicSubnet1cRouteTableAssociation:\n    Type: AWS::EC2::SubnetRouteTableAssociation\n    Properties:\n      SubnetId: !Ref PublicSubnet1c\n      RouteTableId: !Ref PublicRouteTable\n  PrivateSubnet1aRouteTableAssociation:\n    Type: AWS::EC2::SubnetRouteTableAssociation\n    Properties:\n      SubnetId: !Ref PrivateSubnet1a\n      RouteTableId: !Ref PrivateRouteTable1a\n  PrivateSubnet1cRouteTableAssociation:\n    Type: AWS::EC2::SubnetRouteTableAssociation\n    Properties:\n      SubnetId: !Ref PrivateSubnet1c\n      RouteTableId: !Ref PrivateRouteTable1c\n\n  DNS1:\n    Type: \"AWS::Route53::HostedZone\"\n    Properties:\n      HostedZoneConfig:\n        Comment: INV-LocalDomain\n      Name: internal-internavi\n      VPCs:\n        -\n          VPCId: !Ref VPC\n          VPCRegion: !Ref AWS::Region\n      HostedZoneTags:\n        -\n          Key: \"Name\"\n          Value: !Sub INV-${EnvName}-${SolName}\n\n  DNS2:\n    Type: \"AWS::Route53::HostedZone\"\n    Properties:\n      HostedZoneConfig:\n        Comment: INV-LocalDomain\n      Name: !Ref domain2\n      VPCs:\n        -\n          VPCId: !Ref VPC\n          VPCRegion: !Ref AWS::Region\n      HostedZoneTags:\n        -\n          Key: \"Name\"\n          Value: !Sub INV-${EnvName}-${SolName}\n\n  FlowLogBucket:\n    Type: AWS::S3::Bucket\n    Properties:\n        BucketName: !Join\n          - \"-\"\n          -\n            - inv\n            - !Ref EnvName\n            - !Ref SolName\n            - !Ref VPC\n  FlowLogBucketPolicy:\n    Type: AWS::S3::BucketPolicy\n    DependsOn: NAT1c\n    Properties:\n      Bucket: !Ref FlowLogBucket\n      PolicyDocument:\n        Statement:\n          -\n            Action:\n              - \"s3:PutObject\"\n            Effect: \"Allow\"\n            Resource:\n              Fn::Join:\n                - \"\"\n                -\n                  - \"arn:aws:s3:::\"\n                  - !Ref FlowLogBucket\n                  - \"/*\"\n            Principal:\n              Service: \"delivery.logs.amazonaws.com\"\n            Condition:\n              StringEquals:\n                s3:x-amz-acl: bucket-owner-full-control\n          -\n            Action:\n              - \"s3:GetBucketAcl\"\n            Effect: \"Allow\"\n            Resource:\n              Fn::Join:\n                - \"\"\n                -\n                  - \"arn:aws:s3:::\"\n                  - !Ref FlowLogBucket\n            Principal:\n              Service: \"delivery.logs.amazonaws.com\"\n  FlowLog:\n    Type: AWS::EC2::FlowLog\n    DependsOn: FlowLogBucketPolicy\n    Properties:\n      LogDestinationType : \"s3\"\n      LogDestination : !Join\n        - \"\"\n        -\n          - \"arn:aws:s3:::\"\n          - !Ref FlowLogBucket\n          - /FlowLogs/\n      ResourceType : VPC\n      ResourceId : !Ref VPC\n      TrafficType : ALL\n\n  S3Endpoint:\n    Type: AWS::EC2::VPCEndpoint\n    Properties:\n      RouteTableIds:\n        - !Ref PublicRouteTable\n        - !Ref PrivateRouteTable1a\n        - !Ref PrivateRouteTable1c\n      ServiceName: !Join\n        - ''\n        - - com.amazonaws.\n          - !Ref 'AWS::Region'\n          - .s3\n      VpcId: !Ref VPC\n  DynamoEndpoint:\n    Type: AWS::EC2::VPCEndpoint\n    Properties:\n      RouteTableIds:\n        - !Ref PublicRouteTable\n        - !Ref PrivateRouteTable1a\n        - !Ref PrivateRouteTable1c\n      ServiceName: !Join\n        - ''\n        - - com.amazonaws.\n          - !Ref 'AWS::Region'\n          - .dynamodb\n      VpcId: !Ref VPC\n  Certificate:\n    Type: AWS::CertificateManager::Certificate\n    Properties:\n      DomainName: !Sub '*.${EnvName}-${SubSolName}.cloud.internavi.ne.jp'\n      SubjectAlternativeNames:\n        - '*.cloud.internavi.ne.jp'\n      ValidationMethod: DNS\n\nOutputs:\n  VPC:\n    Value: !Ref VPC\n    Export:\n      Name: VPC\n  PublicSubnet1a:\n    Value: !Ref PublicSubnet1a\n    Export:\n      Name: PublicSubnet1a\n  PublicSubnet1c:\n    Value: !Ref PublicSubnet1c\n    Export:\n      Name: PublicSubnet1c\n  PrivateSubnet1a:\n    Value: !Ref PrivateSubnet1a\n    Export:\n      Name: PrivateSubnet1a\n  PrivateSubnet1c:\n    Value: !Ref PrivateSubnet1c\n    Export:\n      Name: PrivateSubnet1c\n  PublicRouteTable:\n    Value: !Ref PublicRouteTable\n    Export:\n      Name: PublicRouteTable\n  PrivateRouteTable1a:\n    Value: !Ref PrivateRouteTable1a\n    Export:\n      Name: PrivateRouteTable1a\n  PrivateRouteTable1c:\n    Value: !Ref PrivateRouteTable1c\n    Export:\n      Name: PrivateRouteTable1c\n  DNS1:\n    Value: !Ref DNS1\n    Export:\n      Name: DNS1\n  DNS2:\n    Value: !Ref DNS2\n    Export:\n      Name: DNS2\n"
}
INV-ver-sub01-codecommit-ecr
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: 2010-09-09\nDescription: codecommit and ecr\n\nParameters:\n  accountAllias:\n    Type: String\n  accountAlliasLowerCase:\n    Type: String\n\nResources:\n\n  codecommitcfn:\n    Type: AWS::CodeCommit::Repository\n    Properties:\n      RepositoryName: !Sub ${accountAllias}-cfn\n      RepositoryDescription: !Sub ${accountAllias}-cfn\n  codecommitapp:\n    Type: AWS::CodeCommit::Repository\n    Properties:\n      RepositoryName: !Sub ${accountAllias}-app\n      RepositoryDescription: !Sub ${accountAllias}-app\n  codecommitnginx:\n    Type: AWS::CodeCommit::Repository\n    Properties:\n      RepositoryName: !Sub ${accountAllias}-nginx\n      RepositoryDescription: !Sub ${accountAllias}-nginx\n  codecommitlambda:\n    Type: AWS::CodeCommit::Repository\n    Properties:\n      RepositoryName: !Sub ${accountAllias}-lambda\n      RepositoryDescription: !Sub ${accountAllias}-lambda\n\n  ecrProxyNginx:\n    Type: AWS::ECR::Repository\n    Properties:\n      RepositoryName: !Sub ${accountAlliasLowerCase}-ecr-proxy-nginx\n  ecrApiNginx:\n    Type: AWS::ECR::Repository\n    Properties:\n      RepositoryName: !Sub ${accountAlliasLowerCase}-ecr-api-nginx\n  ecrScreenNginx:\n    Type: AWS::ECR::Repository\n    Properties:\n      RepositoryName: !Sub ${accountAlliasLowerCase}-ecr-screen-nginx\n  ecrApp:\n    Type: AWS::ECR::Repository\n    Properties:\n      RepositoryName: !Sub ${accountAlliasLowerCase}-ecr-app\n  ecrBatch:\n    Type: AWS::ECR::Repository\n    Properties:\n      RepositoryName: !Sub ${accountAlliasLowerCase}-ecr-batch\n\nOutputs:\n\n  codecommitcfn:\n    Value: !Ref codecommitcfn\n    Export:\n      Name: codecommitcfn\n  codecommitapp:\n    Value: !Ref codecommitapp\n    Export:\n      Name: codecommitapp\n  codecommitnginx:\n    Value: !Ref codecommitnginx\n    Export:\n      Name: codecommitnginx\n  codecommitlambda:\n    Value: !Ref codecommitlambda\n    Export:\n      Name: codecommitlambda\n\n  ecrProxyNginx:\n    Value: !GetAtt ecrProxyNginx.Arn\n    Export:\n      Name: ecrProxyNginx\n  ecrApiNginx:\n    Value: !GetAtt ecrApiNginx.Arn\n    Export:\n      Name: ecrApiNginx\n  ecrScreenNginx:\n    Value: !GetAtt ecrScreenNginx.Arn\n    Export:\n      Name: ecrScreenNginx\n  ecrApp:\n    Value: !GetAtt ecrApp.Arn\n    Export:\n      Name: ecrApp\n  ecrBatch:\n    Value: !GetAtt ecrBatch.Arn\n    Export:\n      Name: ecrBatch\n"
}
StackSet-HmAdmin-createIamRole-ec2544a9-3632-4a53-9d29-6821d762db8d
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "{\n  \"AWSTemplateFormatVersion\" : \"2010-09-09\",\n  \"Description\" : \"Template for Creating IAM Role to Switch from Internavi Login AWS Account\",\n  \"Parameters\" : {\n    \"TrustedAWSAccountId\" : {\n      \"AllowedPattern\" : \"^[0-9]*$\",\n      \"Type\" : \"String\",\n      \"Default\" : \"975196479634\",\n      \"Description\" : \"Trusted AWS Account ID\"\n    },\n    \"IAMRoleName\": {\n      \"Type\": \"String\",\n      \"Default\": \"HmAdmin\",\n      \"Description\": \"IAM Role Name\"\n    }\n  },\n  \"Resources\" : {\n    \"IAMRoleForEngineer\": {\n      \"Type\": \"AWS::IAM::Role\",\n      \"Properties\": {\n        \"AssumeRolePolicyDocument\": {\n          \"Version\": \"2012-10-17\",\n          \"Statement\": [\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"J0322720\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"J0116063\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JP300063\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JP310643\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JP311734\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            }\n          ]\n        },\n        \"ManagedPolicyArns\": [\n          \"arn:aws:iam::aws:policy/AdministratorAccess\"\n        ],\n        \"Path\": \"/\",\n        \"RoleName\": { \"Ref\" : \"IAMRoleName\" }\n      }\n    }\n  },\n  \"Outputs\" : {\n    \"IAMRoleArn\": {\n      \"Value\": { \"Fn::GetAtt\" : [ \"IAMRoleForEngineer\", \"Arn\" ] }\n    },\n    \"LinkForSwitchRole\": {\n      \"Value\": { \"Fn::Join\": [ \"\", [ \"https://signin.aws.amazon.com/switchrole?roleName=\", { \"Ref\" : \"IAMRoleName\" }, \"&account=\", { \"Ref\" : \"AWS::AccountId\" } ] ] }\n    }\n  }\n}\n"
}
StackSet-cm-cm-hamada-koji-iamRole-eb8aeb42-412b-419e-90bd-d31af077138a
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": {
        "AWSTemplateFormatVersion": "2010-09-09", 
        "Description": "Template for Creating IAM Role to Switch from Classmethod AWS Account", 
        "Parameters": {
            "TrustedAWSAccountId": {
                "AllowedPattern": "^[0-9]*$", 
                "Type": "String", 
                "Default": "", 
                "Description": "Trusted AWS Account ID"
            }, 
            "IAMUserName": {
                "AllowedPattern": "^cm-[a-z.]*$", 
                "Type": "String", 
                "Default": "cm-xxx.xxx", 
                "Description": "IAM Role Name"
            }
        }, 
        "Resources": {
            "IAMRoleForCmEngineer": {
                "Type": "AWS::IAM::Role", 
                "Properties": {
                    "AssumeRolePolicyDocument": {
                        "Version": "2012-10-17", 
                        "Statement": [
                            {
                                "Effect": "Allow", 
                                "Principal": {
                                    "AWS": {
                                        "Fn::Join": [
                                            "", 
                                            [
                                                "arn:aws:iam::", 
                                                {
                                                    "Ref": "TrustedAWSAccountId"
                                                }, 
                                                ":user/", 
                                                {
                                                    "Ref": "IAMUserName"
                                                }
                                            ]
                                        ]
                                    }
                                }, 
                                "Action": [
                                    "sts:AssumeRole"
                                ], 
                                "Condition": {
                                    "Bool": {
                                        "aws:MultiFactorAuthPresent": "true"
                                    }
                                }
                            }
                        ]
                    }, 
                    "ManagedPolicyArns": [
                        "arn:aws:iam::aws:policy/AdministratorAccess"
                    ], 
                    "Path": "/", 
                    "RoleName": {
                        "Ref": "IAMUserName"
                    }
                }
            }
        }, 
        "Outputs": {
            "IAMRoleArn": {
                "Value": {
                    "Fn::GetAtt": [
                        "IAMRoleForCmEngineer", 
                        "Arn"
                    ]
                }
            }, 
            "LinkForSwitchRole": {
                "Value": {
                    "Fn::Join": [
                        "", 
                        [
                            "https://signin.aws.amazon.com/switchrole?roleName=", 
                            {
                                "Ref": "IAMUserName"
                            }, 
                            "&account=", 
                            {
                                "Ref": "AWS::AccountId"
                            }
                        ]
                    ]
                }
            }
        }
    }
}
StackSetsExecutionRole
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: 2010-09-09\nDescription: Configure the AWSCloudFormationStackSetExecutionRole to support AWS CloudFormation StackSets in a managed account.\n\nParameters:\n  MasterAccountId:\n    Type: String\n    Description: AWS Account Id of the master account (the account in which StackSets will be created).\n    MaxLength: 12\n    MinLength: 12\n\nResources:\n  ExecutionRole:\n    Type: AWS::IAM::Role\n    Properties:\n      RoleName: AWSCloudFormationStackSetExecutionRole\n      AssumeRolePolicyDocument: \n        Version: 2012-10-17\n        Statement: \n          - Effect: Allow\n            Principal: \n              AWS:\n                - !Ref MasterAccountId\n            Action: \n              - sts:AssumeRole\n      Path: /\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/AdministratorAccess\n"
}
cm-kikuchi-shuji-iamRole
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": {
        "AWSTemplateFormatVersion": "2010-09-09", 
        "Description": "Template for Creating IAM Role to Switch from Classmethod AWS Account", 
        "Parameters": {
            "TrustedAWSAccountId": {
                "AllowedPattern": "^[0-9]*$", 
                "Type": "String", 
                "Default": "", 
                "Description": "Trusted AWS Account ID"
            }, 
            "IAMUserName": {
                "AllowedPattern": "^cm-[a-z.]*$", 
                "Type": "String", 
                "Default": "cm-xxx.xxx", 
                "Description": "IAM Role Name"
            }
        }, 
        "Resources": {
            "IAMRoleForCmEngineer": {
                "Type": "AWS::IAM::Role", 
                "Properties": {
                    "AssumeRolePolicyDocument": {
                        "Version": "2012-10-17", 
                        "Statement": [
                            {
                                "Effect": "Allow", 
                                "Principal": {
                                    "AWS": {
                                        "Fn::Join": [
                                            "", 
                                            [
                                                "arn:aws:iam::", 
                                                {
                                                    "Ref": "TrustedAWSAccountId"
                                                }, 
                                                ":user/", 
                                                {
                                                    "Ref": "IAMUserName"
                                                }
                                            ]
                                        ]
                                    }
                                }, 
                                "Action": [
                                    "sts:AssumeRole"
                                ], 
                                "Condition": {
                                    "Bool": {
                                        "aws:MultiFactorAuthPresent": "true"
                                    }
                                }
                            }
                        ]
                    }, 
                    "ManagedPolicyArns": [
                        "arn:aws:iam::aws:policy/AdministratorAccess"
                    ], 
                    "Path": "/", 
                    "RoleName": {
                        "Ref": "IAMUserName"
                    }
                }
            }
        }, 
        "Outputs": {
            "IAMRoleArn": {
                "Value": {
                    "Fn::GetAtt": [
                        "IAMRoleForCmEngineer", 
                        "Arn"
                    ]
                }
            }, 
            "LinkForSwitchRole": {
                "Value": {
                    "Fn::Join": [
                        "", 
                        [
                            "https://signin.aws.amazon.com/switchrole?roleName=", 
                            {
                                "Ref": "IAMUserName"
                            }, 
                            "&account=", 
                            {
                                "Ref": "AWS::AccountId"
                            }
                        ]
                    ]
                }
            }
        }
    }
}
]
スクリプトを終了します
  1- INV-ver-htc01:arn:aws:iam::686753218709:role/OpeAdminRole
  2- INV-ver-sub01:arn:aws:iam::495152581087:role/OpeAdminRole
  3- INV-ver-cer01:arn:aws:iam::339311866652:role/OpeAdminRole
  4- INV-ver-des01:arn:aws:iam::302986797475:role/OpeAdminRole
  5- INV-ver-agw01:arn:aws:iam::859823971378:role/OpeAdminRole
  6- INV-ver-vdm01:arn:aws:iam::497617980196:role/OpeAdminRole
  7- INV-ver-wfi01:arn:aws:iam::932204081418:role/OpeAdminRole
  8- INV-ver-esp01:arn:aws:iam::131000633826:role/OpeAdminRole
  9- INV-ver-rmt01:arn:aws:iam::604584103104:role/OpeAdminRole
 10- INV-ver-esw01:arn:aws:iam::170541451228:role/OpeAdminRole
 11- INV-ver-tcu01:arn:aws:iam::951453431396:role/OpeAdminRole
 12- INV-ver-vky01:arn:aws:iam::207429400733:role/OpeAdminRole
     all- All Environments:select all environments
スクリプトを実行します。
aws cloudformation describe-stacks --query Stacks[*].StackName
{
    "Account": "975196479634", 
    "UserId": "AIDA6GDR5MCJLYN4JQRFZ", 
    "Arn": "arn:aws:iam::975196479634:user/JV010028"
}
{
    "Account": "339311866652", 
    "UserId": "AROAU6AEQGMOIDS4R6P5A:inv-20190702040808", 
    "Arn": "arn:aws:sts::339311866652:assumed-role/OpeAdminRole/inv-20190702040808"
}
[
insightwatch
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: \"2010-09-09\"\nDescription: Create IAM-Role for insightwatch\nParameters:\n  ExternalId:\n    Type: String\n    Description: insightwatch External ID\n  insightwatchAccountId:\n    Type: String\n    Description: insightwatch AWSAccount ID\nResources:\n  IAMRole:\n    Type: \"AWS::IAM::Role\"\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement:\n          -\n            Effect: \"Allow\"\n            Principal:\n              AWS: !Sub \"arn:aws:iam::${insightwatchAccountId}:root\"\n            Action:\n              - \"sts:AssumeRole\"\n            Condition:\n              StringEquals:\n                sts:ExternalId:\n                  - Ref: \"ExternalId\"\n      ManagedPolicyArns:\n        - Ref: ContentProtectedReadOnlyPolicy\n        - Ref: ExplicitDenyActionPolicy\n        - arn:aws:iam::aws:policy/ReadOnlyAccess\n      Path: \"/\"\n  ContentProtectedReadOnlyPolicy:\n    Type: \"AWS::IAM::ManagedPolicy\"\n    Properties:\n      Path: \"/\"\n      PolicyDocument:\n            Version: \"2012-10-17\"\n            Statement:\n              -\n                Effect: \"Allow\"\n                Resource: \"*\"\n                Action:\n                  - \"acm-pca:Describe*\"\n                  - \"acm-pca:List*\"\n                  - \"cloudformation:GetStackPolicy\"\n                  - \"cognito-identity:ListIdentityPools\"\n                  - \"cognito-sync:GetCognitoEvents\"\n                  - \"datapipeline:ReportTaskProgress\"\n                  - \"datapipeline:ReportTaskRunnerHeartbeat\"\n                  - \"dynamodb:DescribeReservedCapacity\"\n                  - \"dynamodb:DescribeStream\"\n                  - \"dynamodb:DescribeTable\"\n                  - \"dynamodb:ListStreams\"\n                  - \"dynamodb:ListTables\"\n                  - \"dynamodb:ListTagsOfResource\"\n                  - \"ec2-reports:*\"\n                  - \"elastictranscoder:List*\"\n                  - \"events:List*\"\n                  - \"events:Describe*\"\n                  - \"glacier:Describe*\"\n                  - \"glacier:List*\"\n                  - \"iam:Get*\"\n                  - \"iam:List*\"\n                  - \"importexport:GetStatus\"\n                  - \"importexport:ListJobs\"\n                  - \"kinesis:DescribeStream\"\n                  - \"kinesis:ListStreams\"\n                  - \"lambda:List*\"\n                  - \"lambda:Get*\"\n                  - \"logs:Describe*\"\n                  - \"logs:Get*\"\n                  - \"route53domains:Get*\"\n                  - \"route53domains:List*\"\n                  - \"redshift:Describe*\"\n                  - \"redshift:ViewQueriesInConsole\"\n                  - \"rds:Describe*\"\n                  - \"rds:DownloadCompleteDBLogFile\"\n                  - \"rds:DownloadDBLogFilePortion\"\n                  - \"rds:ListTagsForResource\"\n                  - \"storagegateway:Describe*\"\n                  - \"support:*\"\n                  - \"swf:GetWorkflowExecutionHistory\"\n                  - \"ses:Describe*\"\n                  - \"trustedadvisor:*\"\n                  - \"waf-regional:Get*\"\n                  - \"waf-regional:List*\"\n  ExplicitDenyActionPolicy:\n    Type: \"AWS::IAM::ManagedPolicy\"\n    Properties:\n      Path: \"/\"\n      PolicyDocument:\n        Version: \"2012-10-17\"\n        Statement:\n          -\n            Effect: \"Deny\"\n            Resource: \"*\"\n            Action:\n              - \"s3:GetObject\"\n              - \"acm-pca:Get*\"\n              - \"codecommit:BatchGet*\"\n              - \"codecommit:Describe*\"\n              - \"codecommit:Get*\"\n              - \"codecommit:GitPull\"\n              - \"codecommit:List*\"\n              - \"ds:VerifyTrust\"\n              - \"dynamodb:BatchGetItem\"\n              - \"dynamodb:GetItem\"\n              - \"dynamodb:GetRecords\"\n              - \"dynamodb:Query\"\n              - \"dynamodb:Scan\"\n              - \"ses:VerifyDomainDkim\"\n              - \"ses:VerifyDomainIdentity\"\n              - \"ses:VerifyEmailAddress\"\n              - \"ses:VerifyEmailIdentity\"\nOutputs:\n  AccountID:\n    Value:\n      Ref: AWS::AccountId\n  IAMRoleName:\n    Value:\n      Ref: IAMRole\n"
}
inv-ver-cer01-monitoring-lambda
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: \"2010-09-09\"\r\nDescription: \"monitoring-lambda.yml\"\r\nParameters: \r\n  EnvironmentName: \r\n    Default: ver\r\n    Description: \"Environment Name\"\r\n    Type: String\r\n  MicroServiceName: \r\n    Default: cer01\r\n    Description: \"MicroService Name\"\r\n    Type: String\r\n  S3Buckets: \r\n    Default: \"inv-ver-cer01-cfn\"\r\n    Description: \"source s3 backet name\"\r\n    Type: String\r\n  S3Prefix:\r\n    Default: \"monitor-config/\"\r\n    Description: \"source s3 backet file prefix\"\r\n    Type: String\r\n  iniFileName: \r\n    Default: \"monitor.json\"\r\n    Description: \"scenario file name\"\r\n    Type: String\r\n  scenarioSourceLogGroup:\r\n    Description: \"Scenario CWL log group name\"\r\n    Type: \"String\"\r\n  scenarioFilterPattern:\r\n    Default: \"\"\r\n    Description: \"Scenario Monitor CWL log FilterPattern\"\r\n    Type: \"String\"\r\n  programSourceLogGroup:\r\n    Description: \"program CWL log group name\"\r\n    Type: \"String\"\r\n  programFilterPattern:\r\n    Default: ?\"ERROR\" ?\"FATAL\" ?\"WARN\"\r\n    Description: \"program Monitor CWL log FilterPattern\"\r\n    Type: \"String\"\r\nResources:\r\n  IAMRole:\r\n    Type: \"AWS::IAM::Role\"\r\n    Properties: \r\n      AssumeRolePolicyDocument: \r\n        Version: \"2012-10-17\"\r\n        Statement: \r\n          - Effect: Allow\r\n            Principal: \r\n              Service: \"lambda.amazonaws.com\"\r\n            Action: \"sts:AssumeRole\"\r\n      ManagedPolicyArns: \r\n        - \"arn:aws:iam::aws:policy/AmazonSNSFullAccess\"\r\n      Path: \"/\"\r\n      Policies:\r\n        - PolicyName: monitor_lambda_policy\r\n          PolicyDocument:\r\n            Version: '2012-10-17'\r\n            Statement:\r\n              - Effect: Allow\r\n                Action:\r\n                  - cloudwatch:*\r\n                  - logs:*\r\n                  - s3:Get*\r\n                  - s3:List*\r\n                Resource: \"*\"\r\n      RoleName: !Sub inv-${EnvironmentName}-${MicroServiceName}-monitoring-lambda-role\r\n  LambdaLayer:\r\n    Type: \"AWS::Lambda::LayerVersion\"\r\n    Properties:\r\n      CompatibleRuntimes: \r\n        - python3.6\r\n      Content: \r\n        S3Bucket:\r\n          Ref: S3Buckets\r\n        S3Key: CloudwatchAlarm/metrics_mod.zip\r\n      Description: \"monitor_lambda_modules\"\r\n      LayerName: monitor_module\r\n  LambdaFunction: \r\n    DependsOn: \r\n      - IAMRole\r\n    Type: \"AWS::Lambda::Function\"\r\n    Properties: \r\n      Code: \r\n        S3Bucket: \r\n          Ref: S3Buckets\r\n        S3Key: CloudwatchAlarm/monitoring_common_lambda_src.zip           \r\n      FunctionName: !Sub inv-${EnvironmentName}-${MicroServiceName}-monitoring_common_lambda\r\n      Handler: lambda_function.lambda_handler\r\n      Environment: \r\n        Variables: \r\n          ENV: \r\n            Ref: EnvironmentName\r\n          STG: \r\n            Ref: MicroServiceName\r\n          fileName:\r\n            Ref: iniFileName\r\n          s3Bucket:\r\n            Ref: S3Buckets\r\n          s3keyPrefix:\r\n            Ref: S3Prefix\r\n      Role: \r\n        \"Fn::GetAtt\": \r\n          - IAMRole\r\n          - Arn\r\n      Runtime: \"python3.6\"\r\n      MemorySize: 512\r\n      Timeout: 300\r\n      Layers:\r\n        - !Ref LambdaLayer\r\n  LambdaPermission: \r\n    Type: \"AWS::Lambda::Permission\"\r\n    Properties: \r\n      Action: \"lambda:InvokeFunction\"\r\n      FunctionName: \r\n        \"Fn::GetAtt\": \r\n          - LambdaFunction\r\n          - Arn\r\n      Principal: !Sub \"sns.amazonaws.com\"\r\n      SourceArn: !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:inv-${EnvironmentName}-${MicroServiceName}\r\n  ScenarioSubscriptionFilter:\r\n    DependsOn:\r\n      - ScenarioLambdaInvokePermission\r\n    Type: \"AWS::Logs::SubscriptionFilter\"\r\n    Properties:\r\n      LogGroupName: !Ref scenarioSourceLogGroup\r\n      FilterPattern: !Ref scenarioFilterPattern\r\n      DestinationArn: !Join\r\n        - ''\r\n        - - !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:'\r\n          - !Sub inv-${EnvironmentName}-${MicroServiceName}-monitoring_common_lambda\r\n  ScenarioLambdaInvokePermission:\r\n    Type: 'AWS::Lambda::Permission'\r\n    Properties:\r\n      FunctionName:\r\n        \"Fn::GetAtt\": \r\n          - LambdaFunction\r\n          - Arn\r\n      Action: \"lambda:InvokeFunction\"\r\n      Principal: !Sub \"logs.amazonaws.com\"\r\n      SourceAccount: !Ref AWS::AccountId\r\n      SourceArn: !Sub \"arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${scenarioSourceLogGroup}:*\"\r\n  ProgramSubscriptionFilter:\r\n    DependsOn:\r\n      - ProgramLambdaInvokePermission\r\n    Type: \"AWS::Logs::SubscriptionFilter\"\r\n    Properties:\r\n      LogGroupName: !Ref programSourceLogGroup\r\n      FilterPattern: !Ref programFilterPattern\r\n      DestinationArn: !Join\r\n        - ''\r\n        - - !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:'\r\n          - !Sub inv-${EnvironmentName}-${MicroServiceName}-monitoring_common_lambda\r\n  ProgramLambdaInvokePermission:\r\n    Type: 'AWS::Lambda::Permission'\r\n    Properties:\r\n      FunctionName:\r\n        \"Fn::GetAtt\": \r\n          - LambdaFunction\r\n          - Arn\r\n      Action: \"lambda:InvokeFunction\"\r\n      Principal: !Sub \"logs.amazonaws.com\"\r\n      SourceAccount: !Ref AWS::AccountId\r\n      SourceArn: !Sub \"arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${programSourceLogGroup}:*\"\r\nOutputs: \r\n  IAMRole: \r\n    Description: \"IAM Role Name\"\r\n    Value: \r\n      Ref: IAMRole\r\n  SNSTopic: \r\n    Description: \"SNS Topic Name\"\r\n    Value: \r\n      !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:inv-${EnvironmentName}-${MicroServiceName}\r\n  LambdaFunction: \r\n    Description: \"Lambda Function Name\"\r\n    Value: \r\n      Ref: LambdaFunction"
}
INV-ver-cer01-autoscaling-service
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: ecs authoscaling definition\n\nParameters:\n  accountAllias:\n    Type: String\n  accountAlliasLowerCase:\n    Type: String\n  proxyMaxCount:\n    Type: Number\n  proxyMinCount:\n    Type: Number\n  authMaxCount:\n    Type: Number\n  authMinCount:\n    Type: Number\n  cacheDelMaxCount:\n    Type: Number\n  cacheDelMinCount:\n    Type: Number\n\nMappings: \n  Proxy:\n    CPU:\n      UpUsage: 80\n      DownUsage: 30\n  Auth:\n    CPU:\n      UpUsage: 60\n      DownUsage: 30\n  CacheDel:\n    CPU:\n      UpUsage: 80\n      DownUsage: 30\n\nResources:\n  parserAutoScalingRole:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Statement:\n        - Effect: Allow\n          Principal:\n            Service: \n              - application-autoscaling.amazonaws.com\n          Action: \"sts:AssumeRole\"\n      Path: /\n      Policies:\n      - PolicyName: service-autoscaling\n        PolicyDocument:\n          Statement:\n          - Effect: Allow\n            Action: \n              - application-autoscaling:*\n              - cloudwatch:DescribeAlarms\n              - cloudwatch:PutMetricAlarm\n              - ecs:DescribeServices\n              - ecs:UpdateService\n            Resource: \"*\"\n\n  parserTargetProxy:\n    Type: AWS::ApplicationAutoScaling::ScalableTarget\n    Properties:\n      MaxCapacity: !Ref proxyMaxCount\n      MinCapacity: !Ref proxyMinCount\n      ResourceId: !Join ['/', ['service', !ImportValue cluster, !Join ['', [!Ref accountAlliasLowerCase, '-public-service']]]]\n      RoleARN: !GetAtt [ parserAutoScalingRole, Arn ]\n      ScalableDimension: ecs:service:DesiredCount\n      ServiceNamespace: ecs\n  ScaleUpPolicyProxy:\n    Type: AWS::ApplicationAutoScaling::ScalingPolicy\n    Properties:\n      PolicyName: !Sub ${accountAlliasLowerCase}-scaleup-policy-proxy\n      PolicyType: StepScaling\n      ScalingTargetId: !Ref parserTargetProxy\n      StepScalingPolicyConfiguration:\n        AdjustmentType: ChangeInCapacity\n        MetricAggregationType: Maximum\n        Cooldown: 180\n        # MinAdjustmentMagnitude: 1\n        StepAdjustments:\n          - MetricIntervalLowerBound: 0\n            ScalingAdjustment: 1\n  CPUUtilizationTooHighAlarmProxy:\n    Type: AWS::CloudWatch::Alarm\n    Properties:\n      AlarmDescription: 'Maximum CPU utilization over last 1 minutes higher than 80%'\n      AlarmName: !Sub ${accountAlliasLowerCase}-cpu-high-alarm-proxy\n      Namespace: 'AWS/ECS'\n      Dimensions:\n        - Name: ClusterName\n          Value: !ImportValue cluster\n        - Name: ServiceName\n          Value: !Sub ${accountAlliasLowerCase}-public-service\n      MetricName: CPUUtilization\n      ComparisonOperator: GreaterThanThreshold\n      Statistic: Maximum\n      Period: 60\n      EvaluationPeriods: 1\n      Threshold: !FindInMap [Proxy, CPU, UpUsage]\n      AlarmActions:\n        - !Ref ScaleUpPolicyProxy\n  ScaleDownPolicyProxy:\n    Type: AWS::ApplicationAutoScaling::ScalingPolicy\n    Properties:\n      PolicyName: !Sub ${accountAlliasLowerCase}-scaledown-policy-proxy\n      PolicyType: StepScaling\n      ScalingTargetId: !Ref parserTargetProxy\n      StepScalingPolicyConfiguration:\n        AdjustmentType: ChangeInCapacity\n        MetricAggregationType: Maximum\n        Cooldown: 300\n        # MinAdjustmentMagnitude: 1\n        StepAdjustments:\n          - MetricIntervalUpperBound: 0\n            ScalingAdjustment: -1\n  CPUUtilizationTooLowAlarmProxy:\n    Type: AWS::CloudWatch::Alarm\n    Properties:\n      AlarmDescription: 'Maximum CPU utilization over last 10 minutes lower than 30%'\n      AlarmName: !Sub ${accountAlliasLowerCase}-cpu-low-alarm-proxy\n      Namespace: 'AWS/ECS'\n      Dimensions:\n        - Name: ClusterName\n          Value: !ImportValue cluster\n        - Name: ServiceName\n          Value: !Sub ${accountAlliasLowerCase}-public-service\n      MetricName: CPUUtilization\n      ComparisonOperator: LessThanThreshold\n      Statistic: Maximum\n      Period: 300\n      EvaluationPeriods: 1\n      Threshold: !FindInMap [Proxy, CPU, DownUsage]\n      AlarmActions:\n        - !Ref ScaleDownPolicyProxy\n\n  parserTargetAuth:\n    Type: AWS::ApplicationAutoScaling::ScalableTarget\n    Properties:\n      MaxCapacity: !Ref authMaxCount\n      MinCapacity: !Ref authMinCount\n      ResourceId: !Join ['/', ['service', !ImportValue cluster, !Join ['', [!Ref accountAlliasLowerCase, '-auth-service']]]]\n      RoleARN: !GetAtt [ parserAutoScalingRole, Arn ]\n      ScalableDimension: ecs:service:DesiredCount\n      ServiceNamespace: ecs\n  ScaleUpPolicyAuth:\n    Type: AWS::ApplicationAutoScaling::ScalingPolicy\n    Properties:\n      PolicyName: !Sub ${accountAlliasLowerCase}-scaleup-policy-auth\n      PolicyType: StepScaling\n      ScalingTargetId: !Ref parserTargetAuth\n      StepScalingPolicyConfiguration:\n        AdjustmentType: ChangeInCapacity\n        MetricAggregationType: Maximum\n        Cooldown: 180\n        # MinAdjustmentMagnitude: 1\n        StepAdjustments:\n          - MetricIntervalLowerBound: 0\n            ScalingAdjustment: 5\n  CPUUtilizationTooHighAlarmAuth:\n    Type: AWS::CloudWatch::Alarm\n    Properties:\n      AlarmDescription: 'Maximum CPU utilization over last 1 minutes higher than 60%'\n      AlarmName: !Sub ${accountAlliasLowerCase}-cpu-high-alarm-auth\n      Namespace: 'AWS/ECS'\n      Dimensions:\n        - Name: ClusterName\n          Value: !ImportValue cluster\n        - Name: ServiceName\n          Value: !Sub ${accountAlliasLowerCase}-auth-service\n      MetricName: CPUUtilization\n      ComparisonOperator: GreaterThanThreshold\n      Statistic: Maximum\n      Period: 60\n      EvaluationPeriods: 1\n      Threshold: !FindInMap [Auth, CPU, UpUsage]\n      AlarmActions:\n        - !Ref ScaleUpPolicyAuth\n  ScaleDownPolicyAuth:\n    Type: AWS::ApplicationAutoScaling::ScalingPolicy\n    Properties:\n      PolicyName: !Sub ${accountAlliasLowerCase}-scaledown-policy-auth\n      PolicyType: StepScaling\n      ScalingTargetId: !Ref parserTargetAuth\n      StepScalingPolicyConfiguration:\n        AdjustmentType: ChangeInCapacity\n        MetricAggregationType: Maximum\n        Cooldown: 300\n        # MinAdjustmentMagnitude: 1\n        StepAdjustments:\n          - MetricIntervalUpperBound: 0\n            ScalingAdjustment: -5\n  CPUUtilizationTooLowAlarmAuth:\n    Type: AWS::CloudWatch::Alarm\n    Properties:\n      AlarmDescription: 'Maximum CPU utilization over last 10 minutes lower than 30%'\n      AlarmName: !Sub ${accountAlliasLowerCase}-cpu-low-alarm-auth\n      Namespace: 'AWS/ECS'\n      Dimensions:\n        - Name: ClusterName\n          Value: !ImportValue cluster\n        - Name: ServiceName\n          Value: !Sub ${accountAlliasLowerCase}-auth-service\n      MetricName: CPUUtilization\n      ComparisonOperator: LessThanThreshold\n      Statistic: Maximum\n      Period: 300\n      EvaluationPeriods: 1\n      Threshold: !FindInMap [Auth, CPU, DownUsage]\n      AlarmActions:\n        - !Ref ScaleDownPolicyAuth\n\n  parserTargetCacheDel:\n    Type: AWS::ApplicationAutoScaling::ScalableTarget\n    Properties:\n      MaxCapacity: !Ref cacheDelMaxCount\n      MinCapacity: !Ref cacheDelMinCount\n      ResourceId: !Join ['/', ['service', !ImportValue cluster, !Join ['', [!Ref accountAlliasLowerCase, '-internal-service']]]]\n      RoleARN: !GetAtt [ parserAutoScalingRole, Arn ]\n      ScalableDimension: ecs:service:DesiredCount\n      ServiceNamespace: ecs\n  ScaleUpPolicyCacheDel:\n    Type: AWS::ApplicationAutoScaling::ScalingPolicy\n    Properties:\n      PolicyName: !Sub ${accountAlliasLowerCase}-scaleup-policy-cachedel\n      PolicyType: StepScaling\n      ScalingTargetId: !Ref parserTargetCacheDel\n      StepScalingPolicyConfiguration:\n        AdjustmentType: ChangeInCapacity\n        MetricAggregationType: Maximum\n        Cooldown: 180\n        # MinAdjustmentMagnitude: 1\n        StepAdjustments:\n          - MetricIntervalLowerBound: 0\n            ScalingAdjustment: 1\n  CPUUtilizationTooHighAlarmCacheDel:\n    Type: AWS::CloudWatch::Alarm\n    Properties:\n      AlarmDescription: 'Maximum CPU utilization over last 1 minutes higher than 80%'\n      AlarmName: !Sub ${accountAlliasLowerCase}-cpu-high-alarm-cachedel\n      Namespace: 'AWS/ECS'\n      Dimensions:\n        - Name: ClusterName\n          Value: !ImportValue cluster\n        - Name: ServiceName\n          Value: !Sub ${accountAlliasLowerCase}-internal-service\n      MetricName: CPUUtilization\n      ComparisonOperator: GreaterThanThreshold\n      Statistic: Maximum\n      Period: 60\n      EvaluationPeriods: 1\n      Threshold: !FindInMap [CacheDel, CPU, UpUsage]\n      AlarmActions:\n        - !Ref ScaleUpPolicyCacheDel\n  ScaleDownPolicyCacheDel:\n    Type: AWS::ApplicationAutoScaling::ScalingPolicy\n    Properties:\n      PolicyName: !Sub ${accountAlliasLowerCase}-scaledown-policy-cachedel\n      PolicyType: StepScaling\n      ScalingTargetId: !Ref parserTargetCacheDel\n      StepScalingPolicyConfiguration:\n        AdjustmentType: ChangeInCapacity\n        MetricAggregationType: Maximum\n        Cooldown: 300\n        # MinAdjustmentMagnitude: 1\n        StepAdjustments:\n          - MetricIntervalUpperBound: 0\n            ScalingAdjustment: -1\n  CPUUtilizationTooLowAlarmCacheDel:\n    Type: AWS::CloudWatch::Alarm\n    Properties:\n      AlarmDescription: 'Maximum CPU utilization over last 1 minutes lower than 30%'\n      AlarmName: !Sub ${accountAlliasLowerCase}-cpu-low-alarm-cachedel\n      Namespace: 'AWS/ECS'\n      Dimensions:\n        - Name: ClusterName\n          Value: !ImportValue cluster\n        - Name: ServiceName\n          Value: !Sub ${accountAlliasLowerCase}-internal-service\n      MetricName: CPUUtilization\n      ComparisonOperator: LessThanThreshold\n      Statistic: Maximum\n      Period: 300\n      EvaluationPeriods: 1\n      Threshold: !FindInMap [CacheDel, CPU, DownUsage]\n      AlarmActions:\n        - !Ref ScaleDownPolicyCacheDel\n\nOutputs:\n  parserAutoScalingRole:\n    Value: !Ref parserAutoScalingRole\n    Export:\n      Name: parserAutoScalingRole\n"
}
enable-guardduty
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: 2010-09-09\nDescription:\n  \"enable guardduty\"\nResources:\n  GDD:\n    Type: \"AWS::GuardDuty::Detector\"\n    Properties:\n      Enable: true"
}
INV-ver-cer01-manage-metrics-alarm
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: \"2010-09-09\"\r\nDescription: \"create_metrics_alarm.yaml\"\r\nParameters:\r\n  EnvironmentName:\r\n    Default: \"ver\"\r\n    Description: \"EnvironmentName\"\r\n    Type: String\r\n  MicroServiceName: \r\n    Default: \"cer01\"\r\n    Description: \"MicroServiceName\"\r\n    Type: String\r\n  s3keyprefix: \r\n    Default: \"_manage_metrics_alarm.xlsx\"\r\n    Description: \"excel s3 keys prefix\"\r\n    Type: String\r\n  S3Buckets: \r\n    Default: \"inv-ver-cer01-cfn\"\r\n    Description: \"source s3 backet name\"\r\n    Type: String\r\nResources: \r\n  IAMRole: \r\n    Type: \"AWS::IAM::Role\"\r\n    Properties: \r\n      AssumeRolePolicyDocument: \r\n        Version: \"2012-10-17\"\r\n        Statement: \r\n          - Effect: Allow\r\n            Principal: \r\n              Service: \"lambda.amazonaws.com\"\r\n            Action: \"sts:AssumeRole\"\r\n      ManagedPolicyArns: \r\n        - \"arn:aws:iam::aws:policy/AmazonS3FullAccess\"\r\n      Path: \"/\"\r\n      Policies:\r\n        - PolicyName: manage_metrics_alarm_lambda_policy\r\n          PolicyDocument:\r\n            Version: '2012-10-17'\r\n            Statement:\r\n              - Effect: Allow\r\n                Action:\r\n                  - cloudwatch:*\r\n                  - logs:*\r\n                Resource: \"*\"\r\n      RoleName: !Sub inv-${EnvironmentName}-${MicroServiceName}-manage-metrics-alarm-lambda-role\r\n  LambdaLayer:\r\n    Type: \"AWS::Lambda::LayerVersion\"\r\n    Properties:\r\n      CompatibleRuntimes: \r\n        - python3.6\r\n      Content: \r\n        S3Bucket:\r\n          Ref: S3Buckets\r\n        S3Key: CloudwatchAlarm/metrics_mod.zip\r\n      Description: \"manage_cloudwatch metrics alarm modules\"\r\n      LayerName: metrics_module\r\n  LambdaFunction: \r\n    DependsOn: \r\n      - IAMRole\r\n    Type: \"AWS::Lambda::Function\"\r\n    Properties: \r\n      Code: \r\n        S3Bucket: \r\n          Ref: S3Buckets\r\n        S3Key: CloudwatchAlarm/manage_metrics_alarm_src.zip\r\n      FunctionName: !Sub inv-${EnvironmentName}-${MicroServiceName}-manage-metrics-alarm-lambda\r\n      Handler: lambda_function.lambda_handler\r\n      Environment: \r\n        Variables: \r\n          fileprefix: \r\n            Ref: s3keyprefix\r\n          s3Bucket: !Sub inv-${EnvironmentName}-${MicroServiceName}-manage-metrics-alarm\r\n      Role: \r\n        \"Fn::GetAtt\": \r\n          - IAMRole\r\n          - Arn\r\n      Runtime: \"python3.6\"\r\n      MemorySize: 512\r\n      Timeout: 300\r\n      Layers:\r\n        - !Ref LambdaLayer\r\n  LambdaPermission: \r\n    Type: \"AWS::Lambda::Permission\"\r\n    Properties: \r\n      Action: \"lambda:InvokeFunction\"\r\n      FunctionName: \r\n        \"Fn::GetAtt\": \r\n          - LambdaFunction\r\n          - Arn\r\n      Principal: s3.amazonaws.com\r\n      SourceAccount: !Ref 'AWS::AccountId'\r\n      SourceArn: !Join\r\n        - ''\r\n        - - 'arn:aws:s3:::'\r\n          - !Sub inv-${EnvironmentName}-${MicroServiceName}-manage-metrics-alarm\r\n  S3Bucket:\r\n    Type: \"AWS::S3::Bucket\"\r\n    DependsOn: \r\n      - LambdaPermission\r\n    Properties:\r\n      BucketName: !Sub inv-${EnvironmentName}-${MicroServiceName}-manage-metrics-alarm\r\n      AccessControl: Private\r\n      PublicAccessBlockConfiguration:\r\n        BlockPublicAcls: True\r\n        BlockPublicPolicy: True\r\n        IgnorePublicAcls: True\r\n        RestrictPublicBuckets: True\r\n      NotificationConfiguration:\r\n        LambdaConfigurations:\r\n          - Event: \"s3:ObjectCreated:*\"\r\n            Filter:\r\n              S3Key:\r\n                Rules:\r\n                  - Name: suffix\r\n                    Value: xlsx\r\n            Function: !GetAtt\r\n              - LambdaFunction\r\n              - Arn\r\n  S3BucketPolicy:\r\n    Type: AWS::S3::BucketPolicy\r\n    Properties: \r\n      Bucket: \r\n        Ref: \"S3Bucket\"\r\n      PolicyDocument: \r\n        Version: \"2012-10-17\"\r\n        Statement: \r\n          - \r\n            Action: \r\n              - \"s3:GetObject\"\r\n            Effect: \"Allow\"\r\n            Resource: \r\n              Fn::Join: \r\n                - \"\"\r\n                - \r\n                  - \"arn:aws:s3:::\"\r\n                  - \r\n                    Ref: \"S3Bucket\"\r\n                  - \"/*\"\r\n            Principal: \r\n              AWS:\r\n                Fn::Join:\r\n                  - \"\"\r\n                  - \r\n                    - \"arn:aws:iam::\"\r\n                    - Ref: \"AWS::AccountId\"\r\n                    - \":root\"\r\nOutputs: \r\n  IAMRole: \r\n    Description: \"IAM Role Name\"\r\n    Value: \r\n      Ref: IAMRole\r\n  S3BucketName:\r\n    Value:\r\n      Ref S3BucketName\r\n  LambdaFunction: \r\n    Description: \"Lambda Function Name\"\r\n    Value: \r\n      Ref: LambdaFunction"
}
INV-ver-cer01-codepipeline-ver-proxy
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: codepipeline\n\n# ------------------------------------------------------------#\n#  Parameters\n# ------------------------------------------------------------#\nParameters:\n  accountAllias:\n    Type: String\n  accountAlliasLowerCase:\n    Type: String\n\nResources:\n# ------------------------------------------------------------#\n#  Role\n# ------------------------------------------------------------#\n  codeBuildRoleVerProxy:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement: \n          - Effect: \"Allow\"\n            Principal: \n              Service: \n                - \"codebuild.amazonaws.com\"\n            Action: \n              - \"sts:AssumeRole\"\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess\n        - arn:aws:iam::aws:policy/AmazonS3FullAccess\n        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess\n  codePipelineRoleVerProxy:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement: \n          - Effect: \"Allow\"\n            Principal: \n              Service: \n                - \"codepipeline.amazonaws.com\"\n            Action: \n              - \"sts:AssumeRole\"\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess\n        - arn:aws:iam::aws:policy/AWSCodeCommitFullAccess\n        - arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess\n        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess\n        - arn:aws:iam::aws:policy/AmazonS3FullAccess\n        - arn:aws:iam::aws:policy/CloudWatchFullAccess\n        - arn:aws:iam::aws:policy/AmazonEC2ContainerServiceFullAccess\n\n# ------------------------------------------------------------#\n#  CodeBuild\n# ------------------------------------------------------------#\n  codeBuildProjectVerProxy:\n    Type: AWS::CodeBuild::Project\n    Properties:\n      Name: !Sub ${accountAlliasLowerCase}-build-project-ver-proxy\n      Artifacts:\n        Type: CODEPIPELINE\n      Description: !Sub Building stage for ${accountAlliasLowerCase} ver proxy\n      Environment:\n        ComputeType: BUILD_GENERAL1_SMALL\n        EnvironmentVariables:\n          - Name: AWS_ACCOUNT_ID\n            Value: !Ref AWS::AccountId\n          - Name: NGINX_IMAGE_NAME\n            Value: !Sub ${accountAlliasLowerCase}-proxy-nginx\n          - Name: NGINX_CONTAINER_NAME\n            Value: !Sub ${accountAlliasLowerCase}-container-proxy-nginx\n        Image: aws/codebuild/docker:18.09.0\n        Type: LINUX_CONTAINER\n        PrivilegedMode: True\n      ServiceRole: !Ref codeBuildRoleVerProxy\n      Source:\n        Type: CODEPIPELINE\n        BuildSpec: |\n          version: 0.2 \n          phases:\n            build:\n              commands:\n                - REPOSITORY_URI=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${NGINX_IMAGE_NAME}\n                - IMAGE_TAG=latest\n                - echo \"[{\\\"name\\\":\\\"${NGINX_CONTAINER_NAME}\\\",\\\"imageUri\\\":\\\"${REPOSITORY_URI}:${IMAGE_TAG}\\\"}]\"\n                - echo \"[{\\\"name\\\":\\\"${NGINX_CONTAINER_NAME}\\\",\\\"imageUri\\\":\\\"${REPOSITORY_URI}:${IMAGE_TAG}\\\"}]\" > imagedefinitions.json\n          artifacts:\n              files: imagedefinitions.json\n      TimeoutInMinutes: 30\n# ------------------------------------------------------------#\n#  S3\n# ------------------------------------------------------------#\n  s3bucketforcodepipelineVerProxy:\n    Type: AWS::S3::Bucket\n    Properties:\n      BucketName: !Sub ${accountAlliasLowerCase}-codepipeline-ver-proxy\n# ------------------------------------------------------------#\n#  CodePipeline\n# ------------------------------------------------------------#\n  codePipelineVerProxy:\n    Type: AWS::CodePipeline::Pipeline\n    DependsOn: s3bucketforcodepipelineVerProxy\n    Properties:\n      ArtifactStore:\n        Location: !Ref s3bucketforcodepipelineVerProxy\n        Type: S3\n      Name: !Sub ${accountAlliasLowerCase}-codepipeline-ver-proxy\n      RestartExecutionOnUpdate: false\n      RoleArn: !GetAtt codePipelineRoleVerProxy.Arn\n      Stages:\n        - Name: Source\n          Actions:\n            - Name: SourceAction\n              ActionTypeId: \n                Category: Source\n                Owner: AWS\n                Provider: ECR\n                Version: 1\n              OutputArtifacts: \n                - Name: SourceArtifact\n              Configuration: \n                RepositoryName: !Sub ${accountAlliasLowerCase}-proxy-nginx\n              RunOrder: 1\n        - Name: Build\n          Actions:\n            - Name: CodeBuild\n              InputArtifacts:\n                - Name: SourceArtifact\n              ActionTypeId: \n                Category: Build\n                Owner: AWS\n                Provider: CodeBuild\n                Version: 1\n              Configuration: \n                ProjectName: !Ref codeBuildProjectVerProxy\n              OutputArtifacts: \n                - Name: CodebuildOutput\n              RunOrder: 1\n        - Name: Staging\n          Actions:\n            - Name: Deploy2Proxy\n              InputArtifacts:\n                - Name: CodebuildOutput\n              ActionTypeId: \n                Category: Deploy\n                Owner: AWS\n                Provider: ECS\n                Version: 1\n              Configuration:\n                ClusterName: !ImportValue cluster\n                FileName: imagedefinitions.json\n                ServiceName: !ImportValue publicService\n              OutputArtifacts: []\n              RunOrder: 1\n# ------------------------------------------------------------#\n#  CloudWatch Event\n# ------------------------------------------------------------#\n  cloudWatchEventRoleVerProxy:\n    Type: 'AWS::IAM::Role'\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service:\n                - events.amazonaws.com\n            Action: 'sts:AssumeRole'\n      Path: /\n      Policies:\n        - PolicyName: cwe-pipeline-execution\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Effect: Allow\n                Action: 'codepipeline:StartPipelineExecution'\n                Resource: !Join \n                  - ''\n                  - - 'arn:aws:codepipeline:'\n                    - !Ref 'AWS::Region'\n                    - ':'\n                    - !Ref 'AWS::AccountId'\n                    - ':'\n                    - !Ref codePipelineVerProxy\n  cloudwatchEventsRuleVerProxy:\n    Type: AWS::Events::Rule\n    Properties:\n      EventPattern:\n        source:\n          - aws.ecr\n        detail:\n          eventName:\n            - PutImage\n          requestParameters:\n            repositoryName: \n              - !Sub ${accountAlliasLowerCase}-proxy-nginx\n            imageTag: \n              - latest\n      Targets:\n        - Arn:  !Join \n          - ''\n          - - 'arn:aws:codepipeline:'\n            - !Ref 'AWS::Region'\n            - ':'\n            - !Ref 'AWS::AccountId'\n            - ':'\n            - !Ref codePipelineVerProxy\n          Id: !Sub ${accountAlliasLowerCase}-codepipeline-ver-proxy\n          RoleArn: !GetAtt cloudWatchEventRoleVerProxy.Arn\n\n# ------------------------------------------------------------#\n#  Outputs\n# ------------------------------------------------------------#\nOutputs:\n  codeBuildRoleVerProxy:\n    Value: !Ref codeBuildRoleVerProxy\n    Export:\n      Name: codeBuildRoleVerProxy\n  codePipelineRoleVerProxy:\n    Value: !Ref codePipelineRoleVerProxy\n    Export:\n      Name: codePipelineRoleVerProxy\n  codeBuildProjectVerProxy:\n    Value: !Ref codeBuildProjectVerProxy\n    Export:\n      Name: codeBuildProjectVerProxy\n  s3bucketforcodepipelineVerProxy:\n    Value: !Ref s3bucketforcodepipelineVerProxy\n    Export:\n      Name: s3bucketforcodepipelineVerProxy\n  codePipelineVerProxy:\n    Value: !Ref codePipelineVerProxy\n    Export:\n      Name: codePipelineVerProxy\n  cloudWatchEventRoleVerProxy:\n    Value: !Ref cloudWatchEventRoleVerProxy\n    Export:\n      Name: cloudWatchEventRoleVerProxy\n  cloudwatchEventsRuleVerProxy:\n    Value: !Ref cloudwatchEventsRuleVerProxy\n    Export:\n      Name: cloudwatchEventsRuleVerProxy\n\n"
}
INV-ver-cer01-codepipeline-ver-cache-delete
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: codepipeline\n\n# ------------------------------------------------------------#\n#  Parameters\n# ------------------------------------------------------------#\nParameters:\n  accountAllias:\n    Type: String\n  accountAlliasLowerCase:\n    Type: String\n\nResources:\n# ------------------------------------------------------------#\n#  Role\n# ------------------------------------------------------------#\n  codeBuildRoleVerCacheDelete:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement: \n          - Effect: \"Allow\"\n            Principal: \n              Service: \n                - \"codebuild.amazonaws.com\"\n            Action: \n              - \"sts:AssumeRole\"\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess\n        - arn:aws:iam::aws:policy/AmazonS3FullAccess\n        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess\n  codePipelineRoleVerCacheDelete:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement: \n          - Effect: \"Allow\"\n            Principal: \n              Service: \n                - \"codepipeline.amazonaws.com\"\n            Action: \n              - \"sts:AssumeRole\"\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess\n        - arn:aws:iam::aws:policy/AWSCodeCommitFullAccess\n        - arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess\n        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess\n        - arn:aws:iam::aws:policy/AmazonS3FullAccess\n        - arn:aws:iam::aws:policy/CloudWatchFullAccess\n        - arn:aws:iam::aws:policy/AmazonEC2ContainerServiceFullAccess\n\n# ------------------------------------------------------------#\n#  CodeBuild\n# ------------------------------------------------------------#\n  codeBuildProjectVerCacheDelete:\n    Type: AWS::CodeBuild::Project\n    Properties:\n      Name: !Sub ${accountAlliasLowerCase}-build-project-ver-cache-delete\n      Artifacts:\n        Type: CODEPIPELINE\n      Description: !Sub Building stage for ${accountAlliasLowerCase} ver cache delete\n      Environment:\n        ComputeType: BUILD_GENERAL1_SMALL\n        EnvironmentVariables:\n          - Name: AWS_ACCOUNT_ID\n            Value: !Ref AWS::AccountId\n          - Name: NGINX_IMAGE_NAME\n            Value: !Sub ${accountAlliasLowerCase}-cache-delete-nginx\n          - Name: PHP_IMAGE_NAME\n            Value: !Sub ${accountAlliasLowerCase}-cache-delete-php\n          - Name: NGINX_CONTAINER_NAME\n            Value: !Sub ${accountAlliasLowerCase}-container-cachedel-nginx\n          - Name: PHP_CONTAINER_NAME\n            Value: !Sub ${accountAlliasLowerCase}-container-cachedel-php\n        Image: aws/codebuild/docker:18.09.0\n        Type: LINUX_CONTAINER\n        PrivilegedMode: True\n      ServiceRole: !Ref codeBuildRoleVerCacheDelete\n      Source:\n        Type: CODEPIPELINE\n        BuildSpec: |\n          version: 0.2 \n          phases:\n            build:\n              commands:\n                - NGINX_REPOSITORY_URI=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${NGINX_IMAGE_NAME}\n                - PHP_REPOSITORY_URI=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${PHP_IMAGE_NAME}\n                - IMAGE_TAG=latest\n                - echo \"[{\\\"name\\\":\\\"${NGINX_CONTAINER_NAME}\\\",\\\"imageUri\\\":\\\"${NGINX_REPOSITORY_URI}:${IMAGE_TAG}\\\"},{\\\"name\\\":\\\"${PHP_CONTAINER_NAME}\\\",\\\"imageUri\\\":\\\"${PHP_REPOSITORY_URI}:${IMAGE_TAG}\\\"}]\"\n                - echo \"[{\\\"name\\\":\\\"${NGINX_CONTAINER_NAME}\\\",\\\"imageUri\\\":\\\"${NGINX_REPOSITORY_URI}:${IMAGE_TAG}\\\"},{\\\"name\\\":\\\"${PHP_CONTAINER_NAME}\\\",\\\"imageUri\\\":\\\"${PHP_REPOSITORY_URI}:${IMAGE_TAG}\\\"}]\" > imagedefinitions.json\n          artifacts:\n              files: imagedefinitions.json\n      TimeoutInMinutes: 30\n# ------------------------------------------------------------#\n#  S3\n# ------------------------------------------------------------#\n  s3bucketforcodepipelineVerCacheDelete:\n    Type: AWS::S3::Bucket\n    Properties:\n      BucketName: !Sub ${accountAlliasLowerCase}-codepipeline-ver-cache-delete\n# ------------------------------------------------------------#\n#  CodePipeline\n# ------------------------------------------------------------#\n  codePipelineVerCacheDelete:\n    Type: AWS::CodePipeline::Pipeline\n    DependsOn: s3bucketforcodepipelineVerCacheDelete\n    Properties:\n      ArtifactStore:\n        Location: !Ref s3bucketforcodepipelineVerCacheDelete\n        Type: S3\n      Name: !Sub ${accountAlliasLowerCase}-codepipeline-ver-cache-delete\n      RestartExecutionOnUpdate: false\n      RoleArn: !GetAtt codePipelineRoleVerCacheDelete.Arn\n      Stages:\n        - Name: Source\n          Actions:\n            - Name: SourceAction\n              ActionTypeId: \n                Category: Source\n                Owner: AWS\n                Provider: ECR\n                Version: 1\n              OutputArtifacts: \n                - Name: SourceArtifact\n              Configuration: \n                RepositoryName: !Sub ${accountAlliasLowerCase}-cache-delete-nginx\n              RunOrder: 1\n        - Name: Build\n          Actions:\n            - Name: CodeBuild\n              InputArtifacts:\n                - Name: SourceArtifact\n              ActionTypeId: \n                Category: Build\n                Owner: AWS\n                Provider: CodeBuild\n                Version: 1\n              Configuration: \n                ProjectName: !Ref codeBuildProjectVerCacheDelete\n              OutputArtifacts: \n                - Name: CodebuildOutput\n              RunOrder: 1\n        - Name: Staging\n          Actions:\n            - Name: Deploy2CacheDelete\n              InputArtifacts:\n                - Name: CodebuildOutput\n              ActionTypeId: \n                Category: Deploy\n                Owner: AWS\n                Provider: ECS\n                Version: 1\n              Configuration:\n                ClusterName: !ImportValue cluster\n                FileName: imagedefinitions.json\n                ServiceName: !ImportValue internalService\n              OutputArtifacts: []\n              RunOrder: 1\n# ------------------------------------------------------------#\n#  CloudWatch Event\n# ------------------------------------------------------------#\n  cloudWatchEventRoleVerCacheDelete:\n    Type: 'AWS::IAM::Role'\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service:\n                - events.amazonaws.com\n            Action: 'sts:AssumeRole'\n      Path: /\n      Policies:\n        - PolicyName: cwe-pipeline-execution\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Effect: Allow\n                Action: 'codepipeline:StartPipelineExecution'\n                Resource: !Join \n                  - ''\n                  - - 'arn:aws:codepipeline:'\n                    - !Ref 'AWS::Region'\n                    - ':'\n                    - !Ref 'AWS::AccountId'\n                    - ':'\n                    - !Ref codePipelineVerCacheDelete\n  cloudwatchEventsRuleVerCacheDelete:\n    Type: AWS::Events::Rule\n    Properties:\n      EventPattern:\n        source:\n          - aws.ecr\n        detail:\n          eventName:\n            - PutImage\n          requestParameters:\n            repositoryName: \n              - !Sub ${accountAlliasLowerCase}-cache-delete-nginx\n            imageTag: \n              - latest\n      Targets:\n        - Arn:  !Join \n          - ''\n          - - 'arn:aws:codepipeline:'\n            - !Ref 'AWS::Region'\n            - ':'\n            - !Ref 'AWS::AccountId'\n            - ':'\n            - !Ref codePipelineVerCacheDelete\n          Id: !Sub ${accountAlliasLowerCase}-codepipeline-ver-cache-delete\n          RoleArn: !GetAtt cloudWatchEventRoleVerCacheDelete.Arn\n\n# ------------------------------------------------------------#\n#  Outputs\n# ------------------------------------------------------------#\nOutputs:\n  codeBuildRoleVerCacheDelete:\n    Value: !Ref codeBuildRoleVerCacheDelete\n    Export:\n      Name: codeBuildRoleVerCacheDelete\n  codePipelineRoleVerCacheDelete:\n    Value: !Ref codePipelineRoleVerCacheDelete\n    Export:\n      Name: codePipelineRoleVerCacheDelete\n  codeBuildProjectVerCacheDelete:\n    Value: !Ref codeBuildProjectVerCacheDelete\n    Export:\n      Name: codeBuildProjectVerCacheDelete\n  s3bucketforcodepipelineVerCacheDelete:\n    Value: !Ref s3bucketforcodepipelineVerCacheDelete\n    Export:\n      Name: s3bucketforcodepipelineVerCacheDelete\n  codePipelineVerCacheDelete:\n    Value: !Ref codePipelineVerCacheDelete\n    Export:\n      Name: codePipelineVerCacheDelete\n  cloudWatchEventRoleVerCacheDelete:\n    Value: !Ref cloudWatchEventRoleVerCacheDelete\n    Export:\n      Name: cloudWatchEventRoleVerCacheDelete\n  cloudwatchEventsRuleVerCacheDelete:\n    Value: !Ref cloudwatchEventsRuleVerCacheDelete\n    Export:\n      Name: cloudwatchEventsRuleVerCacheDelete\n\n"
}
INV-ver-cer01-codepipeline-ver-auth
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: codepipeline\n\n# ------------------------------------------------------------#\n#  Parameters\n# ------------------------------------------------------------#\nParameters:\n  accountAllias:\n    Type: String\n  accountAlliasLowerCase:\n    Type: String\n\nResources:\n# ------------------------------------------------------------#\n#  Role\n# ------------------------------------------------------------#\n  codeBuildRoleVerAuth:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement: \n          - Effect: \"Allow\"\n            Principal: \n              Service: \n                - \"codebuild.amazonaws.com\"\n            Action: \n              - \"sts:AssumeRole\"\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess\n        - arn:aws:iam::aws:policy/AmazonS3FullAccess\n        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess\n  codePipelineRoleVerAuth:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement: \n          - Effect: \"Allow\"\n            Principal: \n              Service: \n                - \"codepipeline.amazonaws.com\"\n            Action: \n              - \"sts:AssumeRole\"\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess\n        - arn:aws:iam::aws:policy/AWSCodeCommitFullAccess\n        - arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess\n        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess\n        - arn:aws:iam::aws:policy/AmazonS3FullAccess\n        - arn:aws:iam::aws:policy/CloudWatchFullAccess\n        - arn:aws:iam::aws:policy/AmazonEC2ContainerServiceFullAccess\n\n# ------------------------------------------------------------#\n#  CodeBuild\n# ------------------------------------------------------------#\n  codeBuildProjectVerAuth:\n    Type: AWS::CodeBuild::Project\n    Properties:\n      Name: !Sub ${accountAlliasLowerCase}-build-project-ver-auth\n      Artifacts:\n        Type: CODEPIPELINE\n      Description: !Sub Building stage for ${accountAlliasLowerCase} ver auth\n      Environment:\n        ComputeType: BUILD_GENERAL1_SMALL\n        EnvironmentVariables:\n          - Name: AWS_ACCOUNT_ID\n            Value: !Ref AWS::AccountId\n          - Name: NGINX_IMAGE_NAME\n            Value: !Sub ${accountAlliasLowerCase}-auth-nginx\n          - Name: PHP_IMAGE_NAME\n            Value: !Sub ${accountAlliasLowerCase}-auth-php\n          - Name: NGINX_CONTAINER_NAME\n            Value: !Sub ${accountAlliasLowerCase}-container-auth-nginx\n          - Name: PHP_CONTAINER_NAME\n            Value: !Sub ${accountAlliasLowerCase}-container-auth-php\n        Image: aws/codebuild/docker:18.09.0\n        Type: LINUX_CONTAINER\n        PrivilegedMode: True\n      ServiceRole: !Ref codeBuildRoleVerAuth\n      Source:\n        Type: CODEPIPELINE\n        BuildSpec: |\n          version: 0.2 \n          phases:\n            build:\n              commands:\n                - NGINX_REPOSITORY_URI=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${NGINX_IMAGE_NAME}\n                - PHP_REPOSITORY_URI=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${PHP_IMAGE_NAME}\n                - IMAGE_TAG=latest\n                - echo \"[{\\\"name\\\":\\\"${NGINX_CONTAINER_NAME}\\\",\\\"imageUri\\\":\\\"${NGINX_REPOSITORY_URI}:${IMAGE_TAG}\\\"},{\\\"name\\\":\\\"${PHP_CONTAINER_NAME}\\\",\\\"imageUri\\\":\\\"${PHP_REPOSITORY_URI}:${IMAGE_TAG}\\\"}]\"\n                - echo \"[{\\\"name\\\":\\\"${NGINX_CONTAINER_NAME}\\\",\\\"imageUri\\\":\\\"${NGINX_REPOSITORY_URI}:${IMAGE_TAG}\\\"},{\\\"name\\\":\\\"${PHP_CONTAINER_NAME}\\\",\\\"imageUri\\\":\\\"${PHP_REPOSITORY_URI}:${IMAGE_TAG}\\\"}]\" > imagedefinitions.json\n          artifacts:\n              files: imagedefinitions.json\n      TimeoutInMinutes: 30\n# ------------------------------------------------------------#\n#  S3\n# ------------------------------------------------------------#\n  s3bucketforcodepipelineVerAuth:\n    Type: AWS::S3::Bucket\n    Properties:\n      BucketName: !Sub ${accountAlliasLowerCase}-codepipeline-ver-auth\n# ------------------------------------------------------------#\n#  CodePipeline\n# ------------------------------------------------------------#\n  codePipelineVerAuth:\n    Type: AWS::CodePipeline::Pipeline\n    DependsOn: s3bucketforcodepipelineVerAuth\n    Properties:\n      ArtifactStore:\n        Location: !Ref s3bucketforcodepipelineVerAuth\n        Type: S3\n      Name: !Sub ${accountAlliasLowerCase}-codepipeline-ver-auth\n      RestartExecutionOnUpdate: false\n      RoleArn: !GetAtt codePipelineRoleVerAuth.Arn\n      Stages:\n        - Name: Source\n          Actions:\n            - Name: SourceAction\n              ActionTypeId: \n                Category: Source\n                Owner: AWS\n                Provider: ECR\n                Version: 1\n              OutputArtifacts: \n                - Name: SourceArtifact\n              Configuration: \n                RepositoryName: !Sub ${accountAlliasLowerCase}-auth-nginx\n              RunOrder: 1\n        - Name: Build\n          Actions:\n            - Name: CodeBuild\n              InputArtifacts:\n                - Name: SourceArtifact\n              ActionTypeId: \n                Category: Build\n                Owner: AWS\n                Provider: CodeBuild\n                Version: 1\n              Configuration: \n                ProjectName: !Ref codeBuildProjectVerAuth\n              OutputArtifacts: \n                - Name: CodebuildOutput\n              RunOrder: 1\n        - Name: Staging\n          Actions:\n            - Name: Deploy2Auth\n              InputArtifacts:\n                - Name: CodebuildOutput\n              ActionTypeId: \n                Category: Deploy\n                Owner: AWS\n                Provider: ECS\n                Version: 1\n              Configuration:\n                ClusterName: !ImportValue cluster\n                FileName: imagedefinitions.json\n                ServiceName: !ImportValue authService\n              OutputArtifacts: []\n              RunOrder: 1\n# ------------------------------------------------------------#\n#  CloudWatch Event\n# ------------------------------------------------------------#\n  cloudWatchEventRoleVerAuth:\n    Type: 'AWS::IAM::Role'\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service:\n                - events.amazonaws.com\n            Action: 'sts:AssumeRole'\n      Path: /\n      Policies:\n        - PolicyName: cwe-pipeline-execution\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Effect: Allow\n                Action: 'codepipeline:StartPipelineExecution'\n                Resource: !Join \n                  - ''\n                  - - 'arn:aws:codepipeline:'\n                    - !Ref 'AWS::Region'\n                    - ':'\n                    - !Ref 'AWS::AccountId'\n                    - ':'\n                    - !Ref codePipelineVerAuth\n  cloudwatchEventsRuleVerAuth:\n    Type: AWS::Events::Rule\n    Properties:\n      EventPattern:\n        source:\n          - aws.ecr\n        detail:\n          eventName:\n            - PutImage\n          requestParameters:\n            repositoryName: \n              - !Sub ${accountAlliasLowerCase}-auth-nginx\n            imageTag: \n              - latest\n      Targets:\n        - Arn:  !Join \n          - ''\n          - - 'arn:aws:codepipeline:'\n            - !Ref 'AWS::Region'\n            - ':'\n            - !Ref 'AWS::AccountId'\n            - ':'\n            - !Ref codePipelineVerAuth\n          Id: !Sub ${accountAlliasLowerCase}-codepipeline-ver-auth\n          RoleArn: !GetAtt cloudWatchEventRoleVerAuth.Arn\n\n# ------------------------------------------------------------#\n#  Outputs\n# ------------------------------------------------------------#\nOutputs:\n  codeBuildRoleVerAuth:\n    Value: !Ref codeBuildRoleVerAuth\n    Export:\n      Name: codeBuildRoleVerAuth\n  codePipelineRoleVerAuth:\n    Value: !Ref codePipelineRoleVerAuth\n    Export:\n      Name: codePipelineRoleVerAuth\n  codeBuildProjectVerAuth:\n    Value: !Ref codeBuildProjectVerAuth\n    Export:\n      Name: codeBuildProjectVerAuth\n  s3bucketforcodepipelineVerAuth:\n    Value: !Ref s3bucketforcodepipelineVerAuth\n    Export:\n      Name: s3bucketforcodepipelineVerAuth\n  codePipelineVerAuth:\n    Value: !Ref codePipelineVerAuth\n    Export:\n      Name: codePipelineVerAuth\n  cloudWatchEventRoleVerAuth:\n    Value: !Ref cloudWatchEventRoleVerAuth\n    Export:\n      Name: cloudWatchEventRoleVerAuth\n  cloudwatchEventsRuleVerAuth:\n    Value: !Ref cloudwatchEventsRuleVerAuth\n    Export:\n      Name: cloudwatchEventsRuleVerAuth\n\n"
}
INV-ver-cer01-internal-service
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: internal ecs service\n\nParameters:\n  accountAllias:\n    Type: String\n  accountAlliasLowerCase:\n    Type: String\n  authDesiredCount:\n    Type: Number\n  authTaskArn:\n    Type: String\n  cacheDelDesiredCount:\n    Type: Number\n  cacheTaskArn:\n    Type: String\n  dnsNamespace:\n    Type: String\n  dnsRecord:\n    Type: String\n\nResources:\n  privateDnsNamespace:\n    Type: AWS::ServiceDiscovery::PrivateDnsNamespace\n    Properties:\n      Vpc: !ImportValue VPC\n      Description: !Ref dnsNamespace\n      Name: !Ref dnsNamespace\n\n  serviceDiscovery:\n    Type: AWS::ServiceDiscovery::Service\n    Properties:\n      HealthCheckCustomConfig:\n        FailureThreshold: 1\n      DnsConfig:\n        DnsRecords:\n          - Type: A\n            TTL: 60\n        NamespaceId: !GetAtt privateDnsNamespace.Id\n      Name: !Ref dnsRecord\n  authService:\n    Type: AWS::ECS::Service\n    Properties:\n      Cluster: !ImportValue cluster\n      DeploymentConfiguration:\n        MaximumPercent: 200\n        MinimumHealthyPercent: 50\n      DesiredCount: !Ref authDesiredCount\n      LaunchType: FARGATE\n      ServiceRegistries:\n        - RegistryArn: !GetAtt serviceDiscovery.Arn\n      NetworkConfiguration:\n        AwsvpcConfiguration:\n          AssignPublicIp: DISABLED\n          SecurityGroups: \n            - !ImportValue internalApplicationSecuritygroup\n          Subnets: \n            - !ImportValue PrivateSubnet1a\n            - !ImportValue PrivateSubnet1c\n      ServiceName: !Sub ${accountAlliasLowerCase}-auth-service\n      TaskDefinition: !Ref authTaskArn\n  internalService:\n    Type: AWS::ECS::Service\n    Properties:\n      Cluster: !ImportValue cluster\n      DeploymentConfiguration:\n        MaximumPercent: 200\n        MinimumHealthyPercent: 50\n      DesiredCount: !Ref cacheDelDesiredCount\n      LaunchType: FARGATE\n      LoadBalancers:\n        - ContainerName: !Sub ${accountAlliasLowerCase}-container-cachedel-nginx\n          ContainerPort: 80\n          TargetGroupArn: !ImportValue internalTargetGroup\n      NetworkConfiguration:\n        AwsvpcConfiguration:\n          AssignPublicIp: DISABLED\n          SecurityGroups: \n            - !ImportValue internalApplicationSecuritygroup\n          Subnets: \n            - !ImportValue PrivateSubnet1a\n            - !ImportValue PrivateSubnet1c\n      ServiceName: !Sub ${accountAlliasLowerCase}-internal-service\n      TaskDefinition: !Ref cacheTaskArn\n\nOutputs:\n  authService:\n    Value: !Ref authService\n    Export:\n      Name: authService\n  internalService:\n    Value: !Ref internalService\n    Export:\n      Name: internalService\n\n"
}
INV-ver-cer01-public-service
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: public ecs service\n\nParameters:\n  accountAllias:\n    Type: String\n  accountAlliasLowerCase:\n    Type: String\n  proxyDesiredCount:\n    Type: Number\n  proxyTaskArn:\n    Type: String\n\nResources:\n  publicService:\n    Type: AWS::ECS::Service\n    Properties:\n      Cluster: !ImportValue cluster\n      DeploymentConfiguration:\n        MaximumPercent: 200\n        MinimumHealthyPercent: 50\n      DesiredCount: !Ref proxyDesiredCount\n      LaunchType: FARGATE\n      LoadBalancers:\n        - ContainerName: !Sub ${accountAlliasLowerCase}-container-proxy-nginx\n          ContainerPort: 80\n          TargetGroupArn:\n            Fn::ImportValue:\n              !Sub ${accountAlliasLowerCase}-publicAlbTargetGroup\n      NetworkConfiguration:\n        AwsvpcConfiguration:\n          AssignPublicIp: DISABLED\n          SecurityGroups: \n            - Fn::ImportValue:\n                !Sub ${accountAlliasLowerCase}-publicAlbSecuritygroup\n          Subnets: \n            - !ImportValue PrivateSubnet1a\n            - !ImportValue PrivateSubnet1c\n      ServiceName: !Sub ${accountAlliasLowerCase}-public-service\n\n      TaskDefinition: !Ref proxyTaskArn\n\nOutputs:\n  publicService:\n    Value: !Ref publicService\n    Export:\n      Name: publicService\n\n"
}
INV-ver-cer01-task
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: ecs task definition\n\nParameters:\n  accountAllias:\n    Type: String\n  accountAlliasLowerCase:\n    Type: String\n  cpuProxy:\n    Type: Number\n  memoryProxy:\n    Type: Number\n  imageUriProxyNginx:\n    Type: String\n  cpuAuth:\n    Type: Number\n  memoryAuth:\n    Type: Number\n  imageUriAuthNginx:\n    Type: String\n  imageUriAuthPhp:\n    Type: String\n  cpuCacheDel:\n    Type: Number\n  memoryCacheDel:\n    Type: Number\n  imageUriCacheDelNginx:\n    Type: String\n  imageUriCacheDelPhp:\n    Type: String\n  environmentIdentifier:\n    Type: String\n  logLevel:\n    Type: String\n  publicHtcDomain:\n    Type: String\n  authApiDomain:\n    Type: String\n  authInfoCoopApiDomain:\n    Type: String\n  premiumCookiePageUrl:\n    Type: String\n  authErrorURL:\n    Type: String\n  carSwitchingURL:\n    Type: String\n  changeMasterIdURL:\n    Type: String\n  registRequestURL:\n    Type: String\n  migrateInfoURL:\n    Type: String\n  authRedirectURL:\n    Type: String\n  excludeRedirectURL:\n    Type: String\n  authSorryURL:\n    Type: String\n  authDivision:\n    Type: String\n  maxLoginNgNum:\n    Type: Number\n  lockOutTime:\n    Type: Number\n  cacheExpireTime:\n    Type: Number\n  cookieExpire:\n    Type: String\n  ticketTimeout:\n    Type: Number\n  gtcServer:\n    Type: String\n  vehicleSessionTime:\n    Type: Number\n  ssoClpherKey:\n    Type: String\n  pwPublicKey:\n    Type: String\n  pwPrivateKey:\n    Type: String\n  gtcApiKey:\n    Type: String\n  gtcAwsAccessId:\n    Type: String\n  gtcAwsSecretKey:\n    Type: String\n\nResources:\n  ecsTaskExecutionRole:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement: \n          - Effect: \"Allow\"\n            Principal: \n              Service: \n                - \"ecs-tasks.amazonaws.com\"\n            Action: \n              - \"sts:AssumeRole\"\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy\n      RoleName: !Sub ${accountAlliasLowerCase}-ecsTaskExecutionRole\n  proxyTaskdefinition:\n    Type: AWS::ECS::TaskDefinition\n    DependsOn: ecsTaskExecutionRole\n    Properties:\n      Family: !Sub ${accountAlliasLowerCase}-task-proxy\n      RequiresCompatibilities:\n        - FARGATE\n      Cpu: !Ref cpuProxy\n      Memory: !Ref memoryProxy\n      NetworkMode: awsvpc\n      ExecutionRoleArn: !GetAtt ecsTaskExecutionRole.Arn\n      TaskRoleArn: !GetAtt ecsTaskExecutionRole.Arn\n      ContainerDefinitions:\n        - Name: !Sub ${accountAlliasLowerCase}-container-proxy-nginx\n          Image: !Ref imageUriProxyNginx\n          PortMappings:\n            - ContainerPort: 80\n          Environment:\n            - Name: ENVIRONMENT_IDENTIFIER\n              Value: !Ref environmentIdentifier\n            - Name: LOG_LEVEL\n              Value: !Ref logLevel\n            - Name: PUBLIC_HTC_DOMAIN\n              Value: !Ref publicHtcDomain\n            - Name: AUTH_API_DOMAIN\n              Value: !Ref authApiDomain\n          HealthCheck:\n            Command: [ \"CMD-SHELL\", \"curl -f http://localhost/healthcheck || exit 1\" ]\n            Interval: 30\n            Retries: 3\n            StartPeriod: 3\n            Timeout: 3\n          LogConfiguration:\n            LogDriver: awslogs\n            Options:\n              awslogs-region: !Ref AWS::Region\n              awslogs-group: !ImportValue logGroup\n              awslogs-stream-prefix: !Sub ${accountAlliasLowerCase}-proxy-nginx\n          Ulimits:\n            - Name: nofile\n              SoftLimit: 65535\n              HardLimit: 65535\n              \n  authTaskdefinition:\n    Type: AWS::ECS::TaskDefinition\n    DependsOn: ecsTaskExecutionRole\n    Properties:\n      Family: !Sub ${accountAlliasLowerCase}-task-auth\n      RequiresCompatibilities:\n        - FARGATE\n      Cpu: !Ref cpuAuth\n      Memory: !Ref memoryAuth\n      NetworkMode: awsvpc\n      ExecutionRoleArn: !GetAtt ecsTaskExecutionRole.Arn\n      TaskRoleArn: !GetAtt ecsTaskExecutionRole.Arn\n      Volumes:\n        - Name: !Sub ${accountAlliasLowerCase}-auth\n      ContainerDefinitions:\n        - Name: !Sub ${accountAlliasLowerCase}-container-auth-nginx\n          Image: !Ref imageUriAuthNginx\n          PortMappings:\n            - ContainerPort: 80\n          Environment:\n            - Name: ENVIRONMENT_IDENTIFIER\n              Value: !Ref environmentIdentifier\n            - Name: LOG_LEVEL\n              Value: !Ref logLevel\n          HealthCheck:\n            Command: [ \"CMD-SHELL\", \"curl -f http://localhost/healthcheck || exit 1\" ]\n            Interval: 30\n            Retries: 3\n            StartPeriod: 3\n            Timeout: 3\n          VolumesFrom:\n            - SourceContainer: !Sub ${accountAlliasLowerCase}-container-auth-php\n          LogConfiguration:\n            LogDriver: awslogs\n            Options:\n              awslogs-region: !Ref AWS::Region\n              awslogs-group: !ImportValue logGroup\n              awslogs-stream-prefix: !Sub ${accountAlliasLowerCase}-auth-nginx\n          Ulimits:\n            - Name: nofile\n              SoftLimit: 65535\n              HardLimit: 65535\n        - Name: !Sub ${accountAlliasLowerCase}-container-auth-php\n          Image: !Ref imageUriAuthPhp\n          PortMappings:\n            - ContainerPort: 9000\n          Environment:\n            - Name: ENVIRONMENT_IDENTIFIER\n              Value: !Ref environmentIdentifier\n            - Name: LOG_LEVEL\n              Value: !Ref logLevel\n            - Name: AUTH_API_DOMAIN\n              Value: !Ref authApiDomain\n            - Name: AUTH_INFO_COOP_API_DOMAIN\n              Value: !Ref authInfoCoopApiDomain\n            - Name: PREMIUM_COOKIE_PAGE_URL\n              Value: !Ref premiumCookiePageUrl\n            - Name: AUTH_ERROR_URL\n              Value: !Ref authErrorURL\n            - Name: CAR_SWITCHING_URL\n              Value: !Ref carSwitchingURL\n            - Name: CHANGE_MASTER_ID_URL\n              Value: !Ref changeMasterIdURL\n            - Name: REGIST_REQUEST_URL\n              Value: !Ref registRequestURL\n            - Name: MIGRATE_INFO_URL\n              Value: !Ref migrateInfoURL\n            - Name: AUTH_REDIRECT_URL\n              Value: !Ref authRedirectURL\n            - Name: EXCLUDE_REDIRECT_URL\n              Value: !Ref excludeRedirectURL\n            - Name: AUTH_SORRY_URL\n              Value: !Ref authSorryURL\n            - Name: AUTH_DIVISION\n              Value: !Ref authDivision\n            - Name: MAX_LOGIN_NG_NUM\n              Value: !Ref maxLoginNgNum\n            - Name: LOCK_OUT_TIME\n              Value: !Ref lockOutTime\n            - Name: CACHE_SERVER\n              Value: !ImportValue elastiCacheEndPoint\n            - Name: CACHE_EXPIRE_TIME\n              Value: !Ref cacheExpireTime\n            - Name: COOKIE_EXPIRE\n              Value: !Ref cookieExpire\n            - Name: TICKET_TIMEOUT\n              Value: !Ref ticketTimeout\n            - Name: GTC_SERVER\n              Value: !Ref gtcServer\n            - Name: VEHICLE_SESSION_TIME\n              Value: !Ref vehicleSessionTime\n            - Name: SSO_CIPHER_KEY\n              Value: !Ref ssoClpherKey\n            - Name: PW_PUBLIC_KEY\n              Value: !Ref pwPublicKey\n            - Name: PW_PRIVATE_KEY\n              Value: !Ref pwPrivateKey\n            - Name: GTC_API_KEY\n              Value: !Ref gtcApiKey\n            - Name: GTC_AWS_ACCESS_ID\n              Value: !Ref gtcAwsAccessId\n            - Name: GTC_AWS_SECRET_KEY\n              Value: !Ref gtcAwsSecretKey\n          MountPoints:\n            - SourceVolume: !Sub ${accountAlliasLowerCase}-auth\n              ContainerPath: !Sub /var/www/auth\n          LogConfiguration:\n            LogDriver: awslogs\n            Options:\n              awslogs-region: !Ref AWS::Region\n              awslogs-group: !ImportValue logGroup\n              awslogs-stream-prefix: !Sub ${accountAlliasLowerCase}-auth-php\n          Ulimits:\n            - Name: nofile\n              SoftLimit: 65535\n              HardLimit: 65535\n\n  cacheDelTaskdefinition:\n    Type: AWS::ECS::TaskDefinition\n    DependsOn: ecsTaskExecutionRole\n    Properties:\n      Family: !Sub ${accountAlliasLowerCase}-task-cachedel\n      RequiresCompatibilities:\n        - FARGATE\n      Cpu: !Ref cpuCacheDel\n      Memory: !Ref memoryCacheDel\n      NetworkMode: awsvpc\n      ExecutionRoleArn: !GetAtt ecsTaskExecutionRole.Arn\n      TaskRoleArn: !GetAtt ecsTaskExecutionRole.Arn\n      Volumes:\n        - Name: !Sub ${accountAlliasLowerCase}-cachedel\n      ContainerDefinitions:\n        - Name: !Sub ${accountAlliasLowerCase}-container-cachedel-nginx\n          Image: !Ref imageUriCacheDelNginx\n          PortMappings:\n            - ContainerPort: 80\n          Environment:\n            - Name: ENVIRONMENT_IDENTIFIER\n              Value: !Ref environmentIdentifier\n            - Name: LOG_LEVEL\n              Value: !Ref logLevel\n            - Name: CACHE_SERVER\n              Value: !ImportValue elastiCacheEndPoint\n          HealthCheck:\n            Command: [ \"CMD-SHELL\", \"curl -f http://localhost/healthcheck || exit 1\" ]\n            Interval: 30\n            Retries: 3\n            StartPeriod: 3\n            Timeout: 3\n          VolumesFrom:\n            - SourceContainer: !Sub ${accountAlliasLowerCase}-container-cachedel-php\n          LogConfiguration:\n            LogDriver: awslogs\n            Options:\n              awslogs-region: !Ref AWS::Region\n              awslogs-group: !ImportValue logGroup\n              awslogs-stream-prefix: !Sub ${accountAlliasLowerCase}-cachedel-nginx\n          Ulimits:\n            - Name: nofile\n              SoftLimit: 65535\n              HardLimit: 65535              \n        - Name: !Sub ${accountAlliasLowerCase}-container-cachedel-php\n          Image: !Ref imageUriCacheDelPhp\n          PortMappings:\n            - ContainerPort: 9000\n          Environment:\n            - Name: ENVIRONMENT_IDENTIFIER\n              Value: !Ref environmentIdentifier\n            - Name: LOG_LEVEL\n              Value: !Ref logLevel\n            - Name: CACHE_SERVER\n              Value: !ImportValue elastiCacheEndPoint\n          MountPoints:\n            - SourceVolume: !Sub ${accountAlliasLowerCase}-cachedel\n              ContainerPath: !Sub /var/www/cache_del\n          LogConfiguration:\n            LogDriver: awslogs\n            Options:\n              awslogs-region: !Ref AWS::Region\n              awslogs-group: !ImportValue logGroup\n              awslogs-stream-prefix: !Sub ${accountAlliasLowerCase}-cachedel-php\n          Ulimits:\n            - Name: nofile\n              SoftLimit: 65535\n              HardLimit: 65535\n                            \nOutputs:\n  ecsTaskExecutionRole:\n    Value: !Ref ecsTaskExecutionRole\n    Export:\n      Name: ecsTaskExecutionRole\n  proxyTaskDefinition:\n    Value: !Ref proxyTaskdefinition\n    Export:\n      Name: proxyTaskDefinition\n  authTaskdefinition:\n    Value: !Ref authTaskdefinition\n    Export:\n      Name: authTaskdefinition\n  cacheDelTaskdefinition:\n    Value: !Ref cacheDelTaskdefinition\n    Export:\n      Name: cacheDelTaskdefinition\n"
}
StackSet-InfraAdmin-CreateIamRole-9d41c5b6-1d12-4506-badc-63b96e1110fc
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": {
        "AWSTemplateFormatVersion": "2010-09-09", 
        "Description": "Template for Creating IAM Role to Switch from Internavi Login AWS Account", 
        "Parameters": {
            "TrustedAWSAccountId": {
                "AllowedPattern": "^[0-9]*$", 
                "Type": "String", 
                "Default": "975196479634", 
                "Description": "Trusted AWS Account ID"
            }, 
            "IAMRoleName": {
                "Type": "String", 
                "Default": "InfraAdmin", 
                "Description": "IAM Role Name"
            }
        }, 
        "Resources": {
            "IAMRoleForEngineer": {
                "Type": "AWS::IAM::Role", 
                "Properties": {
                    "AssumeRolePolicyDocument": {
                        "Version": "2012-10-17", 
                        "Statement": [
                            {
                                "Effect": "Allow", 
                                "Principal": {
                                    "AWS": {
                                        "Fn::Join": [
                                            "", 
                                            [
                                                "arn:aws:iam::", 
                                                {
                                                    "Ref": "TrustedAWSAccountId"
                                                }, 
                                                ":user/", 
                                                "JV010031"
                                            ]
                                        ]
                                    }
                                }, 
                                "Action": [
                                    "sts:AssumeRole"
                                ], 
                                "Condition": {
                                    "Bool": {
                                        "aws:MultiFactorAuthPresent": "true"
                                    }
                                }
                            }, 
                            {
                                "Effect": "Allow", 
                                "Principal": {
                                    "AWS": {
                                        "Fn::Join": [
                                            "", 
                                            [
                                                "arn:aws:iam::", 
                                                {
                                                    "Ref": "TrustedAWSAccountId"
                                                }, 
                                                ":user/", 
                                                "JV010024"
                                            ]
                                        ]
                                    }
                                }, 
                                "Action": [
                                    "sts:AssumeRole"
                                ], 
                                "Condition": {
                                    "Bool": {
                                        "aws:MultiFactorAuthPresent": "true"
                                    }
                                }
                            }
                        ]
                    }, 
                    "ManagedPolicyArns": [
                        "arn:aws:iam::aws:policy/AdministratorAccess"
                    ], 
                    "Path": "/", 
                    "RoleName": {
                        "Ref": "IAMRoleName"
                    }
                }
            }
        }, 
        "Outputs": {
            "IAMRoleArn": {
                "Value": {
                    "Fn::GetAtt": [
                        "IAMRoleForEngineer", 
                        "Arn"
                    ]
                }
            }, 
            "LinkForSwitchRole": {
                "Value": {
                    "Fn::Join": [
                        "", 
                        [
                            "https://signin.aws.amazon.com/switchrole?roleName=", 
                            {
                                "Ref": "IAMRoleName"
                            }, 
                            "&account=", 
                            {
                                "Ref": "AWS::AccountId"
                            }
                        ]
                    ]
                }
            }
        }
    }
}
StackSet-OpeAdmin-CreateIamRole-449d1210-ad59-4953-90d3-fae653de27c4
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "{\n  \"AWSTemplateFormatVersion\" : \"2010-09-09\",\n  \"Description\" : \"Template for Creating IAM Role to Switch from Internavi Login AWS Account\",\n  \"Parameters\" : {\n    \"TrustedAWSAccountId\" : {\n      \"AllowedPattern\" : \"^[0-9]*$\",\n      \"Type\" : \"String\",\n      \"Default\" : \"975196479634\",\n      \"Description\" : \"Trusted AWS Account ID\"\n    },\n    \"IAMRoleName\": {\n      \"Type\": \"String\",\n      \"Default\": \"OpeAdminRole\",\n      \"Description\": \"IAM Role Name\"\n    }\n  },\n  \"Resources\" : {\n    \"IAMRoleForEngineer\": {\n      \"Type\": \"AWS::IAM::Role\",\n      \"Properties\": {\n        \"AssumeRolePolicyDocument\": {\n          \"Version\": \"2012-10-17\",\n          \"Statement\": [\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010002\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010025\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010026\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010027\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010028\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010030\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            }\n          ]\n        },\n        \"ManagedPolicyArns\": [\n          \"arn:aws:iam::aws:policy/AdministratorAccess\"\n        ],\n        \"Path\": \"/\",\n        \"RoleName\": { \"Ref\" : \"IAMRoleName\" }\n      }\n    }\n  },\n  \"Outputs\" : {\n    \"IAMRoleArn\": {\n      \"Value\": { \"Fn::GetAtt\" : [ \"IAMRoleForEngineer\", \"Arn\" ] }\n    },\n    \"LinkForSwitchRole\": {\n      \"Value\": { \"Fn::Join\": [ \"\", [ \"https://signin.aws.amazon.com/switchrole?roleName=\", { \"Ref\" : \"IAMRoleName\" }, \"&account=\", { \"Ref\" : \"AWS::AccountId\" } ] ] }\n    }\n  }\n}\n"
}
INV-ver-cer01-ver-ecr-access-role
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: codepipeline\n\n# ------------------------------------------------------------#\n#  Parameters\n# ------------------------------------------------------------#\nParameters:\n  accountAllias:\n    Type: String\n  accountAlliasLowerCase:\n    Type: String\n  devAwsAccountId:\n    Type: String\n\nResources:\n# ------------------------------------------------------------#\n#  Role\n# ------------------------------------------------------------#\n  verEcrAccessRole:\n    Type: AWS::IAM::Role\n    Properties:\n      RoleName: ver-ecr-access-role\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement: \n          - Effect: \"Allow\"\n            Principal: \n              AWS: \n                - !Sub arn:aws:iam::${devAwsAccountId}:root\n            Action: \n              - \"sts:AssumeRole\"\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess\n\n# ------------------------------------------------------------#\n#  Outputs\n# ------------------------------------------------------------#\nOutputs:\n  verEcrAccessRole:\n    Value: !Ref verEcrAccessRole\n    Export:\n      Name: verEcrAccessRole"
}
INV-ver-cer01-bastion
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: 2010-09-09\nDescription: Bastion EC2\nParameters:\n  accountAllias:\n    Type: String\n  amiId:\n    Type: String\nResources:\n  SSHSecurityGroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      VpcId: !ImportValue VPC\n      GroupName: !Sub ${accountAllias}-bastion-sg\n      GroupDescription: !Sub ${accountAllias}-bastion-sg\n      Tags:\n        - Key: Name\n          Value: !Sub ${accountAllias}-bastion-sg\n  EC2:\n    Type: AWS::EC2::Instance\n    Properties:\n      ImageId: !Ref amiId\n      InstanceType: t3.micro\n      KeyName: !Sub ${accountAllias}-bastion-key\n      NetworkInterfaces:\n        - AssociatePublicIpAddress: true\n          SubnetId: !ImportValue PublicSubnet1a\n          DeviceIndex: 0\n          GroupSet:\n            - !Ref SSHSecurityGroup\n      UserData:\n        Fn::Base64: !Sub |\n          #!/bin/bash\n          yum -y update\n      Tags:\n        - Key: Name\n          Value: !Sub ${accountAllias}-bastion\n  EIP:\n    Type: AWS::EC2::EIP\n    Properties:\n      Domain: vpc\n  AssociateEIP:\n    Type: AWS::EC2::EIPAssociation\n    Properties:\n      EIP: !Ref EIP\n      InstanceId: !Ref EC2\nOutputs:\n  EC2:\n    Value: !Ref EC2\n    Export:\n      Name: BastionEC2\n  EIP:\n    Value: !Ref EIP\n    Export:\n      Name: BastionIP\n"
}
INV-ver-cer01-ecs-loggroup
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: ecs and loggroup\n\nParameters:\n  accountAllias:\n    Type: String\n  accountAlliasLowerCase:\n    Type: String\n  logGroupName:\n    Type: String\n\nResources:\n  ecs:\n    Type: AWS::ECS::Cluster\n    Properties:\n      ClusterName: !Sub ${accountAlliasLowerCase}-cluster\n  logGroup:\n    Type: AWS::Logs::LogGroup\n    Properties: \n      LogGroupName: !Ref logGroupName\n\nOutputs:\n  cluster:\n    Value: !Ref ecs\n    Export:\n      Name: cluster\n  logGroup:\n    Value: !Ref logGroup\n    Export:\n      Name: logGroup"
}
INV-ver-cer01-elasticache
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: elasticache service\n\nParameters:\n  accountAllias:\n    Type: String\n  accountAlliasLowerCase:\n    Type: String\n  publicSecurityGroupCidr:\n    Type: String\n  instanceType:\n    Type: String\n  instanceNum:\n    Type: Number\n\nMappings: \n  ElastiCache:\n    Env:\n      SnapshotRetentionDays: 7\n      SnapshotBackWindow: '18:00-19:00'\n      MaintenanceWindow: 'tue:19:00-tue:20:00'\n\nResources:\n  elastiCacheSG:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupName: !Sub ${accountAlliasLowerCase}-elasticache-sg\n      GroupDescription: !Sub ${accountAlliasLowerCase}-elasticache-sg\n      SecurityGroupIngress:\n        - IpProtocol: tcp\n          FromPort: '6379'\n          ToPort: '6379'\n          CidrIp: !Ref publicSecurityGroupCidr\n      VpcId: !ImportValue VPC\n\n  elastiCacheSubnetGroup:\n    Type: AWS::ElastiCache::SubnetGroup\n    Properties:\n      CacheSubnetGroupName: !Sub ${accountAlliasLowerCase}-elasticache-subnetgroup\n      Description: !Sub ${accountAlliasLowerCase}-elasticache-subnetgroup\n      SubnetIds:\n        - !ImportValue PrivateSubnet1a\n        - !ImportValue PrivateSubnet1c\n\n  elastiCacheParameterGroup: \n    Type: \"AWS::ElastiCache::ParameterGroup\"\n    Properties: \n      Description: !Sub ${accountAlliasLowerCase}-elasticache-parametergroup\n      CacheParameterGroupFamily: \"redis5.0\"\n      Properties: \n        timeout: \"60\"\n\n  elastiCacheReplicationGroup:\n    Type: \"AWS::ElastiCache::ReplicationGroup\"\n    Properties:\n      AutomaticFailoverEnabled: true\n      AutoMinorVersionUpgrade: true\n      CacheNodeType: !Ref instanceType\n      CacheParameterGroupName: !Ref elastiCacheParameterGroup\n      CacheSubnetGroupName: !Ref elastiCacheSubnetGroup\n      Engine: 'redis'\n      EngineVersion: '5.0.0'\n      NumCacheClusters: !Ref instanceNum\n      Port: 6379\n      PreferredMaintenanceWindow: !FindInMap [ElastiCache, Env,MaintenanceWindow]\n      ReplicationGroupDescription: !Sub ${accountAlliasLowerCase}-elasticache\n      ReplicationGroupId: !Sub ${accountAlliasLowerCase}-cache\n      SecurityGroupIds:\n        - !Ref elastiCacheSG\n      SnapshotRetentionLimit: !FindInMap [ElastiCache, Env, SnapshotRetentionDays]\n      SnapshotWindow: !FindInMap [ElastiCache, Env,SnapshotBackWindow]\n      Tags:\n        - Key: Name\n          Value: !Sub ${accountAlliasLowerCase}-elasticache\n\nOutputs:\n  ElastiCacheEndPoint:\n    Value: !GetAtt elastiCacheReplicationGroup.PrimaryEndPoint.Address\n    Export:\n      Name: elastiCacheEndPoint\n\n  ElastiCachePort:\n    Value: !GetAtt elastiCacheReplicationGroup.PrimaryEndPoint.Port\n    Export:\n      Name: elastiCachePort\n\n\n"
}
INV-ver-cer01-codecommit-app-ecr
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: codecommit and ecr\n\nParameters:\n  accountAllias:\n    Type: String\n  accountAlliasLowerCase:\n    Type: String\n\n\nResources:\n  codecommitProxy:\n    Type: AWS::CodeCommit::Repository\n    Properties:\n      RepositoryName: !Sub ${accountAllias}-proxy\n      RepositoryDescription: !Sub ${accountAllias}-proxy\n  codecommitAuth:\n    Type: AWS::CodeCommit::Repository\n    Properties:\n      RepositoryName: !Sub ${accountAllias}-auth\n      RepositoryDescription: !Sub ${accountAllias}-auth\n  codecommitCacheDel:\n    Type: AWS::CodeCommit::Repository\n    Properties:\n      RepositoryName: !Sub ${accountAllias}-cache-delete\n      RepositoryDescription: !Sub ${accountAllias}-cache-delete\n  ecrProxyNginx:\n    Type: AWS::ECR::Repository\n    Properties: \n      RepositoryName: !Sub ${accountAlliasLowerCase}-proxy-nginx\n  ecrAuthNginx:\n    Type: AWS::ECR::Repository\n    Properties: \n      RepositoryName: !Sub ${accountAlliasLowerCase}-auth-nginx\n  ecrAuthPhp:\n    Type: AWS::ECR::Repository\n    Properties: \n      RepositoryName: !Sub ${accountAlliasLowerCase}-auth-php\n  ecrCacheDelNginx:\n    Type: AWS::ECR::Repository\n    Properties: \n      RepositoryName: !Sub ${accountAlliasLowerCase}-cache-delete-nginx\n  ecrCacheDelPhp:\n    Type: AWS::ECR::Repository\n    Properties: \n      RepositoryName: !Sub ${accountAlliasLowerCase}-cache-delete-php\n\nOutputs:\n  codecommitProxy:\n    Value: !Ref codecommitProxy\n    Export:\n      Name: codecommitProxy\n  codecommitAuth:\n    Value: !Ref codecommitAuth\n    Export:\n      Name: codecommitAuth\n  codecommitCacheDel:\n    Value: !Ref codecommitCacheDel\n    Export:\n      Name: codecommitCacheDel\n  ecrProxyNginx:\n    Value: !GetAtt ecrProxyNginx.Arn\n    Export:\n      Name: ecrProxy\n  ecrAuthNginx:\n    Value: !GetAtt ecrAuthNginx.Arn\n    Export:\n      Name: ecrAuthNginx\n  ecrAuthPhp:\n    Value: !GetAtt ecrAuthPhp.Arn\n    Export:\n      Name: ecrAuthPhp\n  ecrCacheDelNginx:\n    Value: !GetAtt ecrCacheDelNginx.Arn\n    Export:\n      Name: ecrCacheDelNginx\n  ecrCacheDelPhp:\n    Value: !GetAtt ecrCacheDelPhp.Arn\n    Export:\n      Name: ecrCacheDelPhp\n\n"
}
INV-ver-cer01-public-alb
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: public security group and alb\n\nParameters:\n  publicSecurityGroupCidr:\n    Type: String\n  apiName:\n    Type: String\n  certificate:\n    Type: String\n  ruledTargetGtoup1:\n    Type: String\n  ruledTarget1Ip1:\n    Type: String\n  ruledTarget1Ip2:\n    Type: String\n  ruledTargetGtoup2:\n    Type: String\n  ruledTarget2Ip1:\n    Type: String\n  ruledTarget2Ip2:\n    Type: String\n  path1:\n    Type: String\n  path2:\n    Type: String\n  path3:\n    Type: String\n  path4:\n    Type: String\n  path5:\n    Type: String\n\nResources:\n  publicAlbSecuritygroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupName: !Sub ${apiName}-alb-sg\n      GroupDescription: !Sub ${apiName}-alb-sg\n      Tags:\n        - Key: Name\n          Value: !Sub ${apiName}-alb-sg\n      VpcId: !ImportValue VPC\n      SecurityGroupIngress:\n      - IpProtocol: tcp\n        FromPort: '443'\n        ToPort: '443'\n        CidrIp: !Ref publicSecurityGroupCidr\n      - IpProtocol: tcp\n        FromPort: '80'\n        ToPort: '80'\n        CidrIp: !Ref publicSecurityGroupCidr\n  publicAlbTargetGroup:\n    Type: AWS::ElasticLoadBalancingV2::TargetGroup\n    Properties:\n      HealthCheckIntervalSeconds: 30\n      HealthCheckPath: /healthcheck\n      HealthCheckPort: 80\n      HealthCheckProtocol: HTTP\n      HealthCheckTimeoutSeconds: 6\n      HealthyThresholdCount: 3\n      Name: !Sub ${apiName}-public-alb-tg\n      Port: 80\n      Protocol: HTTP\n      UnhealthyThresholdCount: 3\n      TargetType: ip\n      VpcId: !ImportValue VPC\n  targetGroup1:\n    Type: AWS::ElasticLoadBalancingV2::TargetGroup\n    Properties:\n      HealthCheckIntervalSeconds: 30\n      HealthCheckPath: /healthcheck\n      HealthCheckPort: 80\n      HealthCheckProtocol: HTTP\n      HealthCheckTimeoutSeconds: 6\n      HealthyThresholdCount: 3\n      UnhealthyThresholdCount: 3\n      Name: !Sub ${ruledTargetGtoup1}-tg\n      Port: 80\n      Protocol: HTTP\n      TargetType: ip\n      Targets:\n        - Id: !Ref ruledTarget1Ip1\n        - Id: !Ref ruledTarget1Ip2\n      VpcId: !ImportValue VPC\n  targetGroup2:\n    Type: AWS::ElasticLoadBalancingV2::TargetGroup\n    Properties:\n      HealthCheckIntervalSeconds: 30\n      HealthCheckPath: /healthcheck\n      HealthCheckPort: 80\n      HealthCheckProtocol: HTTP\n      HealthCheckTimeoutSeconds: 6\n      HealthyThresholdCount: 3\n      UnhealthyThresholdCount: 3\n      Name: !Sub ${ruledTargetGtoup2}-tg\n      Port: 80\n      Protocol: HTTP\n      TargetType: ip\n      Targets:\n        - Id: !Ref ruledTarget2Ip1\n        - Id: !Ref ruledTarget2Ip2\n      VpcId: !ImportValue VPC\n\n  publicAlb:\n    Type: AWS::ElasticLoadBalancingV2::LoadBalancer\n    Properties:\n      Name: !Sub ${apiName}-public-alb\n      Scheme: internet-facing\n      SecurityGroups:\n        - !Ref publicAlbSecuritygroup\n      Subnets:\n        - !ImportValue PublicSubnet1a\n        - !ImportValue PublicSubnet1c\n      Tags:\n        - Key: Name\n          Value: !Sub ${apiName}-public-alb\n      Type: application\n      LoadBalancerAttributes:\n        - Key: access_logs.s3.enabled\n          Value: true\n        - Key: access_logs.s3.bucket\n          Value: !ImportValue LogBucket\n        - Key: access_logs.s3.prefix\n          Value: !Ref apiName\n  publicAlblistnener:\n    Type: AWS::ElasticLoadBalancingV2::Listener\n    Properties:\n      DefaultActions:\n        - TargetGroupArn: !Ref targetGroup1\n          Type: forward\n      Certificates:\n        - CertificateArn: !Ref certificate\n      LoadBalancerArn: !Ref publicAlb\n      Port: 443\n      Protocol: HTTPS\n  lisnerRule1:\n    Type: AWS::ElasticLoadBalancingV2::ListenerRule\n    Properties:\n      Actions:\n      - Type: forward\n        TargetGroupArn:\n          !Ref targetGroup1\n      Conditions:\n      - Field: path-pattern\n        Values:\n        - !Sub\n          - \"/${path}/*\"\n          - { path: !Ref path1 }\n      ListenerArn: !Ref publicAlblistnener\n      Priority: 10\n  lisnerRule2:\n    Type: AWS::ElasticLoadBalancingV2::ListenerRule\n    Properties:\n      Actions:\n      - Type: forward\n        TargetGroupArn:\n          !Ref publicAlbTargetGroup\n      Conditions:\n      - Field: path-pattern\n        Values:\n        - !Sub\n          - \"/${path}/*\"\n          - { path: !Ref path2 }\n      ListenerArn: !Ref publicAlblistnener\n      Priority: 20\n  lisnerRule3:\n    Type: AWS::ElasticLoadBalancingV2::ListenerRule\n    Properties:\n      Actions:\n      - Type: forward\n        TargetGroupArn:\n          !Ref publicAlbTargetGroup\n      Conditions:\n      - Field: path-pattern\n        Values:\n        - !Sub\n          - \"/${path}/*\"\n          - { path: !Ref path3 }\n      ListenerArn: !Ref publicAlblistnener\n      Priority: 30\n  lisnerRule4:\n    Type: AWS::ElasticLoadBalancingV2::ListenerRule\n    Properties:\n      Actions:\n      - Type: forward\n        TargetGroupArn:\n          !Ref targetGroup2\n      Conditions:\n      - Field: path-pattern\n        Values:\n        - !Sub\n          - \"/${path}/*\"\n          - { path: !Ref path4 }\n      ListenerArn: !Ref publicAlblistnener\n      Priority: 40\n  lisnerRule5:\n    Type: AWS::ElasticLoadBalancingV2::ListenerRule\n    Properties:\n      Actions:\n      - Type: forward\n        TargetGroupArn:\n          !Ref publicAlbTargetGroup\n      Conditions:\n      - Field: path-pattern\n        Values:\n        - !Sub\n          - \"/${path}/*\"\n          - { path: !Ref path5 }\n      ListenerArn: !Ref publicAlblistnener\n      Priority: 35\n\nOutputs:\n  publicAlbSecuritygroup:\n    Value: !Ref publicAlbSecuritygroup\n    Export:\n      Name: !Sub ${apiName}-publicAlbSecuritygroup\n  publicAlbTargetGroup:\n    Value: !Ref publicAlbTargetGroup\n    Export:\n      Name: !Sub ${apiName}-publicAlbTargetGroup\n  publicAlb:\n    Value: !Ref publicAlb\n    Export:\n      Name: !Sub ${apiName}-publicAlb\n  publicAlblistnener:\n    Value: !Ref publicAlblistnener\n    Export:\n      Name: !Sub ${apiName}-publicAlblistnener\n"
}
INV-ver-cer01-htc-web-ver-ysd
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: Create Service Endpoint\n\nParameters:\n  serviceAlliasLowerCase:\n    Type: String\n  serviceName:\n    Type: String\n  cidr:\n    Type: String\n\nResources:\n\n  endpointSecuritygroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupName: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      GroupDescription: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      Tags:\n        - Key: Name\n          Value: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      VpcId: !ImportValue VPC\n      SecurityGroupIngress:\n        - IpProtocol: tcp\n          FromPort: 80\n          ToPort: 80\n          CidrIp: !Ref cidr\n  endpoint:\n    Type: AWS::EC2::VPCEndpoint\n    Properties:\n      VpcEndpointType: Interface\n      VpcId: !ImportValue VPC\n      SubnetIds:\n        - !ImportValue PrivateSubnet1a\n        - !ImportValue PrivateSubnet1c\n      SecurityGroupIds:\n        - !Ref endpointSecuritygroup\n      ServiceName: !Ref serviceName\n      PrivateDnsEnabled: false\n"
}
INV-ver-cer01-endpointService
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: Create Service Endpoint\n\nParameters:\n  arrowedAccountId1:\n    Type: String\n  arrowedAccountId2:\n    Type: String\n\nResources:\n  endpointService:\n    Type: \"AWS::EC2::VPCEndpointService\"\n    Properties:\n      NetworkLoadBalancerArns:\n        - !ImportValue internalNlb\n      AcceptanceRequired: false\n  servicePermisstions:\n    Type: \"AWS::EC2::VPCEndpointServicePermissions\"\n    Properties:\n      AllowedPrincipals:\n        - !Sub arn:aws:iam::${arrowedAccountId1}:root\n        - !Sub arn:aws:iam::${arrowedAccountId2}:root\n      ServiceId: !Ref endpointService\n\nOutputs:\n  servicePermisstions:\n    Value: !Ref servicePermisstions\n    Export:\n      Name: servicePermisstions\n"
}
INV-ver-cer01-internal-nlb
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: internal security group and nlb\n\nParameters:\n  accountAllias:\n    Type: String\n  accountAlliasLowerCase:\n    Type: String\n  internalSecurityGroupCidr:\n    Type: String\n\nResources:\n  internalApplicationSecuritygroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupName: !Sub ${accountAlliasLowerCase}-internal-application-sg\n      GroupDescription: !Sub ${accountAlliasLowerCase}-internal-application-sg\n      Tags:\n        - Key: Name\n          Value: !Sub ${accountAlliasLowerCase}-internal-application-sg\n      VpcId: !ImportValue VPC\n      SecurityGroupIngress:\n      - IpProtocol: tcp\n        FromPort: '80'\n        ToPort: '80'\n        CidrIp: !Ref internalSecurityGroupCidr\n  internalTargetGroup:\n    Type: AWS::ElasticLoadBalancingV2::TargetGroup\n    Properties:\n      HealthCheckIntervalSeconds: 30\n      HealthCheckPath: /healthcheck\n      HealthCheckPort: 80\n      HealthCheckProtocol: HTTP\n      HealthCheckTimeoutSeconds: 6\n      HealthyThresholdCount: 3\n      Name: !Sub ${accountAlliasLowerCase}-internal-tg\n      Port: 80\n      Protocol: TCP\n      UnhealthyThresholdCount: 3\n      TargetType: ip\n      VpcId: !ImportValue VPC\n  internalNlb:\n    Type: AWS::ElasticLoadBalancingV2::LoadBalancer\n    Properties:\n      Name: !Sub ${accountAlliasLowerCase}-internal-nlb\n      Scheme: internal\n      Subnets:\n        - !ImportValue PrivateSubnet1a\n        - !ImportValue PrivateSubnet1c\n      Tags:\n        - Key: Name\n          Value: !Sub ${accountAlliasLowerCase}-internal-nlb\n      Type: network\n      LoadBalancerAttributes:\n        - Key: load_balancing.cross_zone.enabled\n          Value: true\n  internallistnener:\n    Type: AWS::ElasticLoadBalancingV2::Listener\n    Properties:\n      DefaultActions:\n        - TargetGroupArn: !Ref internalTargetGroup\n          Type: forward\n      LoadBalancerArn: !Ref internalNlb\n      Port: 80\n      Protocol: TCP\n\nOutputs:\n  internalApplicationSecuritygroup:\n    Value: !Ref internalApplicationSecuritygroup\n    Export:\n      Name: internalApplicationSecuritygroup\n  internalTargetGroup:\n    Value: !Ref internalTargetGroup\n    Export:\n      Name: internalTargetGroup\n  internalNlb:\n    Value: !Ref internalNlb\n    Export:\n      Name: internalNlb\n  internallistnener:\n    Value: !Ref internallistnener\n    Export:\n      Name: internallistnener\n"
}
StackSet-cfn-exec-ec2-de5146cf-60e0-448d-ab14-ab2fd7a0401f
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: 2010-09-09\nDescription: CloudFormation Execute EC2\nParameters:\n  amiId:\n    Type: String\n    Default: ami-0d7ed3ddb85b521a6\n  SshCidr1:\n    Type: String\n    Default: 121.2.65.36/32\n  SshCidr2:\n    Type: String\n    Default: 39.110.201.10/32\n  SshCidr3:\n    Type: String\n    Default: 222.11.38.119/32\n  SshCidr4:\n    Type: String\n    Default: 1.21.118.25/32\n  SshCidr5:\n    Type: String\n    Default: 153.163.63.48/32\n  SshCidr6:\n    Type: String\n    Default: 13.231.11.115/32\nResources:\n  EC2Role:\n    Type: \"AWS::IAM::Role\"\n    Properties:\n      RoleName: cfn-exec-ec2-role\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/AdministratorAccess\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement:\n          -\n            Effect: \"Allow\"\n            Principal:\n              Service:\n                - \"ec2.amazonaws.com\"\n            Action:\n              - \"sts:AssumeRole\"\n      Path: \"/\"\n  Profile:\n    Type: AWS::IAM::InstanceProfile\n    Properties:\n      Roles:\n        - !Ref EC2Role\n  SSHSecurityGroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupName: cfn-exec-sg\n      GroupDescription: cfn-exec-sg\n      SecurityGroupIngress:\n      - IpProtocol: tcp\n        FromPort: '22'\n        ToPort: '22'\n        CidrIp: !Ref SshCidr1\n        Description: Classmethod\n      - IpProtocol: tcp\n        FromPort: '22'\n        ToPort: '22'\n        CidrIp: !Ref SshCidr2\n        Description: Classmethod\n      - IpProtocol: tcp\n        FromPort: '22'\n        ToPort: '22'\n        CidrIp: !Ref SshCidr3\n        Description: Classmethod\n      - IpProtocol: tcp\n        FromPort: '22'\n        ToPort: '22'\n        CidrIp: !Ref SshCidr4\n        Description: Classmethod\n      - IpProtocol: tcp\n        FromPort: '22'\n        ToPort: '22'\n        CidrIp: !Ref SshCidr5\n        Description: Classmethod\n      - IpProtocol: tcp\n        FromPort: '22'\n        ToPort: '22'\n        CidrIp: !Ref SshCidr6\n        Description: Classmethod\n      Tags:\n        - Key: Name\n          Value: cfn-exec-sg\n  EC2:\n    Type: AWS::EC2::Instance\n    Properties:\n      ImageId: !Ref amiId\n      InstanceType: t3.micro\n      KeyName: cfn-exec-key\n      IamInstanceProfile: !Ref Profile\n      NetworkInterfaces:\n        - AssociatePublicIpAddress: true\n          DeviceIndex: 0\n          GroupSet:\n            - !GetAtt SSHSecurityGroup.GroupId\n      UserData:\n        Fn::Base64: !Sub |\n          #!/bin/bash\n          yum -y update\n          yum -y install git\n      Tags:\n        - Key: Name\n          Value: cfn-exec\n  EIP:\n    Type: AWS::EC2::EIP\n    Properties:\n      Domain: vpc\n  AssociateEIP:\n    Type: AWS::EC2::EIPAssociation\n    Properties:\n      EIP: !Ref EIP\n      InstanceId: !Ref EC2\nOutputs:\n  EC2:\n    Value: !Ref EC2\n    Export:\n      Name: cfn-exex-ec2\n  EIP:\n    Value: !Ref EIP\n    Export:\n      Name: cfn-exex-IP\n"
}
INV-ver-cer01-thirdperson-web-ver-esw
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: Create Service Endpoint\n\nParameters:\n  serviceAlliasLowerCase:\n    Type: String\n  serviceName:\n    Type: String\n  cidr:\n    Type: String\n\nResources:\n\n  endpointSecuritygroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupName: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      GroupDescription: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      Tags:\n        - Key: Name\n          Value: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      VpcId: !ImportValue VPC\n      SecurityGroupIngress:\n        - IpProtocol: tcp\n          FromPort: 80\n          ToPort: 80\n          CidrIp: !Ref cidr\n  endpoint:\n    Type: AWS::EC2::VPCEndpoint\n    Properties:\n      VpcEndpointType: Interface\n      VpcId: !ImportValue VPC\n      SubnetIds:\n        - !ImportValue PrivateSubnet1a\n        - !ImportValue PrivateSubnet1c\n      SecurityGroupIds:\n        - !Ref endpointSecuritygroup\n      ServiceName: !Ref serviceName\n      PrivateDnsEnabled: false\n"
}
INV-ver-cer01-roadservice-ver-esw
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: Create Service Endpoint\n\nParameters:\n  serviceAlliasLowerCase:\n    Type: String\n  serviceName:\n    Type: String\n  cidr:\n    Type: String\n\nResources:\n\n  endpointSecuritygroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupName: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      GroupDescription: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      Tags:\n        - Key: Name\n          Value: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      VpcId: !ImportValue VPC\n      SecurityGroupIngress:\n        - IpProtocol: tcp\n          FromPort: 80\n          ToPort: 80\n          CidrIp: !Ref cidr\n  endpoint:\n    Type: AWS::EC2::VPCEndpoint\n    Properties:\n      VpcEndpointType: Interface\n      VpcId: !ImportValue VPC\n      SubnetIds:\n        - !ImportValue PrivateSubnet1a\n        - !ImportValue PrivateSubnet1c\n      SecurityGroupIds:\n        - !Ref endpointSecuritygroup\n      ServiceName: !Ref serviceName\n      PrivateDnsEnabled: false\n"
}
INV-ver-cer01-mypage-web-ver-htc
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: Create Service Endpoint\n\nParameters:\n  serviceAlliasLowerCase:\n    Type: String\n  serviceName:\n    Type: String\n  cidr:\n    Type: String\n\nResources:\n\n  endpointSecuritygroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupName: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      GroupDescription: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      Tags:\n        - Key: Name\n          Value: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      VpcId: !ImportValue VPC\n      SecurityGroupIngress:\n        - IpProtocol: tcp\n          FromPort: 80\n          ToPort: 80\n          CidrIp: !Ref cidr\n  endpoint:\n    Type: AWS::EC2::VPCEndpoint\n    Properties:\n      VpcEndpointType: Interface\n      VpcId: !ImportValue VPC\n      SubnetIds:\n        - !ImportValue PrivateSubnet1a\n        - !ImportValue PrivateSubnet1c\n      SecurityGroupIds:\n        - !Ref endpointSecuritygroup\n      ServiceName: !Ref serviceName\n      PrivateDnsEnabled: false\n"
}
INV-ver-cer01-connected-web-ver-htc
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: Create Service Endpoint\n\nParameters:\n  serviceAlliasLowerCase:\n    Type: String\n  serviceName:\n    Type: String\n  cidr:\n    Type: String\n\nResources:\n\n  endpointSecuritygroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupName: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      GroupDescription: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      Tags:\n        - Key: Name\n          Value: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      VpcId: !ImportValue VPC\n      SecurityGroupIngress:\n        - IpProtocol: tcp\n          FromPort: 80\n          ToPort: 80\n          CidrIp: !Ref cidr\n  endpoint:\n    Type: AWS::EC2::VPCEndpoint\n    Properties:\n      VpcEndpointType: Interface\n      VpcId: !ImportValue VPC\n      SubnetIds:\n        - !ImportValue PrivateSubnet1a\n        - !ImportValue PrivateSubnet1c\n      SecurityGroupIds:\n        - !Ref endpointSecuritygroup\n      ServiceName: !Ref serviceName\n      PrivateDnsEnabled: false\n"
}
INV-ver-cer01-connected-incar-ver-htc
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: Create Service Endpoint\n\nParameters:\n  serviceAlliasLowerCase:\n    Type: String\n  serviceName:\n    Type: String\n  cidr:\n    Type: String\n\nResources:\n\n  endpointSecuritygroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupName: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      GroupDescription: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      Tags:\n        - Key: Name\n          Value: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      VpcId: !ImportValue VPC\n      SecurityGroupIngress:\n        - IpProtocol: tcp\n          FromPort: 80\n          ToPort: 80\n          CidrIp: !Ref cidr\n  endpoint:\n    Type: AWS::EC2::VPCEndpoint\n    Properties:\n      VpcEndpointType: Interface\n      VpcId: !ImportValue VPC\n      SubnetIds:\n        - !ImportValue PrivateSubnet1a\n        - !ImportValue PrivateSubnet1c\n      SecurityGroupIds:\n        - !Ref endpointSecuritygroup\n      ServiceName: !Ref serviceName\n      PrivateDnsEnabled: false\n"
}
INV-ver-cer01-ap1-ver-ysd
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: Create Service Endpoint\n\nParameters:\n  serviceAlliasLowerCase:\n    Type: String\n  serviceName:\n    Type: String\n  cidr:\n    Type: String\n\nResources:\n\n  endpointSecuritygroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupName: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      GroupDescription: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      Tags:\n        - Key: Name\n          Value: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      VpcId: !ImportValue VPC\n      SecurityGroupIngress:\n        - IpProtocol: tcp\n          FromPort: 80\n          ToPort: 80\n          CidrIp: !Ref cidr\n  endpoint:\n    Type: AWS::EC2::VPCEndpoint\n    Properties:\n      VpcEndpointType: Interface\n      VpcId: !ImportValue VPC\n      SubnetIds:\n        - !ImportValue PrivateSubnet1a\n        - !ImportValue PrivateSubnet1c\n      SecurityGroupIds:\n        - !Ref endpointSecuritygroup\n      ServiceName: !Ref serviceName\n      PrivateDnsEnabled: false\n"
}
StackSet-ver-cer01-createIamRole-bec8fc9a-142b-43d0-bf19-edc06e3e19ca
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "{\n  \"AWSTemplateFormatVersion\" : \"2010-09-09\",\n  \"Description\" : \"Template for Creating IAM Role to Switch from Internavi Login AWS Account\",\n  \"Parameters\" : {\n    \"TrustedAWSAccountId\" : {\n      \"AllowedPattern\" : \"^[0-9]*$\",\n      \"Type\" : \"String\",\n      \"Default\" : \"975196479634\",\n      \"Description\" : \"Trusted AWS Account ID\"\n    },\n    \"IAMRoleName\": {\n      \"Type\": \"String\",\n      \"Default\": \"SolDeveloper\",\n      \"Description\": \"IAM Role Name\"\n    },\n    \"IAMPolicyType\": {\n      \"Type\": \"String\",\n      \"Default\": \"SolUser\",\n      \"Description\": \"IAM Policy Type\",\n      \"AllowedValues\": [ \"SolUser\", \"Admin\" ]\n    }\n  },\n  \"Conditions\" : {\n    \"user\"        : { \"Fn::Equals\" : [{\"Ref\" : \"IAMPolicyType\"}, \"SolUser\" ]},\n    \"admin\"        : { \"Fn::Equals\" : [{\"Ref\" : \"IAMPolicyType\"}, \"Admin\" ]}\n  },\n  \"Resources\" : {\n    \"IAMRoleForAdmin\": {\n      \"Type\": \"AWS::IAM::Role\",\n      \"Condition\" : \"admin\",\n      \"Properties\": {\n        \"AssumeRolePolicyDocument\": {\n          \"Version\": \"2012-10-17\",\n          \"Statement\": [\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010001\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010002\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010003\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010004\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010005\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010006\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010007\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010008\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010009\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            }\n          ]\n        },\n        \"ManagedPolicyArns\": [\n          \"arn:aws:iam::aws:policy/AdministratorAccess\"\n        ],\n        \"Path\": \"/\",\n        \"RoleName\": { \"Ref\" : \"IAMRoleName\" }\n      }\n    },\n    \"IAMRoleForUser\": {\n      \"Type\": \"AWS::IAM::Role\",\n      \"Condition\" : \"user\",\n      \"Properties\": {\n        \"AssumeRolePolicyDocument\": {\n          \"Version\": \"2012-10-17\",\n          \"Statement\": [\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010001\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010002\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010003\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010004\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010005\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010006\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010007\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010008\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010009\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            }\n          ]\n        },\n        \"ManagedPolicyArns\": [\n          \"arn:aws:iam::aws:policy/ReadOnlyAccess\",\n          \"arn:aws:iam::aws:policy/AWSCodeCommitPowerUser\"\n        ],\n        \"Path\": \"/\",\n        \"RoleName\": { \"Ref\" : \"IAMRoleName\" }\n      }\n    }\n  },\n  \"Outputs\" : {\n    \"IAMRoleAdminArn\": {\n      \"Value\": { \"Fn::GetAtt\" : [ \"IAMRoleForAdmin\", \"Arn\" ] },\n      \"Condition\" : \"admin\"\n    },\n    \"IAMRoleUserArn\": {\n      \"Value\": { \"Fn::GetAtt\" : [ \"IAMRoleForUser\", \"Arn\" ] },\n      \"Condition\" : \"user\"\n    },\n    \"LinkForSwitchRole\": {\n      \"Value\": { \"Fn::Join\": [ \"\", [ \"https://signin.aws.amazon.com/switchrole?roleName=\", { \"Ref\" : \"IAMRoleName\" }, \"&account=\", { \"Ref\" : \"AWS::AccountId\" } ] ] }\n    }\n  }\n}\n"
}
INV-ver-cer01-vpc-base
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "---\nAWSTemplateFormatVersion: '2010-09-09'\nDescription: VPC Network Template\nParameters:\n  SolName:\n    Type: String\n    Default: base01\n    Description: Solution Name.\n  SubSolName:\n    Type: String\n    Default: base\n    Description: Solution Name.\n  EnvName:\n    Type: String\n    Default: dev\n    Description: Env Name.\n  VPCCIDR:\n    Description: First and Second Octet of VPC, For example xxx.xxx\n    Type: String\n    Default: '10.0'\n    AllowedPattern: \"^(10\\\\.([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])|172\\\\.(1[6-9]|2[0-9]|3[0-1])|192\\\\.168)$\"\n    ConstraintDescription: xxx.xxx\nMappings:\n  StackConfig:\n    VPC:\n      CIDR: \".0.0/16\"\n    PublicSubnet1:\n      CIDR: \".0.0/24\"\n    PublicSubnet2:\n      CIDR: \".1.0/24\"\n    PrivateSubnet1:\n      CIDR: \".10.0/24\"\n    PrivateSubnet2:\n      CIDR: \".11.0/24\"\n\nResources:\n  VPC:\n    Type: AWS::EC2::VPC\n    Properties:\n      CidrBlock: !Sub\n        - ${VPCCIDR}${SubCIDR}\n        - SubCIDR: {\"Fn::FindInMap\": [ StackConfig, VPC, CIDR ]}\n      EnableDnsSupport: 'true'\n      EnableDnsHostnames: 'true'\n      InstanceTenancy: default\n      Tags:\n      - Key: Name\n        Value: !Sub INV-${EnvName}-${SolName}\n  InternetGateway:\n    Type: AWS::EC2::InternetGateway\n    Properties:\n      Tags:\n      - Key: Name\n        Value: !Sub INV-${EnvName}-${SolName}\n  AttachGateway:\n    Type: AWS::EC2::VPCGatewayAttachment\n    Properties:\n      VpcId: !Ref VPC\n      InternetGatewayId: !Ref InternetGateway\n\n  PublicSubnet1a:\n    Type: AWS::EC2::Subnet\n    DependsOn: AttachGateway\n    Properties:\n      AvailabilityZone: !Select [ 0, \"Fn::GetAZs\": {Ref: \"AWS::Region\"}]\n      CidrBlock: !Sub\n        - ${VPCCIDR}${SubCIDR}\n        - SubCIDR: {\"Fn::FindInMap\": [ StackConfig, PublicSubnet1, CIDR ]}\n      MapPublicIpOnLaunch: 'true'\n      Tags:\n      - Key: Name\n        Value: !Sub INV-${EnvName}-${SolName}-PublicSubnet1a\n      VpcId: !Ref VPC\n  PublicSubnet1c:\n    Type: AWS::EC2::Subnet\n    DependsOn: AttachGateway\n    Properties:\n      AvailabilityZone: !Select [ 1, \"Fn::GetAZs\": {Ref: \"AWS::Region\"}]\n      CidrBlock: !Sub\n        - ${VPCCIDR}${SubCIDR}\n        - SubCIDR: {\"Fn::FindInMap\": [ StackConfig, PublicSubnet2, CIDR ]}\n      MapPublicIpOnLaunch: 'true'\n      Tags:\n      - Key: Name\n        Value: !Sub INV-${EnvName}-${SolName}-PublicSubnet1c\n      VpcId: !Ref VPC\n  PrivateSubnet1a:\n    Type: AWS::EC2::Subnet\n    DependsOn: AttachGateway\n    Properties:\n      AvailabilityZone: !Select [ 0, \"Fn::GetAZs\": {Ref: \"AWS::Region\"}]\n      CidrBlock: !Sub\n        - ${VPCCIDR}${SubCIDR}\n        - SubCIDR: {\"Fn::FindInMap\": [ StackConfig, PrivateSubnet1, CIDR ]}\n      MapPublicIpOnLaunch: 'true'\n      Tags:\n      - Key: Name\n        Value: !Sub INV-${EnvName}-${SolName}-PrivateSubnet1a\n      VpcId: !Ref VPC\n  PrivateSubnet1c:\n    Type: AWS::EC2::Subnet\n    DependsOn: AttachGateway\n    Properties:\n      AvailabilityZone: !Select [ 1, \"Fn::GetAZs\": {Ref: \"AWS::Region\"}]\n      CidrBlock: !Sub\n        - ${VPCCIDR}${SubCIDR}\n        - SubCIDR: {\"Fn::FindInMap\": [ StackConfig, PrivateSubnet2, CIDR ]}\n      MapPublicIpOnLaunch: 'true'\n      Tags:\n      - Key: Name\n        Value: !Sub INV-${EnvName}-${SolName}-PrivateSubnet1c\n      VpcId: !Ref VPC\n\n  EIP1a:\n    Type: AWS::EC2::EIP\n    Properties:\n      Domain: vpc\n  NAT1a:\n    Type: AWS::EC2::NatGateway\n    Properties:\n      AllocationId:\n        Fn::GetAtt:\n          - EIP1a\n          - AllocationId\n      SubnetId: !Ref PublicSubnet1a\n      Tags:\n        - Key: Name\n          Value: !Sub INV-${EnvName}-${SolName}-NGW1a\n\n  EIP1c:\n    Type: AWS::EC2::EIP\n    Properties:\n      Domain: vpc\n  NAT1c:\n    Type: AWS::EC2::NatGateway\n    Properties:\n      AllocationId:\n        Fn::GetAtt:\n          - EIP1c\n          - AllocationId\n      SubnetId: !Ref PublicSubnet1c\n      Tags:\n        - Key: Name\n          Value: !Sub INV-${EnvName}-${SolName}-NGW1c\n\n  PublicRouteTable:\n    Type: AWS::EC2::RouteTable\n    DependsOn: AttachGateway\n    Properties:\n      VpcId: !Ref VPC\n      Tags:\n      - Key: Name\n        Value: !Sub INV-${EnvName}-${SolName}-PublicRoute\n  PublicRoute:\n    Type: AWS::EC2::Route\n    DependsOn: AttachGateway\n    Properties:\n      RouteTableId: !Ref PublicRouteTable\n      DestinationCidrBlock: 0.0.0.0/0\n      GatewayId: !Ref InternetGateway\n  PrivateRouteTable1a:\n    Type: AWS::EC2::RouteTable\n    DependsOn: NAT1a\n    Properties:\n      VpcId: !Ref VPC\n      Tags:\n      - Key: Name\n        Value: !Sub INV-${EnvName}-${SolName}-PrivateRoute1a\n  PrivateRoute1a:\n    Type: AWS::EC2::Route\n    DependsOn: NAT1a\n    Properties:\n      RouteTableId: !Ref PrivateRouteTable1a\n      DestinationCidrBlock: 0.0.0.0/0\n      NatGatewayId: !Ref NAT1a\n  PrivateRouteTable1c:\n    Type: AWS::EC2::RouteTable\n    DependsOn: NAT1c\n    Properties:\n      VpcId: !Ref VPC\n      Tags:\n      - Key: Name\n        Value: !Sub INV-${EnvName}-${SolName}-PrivateRoute1c\n  PrivateRoute1c:\n    Type: AWS::EC2::Route\n    DependsOn: NAT1c\n    Properties:\n      RouteTableId: !Ref PrivateRouteTable1c\n      DestinationCidrBlock: 0.0.0.0/0\n      NatGatewayId: !Ref NAT1c\n\n  PublicSubnet1aRouteTableAssociation:\n    Type: AWS::EC2::SubnetRouteTableAssociation\n    Properties:\n      SubnetId: !Ref PublicSubnet1a\n      RouteTableId: !Ref PublicRouteTable\n  PublicSubnet1cRouteTableAssociation:\n    Type: AWS::EC2::SubnetRouteTableAssociation\n    Properties:\n      SubnetId: !Ref PublicSubnet1c\n      RouteTableId: !Ref PublicRouteTable\n  PrivateSubnet1aRouteTableAssociation:\n    Type: AWS::EC2::SubnetRouteTableAssociation\n    Properties:\n      SubnetId: !Ref PrivateSubnet1a\n      RouteTableId: !Ref PrivateRouteTable1a\n  PrivateSubnet1cRouteTableAssociation:\n    Type: AWS::EC2::SubnetRouteTableAssociation\n    Properties:\n      SubnetId: !Ref PrivateSubnet1c\n      RouteTableId: !Ref PrivateRouteTable1c\n\n  DNS1:\n    Type: \"AWS::Route53::HostedZone\"\n    Properties:\n      HostedZoneConfig:\n        Comment: INV-LocalDomain\n      Name: internal-internavi\n      VPCs:\n        -\n          VPCId: !Ref VPC\n          VPCRegion: !Ref AWS::Region\n      HostedZoneTags:\n        -\n          Key: \"Name\"\n          Value: !Sub INV-${EnvName}-${SolName}\n\n  FlowLogBucket:\n    Type: AWS::S3::Bucket\n    Properties:\n        BucketName: !Join\n          - \"-\"\n          -\n            - inv\n            - !Ref EnvName\n            - !Ref SolName\n            - !Ref VPC\n  FlowLogBucketPolicy:\n    Type: AWS::S3::BucketPolicy\n    DependsOn: NAT1c\n    Properties:\n      Bucket: !Ref FlowLogBucket\n      PolicyDocument:\n        Statement:\n          -\n            Action:\n              - \"s3:PutObject\"\n            Effect: \"Allow\"\n            Resource:\n              Fn::Join:\n                - \"\"\n                -\n                  - \"arn:aws:s3:::\"\n                  - !Ref FlowLogBucket\n                  - \"/*\"\n            Principal:\n              AWS: \"arn:aws:iam::582318560864:root\"\n          -\n            Action:\n              - \"s3:PutObject\"\n            Effect: \"Allow\"\n            Resource:\n              Fn::Join:\n                - \"\"\n                -\n                  - \"arn:aws:s3:::\"\n                  - !Ref FlowLogBucket\n                  - \"/*\"\n            Principal:\n              Service: \"delivery.logs.amazonaws.com\"\n            Condition:\n              StringEquals:\n                s3:x-amz-acl: bucket-owner-full-control\n          -\n            Action:\n              - \"s3:GetBucketAcl\"\n            Effect: \"Allow\"\n            Resource:\n              Fn::Join:\n                - \"\"\n                -\n                  - \"arn:aws:s3:::\"\n                  - !Ref FlowLogBucket\n            Principal:\n              Service: \"delivery.logs.amazonaws.com\"\n  FlowLog:\n    Type: AWS::EC2::FlowLog\n    DependsOn: FlowLogBucketPolicy\n    Properties:\n      LogDestinationType : \"s3\"\n      LogDestination : !Join\n        - \"\"\n        -\n          - \"arn:aws:s3:::\"\n          - !Ref FlowLogBucket\n          - /FlowLogs/\n      ResourceType : VPC\n      ResourceId : !Ref VPC\n      TrafficType : ALL\n\n  S3Endpoint:\n    Type: AWS::EC2::VPCEndpoint\n    Properties:\n      RouteTableIds:\n        - !Ref PublicRouteTable\n        - !Ref PrivateRouteTable1a\n        - !Ref PrivateRouteTable1c\n      ServiceName: !Join\n        - ''\n        - - com.amazonaws.\n          - !Ref 'AWS::Region'\n          - .s3\n      VpcId: !Ref VPC\n  DynamoEndpoint:\n    Type: AWS::EC2::VPCEndpoint\n    Properties:\n      RouteTableIds:\n        - !Ref PublicRouteTable\n        - !Ref PrivateRouteTable1a\n        - !Ref PrivateRouteTable1c\n      ServiceName: !Join\n        - ''\n        - - com.amazonaws.\n          - !Ref 'AWS::Region'\n          - .dynamodb\n      VpcId: !Ref VPC\n  Certificate:\n    Type: AWS::CertificateManager::Certificate\n    Properties:\n      DomainName: !Sub '*.${EnvName}-${SubSolName}.cloud.internavi.ne.jp'\n      SubjectAlternativeNames:\n        - '*.cloud.internavi.ne.jp'\n      ValidationMethod: DNS\n\nOutputs:\n  VPC:\n    Value: !Ref VPC\n    Export:\n      Name: VPC\n  PublicSubnet1a:\n    Value: !Ref PublicSubnet1a\n    Export:\n      Name: PublicSubnet1a\n  PublicSubnet1c:\n    Value: !Ref PublicSubnet1c\n    Export:\n      Name: PublicSubnet1c\n  PrivateSubnet1a:\n    Value: !Ref PrivateSubnet1a\n    Export:\n      Name: PrivateSubnet1a\n  PrivateSubnet1c:\n    Value: !Ref PrivateSubnet1c\n    Export:\n      Name: PrivateSubnet1c\n  PublicRouteTable:\n    Value: !Ref PublicRouteTable\n    Export:\n      Name: PublicRouteTable\n  PrivateRouteTable1a:\n    Value: !Ref PrivateRouteTable1a\n    Export:\n      Name: PrivateRouteTable1a\n  PrivateRouteTable1c:\n    Value: !Ref PrivateRouteTable1c\n    Export:\n      Name: PrivateRouteTable1c\n  LogBucket:\n    Value: !Ref FlowLogBucket\n    Export:\n      Name: LogBucket\n  DNS1:\n    Value: !Ref DNS1\n    Export:\n      Name: DNS1\n"
}
INV-ver-cer01-codecommit-ecr
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: codecommit and ecr\n\nParameters:\n  accountAllias:\n    Type: String\n  accountAlliasLowerCase:\n    Type: String\n\n\nResources:\n  codecommit:\n    Type: AWS::CodeCommit::Repository\n    Properties:\n      RepositoryName: !Sub ${accountAllias}-codecommit\n      RepositoryDescription: !Sub ${accountAllias}-codecommit\n  codecommitcfn:\n    Type: AWS::CodeCommit::Repository\n    Properties:\n      RepositoryName: !Sub ${accountAllias}-cfn\n      RepositoryDescription: !Sub ${accountAllias}-cfn\n  ecr:\n    Type: AWS::ECR::Repository\n    Properties: \n      RepositoryName: !Sub ${accountAlliasLowerCase}-ecr\n\nOutputs:\n  codecommit:\n    Value: !Ref codecommit\n    Export:\n      Name: codecommit\n  codecommitcfn:\n    Value: !Ref codecommitcfn\n    Export:\n      Name: codecommitcfn\n  ecr:\n    Value: !GetAtt ecr.Arn\n    Export:\n      Name: ecr\n\n"
}
StackSet-HmAdmin-createIamRole-0cf78513-d52a-4865-92dd-98d121ab6e3c
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "{\n  \"AWSTemplateFormatVersion\" : \"2010-09-09\",\n  \"Description\" : \"Template for Creating IAM Role to Switch from Internavi Login AWS Account\",\n  \"Parameters\" : {\n    \"TrustedAWSAccountId\" : {\n      \"AllowedPattern\" : \"^[0-9]*$\",\n      \"Type\" : \"String\",\n      \"Default\" : \"975196479634\",\n      \"Description\" : \"Trusted AWS Account ID\"\n    },\n    \"IAMRoleName\": {\n      \"Type\": \"String\",\n      \"Default\": \"HmAdmin\",\n      \"Description\": \"IAM Role Name\"\n    }\n  },\n  \"Resources\" : {\n    \"IAMRoleForEngineer\": {\n      \"Type\": \"AWS::IAM::Role\",\n      \"Properties\": {\n        \"AssumeRolePolicyDocument\": {\n          \"Version\": \"2012-10-17\",\n          \"Statement\": [\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"J0322720\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"J0116063\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JP300063\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JP310643\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JP311734\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            }\n          ]\n        },\n        \"ManagedPolicyArns\": [\n          \"arn:aws:iam::aws:policy/AdministratorAccess\"\n        ],\n        \"Path\": \"/\",\n        \"RoleName\": { \"Ref\" : \"IAMRoleName\" }\n      }\n    }\n  },\n  \"Outputs\" : {\n    \"IAMRoleArn\": {\n      \"Value\": { \"Fn::GetAtt\" : [ \"IAMRoleForEngineer\", \"Arn\" ] }\n    },\n    \"LinkForSwitchRole\": {\n      \"Value\": { \"Fn::Join\": [ \"\", [ \"https://signin.aws.amazon.com/switchrole?roleName=\", { \"Ref\" : \"IAMRoleName\" }, \"&account=\", { \"Ref\" : \"AWS::AccountId\" } ] ] }\n    }\n  }\n}\n"
}
StackSet-cm-cm-hamada-koji-iamRole-17748add-fdb5-4041-88b2-54f75a3be6e1
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": {
        "AWSTemplateFormatVersion": "2010-09-09", 
        "Description": "Template for Creating IAM Role to Switch from Classmethod AWS Account", 
        "Parameters": {
            "TrustedAWSAccountId": {
                "AllowedPattern": "^[0-9]*$", 
                "Type": "String", 
                "Default": "", 
                "Description": "Trusted AWS Account ID"
            }, 
            "IAMUserName": {
                "AllowedPattern": "^cm-[a-z.]*$", 
                "Type": "String", 
                "Default": "cm-xxx.xxx", 
                "Description": "IAM Role Name"
            }
        }, 
        "Resources": {
            "IAMRoleForCmEngineer": {
                "Type": "AWS::IAM::Role", 
                "Properties": {
                    "AssumeRolePolicyDocument": {
                        "Version": "2012-10-17", 
                        "Statement": [
                            {
                                "Effect": "Allow", 
                                "Principal": {
                                    "AWS": {
                                        "Fn::Join": [
                                            "", 
                                            [
                                                "arn:aws:iam::", 
                                                {
                                                    "Ref": "TrustedAWSAccountId"
                                                }, 
                                                ":user/", 
                                                {
                                                    "Ref": "IAMUserName"
                                                }
                                            ]
                                        ]
                                    }
                                }, 
                                "Action": [
                                    "sts:AssumeRole"
                                ], 
                                "Condition": {
                                    "Bool": {
                                        "aws:MultiFactorAuthPresent": "true"
                                    }
                                }
                            }
                        ]
                    }, 
                    "ManagedPolicyArns": [
                        "arn:aws:iam::aws:policy/AdministratorAccess"
                    ], 
                    "Path": "/", 
                    "RoleName": {
                        "Ref": "IAMUserName"
                    }
                }
            }
        }, 
        "Outputs": {
            "IAMRoleArn": {
                "Value": {
                    "Fn::GetAtt": [
                        "IAMRoleForCmEngineer", 
                        "Arn"
                    ]
                }
            }, 
            "LinkForSwitchRole": {
                "Value": {
                    "Fn::Join": [
                        "", 
                        [
                            "https://signin.aws.amazon.com/switchrole?roleName=", 
                            {
                                "Ref": "IAMUserName"
                            }, 
                            "&account=", 
                            {
                                "Ref": "AWS::AccountId"
                            }
                        ]
                    ]
                }
            }
        }
    }
}
StackSetsExecutionRole
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: 2010-09-09\nDescription: Configure the AWSCloudFormationStackSetExecutionRole to support AWS CloudFormation StackSets in a managed account.\n\nParameters:\n  MasterAccountId:\n    Type: String\n    Description: AWS Account Id of the master account (the account in which StackSets will be created).\n    MaxLength: 12\n    MinLength: 12\n\nResources:\n  ExecutionRole:\n    Type: AWS::IAM::Role\n    Properties:\n      RoleName: AWSCloudFormationStackSetExecutionRole\n      AssumeRolePolicyDocument: \n        Version: 2012-10-17\n        Statement: \n          - Effect: Allow\n            Principal: \n              AWS:\n                - !Ref MasterAccountId\n            Action: \n              - sts:AssumeRole\n      Path: /\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/AdministratorAccess\n"
}
cm-kikuchi-shuji-iamRole
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": {
        "AWSTemplateFormatVersion": "2010-09-09", 
        "Description": "Template for Creating IAM Role to Switch from Classmethod AWS Account", 
        "Parameters": {
            "TrustedAWSAccountId": {
                "AllowedPattern": "^[0-9]*$", 
                "Type": "String", 
                "Default": "", 
                "Description": "Trusted AWS Account ID"
            }, 
            "IAMUserName": {
                "AllowedPattern": "^cm-[a-z.]*$", 
                "Type": "String", 
                "Default": "cm-xxx.xxx", 
                "Description": "IAM Role Name"
            }
        }, 
        "Resources": {
            "IAMRoleForCmEngineer": {
                "Type": "AWS::IAM::Role", 
                "Properties": {
                    "AssumeRolePolicyDocument": {
                        "Version": "2012-10-17", 
                        "Statement": [
                            {
                                "Effect": "Allow", 
                                "Principal": {
                                    "AWS": {
                                        "Fn::Join": [
                                            "", 
                                            [
                                                "arn:aws:iam::", 
                                                {
                                                    "Ref": "TrustedAWSAccountId"
                                                }, 
                                                ":user/", 
                                                {
                                                    "Ref": "IAMUserName"
                                                }
                                            ]
                                        ]
                                    }
                                }, 
                                "Action": [
                                    "sts:AssumeRole"
                                ], 
                                "Condition": {
                                    "Bool": {
                                        "aws:MultiFactorAuthPresent": "true"
                                    }
                                }
                            }
                        ]
                    }, 
                    "ManagedPolicyArns": [
                        "arn:aws:iam::aws:policy/AdministratorAccess"
                    ], 
                    "Path": "/", 
                    "RoleName": {
                        "Ref": "IAMUserName"
                    }
                }
            }
        }, 
        "Outputs": {
            "IAMRoleArn": {
                "Value": {
                    "Fn::GetAtt": [
                        "IAMRoleForCmEngineer", 
                        "Arn"
                    ]
                }
            }, 
            "LinkForSwitchRole": {
                "Value": {
                    "Fn::Join": [
                        "", 
                        [
                            "https://signin.aws.amazon.com/switchrole?roleName=", 
                            {
                                "Ref": "IAMUserName"
                            }, 
                            "&account=", 
                            {
                                "Ref": "AWS::AccountId"
                            }
                        ]
                    ]
                }
            }
        }
    }
}
]
スクリプトを終了します
  1- INV-ver-htc01:arn:aws:iam::686753218709:role/OpeAdminRole
  2- INV-ver-sub01:arn:aws:iam::495152581087:role/OpeAdminRole
  3- INV-ver-cer01:arn:aws:iam::339311866652:role/OpeAdminRole
  4- INV-ver-des01:arn:aws:iam::302986797475:role/OpeAdminRole
  5- INV-ver-agw01:arn:aws:iam::859823971378:role/OpeAdminRole
  6- INV-ver-vdm01:arn:aws:iam::497617980196:role/OpeAdminRole
  7- INV-ver-wfi01:arn:aws:iam::932204081418:role/OpeAdminRole
  8- INV-ver-esp01:arn:aws:iam::131000633826:role/OpeAdminRole
  9- INV-ver-rmt01:arn:aws:iam::604584103104:role/OpeAdminRole
 10- INV-ver-esw01:arn:aws:iam::170541451228:role/OpeAdminRole
 11- INV-ver-tcu01:arn:aws:iam::951453431396:role/OpeAdminRole
 12- INV-ver-vky01:arn:aws:iam::207429400733:role/OpeAdminRole
     all- All Environments:select all environments
スクリプトを実行します。
aws cloudformation describe-stacks --query Stacks[*].StackName
{
    "Account": "975196479634", 
    "UserId": "AIDA6GDR5MCJLYN4JQRFZ", 
    "Arn": "arn:aws:iam::975196479634:user/JV010028"
}
{
    "Account": "302986797475", 
    "UserId": "AROAUNC3LUGRWLADNW4UA:inv-20190702040827", 
    "Arn": "arn:aws:sts::302986797475:assumed-role/OpeAdminRole/inv-20190702040827"
}
[
inv-ver-des01-monitoring-lambda
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: \"2010-09-09\"\r\nDescription: \"monitoring-lambda.yml\"\r\nParameters: \r\n  EnvironmentName: \r\n    Default: ver\r\n    Description: \"Environment Name\"\r\n    Type: String\r\n  MicroServiceName: \r\n    Default: cer01\r\n    Description: \"MicroService Name\"\r\n    Type: String\r\n  S3Buckets: \r\n    Default: \"inv-ver-cer01-cfn\"\r\n    Description: \"source s3 backet name\"\r\n    Type: String\r\n  S3Prefix:\r\n    Default: \"monitor-config/\"\r\n    Description: \"source s3 backet file prefix\"\r\n    Type: String\r\n  iniFileName: \r\n    Default: \"monitor.json\"\r\n    Description: \"scenario file name\"\r\n    Type: String\r\n  scenarioSourceLogGroup:\r\n    Description: \"Scenario CWL log group name\"\r\n    Type: \"String\"\r\n  scenarioFilterPattern:\r\n    Default: \"\"\r\n    Description: \"Scenario Monitor CWL log FilterPattern\"\r\n    Type: \"String\"\r\n  programSourceLogGroup:\r\n    Description: \"program CWL log group name\"\r\n    Type: \"String\"\r\n  programFilterPattern:\r\n    Default: ?\"ERROR\" ?\"FATAL\" ?\"WARN\"\r\n    Description: \"program Monitor CWL log FilterPattern\"\r\n    Type: \"String\"\r\nResources:\r\n  IAMRole:\r\n    Type: \"AWS::IAM::Role\"\r\n    Properties: \r\n      AssumeRolePolicyDocument: \r\n        Version: \"2012-10-17\"\r\n        Statement: \r\n          - Effect: Allow\r\n            Principal: \r\n              Service: \"lambda.amazonaws.com\"\r\n            Action: \"sts:AssumeRole\"\r\n      ManagedPolicyArns: \r\n        - \"arn:aws:iam::aws:policy/AmazonSNSFullAccess\"\r\n      Path: \"/\"\r\n      Policies:\r\n        - PolicyName: monitor_lambda_policy\r\n          PolicyDocument:\r\n            Version: '2012-10-17'\r\n            Statement:\r\n              - Effect: Allow\r\n                Action:\r\n                  - cloudwatch:*\r\n                  - logs:*\r\n                  - s3:Get*\r\n                  - s3:List*\r\n                Resource: \"*\"\r\n      RoleName: !Sub inv-${EnvironmentName}-${MicroServiceName}-monitoring-lambda-role\r\n  LambdaLayer:\r\n    Type: \"AWS::Lambda::LayerVersion\"\r\n    Properties:\r\n      CompatibleRuntimes: \r\n        - python3.6\r\n      Content: \r\n        S3Bucket:\r\n          Ref: S3Buckets\r\n        S3Key: CloudwatchAlarm/metrics_mod.zip\r\n      Description: \"monitor_lambda_modules\"\r\n      LayerName: monitor_module\r\n  LambdaFunction: \r\n    DependsOn: \r\n      - IAMRole\r\n    Type: \"AWS::Lambda::Function\"\r\n    Properties: \r\n      Code: \r\n        S3Bucket: \r\n          Ref: S3Buckets\r\n        S3Key: CloudwatchAlarm/monitoring_common_lambda_src.zip           \r\n      FunctionName: !Sub inv-${EnvironmentName}-${MicroServiceName}-monitoring_common_lambda\r\n      Handler: lambda_function.lambda_handler\r\n      Environment: \r\n        Variables: \r\n          ENV: \r\n            Ref: EnvironmentName\r\n          STG: \r\n            Ref: MicroServiceName\r\n          fileName:\r\n            Ref: iniFileName\r\n          s3Bucket:\r\n            Ref: S3Buckets\r\n          s3keyPrefix:\r\n            Ref: S3Prefix\r\n      Role: \r\n        \"Fn::GetAtt\": \r\n          - IAMRole\r\n          - Arn\r\n      Runtime: \"python3.6\"\r\n      MemorySize: 512\r\n      Timeout: 300\r\n      Layers:\r\n        - !Ref LambdaLayer\r\n  LambdaPermission: \r\n    Type: \"AWS::Lambda::Permission\"\r\n    Properties: \r\n      Action: \"lambda:InvokeFunction\"\r\n      FunctionName: \r\n        \"Fn::GetAtt\": \r\n          - LambdaFunction\r\n          - Arn\r\n      Principal: !Sub \"sns.amazonaws.com\"\r\n      SourceArn: !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:inv-${EnvironmentName}-${MicroServiceName}\r\n  ScenarioSubscriptionFilter:\r\n    DependsOn:\r\n      - ScenarioLambdaInvokePermission\r\n    Type: \"AWS::Logs::SubscriptionFilter\"\r\n    Properties:\r\n      LogGroupName: !Ref scenarioSourceLogGroup\r\n      FilterPattern: !Ref scenarioFilterPattern\r\n      DestinationArn: !Join\r\n        - ''\r\n        - - !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:'\r\n          - !Sub inv-${EnvironmentName}-${MicroServiceName}-monitoring_common_lambda\r\n  ScenarioLambdaInvokePermission:\r\n    Type: 'AWS::Lambda::Permission'\r\n    Properties:\r\n      FunctionName:\r\n        \"Fn::GetAtt\": \r\n          - LambdaFunction\r\n          - Arn\r\n      Action: \"lambda:InvokeFunction\"\r\n      Principal: !Sub \"logs.amazonaws.com\"\r\n      SourceAccount: !Ref AWS::AccountId\r\n      SourceArn: !Sub \"arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${scenarioSourceLogGroup}:*\"\r\n  ProgramSubscriptionFilter:\r\n    DependsOn:\r\n      - ProgramLambdaInvokePermission\r\n    Type: \"AWS::Logs::SubscriptionFilter\"\r\n    Properties:\r\n      LogGroupName: !Ref programSourceLogGroup\r\n      FilterPattern: !Ref programFilterPattern\r\n      DestinationArn: !Join\r\n        - ''\r\n        - - !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:'\r\n          - !Sub inv-${EnvironmentName}-${MicroServiceName}-monitoring_common_lambda\r\n  ProgramLambdaInvokePermission:\r\n    Type: 'AWS::Lambda::Permission'\r\n    Properties:\r\n      FunctionName:\r\n        \"Fn::GetAtt\": \r\n          - LambdaFunction\r\n          - Arn\r\n      Action: \"lambda:InvokeFunction\"\r\n      Principal: !Sub \"logs.amazonaws.com\"\r\n      SourceAccount: !Ref AWS::AccountId\r\n      SourceArn: !Sub \"arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${programSourceLogGroup}:*\"\r\nOutputs: \r\n  IAMRole: \r\n    Description: \"IAM Role Name\"\r\n    Value: \r\n      Ref: IAMRole\r\n  SNSTopic: \r\n    Description: \"SNS Topic Name\"\r\n    Value: \r\n      !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:inv-${EnvironmentName}-${MicroServiceName}\r\n  LambdaFunction: \r\n    Description: \"Lambda Function Name\"\r\n    Value: \r\n      Ref: LambdaFunction"
}
enable-guardduty
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: 2010-09-09\nDescription:\n  \"enable guardduty\"\nResources:\n  GDD:\n    Type: \"AWS::GuardDuty::Detector\"\n    Properties:\n      Enable: true"
}
INV-ver-des01-manage-metrics-alarm
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: \"2010-09-09\"\r\nDescription: \"create_metrics_alarm.yaml\"\r\nParameters:\r\n  EnvironmentName:\r\n    Default: \"ver\"\r\n    Description: \"EnvironmentName\"\r\n    Type: String\r\n  MicroServiceName: \r\n    Default: \"cer01\"\r\n    Description: \"MicroServiceName\"\r\n    Type: String\r\n  s3keyprefix: \r\n    Default: \"_manage_metrics_alarm.xlsx\"\r\n    Description: \"excel s3 keys prefix\"\r\n    Type: String\r\n  S3Buckets: \r\n    Default: \"inv-ver-cer01-cfn\"\r\n    Description: \"source s3 backet name\"\r\n    Type: String\r\nResources: \r\n  IAMRole: \r\n    Type: \"AWS::IAM::Role\"\r\n    Properties: \r\n      AssumeRolePolicyDocument: \r\n        Version: \"2012-10-17\"\r\n        Statement: \r\n          - Effect: Allow\r\n            Principal: \r\n              Service: \"lambda.amazonaws.com\"\r\n            Action: \"sts:AssumeRole\"\r\n      ManagedPolicyArns: \r\n        - \"arn:aws:iam::aws:policy/AmazonS3FullAccess\"\r\n      Path: \"/\"\r\n      Policies:\r\n        - PolicyName: manage_metrics_alarm_lambda_policy\r\n          PolicyDocument:\r\n            Version: '2012-10-17'\r\n            Statement:\r\n              - Effect: Allow\r\n                Action:\r\n                  - cloudwatch:*\r\n                  - logs:*\r\n                Resource: \"*\"\r\n      RoleName: !Sub inv-${EnvironmentName}-${MicroServiceName}-manage-metrics-alarm-lambda-role\r\n  LambdaLayer:\r\n    Type: \"AWS::Lambda::LayerVersion\"\r\n    Properties:\r\n      CompatibleRuntimes: \r\n        - python3.6\r\n      Content: \r\n        S3Bucket:\r\n          Ref: S3Buckets\r\n        S3Key: CloudwatchAlarm/metrics_mod.zip\r\n      Description: \"manage_cloudwatch metrics alarm modules\"\r\n      LayerName: metrics_module\r\n  LambdaFunction: \r\n    DependsOn: \r\n      - IAMRole\r\n    Type: \"AWS::Lambda::Function\"\r\n    Properties: \r\n      Code: \r\n        S3Bucket: \r\n          Ref: S3Buckets\r\n        S3Key: CloudwatchAlarm/manage_metrics_alarm_src.zip\r\n      FunctionName: !Sub inv-${EnvironmentName}-${MicroServiceName}-manage-metrics-alarm-lambda\r\n      Handler: lambda_function.lambda_handler\r\n      Environment: \r\n        Variables: \r\n          fileprefix: \r\n            Ref: s3keyprefix\r\n          s3Bucket: !Sub inv-${EnvironmentName}-${MicroServiceName}-manage-metrics-alarm\r\n      Role: \r\n        \"Fn::GetAtt\": \r\n          - IAMRole\r\n          - Arn\r\n      Runtime: \"python3.6\"\r\n      MemorySize: 512\r\n      Timeout: 300\r\n      Layers:\r\n        - !Ref LambdaLayer\r\n  LambdaPermission: \r\n    Type: \"AWS::Lambda::Permission\"\r\n    Properties: \r\n      Action: \"lambda:InvokeFunction\"\r\n      FunctionName: \r\n        \"Fn::GetAtt\": \r\n          - LambdaFunction\r\n          - Arn\r\n      Principal: s3.amazonaws.com\r\n      SourceAccount: !Ref 'AWS::AccountId'\r\n      SourceArn: !Join\r\n        - ''\r\n        - - 'arn:aws:s3:::'\r\n          - !Sub inv-${EnvironmentName}-${MicroServiceName}-manage-metrics-alarm\r\n  S3Bucket:\r\n    Type: \"AWS::S3::Bucket\"\r\n    DependsOn: \r\n      - LambdaPermission\r\n    Properties:\r\n      BucketName: !Sub inv-${EnvironmentName}-${MicroServiceName}-manage-metrics-alarm\r\n      AccessControl: Private\r\n      PublicAccessBlockConfiguration:\r\n        BlockPublicAcls: True\r\n        BlockPublicPolicy: True\r\n        IgnorePublicAcls: True\r\n        RestrictPublicBuckets: True\r\n      NotificationConfiguration:\r\n        LambdaConfigurations:\r\n          - Event: \"s3:ObjectCreated:*\"\r\n            Filter:\r\n              S3Key:\r\n                Rules:\r\n                  - Name: suffix\r\n                    Value: xlsx\r\n            Function: !GetAtt\r\n              - LambdaFunction\r\n              - Arn\r\n  S3BucketPolicy:\r\n    Type: AWS::S3::BucketPolicy\r\n    Properties: \r\n      Bucket: \r\n        Ref: \"S3Bucket\"\r\n      PolicyDocument: \r\n        Version: \"2012-10-17\"\r\n        Statement: \r\n          - \r\n            Action: \r\n              - \"s3:GetObject\"\r\n            Effect: \"Allow\"\r\n            Resource: \r\n              Fn::Join: \r\n                - \"\"\r\n                - \r\n                  - \"arn:aws:s3:::\"\r\n                  - \r\n                    Ref: \"S3Bucket\"\r\n                  - \"/*\"\r\n            Principal: \r\n              AWS:\r\n                Fn::Join:\r\n                  - \"\"\r\n                  - \r\n                    - \"arn:aws:iam::\"\r\n                    - Ref: \"AWS::AccountId\"\r\n                    - \":root\"\r\nOutputs: \r\n  IAMRole: \r\n    Description: \"IAM Role Name\"\r\n    Value: \r\n      Ref: IAMRole\r\n  S3BucketName:\r\n    Value:\r\n      Ref S3BucketName\r\n  LambdaFunction: \r\n    Description: \"Lambda Function Name\"\r\n    Value: \r\n      Ref: LambdaFunction"
}
StackSet-J0126970-createIamRole-f72bea1c-a9ed-4c10-8f65-4677a5134e32
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "{\n  \"AWSTemplateFormatVersion\" : \"2010-09-09\",\n  \"Description\" : \"Template for Creating IAM Role to Switch from Internavi Login AWS Account\",\n  \"Parameters\" : {\n    \"TrustedAWSAccountId\" : {\n      \"AllowedPattern\" : \"^[0-9]*$\",\n      \"Type\" : \"String\",\n      \"Default\" : \"975196479634\",\n      \"Description\" : \"Trusted AWS Account ID\"\n    },\n    \"IAMRoleName\": {\n      \"Type\": \"String\",\n      \"Default\": \"HmSolUser\",\n      \"Description\": \"IAM Role Name\"\n    },\n    \"IAMPolicyType\": {\n      \"Type\": \"String\",\n      \"Default\": \"HmSolUser\",\n      \"Description\": \"IAM Policy Type\",\n      \"AllowedValues\": [ \"HmSolUser\", \"HmAdmin\" ]\n    },\n    \"IAMUserName\": {\n      \"Type\": \"String\",\n      \"Default\": \"\",\n      \"Description\": \"IAM User Name\"\n    }\n  },\n  \"Conditions\" : {\n    \"user\"        : { \"Fn::Equals\" : [{\"Ref\" : \"IAMPolicyType\"}, \"HmSolUser\" ]},\n    \"admin\"        : { \"Fn::Equals\" : [{\"Ref\" : \"IAMPolicyType\"}, \"HmAdmin\" ]}\n  },\n  \"Resources\" : {\n    \"IAMRoleForAdmin\": {\n      \"Type\": \"AWS::IAM::Role\",\n      \"Condition\" : \"admin\",\n      \"Properties\": {\n        \"AssumeRolePolicyDocument\": {\n          \"Version\": \"2012-10-17\",\n          \"Statement\": [\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", { \"Ref\" : \"IAMUserName\" } ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            }\n          ]\n        },\n        \"ManagedPolicyArns\": [\n          \"arn:aws:iam::aws:policy/AdministratorAccess\"\n        ],\n        \"Path\": \"/\",\n        \"RoleName\": { \"Ref\" : \"IAMRoleName\" }\n      }\n    },\n    \"IAMRoleForUser\": {\n      \"Type\": \"AWS::IAM::Role\",\n      \"Condition\" : \"user\",\n      \"Properties\": {\n        \"AssumeRolePolicyDocument\": {\n          \"Version\": \"2012-10-17\",\n          \"Statement\": [\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", { \"Ref\" : \"IAMUserName\" } ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            }\n          ]\n        },\n        \"ManagedPolicyArns\": [\n          \"arn:aws:iam::aws:policy/AdministratorAccess\"\n        ],\n        \"Path\": \"/\",\n        \"RoleName\": { \"Ref\" : \"IAMRoleName\" }\n      }\n    }\n  },\n  \"Outputs\" : {\n    \"IAMRoleAdminArn\": {\n      \"Value\": { \"Fn::GetAtt\" : [ \"IAMRoleForAdmin\", \"Arn\" ] },\n      \"Condition\" : \"admin\"\n    },\n    \"IAMRoleUserArn\": {\n      \"Value\": { \"Fn::GetAtt\" : [ \"IAMRoleForUser\", \"Arn\" ] },\n      \"Condition\" : \"user\"\n    },\n    \"LinkForSwitchRole\": {\n      \"Value\": { \"Fn::Join\": [ \"\", [ \"https://signin.aws.amazon.com/switchrole?roleName=\", { \"Ref\" : \"IAMRoleName\" }, \"&account=\", { \"Ref\" : \"AWS::AccountId\" } ] ] }\n    }\n  }\n}\n"
}
StackSet-InfraAdmin-CreateIamRole-2b4e1e42-1316-43aa-a682-2858a224b87a
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": {
        "AWSTemplateFormatVersion": "2010-09-09", 
        "Description": "Template for Creating IAM Role to Switch from Internavi Login AWS Account", 
        "Parameters": {
            "TrustedAWSAccountId": {
                "AllowedPattern": "^[0-9]*$", 
                "Type": "String", 
                "Default": "975196479634", 
                "Description": "Trusted AWS Account ID"
            }, 
            "IAMRoleName": {
                "Type": "String", 
                "Default": "InfraAdmin", 
                "Description": "IAM Role Name"
            }
        }, 
        "Resources": {
            "IAMRoleForEngineer": {
                "Type": "AWS::IAM::Role", 
                "Properties": {
                    "AssumeRolePolicyDocument": {
                        "Version": "2012-10-17", 
                        "Statement": [
                            {
                                "Effect": "Allow", 
                                "Principal": {
                                    "AWS": {
                                        "Fn::Join": [
                                            "", 
                                            [
                                                "arn:aws:iam::", 
                                                {
                                                    "Ref": "TrustedAWSAccountId"
                                                }, 
                                                ":user/", 
                                                "JV010031"
                                            ]
                                        ]
                                    }
                                }, 
                                "Action": [
                                    "sts:AssumeRole"
                                ], 
                                "Condition": {
                                    "Bool": {
                                        "aws:MultiFactorAuthPresent": "true"
                                    }
                                }
                            }, 
                            {
                                "Effect": "Allow", 
                                "Principal": {
                                    "AWS": {
                                        "Fn::Join": [
                                            "", 
                                            [
                                                "arn:aws:iam::", 
                                                {
                                                    "Ref": "TrustedAWSAccountId"
                                                }, 
                                                ":user/", 
                                                "JV010024"
                                            ]
                                        ]
                                    }
                                }, 
                                "Action": [
                                    "sts:AssumeRole"
                                ], 
                                "Condition": {
                                    "Bool": {
                                        "aws:MultiFactorAuthPresent": "true"
                                    }
                                }
                            }
                        ]
                    }, 
                    "ManagedPolicyArns": [
                        "arn:aws:iam::aws:policy/AdministratorAccess"
                    ], 
                    "Path": "/", 
                    "RoleName": {
                        "Ref": "IAMRoleName"
                    }
                }
            }
        }, 
        "Outputs": {
            "IAMRoleArn": {
                "Value": {
                    "Fn::GetAtt": [
                        "IAMRoleForEngineer", 
                        "Arn"
                    ]
                }
            }, 
            "LinkForSwitchRole": {
                "Value": {
                    "Fn::Join": [
                        "", 
                        [
                            "https://signin.aws.amazon.com/switchrole?roleName=", 
                            {
                                "Ref": "IAMRoleName"
                            }, 
                            "&account=", 
                            {
                                "Ref": "AWS::AccountId"
                            }
                        ]
                    ]
                }
            }
        }
    }
}
StackSet-OpeAdmin-CreateIamRole-884a604b-e6b4-4edc-843b-a70e85b84e9b
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "{\n  \"AWSTemplateFormatVersion\" : \"2010-09-09\",\n  \"Description\" : \"Template for Creating IAM Role to Switch from Internavi Login AWS Account\",\n  \"Parameters\" : {\n    \"TrustedAWSAccountId\" : {\n      \"AllowedPattern\" : \"^[0-9]*$\",\n      \"Type\" : \"String\",\n      \"Default\" : \"975196479634\",\n      \"Description\" : \"Trusted AWS Account ID\"\n    },\n    \"IAMRoleName\": {\n      \"Type\": \"String\",\n      \"Default\": \"OpeAdminRole\",\n      \"Description\": \"IAM Role Name\"\n    }\n  },\n  \"Resources\" : {\n    \"IAMRoleForEngineer\": {\n      \"Type\": \"AWS::IAM::Role\",\n      \"Properties\": {\n        \"AssumeRolePolicyDocument\": {\n          \"Version\": \"2012-10-17\",\n          \"Statement\": [\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010002\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010025\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010026\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010027\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010028\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010030\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            }\n          ]\n        },\n        \"ManagedPolicyArns\": [\n          \"arn:aws:iam::aws:policy/AdministratorAccess\"\n        ],\n        \"Path\": \"/\",\n        \"RoleName\": { \"Ref\" : \"IAMRoleName\" }\n      }\n    }\n  },\n  \"Outputs\" : {\n    \"IAMRoleArn\": {\n      \"Value\": { \"Fn::GetAtt\" : [ \"IAMRoleForEngineer\", \"Arn\" ] }\n    },\n    \"LinkForSwitchRole\": {\n      \"Value\": { \"Fn::Join\": [ \"\", [ \"https://signin.aws.amazon.com/switchrole?roleName=\", { \"Ref\" : \"IAMRoleName\" }, \"&account=\", { \"Ref\" : \"AWS::AccountId\" } ] ] }\n    }\n  }\n}\n"
}
INV-ver-des01-bastion
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: 2010-09-09\nDescription: Bastion EC2\nParameters:\n  accountAllias:\n    Type: String\n  amiId:\n    Type: String\nResources:\n  SSHSecurityGroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      VpcId: !ImportValue VPC\n      GroupName: !Sub ${accountAllias}-bastion-sg\n      GroupDescription: !Sub ${accountAllias}-bastion-sg\n      Tags:\n        - Key: Name\n          Value: !Sub ${accountAllias}-bastion-sg\n  EC2:\n    Type: AWS::EC2::Instance\n    Properties:\n      ImageId: !Ref amiId\n      InstanceType: t3.micro\n      KeyName: !Sub ${accountAllias}-bastion-key\n      NetworkInterfaces:\n        - AssociatePublicIpAddress: true\n          SubnetId: !ImportValue PublicSubnet1a\n          DeviceIndex: 0\n          GroupSet:\n            - !Ref SSHSecurityGroup\n      UserData:\n        Fn::Base64: !Sub |\n          #!/bin/bash\n          yum -y update\n      Tags:\n        - Key: Name\n          Value: !Sub ${accountAllias}-bastion\n  EIP:\n    Type: AWS::EC2::EIP\n    Properties:\n      Domain: vpc\n  AssociateEIP:\n    Type: AWS::EC2::EIPAssociation\n    Properties:\n      EIP: !Ref EIP\n      InstanceId: !Ref EC2\nOutputs:\n  EC2:\n    Value: !Ref EC2\n    Export:\n      Name: BastionEC2\n  EIP:\n    Value: !Ref EIP\n    Export:\n      Name: BastionIP\n"
}
INV-ver-des01-ver-ecr-access-role
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: codepipeline\n\n# ------------------------------------------------------------#\n#  Parameters\n# ------------------------------------------------------------#\nParameters:\n  accountAllias:\n    Type: String\n  accountAlliasLowerCase:\n    Type: String\n  devAwsAccountId:\n    Type: String\n\nResources:\n# ------------------------------------------------------------#\n#  Role\n# ------------------------------------------------------------#\n  verEcrAccessRole:\n    Type: AWS::IAM::Role\n    Properties:\n      RoleName: ver-ecr-access-role\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement: \n          - Effect: \"Allow\"\n            Principal: \n              AWS: \n                - !Sub arn:aws:iam::${devAwsAccountId}:root\n            Action: \n              - \"sts:AssumeRole\"\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess\n\n# ------------------------------------------------------------#\n#  Outputs\n# ------------------------------------------------------------#\nOutputs:\n  verEcrAccessRole:\n    Value: !Ref verEcrAccessRole\n    Export:\n      Name: verEcrAccessRole"
}
INV-ver-des01-codepipeline-ver
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: codepipeline\n\n# ------------------------------------------------------------#\n#  Parameters\n# ------------------------------------------------------------#\nParameters:\n  accountAllias:\n    Type: String\n  accountAlliasLowerCase:\n    Type: String\n\nResources:\n# ------------------------------------------------------------#\n#  Role\n# ------------------------------------------------------------#\n  codeBuildRoleVer:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement: \n          - Effect: \"Allow\"\n            Principal: \n              Service: \n                - \"codebuild.amazonaws.com\"\n            Action: \n              - \"sts:AssumeRole\"\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess\n        - arn:aws:iam::aws:policy/AmazonS3FullAccess\n        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess\n  codePipelineRoleVer:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement: \n          - Effect: \"Allow\"\n            Principal: \n              Service: \n                - \"codepipeline.amazonaws.com\"\n            Action: \n              - \"sts:AssumeRole\"\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess\n        - arn:aws:iam::aws:policy/AWSCodeCommitFullAccess\n        - arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess\n        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess\n        - arn:aws:iam::aws:policy/AmazonS3FullAccess\n        - arn:aws:iam::aws:policy/CloudWatchFullAccess\n        - arn:aws:iam::aws:policy/AmazonEC2ContainerServiceFullAccess\n\n# ------------------------------------------------------------#\n#  CodeBuild\n# ------------------------------------------------------------#\n  codeBuildProjectVer:\n    Type: AWS::CodeBuild::Project\n    Properties:\n      Name: !Sub ${accountAlliasLowerCase}-build-project-ver\n      Artifacts:\n        Type: CODEPIPELINE\n      Description: !Sub Building stage for ${accountAlliasLowerCase} ver\n      Environment:\n        ComputeType: BUILD_GENERAL1_SMALL\n        EnvironmentVariables:\n          - Name: AWS_ACCOUNT_ID\n            Value: !Ref AWS::AccountId\n          - Name: IMAGE_NAME_NGINX\n            Value: !Sub ${accountAlliasLowerCase}-nginx\n          - Name: IMAGE_NAME_PHP\n            Value: !Sub ${accountAlliasLowerCase}-php-fpm\n          - Name: CONTAINER_NAME_NGINX\n            Value: nginx\n          - Name: CONTAINER_NAME_PHP\n            Value: php-fpm\n        Image: aws/codebuild/docker:18.09.0\n        Type: LINUX_CONTAINER\n        PrivilegedMode: True\n      ServiceRole: !Ref codeBuildRoleVer\n      Source:\n        Type: CODEPIPELINE\n        BuildSpec: |\n          version: 0.2 \n          phases:\n            build:\n              commands:\n                - REPOSITORY_URI_NGINX=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_NAME_NGINX}\n                - REPOSITORY_URI_PHP=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_NAME_PHP}\n                - IMAGE_TAG=latest\n                - IMAGE_DIFINITION_NGINX=\"{\\\"name\\\":\\\"${CONTAINER_NAME_NGINX}\\\",\\\"imageUri\\\":\\\"${REPOSITORY_URI_NGINX}:${IMAGE_TAG}\\\"}\"\n                - IMAGE_DIFINITION_PHP=\"{\\\"name\\\":\\\"${CONTAINER_NAME_PHP}\\\",\\\"imageUri\\\":\\\"${REPOSITORY_URI_PHP}:${IMAGE_TAG}\\\"}\"\n                - echo \"[${IMAGE_DIFINITION_NGINX},${IMAGE_DIFINITION_PHP}]\" > imagedefinitions.json\n          artifacts:\n              files: imagedefinitions.json\n      TimeoutInMinutes: 30\n# ------------------------------------------------------------#\n#  S3\n# ------------------------------------------------------------#\n  s3bucketforcodepipelineVer:\n    Type: AWS::S3::Bucket\n    Properties:\n      BucketName: !Sub ${accountAlliasLowerCase}-codepipeline-ver\n# ------------------------------------------------------------#\n#  CodePipeline\n# ------------------------------------------------------------#\n  codePipelineVer:\n    Type: AWS::CodePipeline::Pipeline\n    DependsOn: s3bucketforcodepipelineVer\n    Properties:\n      ArtifactStore:\n        Location: !Ref s3bucketforcodepipelineVer\n        Type: S3\n      Name: !Sub ${accountAlliasLowerCase}-codepipeline-ver\n      RestartExecutionOnUpdate: false\n      RoleArn: !GetAtt codePipelineRoleVer.Arn\n      Stages:\n        - Name: Source\n          Actions:\n            - Name: SourceAction\n              ActionTypeId: \n                Category: Source\n                Owner: AWS\n                Provider: ECR\n                Version: 1\n              OutputArtifacts: \n                - Name: SourceArtifact\n              Configuration: \n                RepositoryName: !Sub ${accountAlliasLowerCase}-nginx\n              RunOrder: 1\n        - Name: Build\n          Actions:\n            - Name: CodeBuild\n              InputArtifacts:\n                - Name: SourceArtifact\n              ActionTypeId: \n                Category: Build\n                Owner: AWS\n                Provider: CodeBuild\n                Version: 1\n              Configuration: \n                ProjectName: !Ref codeBuildProjectVer\n              OutputArtifacts: \n                - Name: CodebuildOutput\n              RunOrder: 1\n        - Name: Staging\n          Actions:\n            - Name: Deploy2InternalService\n              InputArtifacts:\n                - Name: CodebuildOutput\n              ActionTypeId: \n                Category: Deploy\n                Owner: AWS\n                Provider: ECS\n                Version: 1\n              Configuration:\n                ClusterName: !ImportValue cluster\n                FileName: imagedefinitions.json\n                ServiceName: !ImportValue internalService\n              OutputArtifacts: []\n              RunOrder: 1\n# ------------------------------------------------------------#\n#  CloudWatch Event\n# ------------------------------------------------------------#\n  cloudWatchEventRoleVer:\n    Type: 'AWS::IAM::Role'\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service:\n                - events.amazonaws.com\n            Action: 'sts:AssumeRole'\n      Path: /\n      Policies:\n        - PolicyName: cwe-pipeline-execution\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Effect: Allow\n                Action: 'codepipeline:StartPipelineExecution'\n                Resource: !Join \n                  - ''\n                  - - 'arn:aws:codepipeline:'\n                    - !Ref 'AWS::Region'\n                    - ':'\n                    - !Ref 'AWS::AccountId'\n                    - ':'\n                    - !Ref codePipelineVer\n  cloudwatchEventsRuleVer:\n    Type: AWS::Events::Rule\n    Properties:\n      EventPattern:\n        source:\n          - aws.ecr\n        detail:\n          eventName:\n            - PutImage\n          requestParameters:\n            repositoryName: \n              - !Sub ${accountAlliasLowerCase}-nginx\n            imageTag: \n              - latest\n      Targets:\n        - Arn:  !Join \n          - ''\n          - - 'arn:aws:codepipeline:'\n            - !Ref 'AWS::Region'\n            - ':'\n            - !Ref 'AWS::AccountId'\n            - ':'\n            - !Ref codePipelineVer\n          Id: !Sub ${accountAlliasLowerCase}-codepipeline-ver\n          RoleArn: !GetAtt cloudWatchEventRoleVer.Arn\n\n# ------------------------------------------------------------#\n#  Outputs\n# ------------------------------------------------------------#\nOutputs:\n  codeBuildRoleVer:\n    Value: !Ref codeBuildRoleVer\n    Export:\n      Name: codeBuildRoleVer\n  codePipelineRoleVer:\n    Value: !Ref codePipelineRoleVer\n    Export:\n      Name: codePipelineRoleVer\n  codeBuildProjectVer:\n    Value: !Ref codeBuildProjectVer\n    Export:\n      Name: codeBuildProjectVer\n  s3bucketforcodepipelineVer:\n    Value: !Ref s3bucketforcodepipelineVer\n    Export:\n      Name: s3bucketforcodepipelineVer\n  codePipelineVer:\n    Value: !Ref codePipelineVer\n    Export:\n      Name: codePipelineVer\n  cloudWatchEventRoleVer:\n    Value: !Ref cloudWatchEventRoleVer\n    Export:\n      Name: cloudWatchEventRoleVer\n  cloudwatchEventsRuleVer:\n    Value: !Ref cloudwatchEventsRuleVer\n    Export:\n      Name: cloudwatchEventsRuleVer\n\n"
}
INV-ver-des01-ver-esp
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: Create Service Endpoint\n\nParameters:\n  serviceAlliasLowerCase:\n    Type: String\n  serviceName:\n    Type: String\n  cidr:\n    Type: String\n\nResources:\n\n  endpointSecuritygroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupName: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      GroupDescription: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      Tags:\n        - Key: Name\n          Value: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      VpcId: !ImportValue VPC\n      SecurityGroupIngress:\n        - IpProtocol: tcp\n          FromPort: 80\n          ToPort: 80\n          CidrIp: !Ref cidr\n  endpoint:\n    Type: AWS::EC2::VPCEndpoint\n    Properties:\n      VpcEndpointType: Interface\n      VpcId: !ImportValue VPC\n      SubnetIds:\n        - !ImportValue PrivateSubnet1a\n        - !ImportValue PrivateSubnet1c\n      SecurityGroupIds:\n        - !Ref endpointSecuritygroup\n      ServiceName: !Ref serviceName\n      PrivateDnsEnabled: false\n"
}
inv-ver-des01-ecs-service-internal
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: internal ecs service\n\nParameters:\n  desiredCount:\n    Type: Number\n  internalSubnetID1:\n    Type: String\n  internalSubnetID2:\n    Type: String\n  AssignPublicIp:\n    Type: String\n  ECSserviceInternal:\n    Type: String\n    \nResources:\n  internalService:\n    Type: AWS::ECS::Service\n    Properties:\n      Cluster: !ImportValue cluster\n      DeploymentConfiguration:\n        MaximumPercent: 200\n        MinimumHealthyPercent: 50\n      DesiredCount: !Ref desiredCount\n      LaunchType: FARGATE\n      LoadBalancers:\n        - ContainerName: !Sub nginx\n          ContainerPort: 80\n          TargetGroupArn: !ImportValue internalTargetGroup\n      NetworkConfiguration:\n        AwsvpcConfiguration:\n          AssignPublicIp: !Sub ${AssignPublicIp}\n          SecurityGroups: \n            - !ImportValue internalApplicationSecuritygroup\n          Subnets:\n            - !Sub ${internalSubnetID1}\n            - !Sub ${internalSubnetID2}\n      ServiceName: !Sub ${ECSserviceInternal}\n      TaskDefinition: !ImportValue taskdefinition\n\nOutputs:\n  internalService:\n    Value: !Ref internalService\n    Export:\n      Name: internalService\n\n"
}
inv-ver-des01-ecs-task
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: ecs task definition\n\nParameters:\n  cpu:\n    Type: Number\n  memory:\n    Type: Number\n  RoleECStask:\n    Type: String\n  ECStaskName:\n    Type: String\n  Region:\n    Type: String\n  accountAlliasLowerCase:\n    Type: String\n  repositoryURInginx:\n    Type: String\n  repositoryURIphpfpm:\n    Type: String\n  Env1:\n    Type: String\n  Env2:\n    Type: String\n  Env3:\n    Type: String\n  Env4:\n    Type: String\n  Env5:\n    Type: String\n  Env6:\n    Type: String\n\nResources:\n  ecsTaskExecutionRole:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement: \n          - Effect: \"Allow\"\n            Principal: \n              Service: \n                - \"ecs-tasks.amazonaws.com\"\n            Action: \n              - \"sts:AssumeRole\"\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy\n      RoleName: !Sub ${RoleECStask}\n  Taskdefinition:\n    Type: AWS::ECS::TaskDefinition\n    DependsOn: ecsTaskExecutionRole\n    Properties:\n      Family: !Sub ${ECStaskName}\n      RequiresCompatibilities:\n        - FARGATE\n      Cpu: !Ref cpu\n      Memory: !Ref memory\n      NetworkMode: awsvpc\n      ExecutionRoleArn: !GetAtt ecsTaskExecutionRole.Arn\n      TaskRoleArn: !GetAtt ecsTaskExecutionRole.Arn\n      ContainerDefinitions:\n        -\n          Name: nginx\n          Image: !Sub ${repositoryURInginx}\n          LogConfiguration:\n            LogDriver: awslogs\n            Options:\n              awslogs-region: !Sub ${Region}\n              awslogs-group: !ImportValue logGroup\n              awslogs-stream-prefix: ecs\n          PortMappings:\n            -\n              HostPort: 80\n              Protocol: tcp\n              ContainerPort: 80\n        -\n          Name: php-fpm\n          Image: !Sub ${repositoryURIphpfpm}\n          LogConfiguration:\n            LogDriver: awslogs\n            Options:\n              awslogs-region: !Sub ${Region}\n              awslogs-group: !ImportValue logGroup\n              awslogs-stream-prefix: ecs\n          PortMappings:\n            -\n              HostPort: 9000\n              Protocol: tcp\n              ContainerPort: 9000\n          Environment:\n            - Name: ENV_NAME_FOR_LOG\n              Value: !Sub ${Env1}\n            - Name: HONDA_REFCARLOCATION_API\n              Value: !Sub ${Env2}\n            - Name: HONDA_REFIDINFO_API\n              Value: !Sub ${Env3}\n            - Name: HONDA_REFMEMBERINFO_API\n              Value: !Sub ${Env4}\n            - Name: HONDA_REGREMOTELIST_API\n              Value: !Sub ${Env5}\n            - Name: ITSMONAVI_LOADER_URL\n              Value: !Sub ${Env6}\nOutputs:\n  ecsTaskExecutionRole:\n    Value: !Ref ecsTaskExecutionRole\n    Export:\n      Name: ecsTaskExecutionRole\n  taskdefinition:\n    Value: !Ref Taskdefinition\n    Export:\n      Name: taskdefinition\n\n\n"
}
inv-ver-des01-ecs
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: ecs and loggroup\n\nParameters:\n  logGroupName:\n    Type: String\n  ECSname:\n    Type: String\n\nResources:\n  ecs:\n    Type: AWS::ECS::Cluster\n    Properties:\n      ClusterName: !Sub ${ECSname}\n  logGroup:\n    Type: AWS::Logs::LogGroup\n    Properties: \n      LogGroupName: !Ref logGroupName\n\nOutputs:\n  cluster:\n    Value: !Ref ecs\n    Export:\n      Name: cluster\n  logGroup:\n    Value: !Ref logGroup\n    Export:\n      Name: logGroup\n"
}
inv-ver-des01-ecr
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: ecr\n\nParameters:\n  ECRnginx:\n    Type: String\n  ECRphpfpm:\n    Type: String\n\nResources:\n  ecrnginx:\n    Type: AWS::ECR::Repository\n    Properties: \n      RepositoryName: !Sub ${ECRnginx}\n  ecrphpfpm:\n    Type: AWS::ECR::Repository\n    Properties: \n      RepositoryName: !Sub ${ECRphpfpm}\n\nOutputs:\n  ecrnginx:\n    Value: !GetAtt ecrnginx.Arn\n    Export:\n      Name: ecr-nginx\n  ecrphpfpm:\n    Value: !GetAtt ecrphpfpm.Arn\n    Export:\n      Name: ecr-php-fpm\n\n"
}
StackSet-cfn-exec-ec2-165e04d9-ffc1-4abd-b5d7-b3165aa53985
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: 2010-09-09\nDescription: CloudFormation Execute EC2\nParameters:\n  amiId:\n    Type: String\n    Default: ami-0d7ed3ddb85b521a6\n  SshCidr1:\n    Type: String\n    Default: 121.2.65.36/32\n  SshCidr2:\n    Type: String\n    Default: 39.110.201.10/32\n  SshCidr3:\n    Type: String\n    Default: 222.11.38.119/32\n  SshCidr4:\n    Type: String\n    Default: 1.21.118.25/32\n  SshCidr5:\n    Type: String\n    Default: 153.163.63.48/32\n  SshCidr6:\n    Type: String\n    Default: 13.231.11.115/32\nResources:\n  EC2Role:\n    Type: \"AWS::IAM::Role\"\n    Properties:\n      RoleName: cfn-exec-ec2-role\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/AdministratorAccess\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement:\n          -\n            Effect: \"Allow\"\n            Principal:\n              Service:\n                - \"ec2.amazonaws.com\"\n            Action:\n              - \"sts:AssumeRole\"\n      Path: \"/\"\n  Profile:\n    Type: AWS::IAM::InstanceProfile\n    Properties:\n      Roles:\n        - !Ref EC2Role\n  SSHSecurityGroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupName: cfn-exec-sg\n      GroupDescription: cfn-exec-sg\n      SecurityGroupIngress:\n      - IpProtocol: tcp\n        FromPort: '22'\n        ToPort: '22'\n        CidrIp: !Ref SshCidr1\n        Description: Classmethod\n      - IpProtocol: tcp\n        FromPort: '22'\n        ToPort: '22'\n        CidrIp: !Ref SshCidr2\n        Description: Classmethod\n      - IpProtocol: tcp\n        FromPort: '22'\n        ToPort: '22'\n        CidrIp: !Ref SshCidr3\n        Description: Classmethod\n      - IpProtocol: tcp\n        FromPort: '22'\n        ToPort: '22'\n        CidrIp: !Ref SshCidr4\n        Description: Classmethod\n      - IpProtocol: tcp\n        FromPort: '22'\n        ToPort: '22'\n        CidrIp: !Ref SshCidr5\n        Description: Classmethod\n      - IpProtocol: tcp\n        FromPort: '22'\n        ToPort: '22'\n        CidrIp: !Ref SshCidr6\n        Description: Classmethod\n      Tags:\n        - Key: Name\n          Value: cfn-exec-sg\n  EC2:\n    Type: AWS::EC2::Instance\n    Properties:\n      ImageId: !Ref amiId\n      InstanceType: t3.micro\n      KeyName: cfn-exec-key\n      IamInstanceProfile: !Ref Profile\n      NetworkInterfaces:\n        - AssociatePublicIpAddress: true\n          DeviceIndex: 0\n          GroupSet:\n            - !GetAtt SSHSecurityGroup.GroupId\n      UserData:\n        Fn::Base64: !Sub |\n          #!/bin/bash\n          yum -y update\n          yum -y install git\n      Tags:\n        - Key: Name\n          Value: cfn-exec\n  EIP:\n    Type: AWS::EC2::EIP\n    Properties:\n      Domain: vpc\n  AssociateEIP:\n    Type: AWS::EC2::EIPAssociation\n    Properties:\n      EIP: !Ref EIP\n      InstanceId: !Ref EC2\nOutputs:\n  EC2:\n    Value: !Ref EC2\n    Export:\n      Name: cfn-exex-ec2\n  EIP:\n    Value: !Ref EIP\n    Export:\n      Name: cfn-exex-IP\n"
}
INV-ver-des01-endpointService
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: Create Service Endpoint\n\nParameters:\n  arrowedAccountId1:\n    Type: String\n\nResources:\n  endpointService:\n    Type: \"AWS::EC2::VPCEndpointService\"\n    Properties:\n      NetworkLoadBalancerArns:\n        - !ImportValue internalNlb\n      AcceptanceRequired: false\n  servicePermisstions:\n    Type: \"AWS::EC2::VPCEndpointServicePermissions\"\n    Properties:\n      AllowedPrincipals:\n        - !Sub arn:aws:iam::${arrowedAccountId1}:root\n      ServiceId: !Ref endpointService\n\nOutputs:\n  servicePermisstions:\n    Value: !Ref servicePermisstions\n    Export:\n      Name: servicePermisstions\n"
}
INV-ver-des01-internal-nlb
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: internal security group and nlb\n\nParameters:\n  accountAllias:\n    Type: String\n  accountAlliasLowerCase:\n    Type: String\n  internalSecurityGroupCidr:\n    Type: String\n\nResources:\n  internalApplicationSecuritygroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupName: !Sub ${accountAlliasLowerCase}-internal-application-sg\n      GroupDescription: !Sub ${accountAlliasLowerCase}-internal-application-sg\n      Tags:\n        - Key: Name\n          Value: !Sub ${accountAlliasLowerCase}-internal-application-sg\n      VpcId: !ImportValue VPC\n      SecurityGroupIngress:\n      - IpProtocol: tcp\n        FromPort: '80'\n        ToPort: '80'\n        CidrIp: !Ref internalSecurityGroupCidr\n  internalTargetGroup:\n    Type: AWS::ElasticLoadBalancingV2::TargetGroup\n    Properties:\n      HealthCheckIntervalSeconds: 30\n      HealthCheckPath: /healthcheck\n      HealthCheckPort: 80\n      HealthCheckProtocol: HTTP\n      HealthCheckTimeoutSeconds: 6\n      HealthyThresholdCount: 3\n      Name: !Sub ${accountAlliasLowerCase}-internal-tg\n      Port: 80\n      Protocol: TCP\n      UnhealthyThresholdCount: 3\n      TargetType: ip\n      VpcId: !ImportValue VPC\n  internalNlb:\n    Type: AWS::ElasticLoadBalancingV2::LoadBalancer\n    Properties:\n      Name: !Sub ${accountAlliasLowerCase}-internal-nlb\n      Scheme: internal\n      Subnets:\n        - !ImportValue PrivateSubnet1a\n        - !ImportValue PrivateSubnet1c\n      Tags:\n        - Key: Name\n          Value: !Sub ${accountAlliasLowerCase}-internal-nlb\n      Type: network\n      LoadBalancerAttributes:\n        - Key: load_balancing.cross_zone.enabled\n          Value: true\n  internallistnener:\n    Type: AWS::ElasticLoadBalancingV2::Listener\n    Properties:\n      DefaultActions:\n        - TargetGroupArn: !Ref internalTargetGroup\n          Type: forward\n      LoadBalancerArn: !Ref internalNlb\n      Port: 80\n      Protocol: TCP\n\nOutputs:\n  internalApplicationSecuritygroup:\n    Value: !Ref internalApplicationSecuritygroup\n    Export:\n      Name: internalApplicationSecuritygroup\n  internalTargetGroup:\n    Value: !Ref internalTargetGroup\n    Export:\n      Name: internalTargetGroup\n  internalNlb:\n    Value: !Ref internalNlb\n    Export:\n      Name: internalNlb\n  internallistnener:\n    Value: !Ref internallistnener\n    Export:\n      Name: internallistnener\n"
}
INV-ver-des01-ap1-ver-ysd
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: Create Service Endpoint\n\nParameters:\n  serviceAlliasLowerCase:\n    Type: String\n  serviceName:\n    Type: String\n  cidr:\n    Type: String\n\nResources:\n\n  endpointSecuritygroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupName: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      GroupDescription: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      Tags:\n        - Key: Name\n          Value: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      VpcId: !ImportValue VPC\n      SecurityGroupIngress:\n        - IpProtocol: tcp\n          FromPort: 80\n          ToPort: 80\n          CidrIp: !Ref cidr\n  endpoint:\n    Type: AWS::EC2::VPCEndpoint\n    Properties:\n      VpcEndpointType: Interface\n      VpcId: !ImportValue VPC\n      SubnetIds:\n        - !ImportValue PrivateSubnet1a\n        - !ImportValue PrivateSubnet1c\n      SecurityGroupIds:\n        - !Ref endpointSecuritygroup\n      ServiceName: !Ref serviceName\n      PrivateDnsEnabled: false\n"
}
StackSet-ver-des01-createIamRole-57d3bfc4-3114-4613-bb6f-901a6cf16877
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "{\n  \"AWSTemplateFormatVersion\" : \"2010-09-09\",\n  \"Description\" : \"Template for Creating IAM Role to Switch from Internavi Login AWS Account\",\n  \"Parameters\" : {\n    \"TrustedAWSAccountId\" : {\n      \"AllowedPattern\" : \"^[0-9]*$\",\n      \"Type\" : \"String\",\n      \"Default\" : \"975196479634\",\n      \"Description\" : \"Trusted AWS Account ID\"\n    },\n    \"IAMRoleName\": {\n      \"Type\": \"String\",\n      \"Default\": \"SolDeveloper\",\n      \"Description\": \"IAM Role Name\"\n    },\n    \"IAMPolicyType\": {\n      \"Type\": \"String\",\n      \"Default\": \"SolUser\",\n      \"Description\": \"IAM Policy Type\",\n      \"AllowedValues\": [ \"SolUser\", \"Admin\" ]\n    }\n  },\n  \"Conditions\" : {\n    \"user\"        : { \"Fn::Equals\" : [{\"Ref\" : \"IAMPolicyType\"}, \"SolUser\" ]},\n    \"admin\"        : { \"Fn::Equals\" : [{\"Ref\" : \"IAMPolicyType\"}, \"Admin\" ]}\n  },\n  \"Resources\" : {\n    \"IAMRoleForAdmin\": {\n      \"Type\": \"AWS::IAM::Role\",\n      \"Condition\" : \"admin\",\n      \"Properties\": {\n        \"AssumeRolePolicyDocument\": {\n          \"Version\": \"2012-10-17\",\n          \"Statement\": [\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV050001\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV050002\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV050003\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV050004\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV050005\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV050006\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV050007\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            }\n          ]\n        },\n        \"ManagedPolicyArns\": [\n          \"arn:aws:iam::aws:policy/AdministratorAccess\"\n        ],\n        \"Path\": \"/\",\n        \"RoleName\": { \"Ref\" : \"IAMRoleName\" }\n      }\n    },\n    \"IAMRoleForUser\": {\n      \"Type\": \"AWS::IAM::Role\",\n      \"Condition\" : \"user\",\n      \"Properties\": {\n        \"AssumeRolePolicyDocument\": {\n          \"Version\": \"2012-10-17\",\n          \"Statement\": [\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV050001\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV050002\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV050003\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV050004\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV050005\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV050006\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV050007\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            }\n          ]\n        },\n        \"ManagedPolicyArns\": [\n          \"arn:aws:iam::aws:policy/ReadOnlyAccess\",\n          \"arn:aws:iam::aws:policy/AWSCodeCommitPowerUser\"\n        ],\n        \"Path\": \"/\",\n        \"RoleName\": { \"Ref\" : \"IAMRoleName\" }\n      }\n    }\n  },\n  \"Outputs\" : {\n    \"IAMRoleAdminArn\": {\n      \"Value\": { \"Fn::GetAtt\" : [ \"IAMRoleForAdmin\", \"Arn\" ] },\n      \"Condition\" : \"admin\"\n    },\n    \"IAMRoleUserArn\": {\n      \"Value\": { \"Fn::GetAtt\" : [ \"IAMRoleForUser\", \"Arn\" ] },\n      \"Condition\" : \"user\"\n    },\n    \"LinkForSwitchRole\": {\n      \"Value\": { \"Fn::Join\": [ \"\", [ \"https://signin.aws.amazon.com/switchrole?roleName=\", { \"Ref\" : \"IAMRoleName\" }, \"&account=\", { \"Ref\" : \"AWS::AccountId\" } ] ] }\n    }\n  }\n}\n"
}
INV-ver-des01-vpc-base
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "---\nAWSTemplateFormatVersion: '2010-09-09'\nDescription: VPC Network Template\nParameters:\n  SolName:\n    Type: String\n    Default: base01\n    Description: Solution Name.\n  SubSolName:\n    Type: String\n    Default: base\n    Description: Solution Name.\n  EnvName:\n    Type: String\n    Default: dev\n    Description: Env Name.\n  VPCCIDR:\n    Description: First and Second Octet of VPC, For example xxx.xxx\n    Type: String\n    Default: '10.0'\n    AllowedPattern: \"^(10\\\\.([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])|172\\\\.(1[6-9]|2[0-9]|3[0-1])|192\\\\.168)$\"\n    ConstraintDescription: xxx.xxx\nMappings:\n  StackConfig:\n    VPC:\n      CIDR: \".0.0/16\"\n    PublicSubnet1:\n      CIDR: \".0.0/24\"\n    PublicSubnet2:\n      CIDR: \".1.0/24\"\n    PrivateSubnet1:\n      CIDR: \".10.0/24\"\n    PrivateSubnet2:\n      CIDR: \".11.0/24\"\n\nResources:\n  VPC:\n    Type: AWS::EC2::VPC\n    Properties:\n      CidrBlock: !Sub\n        - ${VPCCIDR}${SubCIDR}\n        - SubCIDR: {\"Fn::FindInMap\": [ StackConfig, VPC, CIDR ]}\n      EnableDnsSupport: 'true'\n      EnableDnsHostnames: 'true'\n      InstanceTenancy: default\n      Tags:\n      - Key: Name\n        Value: !Sub INV-${EnvName}-${SolName}\n  InternetGateway:\n    Type: AWS::EC2::InternetGateway\n    Properties:\n      Tags:\n      - Key: Name\n        Value: !Sub INV-${EnvName}-${SolName}\n  AttachGateway:\n    Type: AWS::EC2::VPCGatewayAttachment\n    Properties:\n      VpcId: !Ref VPC\n      InternetGatewayId: !Ref InternetGateway\n\n  PublicSubnet1a:\n    Type: AWS::EC2::Subnet\n    DependsOn: AttachGateway\n    Properties:\n      AvailabilityZone: !Select [ 0, \"Fn::GetAZs\": {Ref: \"AWS::Region\"}]\n      CidrBlock: !Sub\n        - ${VPCCIDR}${SubCIDR}\n        - SubCIDR: {\"Fn::FindInMap\": [ StackConfig, PublicSubnet1, CIDR ]}\n      MapPublicIpOnLaunch: 'true'\n      Tags:\n      - Key: Name\n        Value: !Sub INV-${EnvName}-${SolName}-PublicSubnet1a\n      VpcId: !Ref VPC\n  PublicSubnet1c:\n    Type: AWS::EC2::Subnet\n    DependsOn: AttachGateway\n    Properties:\n      AvailabilityZone: !Select [ 1, \"Fn::GetAZs\": {Ref: \"AWS::Region\"}]\n      CidrBlock: !Sub\n        - ${VPCCIDR}${SubCIDR}\n        - SubCIDR: {\"Fn::FindInMap\": [ StackConfig, PublicSubnet2, CIDR ]}\n      MapPublicIpOnLaunch: 'true'\n      Tags:\n      - Key: Name\n        Value: !Sub INV-${EnvName}-${SolName}-PublicSubnet1c\n      VpcId: !Ref VPC\n  PrivateSubnet1a:\n    Type: AWS::EC2::Subnet\n    DependsOn: AttachGateway\n    Properties:\n      AvailabilityZone: !Select [ 0, \"Fn::GetAZs\": {Ref: \"AWS::Region\"}]\n      CidrBlock: !Sub\n        - ${VPCCIDR}${SubCIDR}\n        - SubCIDR: {\"Fn::FindInMap\": [ StackConfig, PrivateSubnet1, CIDR ]}\n      MapPublicIpOnLaunch: 'true'\n      Tags:\n      - Key: Name\n        Value: !Sub INV-${EnvName}-${SolName}-PrivateSubnet1a\n      VpcId: !Ref VPC\n  PrivateSubnet1c:\n    Type: AWS::EC2::Subnet\n    DependsOn: AttachGateway\n    Properties:\n      AvailabilityZone: !Select [ 1, \"Fn::GetAZs\": {Ref: \"AWS::Region\"}]\n      CidrBlock: !Sub\n        - ${VPCCIDR}${SubCIDR}\n        - SubCIDR: {\"Fn::FindInMap\": [ StackConfig, PrivateSubnet2, CIDR ]}\n      MapPublicIpOnLaunch: 'true'\n      Tags:\n      - Key: Name\n        Value: !Sub INV-${EnvName}-${SolName}-PrivateSubnet1c\n      VpcId: !Ref VPC\n\n  EIP1a:\n    Type: AWS::EC2::EIP\n    Properties:\n      Domain: vpc\n  NAT1a:\n    Type: AWS::EC2::NatGateway\n    Properties:\n      AllocationId:\n        Fn::GetAtt:\n          - EIP1a\n          - AllocationId\n      SubnetId: !Ref PublicSubnet1a\n      Tags:\n        - Key: Name\n          Value: !Sub INV-${EnvName}-${SolName}-NGW1a\n\n  EIP1c:\n    Type: AWS::EC2::EIP\n    Properties:\n      Domain: vpc\n  NAT1c:\n    Type: AWS::EC2::NatGateway\n    Properties:\n      AllocationId:\n        Fn::GetAtt:\n          - EIP1c\n          - AllocationId\n      SubnetId: !Ref PublicSubnet1c\n      Tags:\n        - Key: Name\n          Value: !Sub INV-${EnvName}-${SolName}-NGW1c\n\n  PublicRouteTable:\n    Type: AWS::EC2::RouteTable\n    DependsOn: AttachGateway\n    Properties:\n      VpcId: !Ref VPC\n      Tags:\n      - Key: Name\n        Value: !Sub INV-${EnvName}-${SolName}-PublicRoute\n  PublicRoute:\n    Type: AWS::EC2::Route\n    DependsOn: AttachGateway\n    Properties:\n      RouteTableId: !Ref PublicRouteTable\n      DestinationCidrBlock: 0.0.0.0/0\n      GatewayId: !Ref InternetGateway\n  PrivateRouteTable1a:\n    Type: AWS::EC2::RouteTable\n    DependsOn: NAT1a\n    Properties:\n      VpcId: !Ref VPC\n      Tags:\n      - Key: Name\n        Value: !Sub INV-${EnvName}-${SolName}-PrivateRoute1a\n  PrivateRoute1a:\n    Type: AWS::EC2::Route\n    DependsOn: NAT1a\n    Properties:\n      RouteTableId: !Ref PrivateRouteTable1a\n      DestinationCidrBlock: 0.0.0.0/0\n      NatGatewayId: !Ref NAT1a\n  PrivateRouteTable1c:\n    Type: AWS::EC2::RouteTable\n    DependsOn: NAT1c\n    Properties:\n      VpcId: !Ref VPC\n      Tags:\n      - Key: Name\n        Value: !Sub INV-${EnvName}-${SolName}-PrivateRoute1c\n  PrivateRoute1c:\n    Type: AWS::EC2::Route\n    DependsOn: NAT1c\n    Properties:\n      RouteTableId: !Ref PrivateRouteTable1c\n      DestinationCidrBlock: 0.0.0.0/0\n      NatGatewayId: !Ref NAT1c\n\n  PublicSubnet1aRouteTableAssociation:\n    Type: AWS::EC2::SubnetRouteTableAssociation\n    Properties:\n      SubnetId: !Ref PublicSubnet1a\n      RouteTableId: !Ref PublicRouteTable\n  PublicSubnet1cRouteTableAssociation:\n    Type: AWS::EC2::SubnetRouteTableAssociation\n    Properties:\n      SubnetId: !Ref PublicSubnet1c\n      RouteTableId: !Ref PublicRouteTable\n  PrivateSubnet1aRouteTableAssociation:\n    Type: AWS::EC2::SubnetRouteTableAssociation\n    Properties:\n      SubnetId: !Ref PrivateSubnet1a\n      RouteTableId: !Ref PrivateRouteTable1a\n  PrivateSubnet1cRouteTableAssociation:\n    Type: AWS::EC2::SubnetRouteTableAssociation\n    Properties:\n      SubnetId: !Ref PrivateSubnet1c\n      RouteTableId: !Ref PrivateRouteTable1c\n\n  DNS1:\n    Type: \"AWS::Route53::HostedZone\"\n    Properties:\n      HostedZoneConfig:\n        Comment: INV-LocalDomain\n      Name: internal-internavi\n      VPCs:\n        -\n          VPCId: !Ref VPC\n          VPCRegion: !Ref AWS::Region\n      HostedZoneTags:\n        -\n          Key: \"Name\"\n          Value: !Sub INV-${EnvName}-${SolName}\n\n  FlowLogBucket:\n    Type: AWS::S3::Bucket\n    Properties:\n        BucketName: !Join\n          - \"-\"\n          -\n            - inv\n            - !Ref EnvName\n            - !Ref SolName\n            - !Ref VPC\n  FlowLogBucketPolicy:\n    Type: AWS::S3::BucketPolicy\n    DependsOn: NAT1c\n    Properties:\n      Bucket: !Ref FlowLogBucket\n      PolicyDocument:\n        Statement:\n          -\n            Action:\n              - \"s3:PutObject\"\n            Effect: \"Allow\"\n            Resource:\n              Fn::Join:\n                - \"\"\n                -\n                  - \"arn:aws:s3:::\"\n                  - !Ref FlowLogBucket\n                  - \"/*\"\n            Principal:\n              Service: \"delivery.logs.amazonaws.com\"\n            Condition:\n              StringEquals:\n                s3:x-amz-acl: bucket-owner-full-control\n          -\n            Action:\n              - \"s3:GetBucketAcl\"\n            Effect: \"Allow\"\n            Resource:\n              Fn::Join:\n                - \"\"\n                -\n                  - \"arn:aws:s3:::\"\n                  - !Ref FlowLogBucket\n            Principal:\n              Service: \"delivery.logs.amazonaws.com\"\n  FlowLog:\n    Type: AWS::EC2::FlowLog\n    DependsOn: FlowLogBucketPolicy\n    Properties:\n      LogDestinationType : \"s3\"\n      LogDestination : !Join\n        - \"\"\n        -\n          - \"arn:aws:s3:::\"\n          - !Ref FlowLogBucket\n          - /FlowLogs/\n      ResourceType : VPC\n      ResourceId : !Ref VPC\n      TrafficType : ALL\n\n  S3Endpoint:\n    Type: AWS::EC2::VPCEndpoint\n    Properties:\n      RouteTableIds:\n        - !Ref PublicRouteTable\n        - !Ref PrivateRouteTable1a\n        - !Ref PrivateRouteTable1c\n      ServiceName: !Join\n        - ''\n        - - com.amazonaws.\n          - !Ref 'AWS::Region'\n          - .s3\n      VpcId: !Ref VPC\n  DynamoEndpoint:\n    Type: AWS::EC2::VPCEndpoint\n    Properties:\n      RouteTableIds:\n        - !Ref PublicRouteTable\n        - !Ref PrivateRouteTable1a\n        - !Ref PrivateRouteTable1c\n      ServiceName: !Join\n        - ''\n        - - com.amazonaws.\n          - !Ref 'AWS::Region'\n          - .dynamodb\n      VpcId: !Ref VPC\n  Certificate:\n    Type: AWS::CertificateManager::Certificate\n    Properties:\n      DomainName: !Sub '*.${EnvName}-${SubSolName}.cloud.internavi.ne.jp'\n      SubjectAlternativeNames:\n        - '*.cloud.internavi.ne.jp'\n      ValidationMethod: DNS\n\nOutputs:\n  VPC:\n    Value: !Ref VPC\n    Export:\n      Name: VPC\n  PublicSubnet1a:\n    Value: !Ref PublicSubnet1a\n    Export:\n      Name: PublicSubnet1a\n  PublicSubnet1c:\n    Value: !Ref PublicSubnet1c\n    Export:\n      Name: PublicSubnet1c\n  PrivateSubnet1a:\n    Value: !Ref PrivateSubnet1a\n    Export:\n      Name: PrivateSubnet1a\n  PrivateSubnet1c:\n    Value: !Ref PrivateSubnet1c\n    Export:\n      Name: PrivateSubnet1c\n  PublicRouteTable:\n    Value: !Ref PublicRouteTable\n    Export:\n      Name: PublicRouteTable\n  PrivateRouteTable1a:\n    Value: !Ref PrivateRouteTable1a\n    Export:\n      Name: PrivateRouteTable1a\n  PrivateRouteTable1c:\n    Value: !Ref PrivateRouteTable1c\n    Export:\n      Name: PrivateRouteTable1c\n  DNS1:\n    Value: !Ref DNS1\n    Export:\n      Name: DNS1\n"
}
INV-ver-des01-codecommit-ecr
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: codecommit and ecr\n\nParameters:\n  accountAllias:\n    Type: String\n  accountAlliasLowerCase:\n    Type: String\n\n\nResources:\n  codecommit:\n    Type: AWS::CodeCommit::Repository\n    Properties:\n      RepositoryName: !Sub ${accountAllias}-codecommit\n      RepositoryDescription: !Sub ${accountAllias}-codecommit\n  codecommitcfn:\n    Type: AWS::CodeCommit::Repository\n    Properties:\n      RepositoryName: !Sub ${accountAllias}-cfn\n      RepositoryDescription: !Sub ${accountAllias}-cfn\n  codecommitNginx:\n    Type: AWS::CodeCommit::Repository\n    Properties:\n      RepositoryName: !Sub ${accountAllias}-nginx\n      RepositoryDescription: !Sub ${accountAllias}-nginx\n  codecommitPhp:\n    Type: AWS::CodeCommit::Repository\n    Properties:\n      RepositoryName: !Sub ${accountAllias}-php-fpm\n      RepositoryDescription: !Sub ${accountAllias}-php-fpm\n  ecr:\n    Type: AWS::ECR::Repository\n    Properties: \n      RepositoryName: !Sub ${accountAlliasLowerCase}-ecr\n\nOutputs:\n  codecommit:\n    Value: !Ref codecommit\n    Export:\n      Name: codecommit\n  codecommitcfn:\n    Value: !Ref codecommitcfn\n    Export:\n      Name: codecommitcfn\n  codecommitNginx:\n    Value: !Ref codecommitNginx\n    Export:\n      Name: codecommitNginx\n  codecommitPhp:\n    Value: !Ref codecommitPhp\n    Export:\n      Name: codecommitPhp\n  ecr:\n    Value: !GetAtt ecr.Arn\n    Export:\n      Name: ecr\n\n"
}
StackSet-HmAdmin-createIamRole-3c34866f-9fe0-413c-885b-cda7a8d5f919
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "{\n  \"AWSTemplateFormatVersion\" : \"2010-09-09\",\n  \"Description\" : \"Template for Creating IAM Role to Switch from Internavi Login AWS Account\",\n  \"Parameters\" : {\n    \"TrustedAWSAccountId\" : {\n      \"AllowedPattern\" : \"^[0-9]*$\",\n      \"Type\" : \"String\",\n      \"Default\" : \"975196479634\",\n      \"Description\" : \"Trusted AWS Account ID\"\n    },\n    \"IAMRoleName\": {\n      \"Type\": \"String\",\n      \"Default\": \"HmAdmin\",\n      \"Description\": \"IAM Role Name\"\n    }\n  },\n  \"Resources\" : {\n    \"IAMRoleForEngineer\": {\n      \"Type\": \"AWS::IAM::Role\",\n      \"Properties\": {\n        \"AssumeRolePolicyDocument\": {\n          \"Version\": \"2012-10-17\",\n          \"Statement\": [\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"J0322720\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"J0116063\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JP300063\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JP310643\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JP311734\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            }\n          ]\n        },\n        \"ManagedPolicyArns\": [\n          \"arn:aws:iam::aws:policy/AdministratorAccess\"\n        ],\n        \"Path\": \"/\",\n        \"RoleName\": { \"Ref\" : \"IAMRoleName\" }\n      }\n    }\n  },\n  \"Outputs\" : {\n    \"IAMRoleArn\": {\n      \"Value\": { \"Fn::GetAtt\" : [ \"IAMRoleForEngineer\", \"Arn\" ] }\n    },\n    \"LinkForSwitchRole\": {\n      \"Value\": { \"Fn::Join\": [ \"\", [ \"https://signin.aws.amazon.com/switchrole?roleName=\", { \"Ref\" : \"IAMRoleName\" }, \"&account=\", { \"Ref\" : \"AWS::AccountId\" } ] ] }\n    }\n  }\n}\n"
}
StackSet-cm-cm-hamada-koji-iamRole-4d724d6c-2cb6-4895-935d-31208933bd9a
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": {
        "AWSTemplateFormatVersion": "2010-09-09", 
        "Description": "Template for Creating IAM Role to Switch from Classmethod AWS Account", 
        "Parameters": {
            "TrustedAWSAccountId": {
                "AllowedPattern": "^[0-9]*$", 
                "Type": "String", 
                "Default": "", 
                "Description": "Trusted AWS Account ID"
            }, 
            "IAMUserName": {
                "AllowedPattern": "^cm-[a-z.]*$", 
                "Type": "String", 
                "Default": "cm-xxx.xxx", 
                "Description": "IAM Role Name"
            }
        }, 
        "Resources": {
            "IAMRoleForCmEngineer": {
                "Type": "AWS::IAM::Role", 
                "Properties": {
                    "AssumeRolePolicyDocument": {
                        "Version": "2012-10-17", 
                        "Statement": [
                            {
                                "Effect": "Allow", 
                                "Principal": {
                                    "AWS": {
                                        "Fn::Join": [
                                            "", 
                                            [
                                                "arn:aws:iam::", 
                                                {
                                                    "Ref": "TrustedAWSAccountId"
                                                }, 
                                                ":user/", 
                                                {
                                                    "Ref": "IAMUserName"
                                                }
                                            ]
                                        ]
                                    }
                                }, 
                                "Action": [
                                    "sts:AssumeRole"
                                ], 
                                "Condition": {
                                    "Bool": {
                                        "aws:MultiFactorAuthPresent": "true"
                                    }
                                }
                            }
                        ]
                    }, 
                    "ManagedPolicyArns": [
                        "arn:aws:iam::aws:policy/AdministratorAccess"
                    ], 
                    "Path": "/", 
                    "RoleName": {
                        "Ref": "IAMUserName"
                    }
                }
            }
        }, 
        "Outputs": {
            "IAMRoleArn": {
                "Value": {
                    "Fn::GetAtt": [
                        "IAMRoleForCmEngineer", 
                        "Arn"
                    ]
                }
            }, 
            "LinkForSwitchRole": {
                "Value": {
                    "Fn::Join": [
                        "", 
                        [
                            "https://signin.aws.amazon.com/switchrole?roleName=", 
                            {
                                "Ref": "IAMUserName"
                            }, 
                            "&account=", 
                            {
                                "Ref": "AWS::AccountId"
                            }
                        ]
                    ]
                }
            }
        }
    }
}
StackSetsExecutionRole
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: 2010-09-09\nDescription: Configure the AWSCloudFormationStackSetExecutionRole to support AWS CloudFormation StackSets in a managed account.\n\nParameters:\n  MasterAccountId:\n    Type: String\n    Description: AWS Account Id of the master account (the account in which StackSets will be created).\n    MaxLength: 12\n    MinLength: 12\n\nResources:\n  ExecutionRole:\n    Type: AWS::IAM::Role\n    Properties:\n      RoleName: AWSCloudFormationStackSetExecutionRole\n      AssumeRolePolicyDocument: \n        Version: 2012-10-17\n        Statement: \n          - Effect: Allow\n            Principal: \n              AWS:\n                - !Ref MasterAccountId\n            Action: \n              - sts:AssumeRole\n      Path: /\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/AdministratorAccess\n"
}
cm-kikuchi-shuji-iamRole
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": {
        "AWSTemplateFormatVersion": "2010-09-09", 
        "Description": "Template for Creating IAM Role to Switch from Classmethod AWS Account", 
        "Parameters": {
            "TrustedAWSAccountId": {
                "AllowedPattern": "^[0-9]*$", 
                "Type": "String", 
                "Default": "", 
                "Description": "Trusted AWS Account ID"
            }, 
            "IAMUserName": {
                "AllowedPattern": "^cm-[a-z.]*$", 
                "Type": "String", 
                "Default": "cm-xxx.xxx", 
                "Description": "IAM Role Name"
            }
        }, 
        "Resources": {
            "IAMRoleForCmEngineer": {
                "Type": "AWS::IAM::Role", 
                "Properties": {
                    "AssumeRolePolicyDocument": {
                        "Version": "2012-10-17", 
                        "Statement": [
                            {
                                "Effect": "Allow", 
                                "Principal": {
                                    "AWS": {
                                        "Fn::Join": [
                                            "", 
                                            [
                                                "arn:aws:iam::", 
                                                {
                                                    "Ref": "TrustedAWSAccountId"
                                                }, 
                                                ":user/", 
                                                {
                                                    "Ref": "IAMUserName"
                                                }
                                            ]
                                        ]
                                    }
                                }, 
                                "Action": [
                                    "sts:AssumeRole"
                                ], 
                                "Condition": {
                                    "Bool": {
                                        "aws:MultiFactorAuthPresent": "true"
                                    }
                                }
                            }
                        ]
                    }, 
                    "ManagedPolicyArns": [
                        "arn:aws:iam::aws:policy/AdministratorAccess"
                    ], 
                    "Path": "/", 
                    "RoleName": {
                        "Ref": "IAMUserName"
                    }
                }
            }
        }, 
        "Outputs": {
            "IAMRoleArn": {
                "Value": {
                    "Fn::GetAtt": [
                        "IAMRoleForCmEngineer", 
                        "Arn"
                    ]
                }
            }, 
            "LinkForSwitchRole": {
                "Value": {
                    "Fn::Join": [
                        "", 
                        [
                            "https://signin.aws.amazon.com/switchrole?roleName=", 
                            {
                                "Ref": "IAMUserName"
                            }, 
                            "&account=", 
                            {
                                "Ref": "AWS::AccountId"
                            }
                        ]
                    ]
                }
            }
        }
    }
}
]
スクリプトを終了します
  1- INV-ver-htc01:arn:aws:iam::686753218709:role/OpeAdminRole
  2- INV-ver-sub01:arn:aws:iam::495152581087:role/OpeAdminRole
  3- INV-ver-cer01:arn:aws:iam::339311866652:role/OpeAdminRole
  4- INV-ver-des01:arn:aws:iam::302986797475:role/OpeAdminRole
  5- INV-ver-agw01:arn:aws:iam::859823971378:role/OpeAdminRole
  6- INV-ver-vdm01:arn:aws:iam::497617980196:role/OpeAdminRole
  7- INV-ver-wfi01:arn:aws:iam::932204081418:role/OpeAdminRole
  8- INV-ver-esp01:arn:aws:iam::131000633826:role/OpeAdminRole
  9- INV-ver-rmt01:arn:aws:iam::604584103104:role/OpeAdminRole
 10- INV-ver-esw01:arn:aws:iam::170541451228:role/OpeAdminRole
 11- INV-ver-tcu01:arn:aws:iam::951453431396:role/OpeAdminRole
 12- INV-ver-vky01:arn:aws:iam::207429400733:role/OpeAdminRole
     all- All Environments:select all environments
スクリプトを実行します。
aws cloudformation describe-stacks --query Stacks[*].StackName
{
    "Account": "975196479634", 
    "UserId": "AIDA6GDR5MCJLYN4JQRFZ", 
    "Arn": "arn:aws:iam::975196479634:user/JV010028"
}
{
    "Account": "859823971378", 
    "UserId": "AROA4QMMATQZFVS7JVGBK:inv-20190702040841", 
    "Arn": "arn:aws:sts::859823971378:assumed-role/OpeAdminRole/inv-20190702040841"
}
[
inv-ver-agw01-monitoring-lambda
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: \"2010-09-09\"\r\nDescription: \"monitoring-lambda.yml\"\r\nParameters: \r\n  EnvironmentName: \r\n    Default: ver\r\n    Description: \"Environment Name\"\r\n    Type: String\r\n  MicroServiceName: \r\n    Default: cer01\r\n    Description: \"MicroService Name\"\r\n    Type: String\r\n  S3Buckets: \r\n    Default: \"inv-ver-cer01-cfn\"\r\n    Description: \"source s3 backet name\"\r\n    Type: String\r\n  S3Prefix:\r\n    Default: \"monitor-config/\"\r\n    Description: \"source s3 backet file prefix\"\r\n    Type: String\r\n  iniFileName: \r\n    Default: \"monitor.json\"\r\n    Description: \"scenario file name\"\r\n    Type: String\r\n  scenarioSourceLogGroup:\r\n    Description: \"Scenario CWL log group name\"\r\n    Type: \"String\"\r\n  scenarioFilterPattern:\r\n    Default: \"\"\r\n    Description: \"Scenario Monitor CWL log FilterPattern\"\r\n    Type: \"String\"\r\n  programSourceLogGroup:\r\n    Description: \"program CWL log group name\"\r\n    Type: \"String\"\r\n  programFilterPattern:\r\n    Default: ?\"ERROR\" ?\"FATAL\" ?\"WARN\"\r\n    Description: \"program Monitor CWL log FilterPattern\"\r\n    Type: \"String\"\r\nResources:\r\n  IAMRole:\r\n    Type: \"AWS::IAM::Role\"\r\n    Properties: \r\n      AssumeRolePolicyDocument: \r\n        Version: \"2012-10-17\"\r\n        Statement: \r\n          - Effect: Allow\r\n            Principal: \r\n              Service: \"lambda.amazonaws.com\"\r\n            Action: \"sts:AssumeRole\"\r\n      ManagedPolicyArns: \r\n        - \"arn:aws:iam::aws:policy/AmazonSNSFullAccess\"\r\n      Path: \"/\"\r\n      Policies:\r\n        - PolicyName: monitor_lambda_policy\r\n          PolicyDocument:\r\n            Version: '2012-10-17'\r\n            Statement:\r\n              - Effect: Allow\r\n                Action:\r\n                  - cloudwatch:*\r\n                  - logs:*\r\n                  - s3:Get*\r\n                  - s3:List*\r\n                Resource: \"*\"\r\n      RoleName: !Sub inv-${EnvironmentName}-${MicroServiceName}-monitoring-lambda-role\r\n  LambdaLayer:\r\n    Type: \"AWS::Lambda::LayerVersion\"\r\n    Properties:\r\n      CompatibleRuntimes: \r\n        - python3.6\r\n      Content: \r\n        S3Bucket:\r\n          Ref: S3Buckets\r\n        S3Key: CloudwatchAlarm/metrics_mod.zip\r\n      Description: \"monitor_lambda_modules\"\r\n      LayerName: monitor_module\r\n  LambdaFunction: \r\n    DependsOn: \r\n      - IAMRole\r\n    Type: \"AWS::Lambda::Function\"\r\n    Properties: \r\n      Code: \r\n        S3Bucket: \r\n          Ref: S3Buckets\r\n        S3Key: CloudwatchAlarm/monitoring_common_lambda_src.zip           \r\n      FunctionName: !Sub inv-${EnvironmentName}-${MicroServiceName}-monitoring_common_lambda\r\n      Handler: lambda_function.lambda_handler\r\n      Environment: \r\n        Variables: \r\n          ENV: \r\n            Ref: EnvironmentName\r\n          STG: \r\n            Ref: MicroServiceName\r\n          fileName:\r\n            Ref: iniFileName\r\n          s3Bucket:\r\n            Ref: S3Buckets\r\n          s3keyPrefix:\r\n            Ref: S3Prefix\r\n      Role: \r\n        \"Fn::GetAtt\": \r\n          - IAMRole\r\n          - Arn\r\n      Runtime: \"python3.6\"\r\n      MemorySize: 512\r\n      Timeout: 300\r\n      Layers:\r\n        - !Ref LambdaLayer\r\n  LambdaPermission: \r\n    Type: \"AWS::Lambda::Permission\"\r\n    Properties: \r\n      Action: \"lambda:InvokeFunction\"\r\n      FunctionName: \r\n        \"Fn::GetAtt\": \r\n          - LambdaFunction\r\n          - Arn\r\n      Principal: !Sub \"sns.amazonaws.com\"\r\n      SourceArn: !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:inv-${EnvironmentName}-${MicroServiceName}\r\n  ScenarioSubscriptionFilter:\r\n    DependsOn:\r\n      - ScenarioLambdaInvokePermission\r\n    Type: \"AWS::Logs::SubscriptionFilter\"\r\n    Properties:\r\n      LogGroupName: !Ref scenarioSourceLogGroup\r\n      FilterPattern: !Ref scenarioFilterPattern\r\n      DestinationArn: !Join\r\n        - ''\r\n        - - !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:'\r\n          - !Sub inv-${EnvironmentName}-${MicroServiceName}-monitoring_common_lambda\r\n  ScenarioLambdaInvokePermission:\r\n    Type: 'AWS::Lambda::Permission'\r\n    Properties:\r\n      FunctionName:\r\n        \"Fn::GetAtt\": \r\n          - LambdaFunction\r\n          - Arn\r\n      Action: \"lambda:InvokeFunction\"\r\n      Principal: !Sub \"logs.amazonaws.com\"\r\n      SourceAccount: !Ref AWS::AccountId\r\n      SourceArn: !Sub \"arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${scenarioSourceLogGroup}:*\"\r\n  ProgramSubscriptionFilter:\r\n    DependsOn:\r\n      - ProgramLambdaInvokePermission\r\n    Type: \"AWS::Logs::SubscriptionFilter\"\r\n    Properties:\r\n      LogGroupName: !Ref programSourceLogGroup\r\n      FilterPattern: !Ref programFilterPattern\r\n      DestinationArn: !Join\r\n        - ''\r\n        - - !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:'\r\n          - !Sub inv-${EnvironmentName}-${MicroServiceName}-monitoring_common_lambda\r\n  ProgramLambdaInvokePermission:\r\n    Type: 'AWS::Lambda::Permission'\r\n    Properties:\r\n      FunctionName:\r\n        \"Fn::GetAtt\": \r\n          - LambdaFunction\r\n          - Arn\r\n      Action: \"lambda:InvokeFunction\"\r\n      Principal: !Sub \"logs.amazonaws.com\"\r\n      SourceAccount: !Ref AWS::AccountId\r\n      SourceArn: !Sub \"arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${programSourceLogGroup}:*\"\r\nOutputs: \r\n  IAMRole: \r\n    Description: \"IAM Role Name\"\r\n    Value: \r\n      Ref: IAMRole\r\n  SNSTopic: \r\n    Description: \"SNS Topic Name\"\r\n    Value: \r\n      !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:inv-${EnvironmentName}-${MicroServiceName}\r\n  LambdaFunction: \r\n    Description: \"Lambda Function Name\"\r\n    Value: \r\n      Ref: LambdaFunction"
}
enable-guardduty
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: 2010-09-09\nDescription:\n  \"enable guardduty\"\nResources:\n  GDD:\n    Type: \"AWS::GuardDuty::Detector\"\n    Properties:\n      Enable: true"
}
INV-ver-agw01-manage-metrics-alarm
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: \"2010-09-09\"\r\nDescription: \"create_metrics_alarm.yaml\"\r\nParameters:\r\n  EnvironmentName:\r\n    Default: \"ver\"\r\n    Description: \"EnvironmentName\"\r\n    Type: String\r\n  MicroServiceName: \r\n    Default: \"cer01\"\r\n    Description: \"MicroServiceName\"\r\n    Type: String\r\n  s3keyprefix: \r\n    Default: \"_manage_metrics_alarm.xlsx\"\r\n    Description: \"excel s3 keys prefix\"\r\n    Type: String\r\n  S3Buckets: \r\n    Default: \"inv-ver-cer01-cfn\"\r\n    Description: \"source s3 backet name\"\r\n    Type: String\r\nResources: \r\n  IAMRole: \r\n    Type: \"AWS::IAM::Role\"\r\n    Properties: \r\n      AssumeRolePolicyDocument: \r\n        Version: \"2012-10-17\"\r\n        Statement: \r\n          - Effect: Allow\r\n            Principal: \r\n              Service: \"lambda.amazonaws.com\"\r\n            Action: \"sts:AssumeRole\"\r\n      ManagedPolicyArns: \r\n        - \"arn:aws:iam::aws:policy/AmazonS3FullAccess\"\r\n      Path: \"/\"\r\n      Policies:\r\n        - PolicyName: manage_metrics_alarm_lambda_policy\r\n          PolicyDocument:\r\n            Version: '2012-10-17'\r\n            Statement:\r\n              - Effect: Allow\r\n                Action:\r\n                  - cloudwatch:*\r\n                  - logs:*\r\n                Resource: \"*\"\r\n      RoleName: !Sub inv-${EnvironmentName}-${MicroServiceName}-manage-metrics-alarm-lambda-role\r\n  LambdaLayer:\r\n    Type: \"AWS::Lambda::LayerVersion\"\r\n    Properties:\r\n      CompatibleRuntimes: \r\n        - python3.6\r\n      Content: \r\n        S3Bucket:\r\n          Ref: S3Buckets\r\n        S3Key: CloudwatchAlarm/metrics_mod.zip\r\n      Description: \"manage_cloudwatch metrics alarm modules\"\r\n      LayerName: metrics_module\r\n  LambdaFunction: \r\n    DependsOn: \r\n      - IAMRole\r\n    Type: \"AWS::Lambda::Function\"\r\n    Properties: \r\n      Code: \r\n        S3Bucket: \r\n          Ref: S3Buckets\r\n        S3Key: CloudwatchAlarm/manage_metrics_alarm_src.zip\r\n      FunctionName: !Sub inv-${EnvironmentName}-${MicroServiceName}-manage-metrics-alarm-lambda\r\n      Handler: lambda_function.lambda_handler\r\n      Environment: \r\n        Variables: \r\n          fileprefix: \r\n            Ref: s3keyprefix\r\n          s3Bucket: !Sub inv-${EnvironmentName}-${MicroServiceName}-manage-metrics-alarm\r\n      Role: \r\n        \"Fn::GetAtt\": \r\n          - IAMRole\r\n          - Arn\r\n      Runtime: \"python3.6\"\r\n      MemorySize: 512\r\n      Timeout: 300\r\n      Layers:\r\n        - !Ref LambdaLayer\r\n  LambdaPermission: \r\n    Type: \"AWS::Lambda::Permission\"\r\n    Properties: \r\n      Action: \"lambda:InvokeFunction\"\r\n      FunctionName: \r\n        \"Fn::GetAtt\": \r\n          - LambdaFunction\r\n          - Arn\r\n      Principal: s3.amazonaws.com\r\n      SourceAccount: !Ref 'AWS::AccountId'\r\n      SourceArn: !Join\r\n        - ''\r\n        - - 'arn:aws:s3:::'\r\n          - !Sub inv-${EnvironmentName}-${MicroServiceName}-manage-metrics-alarm\r\n  S3Bucket:\r\n    Type: \"AWS::S3::Bucket\"\r\n    DependsOn: \r\n      - LambdaPermission\r\n    Properties:\r\n      BucketName: !Sub inv-${EnvironmentName}-${MicroServiceName}-manage-metrics-alarm\r\n      AccessControl: Private\r\n      PublicAccessBlockConfiguration:\r\n        BlockPublicAcls: True\r\n        BlockPublicPolicy: True\r\n        IgnorePublicAcls: True\r\n        RestrictPublicBuckets: True\r\n      NotificationConfiguration:\r\n        LambdaConfigurations:\r\n          - Event: \"s3:ObjectCreated:*\"\r\n            Filter:\r\n              S3Key:\r\n                Rules:\r\n                  - Name: suffix\r\n                    Value: xlsx\r\n            Function: !GetAtt\r\n              - LambdaFunction\r\n              - Arn\r\n  S3BucketPolicy:\r\n    Type: AWS::S3::BucketPolicy\r\n    Properties: \r\n      Bucket: \r\n        Ref: \"S3Bucket\"\r\n      PolicyDocument: \r\n        Version: \"2012-10-17\"\r\n        Statement: \r\n          - \r\n            Action: \r\n              - \"s3:GetObject\"\r\n            Effect: \"Allow\"\r\n            Resource: \r\n              Fn::Join: \r\n                - \"\"\r\n                - \r\n                  - \"arn:aws:s3:::\"\r\n                  - \r\n                    Ref: \"S3Bucket\"\r\n                  - \"/*\"\r\n            Principal: \r\n              AWS:\r\n                Fn::Join:\r\n                  - \"\"\r\n                  - \r\n                    - \"arn:aws:iam::\"\r\n                    - Ref: \"AWS::AccountId\"\r\n                    - \":root\"\r\nOutputs: \r\n  IAMRole: \r\n    Description: \"IAM Role Name\"\r\n    Value: \r\n      Ref: IAMRole\r\n  S3BucketName:\r\n    Value:\r\n      Ref S3BucketName\r\n  LambdaFunction: \r\n    Description: \"Lambda Function Name\"\r\n    Value: \r\n      Ref: LambdaFunction"
}
INV-ver-agw01-web-ver-sub01
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: Create Service Endpoint\n\nParameters:\n  serviceAlliasLowerCase:\n    Type: String\n  serviceName:\n    Type: String\n  cidr:\n    Type: String\n\nResources:\n\n  endpointSecuritygroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupName: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      GroupDescription: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      Tags:\n        - Key: Name\n          Value: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      VpcId: !ImportValue VPC\n      SecurityGroupIngress:\n        - IpProtocol: tcp\n          FromPort: 80\n          ToPort: 80\n          CidrIp: !Ref cidr\n  endpoint:\n    Type: AWS::EC2::VPCEndpoint\n    Properties:\n      VpcEndpointType: Interface\n      VpcId: !ImportValue VPC\n      SubnetIds:\n        - !ImportValue PrivateSubnet1a\n        - !ImportValue PrivateSubnet1c\n      SecurityGroupIds:\n        - !Ref endpointSecuritygroup\n      ServiceName: !Ref serviceName\n      PrivateDnsEnabled: false\n"
}
StackSet-J0126970-createIamRole-389168eb-1b5c-4ed3-adeb-8b61f5d04ffd
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "{\n  \"AWSTemplateFormatVersion\" : \"2010-09-09\",\n  \"Description\" : \"Template for Creating IAM Role to Switch from Internavi Login AWS Account\",\n  \"Parameters\" : {\n    \"TrustedAWSAccountId\" : {\n      \"AllowedPattern\" : \"^[0-9]*$\",\n      \"Type\" : \"String\",\n      \"Default\" : \"975196479634\",\n      \"Description\" : \"Trusted AWS Account ID\"\n    },\n    \"IAMRoleName\": {\n      \"Type\": \"String\",\n      \"Default\": \"HmSolUser\",\n      \"Description\": \"IAM Role Name\"\n    },\n    \"IAMPolicyType\": {\n      \"Type\": \"String\",\n      \"Default\": \"HmSolUser\",\n      \"Description\": \"IAM Policy Type\",\n      \"AllowedValues\": [ \"HmSolUser\", \"HmAdmin\" ]\n    },\n    \"IAMUserName\": {\n      \"Type\": \"String\",\n      \"Default\": \"\",\n      \"Description\": \"IAM User Name\"\n    }\n  },\n  \"Conditions\" : {\n    \"user\"        : { \"Fn::Equals\" : [{\"Ref\" : \"IAMPolicyType\"}, \"HmSolUser\" ]},\n    \"admin\"        : { \"Fn::Equals\" : [{\"Ref\" : \"IAMPolicyType\"}, \"HmAdmin\" ]}\n  },\n  \"Resources\" : {\n    \"IAMRoleForAdmin\": {\n      \"Type\": \"AWS::IAM::Role\",\n      \"Condition\" : \"admin\",\n      \"Properties\": {\n        \"AssumeRolePolicyDocument\": {\n          \"Version\": \"2012-10-17\",\n          \"Statement\": [\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", { \"Ref\" : \"IAMUserName\" } ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            }\n          ]\n        },\n        \"ManagedPolicyArns\": [\n          \"arn:aws:iam::aws:policy/AdministratorAccess\"\n        ],\n        \"Path\": \"/\",\n        \"RoleName\": { \"Ref\" : \"IAMRoleName\" }\n      }\n    },\n    \"IAMRoleForUser\": {\n      \"Type\": \"AWS::IAM::Role\",\n      \"Condition\" : \"user\",\n      \"Properties\": {\n        \"AssumeRolePolicyDocument\": {\n          \"Version\": \"2012-10-17\",\n          \"Statement\": [\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", { \"Ref\" : \"IAMUserName\" } ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            }\n          ]\n        },\n        \"ManagedPolicyArns\": [\n          \"arn:aws:iam::aws:policy/AdministratorAccess\"\n        ],\n        \"Path\": \"/\",\n        \"RoleName\": { \"Ref\" : \"IAMRoleName\" }\n      }\n    }\n  },\n  \"Outputs\" : {\n    \"IAMRoleAdminArn\": {\n      \"Value\": { \"Fn::GetAtt\" : [ \"IAMRoleForAdmin\", \"Arn\" ] },\n      \"Condition\" : \"admin\"\n    },\n    \"IAMRoleUserArn\": {\n      \"Value\": { \"Fn::GetAtt\" : [ \"IAMRoleForUser\", \"Arn\" ] },\n      \"Condition\" : \"user\"\n    },\n    \"LinkForSwitchRole\": {\n      \"Value\": { \"Fn::Join\": [ \"\", [ \"https://signin.aws.amazon.com/switchrole?roleName=\", { \"Ref\" : \"IAMRoleName\" }, \"&account=\", { \"Ref\" : \"AWS::AccountId\" } ] ] }\n    }\n  }\n}\n"
}
StackSet-InfraAdmin-CreateIamRole-d41b3c96-2d10-40bd-9359-6d0d49e8d9b3
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": {
        "AWSTemplateFormatVersion": "2010-09-09", 
        "Description": "Template for Creating IAM Role to Switch from Internavi Login AWS Account", 
        "Parameters": {
            "TrustedAWSAccountId": {
                "AllowedPattern": "^[0-9]*$", 
                "Type": "String", 
                "Default": "975196479634", 
                "Description": "Trusted AWS Account ID"
            }, 
            "IAMRoleName": {
                "Type": "String", 
                "Default": "InfraAdmin", 
                "Description": "IAM Role Name"
            }
        }, 
        "Resources": {
            "IAMRoleForEngineer": {
                "Type": "AWS::IAM::Role", 
                "Properties": {
                    "AssumeRolePolicyDocument": {
                        "Version": "2012-10-17", 
                        "Statement": [
                            {
                                "Effect": "Allow", 
                                "Principal": {
                                    "AWS": {
                                        "Fn::Join": [
                                            "", 
                                            [
                                                "arn:aws:iam::", 
                                                {
                                                    "Ref": "TrustedAWSAccountId"
                                                }, 
                                                ":user/", 
                                                "JV010031"
                                            ]
                                        ]
                                    }
                                }, 
                                "Action": [
                                    "sts:AssumeRole"
                                ], 
                                "Condition": {
                                    "Bool": {
                                        "aws:MultiFactorAuthPresent": "true"
                                    }
                                }
                            }, 
                            {
                                "Effect": "Allow", 
                                "Principal": {
                                    "AWS": {
                                        "Fn::Join": [
                                            "", 
                                            [
                                                "arn:aws:iam::", 
                                                {
                                                    "Ref": "TrustedAWSAccountId"
                                                }, 
                                                ":user/", 
                                                "JV010024"
                                            ]
                                        ]
                                    }
                                }, 
                                "Action": [
                                    "sts:AssumeRole"
                                ], 
                                "Condition": {
                                    "Bool": {
                                        "aws:MultiFactorAuthPresent": "true"
                                    }
                                }
                            }
                        ]
                    }, 
                    "ManagedPolicyArns": [
                        "arn:aws:iam::aws:policy/AdministratorAccess"
                    ], 
                    "Path": "/", 
                    "RoleName": {
                        "Ref": "IAMRoleName"
                    }
                }
            }
        }, 
        "Outputs": {
            "IAMRoleArn": {
                "Value": {
                    "Fn::GetAtt": [
                        "IAMRoleForEngineer", 
                        "Arn"
                    ]
                }
            }, 
            "LinkForSwitchRole": {
                "Value": {
                    "Fn::Join": [
                        "", 
                        [
                            "https://signin.aws.amazon.com/switchrole?roleName=", 
                            {
                                "Ref": "IAMRoleName"
                            }, 
                            "&account=", 
                            {
                                "Ref": "AWS::AccountId"
                            }
                        ]
                    ]
                }
            }
        }
    }
}
INV-ver-agw01-connected-app-gateway-codepipeline-ver
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: codepipeline\n\n# ------------------------------------------------------------#\n#  Parameters\n# ------------------------------------------------------------#\nParameters:\n  accountAllias:\n    Type: String\n  accountAlliasLowerCase:\n    Type: String\n\nResources:\n# ------------------------------------------------------------#\n#  Role\n# ------------------------------------------------------------#\n  connectedAppGatewayCodeBuildRoleVer:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement:\n          - Effect: \"Allow\"\n            Principal:\n              Service:\n                - \"codebuild.amazonaws.com\"\n            Action:\n              - \"sts:AssumeRole\"\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess\n        - arn:aws:iam::aws:policy/AmazonS3FullAccess\n        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess\n  connectedAppGatewayCodePipelineRoleVer:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement:\n          - Effect: \"Allow\"\n            Principal:\n              Service:\n                - \"codepipeline.amazonaws.com\"\n            Action:\n              - \"sts:AssumeRole\"\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess\n        - arn:aws:iam::aws:policy/AWSCodeCommitFullAccess\n        - arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess\n        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess\n        - arn:aws:iam::aws:policy/AmazonS3FullAccess\n        - arn:aws:iam::aws:policy/CloudWatchFullAccess\n        - arn:aws:iam::aws:policy/AmazonEC2ContainerServiceFullAccess\n\n# ------------------------------------------------------------#\n#  CodeBuild\n# ------------------------------------------------------------#\n  connectedAppGatewayCodeBuildProjectVer:\n    Type: AWS::CodeBuild::Project\n    Properties:\n      Name: !Sub ${accountAlliasLowerCase}-connected-app-gateway-build-project-ver\n      Artifacts:\n        Type: CODEPIPELINE\n      Description: !Sub Building stage for ${accountAlliasLowerCase} ver AppGateway\n      Environment:\n        ComputeType: BUILD_GENERAL1_SMALL\n        EnvironmentVariables:\n          - Name: AWS_ACCOUNT_ID\n            Value: !Ref AWS::AccountId\n          - Name: IMAGE_NAME_NGINX\n            Value: connected-app-gateway-ecr/nginx\n          - Name: IMAGE_NAME_API\n            Value: connected-app-gateway-ecr/api\n          - Name: CONTAINER_NAME_NGINX\n            Value: connected-app-gateway-container-nginx\n          - Name: CONTAINER_NAME_API\n            Value: connected-app-gateway-container-api\n        Image: aws/codebuild/docker:18.09.0\n        Type: LINUX_CONTAINER\n        PrivilegedMode: True\n      ServiceRole: !Ref connectedAppGatewayCodeBuildRoleVer\n      Source:\n        Type: CODEPIPELINE\n        BuildSpec: |\n          version: 0.2\n          phases:\n            build:\n              commands:\n                - REPOSITORY_URI_NGINX=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_NAME_NGINX}\n                - REPOSITORY_URI_API=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_NAME_API}\n                - IMAGE_TAG=latest\n                - IMAGE_DIFINITION_NGINX=\"{\\\"name\\\":\\\"${CONTAINER_NAME_NGINX}\\\",\\\"imageUri\\\":\\\"${REPOSITORY_URI_NGINX}:${IMAGE_TAG}\\\"}\"\n                - IMAGE_DIFINITION_API=\"{\\\"name\\\":\\\"${CONTAINER_NAME_API}\\\",\\\"imageUri\\\":\\\"${REPOSITORY_URI_API}:${IMAGE_TAG}\\\"}\"\n                - echo \"[${IMAGE_DIFINITION_NGINX},${IMAGE_DIFINITION_API}]\" > imagedefinitions.json\n          artifacts:\n              files: imagedefinitions.json\n      TimeoutInMinutes: 30\n# ------------------------------------------------------------#\n#  S3\n# ------------------------------------------------------------#\n  s3bucketforconnectedAppGatewayCodepipelineVer:\n    Type: AWS::S3::Bucket\n    Properties:\n      BucketName: !Sub ${accountAlliasLowerCase}-codepipeline-connected-app-gateway\n# ------------------------------------------------------------#\n#  CodePipeline\n# ------------------------------------------------------------#\n  connectedAppGatewayCodePipelineVer:\n    Type: AWS::CodePipeline::Pipeline\n    DependsOn: s3bucketforconnectedAppGatewayCodepipelineVer\n    Properties:\n      ArtifactStore:\n        Location: !Ref s3bucketforconnectedAppGatewayCodepipelineVer\n        Type: S3\n      Name: !Sub ${accountAlliasLowerCase}-codepipeline-connected-app-gateway-ver\n      RestartExecutionOnUpdate: false\n      RoleArn: !GetAtt connectedAppGatewayCodePipelineRoleVer.Arn\n      Stages:\n        - Name: Source\n          Actions:\n            - Name: SourceAction\n              ActionTypeId:\n                Category: Source\n                Owner: AWS\n                Provider: ECR\n                Version: 1\n              OutputArtifacts:\n                - Name: SourceArtifact\n              Configuration:\n                RepositoryName: connected-app-gateway-ecr/api\n              RunOrder: 1\n        - Name: Build\n          Actions:\n            - Name: CodeBuild\n              InputArtifacts:\n                - Name: SourceArtifact\n              ActionTypeId:\n                Category: Build\n                Owner: AWS\n                Provider: CodeBuild\n                Version: 1\n              Configuration:\n                ProjectName: !Ref connectedAppGatewayCodeBuildProjectVer\n              OutputArtifacts:\n                - Name: CodebuildOutput\n              RunOrder: 1\n        - Name: Staging\n          Actions:\n            - Name: Deploy2AppGateway\n              InputArtifacts:\n                - Name: CodebuildOutput\n              ActionTypeId:\n                Category: Deploy\n                Owner: AWS\n                Provider: ECS\n                Version: 1\n              Configuration:\n                ClusterName: !ImportValue cluster\n                FileName: imagedefinitions.json\n                ServiceName: !ImportValue connected-app-gateway-service\n              OutputArtifacts: []\n              RunOrder: 1\n# ------------------------------------------------------------#\n#  CloudWatch Event\n# ------------------------------------------------------------#\n  connectedAppGatewayCloudWatchEventRoleVer:\n    Type: 'AWS::IAM::Role'\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service:\n                - events.amazonaws.com\n            Action: 'sts:AssumeRole'\n      Path: /\n      Policies:\n        - PolicyName: cwe-pipeline-execution\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Effect: Allow\n                Action: 'codepipeline:StartPipelineExecution'\n                Resource: !Join\n                  - ''\n                  - - 'arn:aws:codepipeline:'\n                    - !Ref 'AWS::Region'\n                    - ':'\n                    - !Ref 'AWS::AccountId'\n                    - ':'\n                    - !Ref connectedAppGatewayCodePipelineVer\n  connectedAppGatewayCloudwatchEventsRuleVer:\n    Type: AWS::Events::Rule\n    Properties:\n      EventPattern:\n        source:\n          - aws.ecr\n        detail:\n          eventName:\n            - PutImage\n          requestParameters:\n            repositoryName:\n              - connected-app-gateway-ecr/api\n            imageTag:\n              - latest\n      Targets:\n        - Arn:  !Join\n          - ''\n          - - 'arn:aws:codepipeline:'\n            - !Ref 'AWS::Region'\n            - ':'\n            - !Ref 'AWS::AccountId'\n            - ':'\n            - !Ref connectedAppGatewayCodePipelineVer\n          Id: !Sub ${accountAlliasLowerCase}-codepipeline-connected-app-gateway-ver\n          RoleArn: !GetAtt connectedAppGatewayCloudWatchEventRoleVer.Arn\n\n# ------------------------------------------------------------#\n#  Outputs\n# ------------------------------------------------------------#\nOutputs:\n  connectedAppGatewayCodeBuildRoleVer:\n    Value: !Ref connectedAppGatewayCodeBuildRoleVer\n    Export:\n      Name: connectedAppGatewayCodeBuildRoleVer\n  connectedAppGatewayCodePipelineRoleVer:\n    Value: !Ref connectedAppGatewayCodePipelineRoleVer\n    Export:\n      Name: connectedAppGatewayCodePipelineRoleVer\n  connectedAppGatewayCodeBuildProjectVer:\n    Value: !Ref connectedAppGatewayCodeBuildProjectVer\n    Export:\n      Name: connectedAppGatewayCodeBuildProjectVer\n  s3bucketforconnectedAppGatewayCodepipelineVer:\n    Value: !Ref s3bucketforconnectedAppGatewayCodepipelineVer\n    Export:\n      Name: s3bucketforconnectedAppGatewayCodepipelineVer\n  connectedAppGatewayCodePipelineVer:\n    Value: !Ref connectedAppGatewayCodePipelineVer\n    Export:\n      Name: connectedAppGatewayCodePipelineVer\n  connectedAppGatewayCloudWatchEventRoleVer:\n    Value: !Ref connectedAppGatewayCloudWatchEventRoleVer\n    Export:\n      Name: connectedAppGatewayCloudWatchEventRoleVer\n  connectedAppGatewayCloudwatchEventsRuleVer:\n    Value: !Ref connectedAppGatewayCloudwatchEventsRuleVer\n    Export:\n      Name: connectedAppGatewayCloudwatchEventsRuleVer\n"
}
INV-ver-agw01-ver-ecr-access-role
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: codepipeline\n\n# ------------------------------------------------------------#\n#  Parameters\n# ------------------------------------------------------------#\nParameters:\n  accountAllias:\n    Type: String\n  accountAlliasLowerCase:\n    Type: String\n  devAwsAccountId:\n    Type: String\n\nResources:\n# ------------------------------------------------------------#\n#  Role\n# ------------------------------------------------------------#\n  verEcrAccessRole:\n    Type: AWS::IAM::Role\n    Properties:\n      RoleName: ver-ecr-access-role\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement: \n          - Effect: \"Allow\"\n            Principal: \n              AWS: \n                - !Sub arn:aws:iam::${devAwsAccountId}:root\n            Action: \n              - \"sts:AssumeRole\"\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess\n\n# ------------------------------------------------------------#\n#  Outputs\n# ------------------------------------------------------------#\nOutputs:\n  verEcrAccessRole:\n    Value: !Ref verEcrAccessRole\n    Export:\n      Name: verEcrAccessRole"
}
INV-ver-agw01-app-gateway-service
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: public ecs service\n\nParameters:\n  accountAllias:\n    Type: String\n  accountAlliasLowerCase:\n    Type: String\n  apName:\n    Type: String\n  task:\n    Type: String\n  desiredCount:\n    Type: Number\n\nResources:\n  ApplicationSecuritygroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupName: !Sub ${apName}-sg\n      GroupDescription: !Sub ${apName}-sg\n      Tags:\n        - Key: Name\n          Value: !Sub ${apName}-sg\n      VpcId: !ImportValue VPC\n      SecurityGroupIngress:\n      - IpProtocol: tcp\n        FromPort: '80'\n        ToPort: '80'\n        SourceSecurityGroupId: !ImportValue vehicle-albSecuritygroup\n  privateDnsNamespace:\n    Type: AWS::ServiceDiscovery::PrivateDnsNamespace\n    Properties:\n      Vpc: !ImportValue VPC\n      Name: local\n  serviceDiscovery:\n    Type: AWS::ServiceDiscovery::Service\n    Properties:\n      HealthCheckCustomConfig:\n        FailureThreshold: 1\n      DnsConfig:\n        DnsRecords:\n          - Type: A\n            TTL: 60\n        NamespaceId: !GetAtt privateDnsNamespace.Id\n      Name: !Sub ${apName}-service\n  publicService:\n    Type: AWS::ECS::Service\n    Properties:\n      Cluster: !ImportValue cluster\n      DeploymentConfiguration:\n        MaximumPercent: 200\n        MinimumHealthyPercent: 100\n      DesiredCount: !Ref desiredCount\n      LaunchType: FARGATE\n      ServiceRegistries:\n        - RegistryArn: !GetAtt serviceDiscovery.Arn\n      LoadBalancers:\n        - ContainerName: !Sub ${apName}-container-nginx\n          ContainerPort: 80\n          TargetGroupArn: !ImportValue vehicle-publicTargetGroup\n      NetworkConfiguration:\n        AwsvpcConfiguration:\n          AssignPublicIp: DISABLED\n          SecurityGroups:\n            - !Ref ApplicationSecuritygroup\n          Subnets:\n            - !ImportValue PrivateSubnet1a\n            - !ImportValue PrivateSubnet1c\n      ServiceName: !Sub ${apName}-service\n      TaskDefinition: !Ref task\n\nOutputs:\n  ApplicationSecuritygroup:\n    Value: !Ref ApplicationSecuritygroup\n    Export:\n      Name: !Sub ${apName}-Securitygroup\n  publicService:\n    Value: !Ref publicService\n    Export:\n      Name: !Sub ${apName}-service\n"
}
INV-ver-agw01-resource-DynamoDBStack-1JQTVX4LVM3Y0
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "---\nAWSTemplateFormatVersion: \"2010-09-09\"\nDescription: 7-1_dynamodb.txt\nParameters:\n  ResponseCodesTableReadCapacitymin:\n    Type:  String\n  ResponseCodesTableReadCapacitymax:\n    Type:  String\n  ResponseCodesTableWriteCapacitymin:\n    Type:  String\n  ResponseCodesTableWriteCapacitymax:\n    Type:  String\n  ResponseCodesTableGSIReadCapacitymin:\n    Type:  String\n  ResponseCodesTableGSIReadCapacitymax:\n    Type:  String\n  ResponseCodesTableGSIWriteCapacitymin:\n    Type:  String\n  ResponseCodesTableGSIWriteCapacitymax:\n    Type:  String\n  AuthorizationsTableReadCapacitymin:\n    Type:  String\n  AuthorizationsTableReadCapacitymax:\n    Type:  String\n  AuthorizationsTableWriteCapacitymin:\n    Type:  String\n  AuthorizationsTableWriteCapacitymax:\n    Type:  String\n  AuthorizationsTableGSIReadCapacitymin:\n    Type:  String\n  AuthorizationsTableGSIReadCapacitymax:\n    Type:  String\n  AuthorizationsTableGSIWriteCapacitymin:\n    Type:  String\n  AuthorizationsTableGSIWriteCapacitymax:\n    Type:  String\n  DynamoDBScalingRole:\n    Type:  String\nResources:\n## ResponseCodes table\n  ResponseCodesTable:\n    Type: 'AWS::DynamoDB::Table'\n    Properties:\n      TableName: ResponseCodes\n      AttributeDefinitions:\n        - AttributeName: vin\n          AttributeType: S\n        - AttributeName: appCode\n          AttributeType: S\n        - AttributeName: responseCode\n          AttributeType: S\n        - AttributeName: expireIn\n          AttributeType: N\n      KeySchema:\n        - AttributeName: vin\n          KeyType: HASH\n        - AttributeName: appCode\n          KeyType: RANGE\n      ProvisionedThroughput:\n        ReadCapacityUnits: !Ref ResponseCodesTableReadCapacitymin\n        WriteCapacityUnits: !Ref ResponseCodesTableWriteCapacitymin\n      GlobalSecondaryIndexes:\n      - IndexName: response_code_index\n        KeySchema:\n        - AttributeName: responseCode\n          KeyType: HASH\n        - AttributeName: expireIn\n          KeyType: RANGE\n        Projection:\n          ProjectionType: KEYS_ONLY\n        ProvisionedThroughput:\n          ReadCapacityUnits: !Ref ResponseCodesTableGSIReadCapacitymin\n          WriteCapacityUnits: !Ref ResponseCodesTableGSIWriteCapacitymin\n      TimeToLiveSpecification:\n        AttributeName: expireIn\n        Enabled: true\n  ResponseCodesTableWriteCapacityScalableTarget:\n    Type: \"AWS::ApplicationAutoScaling::ScalableTarget\"\n    DependsOn: ResponseCodesTable\n    Properties:\n       MaxCapacity: !Ref ResponseCodesTableWriteCapacitymax\n       MinCapacity: !Ref ResponseCodesTableWriteCapacitymin\n       ResourceId: !Sub table/ResponseCodes\n       RoleARN: !Ref DynamoDBScalingRole\n       ScalableDimension: \"dynamodb:table:WriteCapacityUnits\"\n       ServiceNamespace: dynamodb\n  ResponseCodesTableReadCapacityScalableTarget:\n    Type: \"AWS::ApplicationAutoScaling::ScalableTarget\"\n    DependsOn: ResponseCodesTable\n    Properties:\n       MaxCapacity: !Ref ResponseCodesTableReadCapacitymax\n       MinCapacity: !Ref ResponseCodesTableReadCapacitymin\n       ResourceId: !Sub table/ResponseCodes\n       RoleARN: !Ref DynamoDBScalingRole\n       ScalableDimension: \"dynamodb:table:ReadCapacityUnits\"\n       ServiceNamespace: dynamodb\n  ResponseCodesTableWriteScalingPolicy:\n    Type: \"AWS::ApplicationAutoScaling::ScalingPolicy\"\n    DependsOn: ResponseCodesTableWriteCapacityScalableTarget\n    Properties:\n       PolicyName: DynamoDBWriteAutoScalingPolicy\n       PolicyType: TargetTrackingScaling\n       ScalingTargetId:\n         Ref: ResponseCodesTableWriteCapacityScalableTarget\n       TargetTrackingScalingPolicyConfiguration:\n         TargetValue: 70\n         ScaleInCooldown: 60\n         ScaleOutCooldown: 60\n         PredefinedMetricSpecification:\n           PredefinedMetricType: DynamoDBWriteCapacityUtilization\n  ResponseCodesTableReadScalingPolicy:\n    Type: \"AWS::ApplicationAutoScaling::ScalingPolicy\"\n    DependsOn: ResponseCodesTableReadCapacityScalableTarget\n    Properties:\n       PolicyName: DynamoDBReadAutoScalingPolicy\n       PolicyType: TargetTrackingScaling\n       ScalingTargetId:\n         Ref: ResponseCodesTableReadCapacityScalableTarget\n       TargetTrackingScalingPolicyConfiguration:\n         TargetValue: 70\n         ScaleInCooldown: 60\n         ScaleOutCooldown: 60\n         PredefinedMetricSpecification:\n           PredefinedMetricType: DynamoDBReadCapacityUtilization\n\n  ResponseCodesTableGSIWriteCapacityScalableTarget:\n    Type: \"AWS::ApplicationAutoScaling::ScalableTarget\"\n    DependsOn: ResponseCodesTable\n    Properties:\n       MaxCapacity: !Ref ResponseCodesTableGSIWriteCapacitymax\n       MinCapacity: !Ref ResponseCodesTableGSIWriteCapacitymin\n       ResourceId: !Sub table/ResponseCodes/index/response_code_index\n       RoleARN: !Ref DynamoDBScalingRole\n       ScalableDimension: \"dynamodb:index:WriteCapacityUnits\"\n       ServiceNamespace: dynamodb\n  ResponseCodesTableGSIReadCapacityScalableTarget:\n    Type: \"AWS::ApplicationAutoScaling::ScalableTarget\"\n    DependsOn: ResponseCodesTable\n    Properties:\n       MaxCapacity: !Ref ResponseCodesTableGSIReadCapacitymax\n       MinCapacity: !Ref ResponseCodesTableGSIReadCapacitymin\n       ResourceId: !Sub table/ResponseCodes/index/response_code_index\n       RoleARN: !Ref DynamoDBScalingRole\n       ScalableDimension: \"dynamodb:index:ReadCapacityUnits\"\n       ServiceNamespace: dynamodb\n  ResponseCodesTableWriteScalingPolicy:\n    Type: \"AWS::ApplicationAutoScaling::ScalingPolicy\"\n    DependsOn: ResponseCodesTableGSIWriteCapacityScalableTarget\n    Properties:\n       PolicyName: DynamoDBWriteAutoScalingPolicy\n       PolicyType: TargetTrackingScaling\n       ScalingTargetId:\n         Ref: ResponseCodesTableGSIWriteCapacityScalableTarget\n       TargetTrackingScalingPolicyConfiguration:\n         TargetValue: 70\n         ScaleInCooldown: 60\n         ScaleOutCooldown: 60\n         PredefinedMetricSpecification:\n           PredefinedMetricType: DynamoDBWriteCapacityUtilization\n  ResponseCodesTableGSIReadScalingPolicy:\n    Type: \"AWS::ApplicationAutoScaling::ScalingPolicy\"\n    DependsOn: ResponseCodesTableGSIReadCapacityScalableTarget\n    Properties:\n       PolicyName: DynamoDBReadAutoScalingPolicy\n       PolicyType: TargetTrackingScaling\n       ScalingTargetId:\n         Ref: ResponseCodesTableGSIReadCapacityScalableTarget\n       TargetTrackingScalingPolicyConfiguration:\n         TargetValue: 70\n         ScaleInCooldown: 60\n         ScaleOutCooldown: 60\n         PredefinedMetricSpecification:\n           PredefinedMetricType: DynamoDBReadCapacityUtilization\n\n## Authorizations table\n  AuthorizationsTable:\n    Type: 'AWS::DynamoDB::Table'\n    Properties:\n      TableName: Authorizations\n      AttributeDefinitions:\n        - AttributeName: token\n          AttributeType: S\n        - AttributeName: vin\n          AttributeType: S\n        - AttributeName: appCode\n          AttributeType: S\n      KeySchema:\n        - AttributeName: token\n          KeyType: HASH\n      ProvisionedThroughput:\n        ReadCapacityUnits: !Ref AuthorizationsTableReadCapacitymin\n        WriteCapacityUnits: !Ref AuthorizationsTableWriteCapacitymin\n      GlobalSecondaryIndexes:\n      - IndexName: vin_appCode_index\n        KeySchema:\n        - AttributeName: vin\n          KeyType: HASH\n        - AttributeName: appCode\n          KeyType: RANGE\n        Projection:\n          ProjectionType: KEYS_ONLY\n        ProvisionedThroughput:\n          ReadCapacityUnits: !Ref AuthorizationsTableGSIReadCapacitymin\n          WriteCapacityUnits: !Ref AuthorizationsTableGSIWriteCapacitymin\n  AuthorizationsTableWriteCapacityScalableTarget:\n    Type: \"AWS::ApplicationAutoScaling::ScalableTarget\"\n    DependsOn: AuthorizationsTable\n    Properties:\n       MaxCapacity: !Ref AuthorizationsTableWriteCapacitymax\n       MinCapacity: !Ref AuthorizationsTableWriteCapacitymin\n       ResourceId: !Sub table/Authorizations\n       RoleARN: !Ref DynamoDBScalingRole\n       ScalableDimension: \"dynamodb:table:WriteCapacityUnits\"\n       ServiceNamespace: dynamodb\n  AuthorizationsTableReadCapacityScalableTarget:\n    Type: \"AWS::ApplicationAutoScaling::ScalableTarget\"\n    DependsOn: AuthorizationsTable\n    Properties:\n       MaxCapacity: !Ref AuthorizationsTableReadCapacitymax\n       MinCapacity: !Ref AuthorizationsTableReadCapacitymin\n       ResourceId: !Sub table/Authorizations\n       RoleARN: !Ref DynamoDBScalingRole\n       ScalableDimension: \"dynamodb:table:ReadCapacityUnits\"\n       ServiceNamespace: dynamodb\n  AuthorizationsTableWriteScalingPolicy:\n    Type: \"AWS::ApplicationAutoScaling::ScalingPolicy\"\n    DependsOn: AuthorizationsTableWriteCapacityScalableTarget\n    Properties:\n       PolicyName: DynamoDBWriteAutoScalingPolicy\n       PolicyType: TargetTrackingScaling\n       ScalingTargetId:\n         Ref: AuthorizationsTableWriteCapacityScalableTarget\n       TargetTrackingScalingPolicyConfiguration:\n         TargetValue: 70\n         ScaleInCooldown: 60\n         ScaleOutCooldown: 60\n         PredefinedMetricSpecification:\n           PredefinedMetricType: DynamoDBWriteCapacityUtilization\n  AuthorizationsTableReadScalingPolicy:\n    Type: \"AWS::ApplicationAutoScaling::ScalingPolicy\"\n    DependsOn: AuthorizationsTableReadCapacityScalableTarget\n    Properties:\n       PolicyName: DynamoDBReadAutoScalingPolicy\n       PolicyType: TargetTrackingScaling\n       ScalingTargetId:\n         Ref: AuthorizationsTableReadCapacityScalableTarget\n       TargetTrackingScalingPolicyConfiguration:\n         TargetValue: 70\n         ScaleInCooldown: 60\n         ScaleOutCooldown: 60\n         PredefinedMetricSpecification:\n           PredefinedMetricType: DynamoDBReadCapacityUtilization\n\n  AuthorizationsTableGSIWriteCapacityScalableTarget:\n    Type: \"AWS::ApplicationAutoScaling::ScalableTarget\"\n    DependsOn: AuthorizationsTable\n    Properties:\n       MaxCapacity: !Ref AuthorizationsTableGSIWriteCapacitymax\n       MinCapacity: !Ref AuthorizationsTableGSIWriteCapacitymin\n       ResourceId: !Sub table/Authorizations/index/vin_appCode_index\n       RoleARN: !Ref DynamoDBScalingRole\n       ScalableDimension: \"dynamodb:index:WriteCapacityUnits\"\n       ServiceNamespace: dynamodb\n  AuthorizationsTableGSIReadCapacityScalableTarget:\n    Type: \"AWS::ApplicationAutoScaling::ScalableTarget\"\n    DependsOn: AuthorizationsTable\n    Properties:\n       MaxCapacity: !Ref AuthorizationsTableGSIReadCapacitymax\n       MinCapacity: !Ref AuthorizationsTableGSIReadCapacitymin\n       ResourceId: !Sub table/Authorizations/index/vin_appCode_index\n       RoleARN: !Ref DynamoDBScalingRole\n       ScalableDimension: \"dynamodb:index:ReadCapacityUnits\"\n       ServiceNamespace: dynamodb\n  AuthorizationsTableGSIWriteScalingPolicy:\n    Type: \"AWS::ApplicationAutoScaling::ScalingPolicy\"\n    DependsOn: AuthorizationsTableGSIWriteCapacityScalableTarget\n    Properties:\n       PolicyName: DynamoDBWriteAutoScalingPolicy\n       PolicyType: TargetTrackingScaling\n       ScalingTargetId:\n         Ref: AuthorizationsTableGSIWriteCapacityScalableTarget\n       TargetTrackingScalingPolicyConfiguration:\n         TargetValue: 70\n         ScaleInCooldown: 60\n         ScaleOutCooldown: 60\n         PredefinedMetricSpecification:\n           PredefinedMetricType: DynamoDBWriteCapacityUtilization\n  AuthorizationsTableGSIReadScalingPolicy:\n    Type: \"AWS::ApplicationAutoScaling::ScalingPolicy\"\n    DependsOn: AuthorizationsTableGSIReadCapacityScalableTarget\n    Properties:\n       PolicyName: DynamoDBReadAutoScalingPolicy\n       PolicyType: TargetTrackingScaling\n       ScalingTargetId:\n         Ref: AuthorizationsTableGSIReadCapacityScalableTarget\n       TargetTrackingScalingPolicyConfiguration:\n         TargetValue: 70\n         ScaleInCooldown: 60\n         ScaleOutCooldown: 60\n         PredefinedMetricSpecification:\n           PredefinedMetricType: DynamoDBReadCapacityUtilization\n\nOutputs:\n  endpoint:\n    Value: !Sub https://dynamodb.${AWS::Region}.amazonaws.com\n  region:\n    Value: !Ref AWS::Region\n  version:\n    Value: latest\n"
}
INV-ver-agw01-resource-IAMRoleStack-1CY8H01AXPSZ6
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "---\r\nAWSTemplateFormatVersion: \"2010-09-09\"\r\nDescription: 1-1_iam.txt\r\nParameters:\r\n  ServiceName:\r\n    Type: String\r\n  SystemEnvironment:\r\n    Type: String\r\nMappings:\r\n  Region2Principal:\r\n    ap-northeast-1:\r\n      S3Principal: s3.amazonaws.com\r\n      SecretManagerPrincipal: secretsmanager.amazonaws.com\r\nResources:\r\n  SecretResourcePolicyRole:\r\n    Type: AWS::IAM::Role\r\n    Properties: \r\n      RoleName: !Sub \"inv-${SystemEnvironment}-${ServiceName}-SecretRole\"\r\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\r\n        Statement:\r\n        - Effect: Allow\r\n          Principal:\r\n            Service:\r\n            - Fn::FindInMap:\r\n              - Region2Principal\r\n              - Ref: AWS::Region\r\n              - SecretManagerPrincipal\r\n          Action:\r\n          - sts:AssumeRole\r\n      Policies: \r\n      - PolicyName: !Sub \"inv-${SystemEnvironment}-${ServiceName}-SecretPolicy\"\r\n        PolicyDocument: \r\n          Version: \"2012-10-17\"\r\n          Statement: \r\n          - \r\n            Effect: Allow\r\n            Action: \"secretsmanager:*\"\r\n            Resource: \"*\"\r\n      Path: \"/\"\n  DynamoDBScalingRole: \n    Type: \"AWS::IAM::Role\"\n    Properties: \n      RoleName: !Sub \"inv-${SystemEnvironment}-${ServiceName}-app-DynamoDBScalingRole\"\n      AssumeRolePolicyDocument: \n        Version: \"2012-10-17\"\n        Statement: \n          - \n            Effect: Allow\n            Principal: \n              Service: \n                - \n                  \"application-autoscaling.amazonaws.com\"\n            Action: \n              - \n                \"sts:AssumeRole\"\n      Path: \"/\"\n      Policies: \n        - \n          PolicyName: !Sub \"PolicyforDynamoDB-inv-${SystemEnvironment}-${ServiceName}-appScaling\"\n          PolicyDocument: \n            Version: \"2012-10-17\"\n            Statement: \n              - \n                Effect: Allow\n                Action:          \n                  - \"dynamodb:DescribeTable\"\n                  - \"dynamodb:UpdateTable\"\n                  - \"cloudwatch:PutMetricAlarm\"\n                  - \"cloudwatch:DescribeAlarms\"\n                  - \"cloudwatch:GetMetricStatistics\"\n                  - \"cloudwatch:SetAlarmState\"\n                  - \"cloudwatch:DeleteAlarms\"\n                Resource: \"*\"\r\nOutputs:\r\n  SecretResourceRole:\r\n    Value:\r\n      Ref: SecretResourcePolicyRole\n  DynamoDBScalingRole:\n    Value:\n      Ref: DynamoDBScalingRole\r\n  DynamoDBScalingRoleArn:\r\n    Value:\r\n      !GetAtt DynamoDBScalingRole.Arn\r\n...\r\n"
}
INV-ver-agw01-resource-SeacretsManagerStack-TJVTI112G8GP
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "---\nAWSTemplateFormatVersion: \"2010-09-09\"\nDescription: 6-1_secretsmanager.txt\nParameters:\n  SystemEnvironment:\n    Type: String\n  ServiceName:\n    Type: String\n  KeyName1:\n    Type: String\n  KeyValue1:\n    Type: String\n  KeyName2:\n    Type: String\n  KeyValue2:\n    Type: String\nResources:\n  SecretResources1:\n    Type: AWS::SecretsManager::Secret\n    Properties:\n      Description: !Sub \"Secret1\"\n      SecretString: !Ref KeyValue1\n      Name: !Ref KeyName1\n  SecretResources2:\n    Type: AWS::SecretsManager::Secret\n    Properties:\n      Description: !Sub \"Secret2\"\n      SecretString: !Ref KeyValue2\n      Name: !Ref KeyName2\nOutputs:\n  Secret1:\n    Description: SecretID\n    Value: !Ref SecretResources1\n  Secret2:\n    Description: SecretID\n    Value: !Ref SecretResources2\n\n..."
}
INV-ver-agw01-resource
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "---\r\nAWSTemplateFormatVersion: \"2010-09-09\"\r\nDescription: 0-1_base.txt\r\nMetadata:\r\n  AWS::CloudFormation::Interface:\r\n    ParameterGroups:\r\n    - Label:\r\n        default: Configuration\r\n      Parameters:\r\n      - SystemEnvironment\r\n      - ServiceName\r\n    - Label:\r\n        default: ResponseCodes Table\r\n      Parameters:\r\n      - ResponseCodesTableReadCapacitymin\r\n      - ResponseCodesTableReadCapacitymax\r\n      - ResponseCodesTableWriteCapacitymin\r\n      - ResponseCodesTableWriteCapacitymax\r\n      - ResponseCodesTableGSIReadCapacitymin\r\n      - ResponseCodesTableGSIReadCapacitymax\r\n      - ResponseCodesTableGSIWriteCapacitymin\r\n      - ResponseCodesTableGSIWriteCapacitymax\r\n    - Label:\r\n        default: Authorizations Table\r\n      Parameters:\r\n      - AuthorizationsTableReadCapacitymin\r\n      - AuthorizationsTableReadCapacitymax\r\n      - AuthorizationsTableWriteCapacitymin\r\n      - AuthorizationsTableWriteCapacitymax\r\n      - AuthorizationsTableGSIReadCapacitymin\r\n      - AuthorizationsTableGSIReadCapacitymax\r\n      - AuthorizationsTableGSIWriteCapacitymin\r\n      - AuthorizationsTableGSIWriteCapacitymax\r\n    - Label:\r\n        default: Secrets Manager\r\n      Parameters:\r\n      - KeyName1\r\n      - KeyValue1\r\n      - KeyName2\r\n      - KeyValue2\r\n    ParameterLabels:\r\n      SystemEnvironment:\r\n        default: Environment\r\n      ServiceName:\r\n        default: ServiceName\r\n      ResponseCodesTableReadCapacitymin:\n        default: ResponseCodes table ReadCapacitymin\n      ResponseCodesTableReadCapacitymax:\n        default: ResponseCodes table ReadCapacitymax\n      ResponseCodesTableWriteCapacitymin:\n        default: ResponseCodes table WriteCapacitymin\n      ResponseCodesTableWriteCapacitymax:\n        default: ResponseCodes table WriteCapacitymax\r\n      ResponseCodesTableGSIReadCapacitymin:\r\n        default: ResponseCodes table GlobalSecondaryIndex ReadCapacitymin\r\n      ResponseCodesTableGSIReadCapacitymax:\r\n        default: ResponseCodes table GlobalSecondaryIndex ReadCapacitymax\r\n      ResponseCodesTableGSIWriteCapacitymin:\r\n        default: ResponseCodes table GlobalSecondaryIndex WriteCapacitymin\r\n      ResponseCodesTableGSIWriteCapacitymax:\r\n        default: ResponseCodes table GlobalSecondaryIndex WriteCapacitymax\r\n      AuthorizationsTableReadCapacitymin:\r\n        default: Authorizations table ReadCapacitymin\r\n      AuthorizationsTableReadCapacitymax:\r\n        default: Authorizations table ReadCapacitymax\r\n      AuthorizationsTableWriteCapacitymin:\r\n        default: Authorizations table WriteCapacitymin\r\n      AuthorizationsTableWriteCapacitymax:\r\n        default: Authorizations table WriteCapacitymax\r\n      AuthorizationsTableGSIReadCapacitymin:\r\n        default: Authorizations table GlobalSecondaryIndex ReadCapacitymin\r\n      AuthorizationsTableGSIReadCapacitymax:\r\n        default: Authorizations table GlobalSecondaryIndex ReadCapacitymax\r\n      AuthorizationsTableGSIWriteCapacitymin:\r\n        default: Authorizations table GlobalSecondaryIndex WriteCapacitymin\r\n      AuthorizationsTableGSIWriteCapacitymax:\r\n        default: Authorizations table GlobalSecondaryIndex WriteCapacitymax\r\n      KeyName1:\r\n        default: KeyName1\r\n      KeyValue1:\r\n        default: KeyValue1\r\n      KeyName2:\r\n        default: KeyName2\r\n      KeyValue2:\r\n        default: KeyValue2\r\nParameters:\r\n  SystemEnvironment:\r\n    Type: String\r\n    Default: dev\r\n    AllowedValues:\r\n    - dev\r\n    - ver\r\n    - prd\r\n    Description: '*(Required)* Environment Identifier'\r\n  ServiceName:\r\n    Type: String\r\n    Default: agw01\r\n    AllowedValues:\r\n    - agw01\r\n    Description: '*(Required)* ServiceName'\n  ResponseCodesTableReadCapacitymin:\n    Type: String\r\n    Default: 1\n  ResponseCodesTableReadCapacitymax:\n    Type: String\n    Default: 50\r\n  ResponseCodesTableWriteCapacitymin:\n    Type: String\n    Default: 1\r\n  ResponseCodesTableWriteCapacitymax:\n    Type: String\r\n    Default: 50\r\n  ResponseCodesTableGSIReadCapacitymin:\r\n    Type: String\r\n    Default: 1\r\n  ResponseCodesTableGSIReadCapacitymax:\r\n    Type: String\r\n    Default: 50\r\n  ResponseCodesTableGSIWriteCapacitymin:\r\n    Type: String\r\n    Default: 1\r\n  ResponseCodesTableGSIWriteCapacitymax:\r\n    Type: String\r\n    Default: 50\r\n  AuthorizationsTableReadCapacitymin:\r\n    Type: String\r\n    Default: 1\r\n  AuthorizationsTableReadCapacitymax:\r\n    Type: String\r\n    Default: 50\r\n  AuthorizationsTableWriteCapacitymin:\r\n    Type: String\r\n    Default: 1\r\n  AuthorizationsTableWriteCapacitymax:\r\n    Type: String\r\n    Default: 50\r\n  AuthorizationsTableGSIReadCapacitymin:\r\n    Type: String\r\n    Default: 1\r\n  AuthorizationsTableGSIReadCapacitymax:\r\n    Type: String\r\n    Default: 50\r\n  AuthorizationsTableGSIWriteCapacitymin:\r\n    Type: String\r\n    Default: 1\r\n  AuthorizationsTableGSIWriteCapacitymax:\r\n    Type: String\r\n    Default: 50\r\n  KeyName1:\r\n    Type: String\r\n  KeyValue1:\r\n    Type: String\r\n  KeyName2:\r\n    Type: String\r\n  KeyValue2:\r\n    Type: String\r\nResources:\r\n  IAMRoleStack:\r\n    Type: AWS::CloudFormation::Stack\r\n    DependsOn: SeacretsManagerStack\r\n    Properties:\r\n      TemplateURL: !Sub \"https://s3-ap-northeast-1.amazonaws.com/inv-${SystemEnvironment}-${ServiceName}-cfn/resources/1-1_iam.txt\"\r\n      Parameters:\r\n        ServiceName: !Ref ServiceName\r\n        SystemEnvironment: !Ref SystemEnvironment\r\n      TimeoutInMinutes: \"5\"\r\n  SeacretsManagerStack:\r\n    Type: AWS::CloudFormation::Stack\r\n    Properties:\r\n      Parameters:\r\n        SystemEnvironment:\r\n          !Ref SystemEnvironment\r\n        ServiceName:\r\n          !Ref ServiceName\r\n        KeyName1:\r\n          !Ref KeyName1\r\n        KeyValue1:\r\n          !Ref KeyValue1\r\n        KeyName2:\r\n          !Ref KeyName2\r\n        KeyValue2:\r\n          !Ref KeyValue2\r\n      TemplateURL: !Sub \"https://s3-ap-northeast-1.amazonaws.com/inv-${SystemEnvironment}-${ServiceName}-cfn/resources/6-1_secretsmanager.txt\"\r\n      TimeoutInMinutes: \"30\"\n  DynamoDBStack:\n    Type: AWS::CloudFormation::Stack\n    DependsOn: IAMRoleStack\n    Properties:\n      Parameters:\n        ResponseCodesTableReadCapacitymin:\n          !Ref ResponseCodesTableReadCapacitymin\n        ResponseCodesTableReadCapacitymax:\n          !Ref ResponseCodesTableReadCapacitymax\n        ResponseCodesTableWriteCapacitymin:\n          !Ref ResponseCodesTableWriteCapacitymin\n        ResponseCodesTableWriteCapacitymax:\n          !Ref ResponseCodesTableWriteCapacitymax\n        ResponseCodesTableGSIReadCapacitymin:\r\n          !Ref ResponseCodesTableGSIReadCapacitymin\r\n        ResponseCodesTableGSIReadCapacitymax:\r\n          !Ref ResponseCodesTableGSIReadCapacitymax\r\n        ResponseCodesTableGSIWriteCapacitymin:\r\n          !Ref ResponseCodesTableGSIWriteCapacitymin\r\n        ResponseCodesTableGSIWriteCapacitymax:\r\n          !Ref ResponseCodesTableGSIWriteCapacitymax\r\n        AuthorizationsTableReadCapacitymin:\r\n          !Ref AuthorizationsTableReadCapacitymin\r\n        AuthorizationsTableReadCapacitymax:\r\n          !Ref AuthorizationsTableReadCapacitymax\r\n        AuthorizationsTableWriteCapacitymin:\r\n          !Ref AuthorizationsTableWriteCapacitymin\r\n        AuthorizationsTableWriteCapacitymax:\r\n          !Ref AuthorizationsTableWriteCapacitymax\r\n        AuthorizationsTableGSIReadCapacitymin:\r\n          !Ref AuthorizationsTableGSIReadCapacitymin\r\n        AuthorizationsTableGSIReadCapacitymax:\r\n          !Ref AuthorizationsTableGSIReadCapacitymax\r\n        AuthorizationsTableGSIWriteCapacitymin:\r\n          !Ref AuthorizationsTableGSIWriteCapacitymin\r\n        AuthorizationsTableGSIWriteCapacitymax:\r\n          !Ref AuthorizationsTableGSIWriteCapacitymax\r\n        DynamoDBScalingRole:\n          !GetAtt\n          - IAMRoleStack\n          - Outputs.DynamoDBScalingRoleArn\n\n      TemplateURL: !Sub \"https://s3-ap-northeast-1.amazonaws.com/inv-${SystemEnvironment}-${ServiceName}-cfn/resources/7-1_dynamodb.txt\"\r\nOutputs:\r\n  VpcName:\r\n    Value:\r\n      !Join\r\n      - '-'\r\n      - - !Ref ServiceName\r\n        - !Ref SystemEnvironment\r\n...\r\n"
}
INV-ver-agw01-app-gateway-task
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: ecs task definition\n\nParameters:\n  accountAllias:\n    Type: String\n  accountAlliasLowerCase:\n    Type: String\n  apName:\n    Type: String\n  cpu:\n    Type: Number\n  memory:\n    Type: Number\n  apiImageUri:\n    Type: String\n  nginxImageUri:\n    Type: String\n  env:\n    Type: String\n\nResources:\n  ecsTaskExecutionRole:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement:\n          - Effect: \"Allow\"\n            Principal:\n              Service:\n                - \"ecs-tasks.amazonaws.com\"\n            Action:\n              - \"sts:AssumeRole\"\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy\n        - arn:aws:iam::aws:policy/SecretsManagerReadWrite\n        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess\n      RoleName: ecsTaskExecutionRole\n  Taskdefinition:\n    Type: AWS::ECS::TaskDefinition\n    DependsOn: ecsTaskExecutionRole\n    Properties:\n      Family: !Sub ${apName}-task\n      RequiresCompatibilities:\n        - FARGATE\n      Cpu: !Ref cpu\n      Memory: !Ref memory\n      NetworkMode: awsvpc\n      ExecutionRoleArn: !GetAtt ecsTaskExecutionRole.Arn\n      TaskRoleArn: !GetAtt ecsTaskExecutionRole.Arn\n      ContainerDefinitions:\n        - Name: !Sub ${apName}-container-api\n          Image: !Ref apiImageUri\n          PortMappings:\n            - ContainerPort: 3000\n              HostPort: 3000\n              Protocol: tcp\n          Environment:\n            - Name: API_HOST\n              Value: api\n            - Name: EXPIRATION_ACCESS_TOKEN_HOURS\n              Value: 1\n            - Name: EXPIRATION_RESPONSE_CODE_HOURS\n              Value: 24\n            - Name: NODE_ENV\n              Value: !Ref env\n            - Name: REGION\n              Value: ap-northeast-1\n          Memory: 300\n          HealthCheck:\n            Command:\n              - \"CMD-SHELL\"\n              - \"/bin/sh -c \\\"wget -q -O - 127.0.0.1:3000/healthcheck || exit 1\\\"\"\n            Interval: 30\n            Retries: 3\n            Timeout: 5\n          LogConfiguration:\n            LogDriver: awslogs\n            Options:\n              awslogs-region: !Ref AWS::Region\n              awslogs-group: !Sub /ecs/${apName}-task\n              awslogs-stream-prefix: ecs\n        - Name: !Sub ${apName}-container-nginx\n          Image: !Ref nginxImageUri\n          PortMappings:\n            - ContainerPort: 80\n              HostPort: 80\n              Protocol: tcp\n          Environment:\n            - Name: API_HOST\n              Value: localhost\n          Memory: 300\n          Cpu: 0\n          EntryPoint:\n            - \"/bin/bash\"\n            - \"-c\"\n          Command:\n            - \"envsubst '$$API_HOST' < /etc/nginx/conf.d/default.conf.template > /etc/nginx/conf.d/default.conf && exec nginx -g 'daemon off;'\"\n          LogConfiguration:\n            LogDriver: awslogs\n            Options:\n              awslogs-region: !Ref AWS::Region\n              awslogs-group: !Sub /ecs/${apName}-task\n              awslogs-stream-prefix: ecs\n\nOutputs:\n  ecsTaskExecutionRole:\n    Value: !Ref ecsTaskExecutionRole\n    Export:\n      Name: !Sub ${apName}-ecsTaskExecutionRole\n  taskdefinition:\n    Value: !Ref Taskdefinition\n    Export:\n      Name: !Sub ${apName}-taskdefinition\n"
}
INV-ver-agw01-ecs-loggroup
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: ecs and loggroup\n\nParameters:\n  accountAllias:\n    Type: String\n  accountAlliasLowerCase:\n    Type: String\n  logGroupName:\n    Type: String\n\nResources:\n  ecs:\n    Type: AWS::ECS::Cluster\n    Properties:\n      ClusterName: !Sub ${accountAlliasLowerCase}-cluster\n  logGroup:\n    Type: AWS::Logs::LogGroup\n    Properties: \n      LogGroupName: !Ref logGroupName\n\nOutputs:\n  cluster:\n    Value: !Ref ecs\n    Export:\n      Name: cluster\n  logGroup:\n    Value: !Ref logGroup\n    Export:\n      Name: logGroup"
}
StackSet-OpeAdmin-CreateIamRole-8323f3ac-9bea-4830-87fe-5131af61ae40
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "{\n  \"AWSTemplateFormatVersion\" : \"2010-09-09\",\n  \"Description\" : \"Template for Creating IAM Role to Switch from Internavi Login AWS Account\",\n  \"Parameters\" : {\n    \"TrustedAWSAccountId\" : {\n      \"AllowedPattern\" : \"^[0-9]*$\",\n      \"Type\" : \"String\",\n      \"Default\" : \"975196479634\",\n      \"Description\" : \"Trusted AWS Account ID\"\n    },\n    \"IAMRoleName\": {\n      \"Type\": \"String\",\n      \"Default\": \"OpeAdminRole\",\n      \"Description\": \"IAM Role Name\"\n    }\n  },\n  \"Resources\" : {\n    \"IAMRoleForEngineer\": {\n      \"Type\": \"AWS::IAM::Role\",\n      \"Properties\": {\n        \"AssumeRolePolicyDocument\": {\n          \"Version\": \"2012-10-17\",\n          \"Statement\": [\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010002\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010025\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010026\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010027\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010028\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010030\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            }\n          ]\n        },\n        \"ManagedPolicyArns\": [\n          \"arn:aws:iam::aws:policy/AdministratorAccess\"\n        ],\n        \"Path\": \"/\",\n        \"RoleName\": { \"Ref\" : \"IAMRoleName\" }\n      }\n    }\n  },\n  \"Outputs\" : {\n    \"IAMRoleArn\": {\n      \"Value\": { \"Fn::GetAtt\" : [ \"IAMRoleForEngineer\", \"Arn\" ] }\n    },\n    \"LinkForSwitchRole\": {\n      \"Value\": { \"Fn::Join\": [ \"\", [ \"https://signin.aws.amazon.com/switchrole?roleName=\", { \"Ref\" : \"IAMRoleName\" }, \"&account=\", { \"Ref\" : \"AWS::AccountId\" } ] ] }\n    }\n  }\n}\n"
}
INV-ver-agw01-vehicle-alb
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: public security group and alb\n\nParameters:\n  publicSecurityGroupCidr:\n    Type: String\n  apiName:\n    Type: String\n  certificate:\n    Type: String\nResources:\n  publicAlbSecuritygroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupName: !Sub ${apiName}-alb-sg\n      GroupDescription: !Sub ${apiName}-alb-sg\n      Tags:\n        - Key: Name\n          Value: !Sub ${apiName}-alb-sg\n      VpcId: !ImportValue VPC\n      SecurityGroupIngress:\n      - IpProtocol: tcp\n        FromPort: '443'\n        ToPort: '443'\n        CidrIp: !Ref publicSecurityGroupCidr\n      - IpProtocol: tcp\n        FromPort: '80'\n        ToPort: '80'\n        CidrIp: !Ref publicSecurityGroupCidr\n  publicAlbTargetGroup:\n    Type: AWS::ElasticLoadBalancingV2::TargetGroup\n    Properties:\n      HealthCheckIntervalSeconds: 10\n      HealthCheckPath: /healthcheck\n      HealthCheckPort: 80\n      HealthCheckProtocol: HTTP\n      HealthCheckTimeoutSeconds: 6\n      HealthyThresholdCount: 3\n      Name: !Sub ${apiName}-public-tg\n      Port: 80\n      Protocol: HTTP\n      UnhealthyThresholdCount: 3\n      TargetType: ip\n      VpcId: !ImportValue VPC\n  publicAlb:\n    Type: AWS::ElasticLoadBalancingV2::LoadBalancer\n    Properties:\n      Name: !Sub ${apiName}-alb\n      Scheme: internet-facing\n      SecurityGroups:\n        - !Ref publicAlbSecuritygroup\n      Subnets:\n        - !ImportValue PublicSubnet1a\n        - !ImportValue PublicSubnet1c\n      Tags:\n        - Key: Name\n          Value: !Sub ${apiName}-alb\n      Type: application\n      LoadBalancerAttributes:\n        - Key: access_logs.s3.enabled\n          Value: true\n        - Key: access_logs.s3.bucket\n          Value: !ImportValue LogBucket\n        - Key: access_logs.s3.prefix\n          Value: !Ref apiName\n  publicAlblistnener:\n    Type: AWS::ElasticLoadBalancingV2::Listener\n    Properties:\n      DefaultActions:\n        - TargetGroupArn: !Ref publicAlbTargetGroup\n          Type: forward\n      Certificates:\n        - CertificateArn: !Ref certificate\n      LoadBalancerArn: !Ref publicAlb\n      Port: 443\n      Protocol: HTTPS\n\nOutputs:\n  publicAlbSecuritygroup:\n    Value: !Ref publicAlbSecuritygroup\n    Export:\n      Name: !Sub ${apiName}-albSecuritygroup\n  publicAlbTargetGroup:\n    Value: !Ref publicAlbTargetGroup\n    Export:\n      Name: !Sub ${apiName}-publicTargetGroup\n  publicAlb:\n    Value: !Ref publicAlb\n    Export:\n      Name: !Sub ${apiName}-alb\n  publicAlblistnener:\n    Value: !Ref publicAlblistnener\n    Export:\n      Name: !Sub ${apiName}-alblistnener\n"
}
StackSet-cfn-exec-ec2-4bfd45c9-c0e9-4552-a1e6-9a6826602a6b
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: 2010-09-09\nDescription: CloudFormation Execute EC2\nParameters:\n  amiId:\n    Type: String\n    Default: ami-0d7ed3ddb85b521a6\n  SshCidr1:\n    Type: String\n    Default: 121.2.65.36/32\n  SshCidr2:\n    Type: String\n    Default: 39.110.201.10/32\n  SshCidr3:\n    Type: String\n    Default: 222.11.38.119/32\n  SshCidr4:\n    Type: String\n    Default: 1.21.118.25/32\n  SshCidr5:\n    Type: String\n    Default: 153.163.63.48/32\n  SshCidr6:\n    Type: String\n    Default: 13.231.11.115/32\nResources:\n  EC2Role:\n    Type: \"AWS::IAM::Role\"\n    Properties:\n      RoleName: cfn-exec-ec2-role\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/AdministratorAccess\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement:\n          -\n            Effect: \"Allow\"\n            Principal:\n              Service:\n                - \"ec2.amazonaws.com\"\n            Action:\n              - \"sts:AssumeRole\"\n      Path: \"/\"\n  Profile:\n    Type: AWS::IAM::InstanceProfile\n    Properties:\n      Roles:\n        - !Ref EC2Role\n  SSHSecurityGroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupName: cfn-exec-sg\n      GroupDescription: cfn-exec-sg\n      SecurityGroupIngress:\n      - IpProtocol: tcp\n        FromPort: '22'\n        ToPort: '22'\n        CidrIp: !Ref SshCidr1\n        Description: Classmethod\n      - IpProtocol: tcp\n        FromPort: '22'\n        ToPort: '22'\n        CidrIp: !Ref SshCidr2\n        Description: Classmethod\n      - IpProtocol: tcp\n        FromPort: '22'\n        ToPort: '22'\n        CidrIp: !Ref SshCidr3\n        Description: Classmethod\n      - IpProtocol: tcp\n        FromPort: '22'\n        ToPort: '22'\n        CidrIp: !Ref SshCidr4\n        Description: Classmethod\n      - IpProtocol: tcp\n        FromPort: '22'\n        ToPort: '22'\n        CidrIp: !Ref SshCidr5\n        Description: Classmethod\n      - IpProtocol: tcp\n        FromPort: '22'\n        ToPort: '22'\n        CidrIp: !Ref SshCidr6\n        Description: Classmethod\n      Tags:\n        - Key: Name\n          Value: cfn-exec-sg\n  EC2:\n    Type: AWS::EC2::Instance\n    Properties:\n      ImageId: !Ref amiId\n      InstanceType: t3.micro\n      KeyName: cfn-exec-key\n      IamInstanceProfile: !Ref Profile\n      NetworkInterfaces:\n        - AssociatePublicIpAddress: true\n          DeviceIndex: 0\n          GroupSet:\n            - !GetAtt SSHSecurityGroup.GroupId\n      UserData:\n        Fn::Base64: !Sub |\n          #!/bin/bash\n          yum -y update\n          yum -y install git\n      Tags:\n        - Key: Name\n          Value: cfn-exec\n  EIP:\n    Type: AWS::EC2::EIP\n    Properties:\n      Domain: vpc\n  AssociateEIP:\n    Type: AWS::EC2::EIPAssociation\n    Properties:\n      EIP: !Ref EIP\n      InstanceId: !Ref EC2\nOutputs:\n  EC2:\n    Value: !Ref EC2\n    Export:\n      Name: cfn-exex-ec2\n  EIP:\n    Value: !Ref EIP\n    Export:\n      Name: cfn-exex-IP\n"
}
INV-ver-agw01-vehicle-ver-wfi01
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: Create Service Endpoint\n\nParameters:\n  serviceAlliasLowerCase:\n    Type: String\n  serviceName:\n    Type: String\n  cidr:\n    Type: String\n\nResources:\n\n  endpointSecuritygroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupName: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      GroupDescription: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      Tags:\n        - Key: Name\n          Value: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      VpcId: !ImportValue VPC\n      SecurityGroupIngress:\n        - IpProtocol: tcp\n          FromPort: 80\n          ToPort: 80\n          CidrIp: !Ref cidr\n  endpoint:\n    Type: AWS::EC2::VPCEndpoint\n    Properties:\n      VpcEndpointType: Interface\n      VpcId: !ImportValue VPC\n      SubnetIds:\n        - !ImportValue PrivateSubnet1a\n        - !ImportValue PrivateSubnet1c\n      SecurityGroupIds:\n        - !Ref endpointSecuritygroup\n      ServiceName: !Ref serviceName\n      PrivateDnsEnabled: false\n"
}
INV-ver-agw01-ap1-ver-ysd
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: Create Service Endpoint\n\nParameters:\n  serviceAlliasLowerCase:\n    Type: String\n  serviceName:\n    Type: String\n  cidr:\n    Type: String\n\nResources:\n\n  endpointSecuritygroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupName: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      GroupDescription: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      Tags:\n        - Key: Name\n          Value: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      VpcId: !ImportValue VPC\n      SecurityGroupIngress:\n        - IpProtocol: tcp\n          FromPort: 80\n          ToPort: 80\n          CidrIp: !Ref cidr\n  endpoint:\n    Type: AWS::EC2::VPCEndpoint\n    Properties:\n      VpcEndpointType: Interface\n      VpcId: !ImportValue VPC\n      SubnetIds:\n        - !ImportValue PrivateSubnet1a\n        - !ImportValue PrivateSubnet1c\n      SecurityGroupIds:\n        - !Ref endpointSecuritygroup\n      ServiceName: !Ref serviceName\n      PrivateDnsEnabled: false\n"
}
INV-ver-agw01-bastion
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: 2010-09-09\nDescription: Bastion EC2\nParameters:\n  accountAllias:\n    Type: String\n  amiId:\n    Type: String\nResources:\n  SSHSecurityGroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      VpcId: !ImportValue VPC\n      GroupName: !Sub ${accountAllias}-bastion-sg\n      GroupDescription: !Sub ${accountAllias}-bastion-sg\n      Tags:\n        - Key: Name\n          Value: !Sub ${accountAllias}-bastion-sg\n  EC2:\n    Type: AWS::EC2::Instance\n    Properties:\n      ImageId: !Ref amiId\n      InstanceType: t3.micro\n      KeyName: !Sub ${accountAllias}-bastion-key\n      NetworkInterfaces:\n        - AssociatePublicIpAddress: true\n          SubnetId: !ImportValue PublicSubnet1a\n          DeviceIndex: 0\n          GroupSet:\n            - !Ref SSHSecurityGroup\n      UserData:\n        Fn::Base64: !Sub |\n          #!/bin/bash\n          yum -y update\n      Tags:\n        - Key: Name\n          Value: !Sub ${accountAllias}-bastion\n  EIP:\n    Type: AWS::EC2::EIP\n    Properties:\n      Domain: vpc\n  AssociateEIP:\n    Type: AWS::EC2::EIPAssociation\n    Properties:\n      EIP: !Ref EIP\n      InstanceId: !Ref EC2\nOutputs:\n  EC2:\n    Value: !Ref EC2\n    Export:\n      Name: BastionEC2\n  EIP:\n    Value: !Ref EIP\n    Export:\n      Name: BastionIP\n"
}
StackSet-ver-agw01-createIamRole-a15c1a36-460d-4a11-8658-53aa553982e8
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "{\n  \"AWSTemplateFormatVersion\" : \"2010-09-09\",\n  \"Description\" : \"Template for Creating IAM Role to Switch from Internavi Login AWS Account\",\n  \"Parameters\" : {\n    \"TrustedAWSAccountId\" : {\n      \"AllowedPattern\" : \"^[0-9]*$\",\n      \"Type\" : \"String\",\n      \"Default\" : \"975196479634\",\n      \"Description\" : \"Trusted AWS Account ID\"\n    },\n    \"IAMRoleName\": {\n      \"Type\": \"String\",\n      \"Default\": \"SolDeveloper\",\n      \"Description\": \"IAM Role Name\"\n    },\n    \"IAMPolicyType\": {\n      \"Type\": \"String\",\n      \"Default\": \"SolUser\",\n      \"Description\": \"IAM Policy Type\",\n      \"AllowedValues\": [ \"SolUser\", \"Admin\" ]\n    }\n  },\n  \"Conditions\" : {\n    \"user\"        : { \"Fn::Equals\" : [{\"Ref\" : \"IAMPolicyType\"}, \"SolUser\" ]},\n    \"admin\"        : { \"Fn::Equals\" : [{\"Ref\" : \"IAMPolicyType\"}, \"Admin\" ]}\n  },\n  \"Resources\" : {\n    \"IAMRoleForAdmin\": {\n      \"Type\": \"AWS::IAM::Role\",\n      \"Condition\" : \"admin\",\n      \"Properties\": {\n        \"AssumeRolePolicyDocument\": {\n          \"Version\": \"2012-10-17\",\n          \"Statement\": [\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV020001\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV020002\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV020003\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV020004\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV020008\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV020009\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV020011\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV020012\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV020013\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ]\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV020014\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ]\n            }\n          ]\n        },\n        \"ManagedPolicyArns\": [\n          \"arn:aws:iam::aws:policy/AdministratorAccess\"\n        ],\n        \"Path\": \"/\",\n        \"RoleName\": { \"Ref\" : \"IAMRoleName\" }\n      }\n    },\n    \"IAMRoleForUser\": {\n      \"Type\": \"AWS::IAM::Role\",\n      \"Condition\" : \"user\",\n      \"Properties\": {\n        \"AssumeRolePolicyDocument\": {\n          \"Version\": \"2012-10-17\",\n          \"Statement\": [\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV020001\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV020002\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV020003\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV020004\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV020008\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV020009\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV020011\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV020012\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV020013\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ]\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV020014\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ]\n            }\n          ]\n        },\n        \"ManagedPolicyArns\": [\n          \"arn:aws:iam::aws:policy/ReadOnlyAccess\",\n          \"arn:aws:iam::aws:policy/AWSCodeCommitPowerUser\"\n        ],\n        \"Path\": \"/\",\n        \"RoleName\": { \"Ref\" : \"IAMRoleName\" }\n      }\n    }\n  },\n  \"Outputs\" : {\n    \"IAMRoleAdminArn\": {\n      \"Value\": { \"Fn::GetAtt\" : [ \"IAMRoleForAdmin\", \"Arn\" ] },\n      \"Condition\" : \"admin\"\n    },\n    \"IAMRoleUserArn\": {\n      \"Value\": { \"Fn::GetAtt\" : [ \"IAMRoleForUser\", \"Arn\" ] },\n      \"Condition\" : \"user\"\n    },\n    \"LinkForSwitchRole\": {\n      \"Value\": { \"Fn::Join\": [ \"\", [ \"https://signin.aws.amazon.com/switchrole?roleName=\", { \"Ref\" : \"IAMRoleName\" }, \"&account=\", { \"Ref\" : \"AWS::AccountId\" } ] ] }\n    }\n  }\n}\n"
}
INV-ver-agw01-vpc-base
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "---\nAWSTemplateFormatVersion: '2010-09-09'\nDescription: VPC Network Template\nParameters:\n  SolName:\n    Type: String\n    Default: base01\n    Description: Solution Name.\n  SubSolName:\n    Type: String\n    Default: base\n    Description: Solution Name.\n  EnvName:\n    Type: String\n    Default: dev\n    Description: Env Name.\n  VPCCIDR:\n    Description: First and Second Octet of VPC, For example xxx.xxx\n    Type: String\n    Default: '10.0'\n    AllowedPattern: \"^(10\\\\.([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])|172\\\\.(1[6-9]|2[0-9]|3[0-1])|192\\\\.168)$\"\n    ConstraintDescription: xxx.xxx\nMappings:\n  StackConfig:\n    VPC:\n      CIDR: \".0.0/16\"\n    PublicSubnet1:\n      CIDR: \".0.0/24\"\n    PublicSubnet2:\n      CIDR: \".1.0/24\"\n    PrivateSubnet1:\n      CIDR: \".10.0/24\"\n    PrivateSubnet2:\n      CIDR: \".11.0/24\"\n\nResources:\n  VPC:\n    Type: AWS::EC2::VPC\n    Properties:\n      CidrBlock: !Sub\n        - ${VPCCIDR}${SubCIDR}\n        - SubCIDR: {\"Fn::FindInMap\": [ StackConfig, VPC, CIDR ]}\n      EnableDnsSupport: 'true'\n      EnableDnsHostnames: 'true'\n      InstanceTenancy: default\n      Tags:\n      - Key: Name\n        Value: !Sub INV-${EnvName}-${SolName}\n  InternetGateway:\n    Type: AWS::EC2::InternetGateway\n    Properties:\n      Tags:\n      - Key: Name\n        Value: !Sub INV-${EnvName}-${SolName}\n  AttachGateway:\n    Type: AWS::EC2::VPCGatewayAttachment\n    Properties:\n      VpcId: !Ref VPC\n      InternetGatewayId: !Ref InternetGateway\n\n  PublicSubnet1a:\n    Type: AWS::EC2::Subnet\n    DependsOn: AttachGateway\n    Properties:\n      AvailabilityZone: !Select [ 0, \"Fn::GetAZs\": {Ref: \"AWS::Region\"}]\n      CidrBlock: !Sub\n        - ${VPCCIDR}${SubCIDR}\n        - SubCIDR: {\"Fn::FindInMap\": [ StackConfig, PublicSubnet1, CIDR ]}\n      MapPublicIpOnLaunch: 'true'\n      Tags:\n      - Key: Name\n        Value: !Sub INV-${EnvName}-${SolName}-PublicSubnet1a\n      VpcId: !Ref VPC\n  PublicSubnet1c:\n    Type: AWS::EC2::Subnet\n    DependsOn: AttachGateway\n    Properties:\n      AvailabilityZone: !Select [ 1, \"Fn::GetAZs\": {Ref: \"AWS::Region\"}]\n      CidrBlock: !Sub\n        - ${VPCCIDR}${SubCIDR}\n        - SubCIDR: {\"Fn::FindInMap\": [ StackConfig, PublicSubnet2, CIDR ]}\n      MapPublicIpOnLaunch: 'true'\n      Tags:\n      - Key: Name\n        Value: !Sub INV-${EnvName}-${SolName}-PublicSubnet1c\n      VpcId: !Ref VPC\n  PrivateSubnet1a:\n    Type: AWS::EC2::Subnet\n    DependsOn: AttachGateway\n    Properties:\n      AvailabilityZone: !Select [ 0, \"Fn::GetAZs\": {Ref: \"AWS::Region\"}]\n      CidrBlock: !Sub\n        - ${VPCCIDR}${SubCIDR}\n        - SubCIDR: {\"Fn::FindInMap\": [ StackConfig, PrivateSubnet1, CIDR ]}\n      MapPublicIpOnLaunch: 'true'\n      Tags:\n      - Key: Name\n        Value: !Sub INV-${EnvName}-${SolName}-PrivateSubnet1a\n      VpcId: !Ref VPC\n  PrivateSubnet1c:\n    Type: AWS::EC2::Subnet\n    DependsOn: AttachGateway\n    Properties:\n      AvailabilityZone: !Select [ 1, \"Fn::GetAZs\": {Ref: \"AWS::Region\"}]\n      CidrBlock: !Sub\n        - ${VPCCIDR}${SubCIDR}\n        - SubCIDR: {\"Fn::FindInMap\": [ StackConfig, PrivateSubnet2, CIDR ]}\n      MapPublicIpOnLaunch: 'true'\n      Tags:\n      - Key: Name\n        Value: !Sub INV-${EnvName}-${SolName}-PrivateSubnet1c\n      VpcId: !Ref VPC\n\n  EIP1a:\n    Type: AWS::EC2::EIP\n    Properties:\n      Domain: vpc\n  NAT1a:\n    Type: AWS::EC2::NatGateway\n    Properties:\n      AllocationId:\n        Fn::GetAtt:\n          - EIP1a\n          - AllocationId\n      SubnetId: !Ref PublicSubnet1a\n      Tags:\n        - Key: Name\n          Value: !Sub INV-${EnvName}-${SolName}-NGW1a\n\n  EIP1c:\n    Type: AWS::EC2::EIP\n    Properties:\n      Domain: vpc\n  NAT1c:\n    Type: AWS::EC2::NatGateway\n    Properties:\n      AllocationId:\n        Fn::GetAtt:\n          - EIP1c\n          - AllocationId\n      SubnetId: !Ref PublicSubnet1c\n      Tags:\n        - Key: Name\n          Value: !Sub INV-${EnvName}-${SolName}-NGW1c\n\n  PublicRouteTable:\n    Type: AWS::EC2::RouteTable\n    DependsOn: AttachGateway\n    Properties:\n      VpcId: !Ref VPC\n      Tags:\n      - Key: Name\n        Value: !Sub INV-${EnvName}-${SolName}-PublicRoute\n  PublicRoute:\n    Type: AWS::EC2::Route\n    DependsOn: AttachGateway\n    Properties:\n      RouteTableId: !Ref PublicRouteTable\n      DestinationCidrBlock: 0.0.0.0/0\n      GatewayId: !Ref InternetGateway\n  PrivateRouteTable1a:\n    Type: AWS::EC2::RouteTable\n    DependsOn: NAT1a\n    Properties:\n      VpcId: !Ref VPC\n      Tags:\n      - Key: Name\n        Value: !Sub INV-${EnvName}-${SolName}-PrivateRoute1a\n  PrivateRoute1a:\n    Type: AWS::EC2::Route\n    DependsOn: NAT1a\n    Properties:\n      RouteTableId: !Ref PrivateRouteTable1a\n      DestinationCidrBlock: 0.0.0.0/0\n      NatGatewayId: !Ref NAT1a\n  PrivateRouteTable1c:\n    Type: AWS::EC2::RouteTable\n    DependsOn: NAT1c\n    Properties:\n      VpcId: !Ref VPC\n      Tags:\n      - Key: Name\n        Value: !Sub INV-${EnvName}-${SolName}-PrivateRoute1c\n  PrivateRoute1c:\n    Type: AWS::EC2::Route\n    DependsOn: NAT1c\n    Properties:\n      RouteTableId: !Ref PrivateRouteTable1c\n      DestinationCidrBlock: 0.0.0.0/0\n      NatGatewayId: !Ref NAT1c\n\n  PublicSubnet1aRouteTableAssociation:\n    Type: AWS::EC2::SubnetRouteTableAssociation\n    Properties:\n      SubnetId: !Ref PublicSubnet1a\n      RouteTableId: !Ref PublicRouteTable\n  PublicSubnet1cRouteTableAssociation:\n    Type: AWS::EC2::SubnetRouteTableAssociation\n    Properties:\n      SubnetId: !Ref PublicSubnet1c\n      RouteTableId: !Ref PublicRouteTable\n  PrivateSubnet1aRouteTableAssociation:\n    Type: AWS::EC2::SubnetRouteTableAssociation\n    Properties:\n      SubnetId: !Ref PrivateSubnet1a\n      RouteTableId: !Ref PrivateRouteTable1a\n  PrivateSubnet1cRouteTableAssociation:\n    Type: AWS::EC2::SubnetRouteTableAssociation\n    Properties:\n      SubnetId: !Ref PrivateSubnet1c\n      RouteTableId: !Ref PrivateRouteTable1c\n\n  DNS1:\n    Type: \"AWS::Route53::HostedZone\"\n    Properties:\n      HostedZoneConfig:\n        Comment: INV-LocalDomain\n      Name: internal-internavi\n      VPCs:\n        -\n          VPCId: !Ref VPC\n          VPCRegion: !Ref AWS::Region\n      HostedZoneTags:\n        -\n          Key: \"Name\"\n          Value: !Sub INV-${EnvName}-${SolName}\n\n  FlowLogBucket:\n    Type: AWS::S3::Bucket\n    Properties:\n        BucketName: !Join\n          - \"-\"\n          -\n            - inv\n            - !Ref EnvName\n            - !Ref SolName\n            - !Ref VPC\n  FlowLogBucketPolicy:\n    Type: AWS::S3::BucketPolicy\n    DependsOn: NAT1c\n    Properties:\n      Bucket: !Ref FlowLogBucket\n      PolicyDocument:\n        Statement:\n          -\n            Action:\n              - \"s3:PutObject\"\n            Effect: \"Allow\"\n            Resource:\n              Fn::Join:\n                - \"\"\n                -\n                  - \"arn:aws:s3:::\"\n                  - !Ref FlowLogBucket\n                  - \"/*\"\n            Principal:\n              AWS: \"arn:aws:iam::582318560864:root\"\n          -\n            Action:\n              - \"s3:PutObject\"\n            Effect: \"Allow\"\n            Resource:\n              Fn::Join:\n                - \"\"\n                -\n                  - \"arn:aws:s3:::\"\n                  - !Ref FlowLogBucket\n                  - \"/*\"\n            Principal:\n              Service: \"delivery.logs.amazonaws.com\"\n            Condition:\n              StringEquals:\n                s3:x-amz-acl: bucket-owner-full-control\n          -\n            Action:\n              - \"s3:GetBucketAcl\"\n            Effect: \"Allow\"\n            Resource:\n              Fn::Join:\n                - \"\"\n                -\n                  - \"arn:aws:s3:::\"\n                  - !Ref FlowLogBucket\n            Principal:\n              Service: \"delivery.logs.amazonaws.com\"\n  FlowLog:\n    Type: AWS::EC2::FlowLog\n    DependsOn: FlowLogBucketPolicy\n    Properties:\n      LogDestinationType : \"s3\"\n      LogDestination : !Join\n        - \"\"\n        -\n          - \"arn:aws:s3:::\"\n          - !Ref FlowLogBucket\n          - /FlowLogs/\n      ResourceType : VPC\n      ResourceId : !Ref VPC\n      TrafficType : ALL\n\n  S3Endpoint:\n    Type: AWS::EC2::VPCEndpoint\n    Properties:\n      RouteTableIds:\n        - !Ref PublicRouteTable\n        - !Ref PrivateRouteTable1a\n        - !Ref PrivateRouteTable1c\n      ServiceName: !Join\n        - ''\n        - - com.amazonaws.\n          - !Ref 'AWS::Region'\n          - .s3\n      VpcId: !Ref VPC\n  DynamoEndpoint:\n    Type: AWS::EC2::VPCEndpoint\n    Properties:\n      RouteTableIds:\n        - !Ref PublicRouteTable\n        - !Ref PrivateRouteTable1a\n        - !Ref PrivateRouteTable1c\n      ServiceName: !Join\n        - ''\n        - - com.amazonaws.\n          - !Ref 'AWS::Region'\n          - .dynamodb\n      VpcId: !Ref VPC\n  Certificate:\n    Type: AWS::CertificateManager::Certificate\n    Properties:\n      DomainName: !Sub '*.${EnvName}-${SubSolName}.cloud.internavi.ne.jp'\n      SubjectAlternativeNames:\n        - '*.cloud.internavi.ne.jp'\n      ValidationMethod: DNS\n\nOutputs:\n  VPC:\n    Value: !Ref VPC\n    Export:\n      Name: VPC\n  PublicSubnet1a:\n    Value: !Ref PublicSubnet1a\n    Export:\n      Name: PublicSubnet1a\n  PublicSubnet1c:\n    Value: !Ref PublicSubnet1c\n    Export:\n      Name: PublicSubnet1c\n  PrivateSubnet1a:\n    Value: !Ref PrivateSubnet1a\n    Export:\n      Name: PrivateSubnet1a\n  PrivateSubnet1c:\n    Value: !Ref PrivateSubnet1c\n    Export:\n      Name: PrivateSubnet1c\n  PublicRouteTable:\n    Value: !Ref PublicRouteTable\n    Export:\n      Name: PublicRouteTable\n  PrivateRouteTable1a:\n    Value: !Ref PrivateRouteTable1a\n    Export:\n      Name: PrivateRouteTable1a\n  PrivateRouteTable1c:\n    Value: !Ref PrivateRouteTable1c\n    Export:\n      Name: PrivateRouteTable1c\n  LogBucket:\n    Value: !Ref FlowLogBucket\n    Export:\n      Name: LogBucket\n  DNS1:\n    Value: !Ref DNS1\n    Export:\n      Name: DNS1\n"
}
INV-ver-agw01-codecommit-ecr
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: codecommit and ecr\n\nParameters:\n  accountAllias:\n    Type: String\n  accountAlliasLowerCase:\n    Type: String\n  apName:\n    Type: String\n\nResources:\n  codecommitcfn:\n    Type: AWS::CodeCommit::Repository\n    Properties:\n      RepositoryName: !Sub ${accountAllias}-cfn\n      RepositoryDescription: !Sub ${accountAllias}-cfn\n  apiEcr:\n    Type: AWS::ECR::Repository\n    Properties:\n      RepositoryName: !Sub ${apName}-ecr/api\n  nginxEcr:\n    Type: AWS::ECR::Repository\n    Properties:\n      RepositoryName: !Sub ${apName}-ecr/nginx\n\nOutputs:\n  codecommitcfn:\n    Value: !Ref codecommitcfn\n    Export:\n      Name: codecommitcfn\n  apiEcr:\n    Value: !GetAtt apiEcr.Arn\n    Export:\n      Name: apiEcr\n  nginxEcr:\n    Value: !GetAtt nginxEcr.Arn\n    Export:\n      Name: nginxEcr\n"
}
StackSet-HmAdmin-createIamRole-be168aba-8803-47b8-ac5e-b27c8e46bc01
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "{\n  \"AWSTemplateFormatVersion\" : \"2010-09-09\",\n  \"Description\" : \"Template for Creating IAM Role to Switch from Internavi Login AWS Account\",\n  \"Parameters\" : {\n    \"TrustedAWSAccountId\" : {\n      \"AllowedPattern\" : \"^[0-9]*$\",\n      \"Type\" : \"String\",\n      \"Default\" : \"975196479634\",\n      \"Description\" : \"Trusted AWS Account ID\"\n    },\n    \"IAMRoleName\": {\n      \"Type\": \"String\",\n      \"Default\": \"HmAdmin\",\n      \"Description\": \"IAM Role Name\"\n    }\n  },\n  \"Resources\" : {\n    \"IAMRoleForEngineer\": {\n      \"Type\": \"AWS::IAM::Role\",\n      \"Properties\": {\n        \"AssumeRolePolicyDocument\": {\n          \"Version\": \"2012-10-17\",\n          \"Statement\": [\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"J0322720\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"J0116063\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JP300063\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JP310643\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JP311734\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            }\n          ]\n        },\n        \"ManagedPolicyArns\": [\n          \"arn:aws:iam::aws:policy/AdministratorAccess\"\n        ],\n        \"Path\": \"/\",\n        \"RoleName\": { \"Ref\" : \"IAMRoleName\" }\n      }\n    }\n  },\n  \"Outputs\" : {\n    \"IAMRoleArn\": {\n      \"Value\": { \"Fn::GetAtt\" : [ \"IAMRoleForEngineer\", \"Arn\" ] }\n    },\n    \"LinkForSwitchRole\": {\n      \"Value\": { \"Fn::Join\": [ \"\", [ \"https://signin.aws.amazon.com/switchrole?roleName=\", { \"Ref\" : \"IAMRoleName\" }, \"&account=\", { \"Ref\" : \"AWS::AccountId\" } ] ] }\n    }\n  }\n}\n"
}
StackSet-cm-cm-hamada-koji-iamRole-0a5a637b-5252-421b-827f-3a853d6b0ee9
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": {
        "AWSTemplateFormatVersion": "2010-09-09", 
        "Description": "Template for Creating IAM Role to Switch from Classmethod AWS Account", 
        "Parameters": {
            "TrustedAWSAccountId": {
                "AllowedPattern": "^[0-9]*$", 
                "Type": "String", 
                "Default": "", 
                "Description": "Trusted AWS Account ID"
            }, 
            "IAMUserName": {
                "AllowedPattern": "^cm-[a-z.]*$", 
                "Type": "String", 
                "Default": "cm-xxx.xxx", 
                "Description": "IAM Role Name"
            }
        }, 
        "Resources": {
            "IAMRoleForCmEngineer": {
                "Type": "AWS::IAM::Role", 
                "Properties": {
                    "AssumeRolePolicyDocument": {
                        "Version": "2012-10-17", 
                        "Statement": [
                            {
                                "Effect": "Allow", 
                                "Principal": {
                                    "AWS": {
                                        "Fn::Join": [
                                            "", 
                                            [
                                                "arn:aws:iam::", 
                                                {
                                                    "Ref": "TrustedAWSAccountId"
                                                }, 
                                                ":user/", 
                                                {
                                                    "Ref": "IAMUserName"
                                                }
                                            ]
                                        ]
                                    }
                                }, 
                                "Action": [
                                    "sts:AssumeRole"
                                ], 
                                "Condition": {
                                    "Bool": {
                                        "aws:MultiFactorAuthPresent": "true"
                                    }
                                }
                            }
                        ]
                    }, 
                    "ManagedPolicyArns": [
                        "arn:aws:iam::aws:policy/AdministratorAccess"
                    ], 
                    "Path": "/", 
                    "RoleName": {
                        "Ref": "IAMUserName"
                    }
                }
            }
        }, 
        "Outputs": {
            "IAMRoleArn": {
                "Value": {
                    "Fn::GetAtt": [
                        "IAMRoleForCmEngineer", 
                        "Arn"
                    ]
                }
            }, 
            "LinkForSwitchRole": {
                "Value": {
                    "Fn::Join": [
                        "", 
                        [
                            "https://signin.aws.amazon.com/switchrole?roleName=", 
                            {
                                "Ref": "IAMUserName"
                            }, 
                            "&account=", 
                            {
                                "Ref": "AWS::AccountId"
                            }
                        ]
                    ]
                }
            }
        }
    }
}
StackSetsExecutionRole
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: 2010-09-09\nDescription: Configure the AWSCloudFormationStackSetExecutionRole to support AWS CloudFormation StackSets in a managed account.\n\nParameters:\n  MasterAccountId:\n    Type: String\n    Description: AWS Account Id of the master account (the account in which StackSets will be created).\n    MaxLength: 12\n    MinLength: 12\n\nResources:\n  ExecutionRole:\n    Type: AWS::IAM::Role\n    Properties:\n      RoleName: AWSCloudFormationStackSetExecutionRole\n      AssumeRolePolicyDocument: \n        Version: 2012-10-17\n        Statement: \n          - Effect: Allow\n            Principal: \n              AWS:\n                - !Ref MasterAccountId\n            Action: \n              - sts:AssumeRole\n      Path: /\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/AdministratorAccess\n"
}
cm-kikuchi-shuji-iamRole
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": {
        "AWSTemplateFormatVersion": "2010-09-09", 
        "Description": "Template for Creating IAM Role to Switch from Classmethod AWS Account", 
        "Parameters": {
            "TrustedAWSAccountId": {
                "AllowedPattern": "^[0-9]*$", 
                "Type": "String", 
                "Default": "", 
                "Description": "Trusted AWS Account ID"
            }, 
            "IAMUserName": {
                "AllowedPattern": "^cm-[a-z.]*$", 
                "Type": "String", 
                "Default": "cm-xxx.xxx", 
                "Description": "IAM Role Name"
            }
        }, 
        "Resources": {
            "IAMRoleForCmEngineer": {
                "Type": "AWS::IAM::Role", 
                "Properties": {
                    "AssumeRolePolicyDocument": {
                        "Version": "2012-10-17", 
                        "Statement": [
                            {
                                "Effect": "Allow", 
                                "Principal": {
                                    "AWS": {
                                        "Fn::Join": [
                                            "", 
                                            [
                                                "arn:aws:iam::", 
                                                {
                                                    "Ref": "TrustedAWSAccountId"
                                                }, 
                                                ":user/", 
                                                {
                                                    "Ref": "IAMUserName"
                                                }
                                            ]
                                        ]
                                    }
                                }, 
                                "Action": [
                                    "sts:AssumeRole"
                                ], 
                                "Condition": {
                                    "Bool": {
                                        "aws:MultiFactorAuthPresent": "true"
                                    }
                                }
                            }
                        ]
                    }, 
                    "ManagedPolicyArns": [
                        "arn:aws:iam::aws:policy/AdministratorAccess"
                    ], 
                    "Path": "/", 
                    "RoleName": {
                        "Ref": "IAMUserName"
                    }
                }
            }
        }, 
        "Outputs": {
            "IAMRoleArn": {
                "Value": {
                    "Fn::GetAtt": [
                        "IAMRoleForCmEngineer", 
                        "Arn"
                    ]
                }
            }, 
            "LinkForSwitchRole": {
                "Value": {
                    "Fn::Join": [
                        "", 
                        [
                            "https://signin.aws.amazon.com/switchrole?roleName=", 
                            {
                                "Ref": "IAMUserName"
                            }, 
                            "&account=", 
                            {
                                "Ref": "AWS::AccountId"
                            }
                        ]
                    ]
                }
            }
        }
    }
}
]
スクリプトを終了します
  1- INV-ver-htc01:arn:aws:iam::686753218709:role/OpeAdminRole
  2- INV-ver-sub01:arn:aws:iam::495152581087:role/OpeAdminRole
  3- INV-ver-cer01:arn:aws:iam::339311866652:role/OpeAdminRole
  4- INV-ver-des01:arn:aws:iam::302986797475:role/OpeAdminRole
  5- INV-ver-agw01:arn:aws:iam::859823971378:role/OpeAdminRole
  6- INV-ver-vdm01:arn:aws:iam::497617980196:role/OpeAdminRole
  7- INV-ver-wfi01:arn:aws:iam::932204081418:role/OpeAdminRole
  8- INV-ver-esp01:arn:aws:iam::131000633826:role/OpeAdminRole
  9- INV-ver-rmt01:arn:aws:iam::604584103104:role/OpeAdminRole
 10- INV-ver-esw01:arn:aws:iam::170541451228:role/OpeAdminRole
 11- INV-ver-tcu01:arn:aws:iam::951453431396:role/OpeAdminRole
 12- INV-ver-vky01:arn:aws:iam::207429400733:role/OpeAdminRole
     all- All Environments:select all environments
スクリプトを実行します。
aws cloudformation describe-stacks --query Stacks[*].StackName
{
    "Account": "975196479634", 
    "UserId": "AIDA6GDR5MCJLYN4JQRFZ", 
    "Arn": "arn:aws:iam::975196479634:user/JV010028"
}
{
    "Account": "497617980196", 
    "UserId": "AROAXHXCXZMSGUI3PH4SH:inv-20190702040856", 
    "Arn": "arn:aws:sts::497617980196:assumed-role/OpeAdminRole/inv-20190702040856"
}
[
inv-ver-vdm01-monitoring-lambda
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: \"2010-09-09\"\r\nDescription: \"monitoring-lambda.yml\"\r\nParameters: \r\n  EnvironmentName: \r\n    Default: ver\r\n    Description: \"Environment Name\"\r\n    Type: String\r\n  MicroServiceName: \r\n    Default: cer01\r\n    Description: \"MicroService Name\"\r\n    Type: String\r\n  S3Buckets: \r\n    Default: \"inv-ver-cer01-cfn\"\r\n    Description: \"source s3 backet name\"\r\n    Type: String\r\n  S3Prefix:\r\n    Default: \"monitor-config/\"\r\n    Description: \"source s3 backet file prefix\"\r\n    Type: String\r\n  iniFileName: \r\n    Default: \"monitor.json\"\r\n    Description: \"scenario file name\"\r\n    Type: String\r\n  scenarioSourceLogGroup:\r\n    Description: \"Scenario CWL log group name\"\r\n    Type: \"String\"\r\n  scenarioFilterPattern:\r\n    Default: \"\"\r\n    Description: \"Scenario Monitor CWL log FilterPattern\"\r\n    Type: \"String\"\r\n  programSourceLogGroup:\r\n    Description: \"program CWL log group name\"\r\n    Type: \"String\"\r\n  programFilterPattern:\r\n    Default: ?\"ERROR\" ?\"FATAL\" ?\"WARN\"\r\n    Description: \"program Monitor CWL log FilterPattern\"\r\n    Type: \"String\"\r\nResources:\r\n  IAMRole:\r\n    Type: \"AWS::IAM::Role\"\r\n    Properties: \r\n      AssumeRolePolicyDocument: \r\n        Version: \"2012-10-17\"\r\n        Statement: \r\n          - Effect: Allow\r\n            Principal: \r\n              Service: \"lambda.amazonaws.com\"\r\n            Action: \"sts:AssumeRole\"\r\n      ManagedPolicyArns: \r\n        - \"arn:aws:iam::aws:policy/AmazonSNSFullAccess\"\r\n      Path: \"/\"\r\n      Policies:\r\n        - PolicyName: monitor_lambda_policy\r\n          PolicyDocument:\r\n            Version: '2012-10-17'\r\n            Statement:\r\n              - Effect: Allow\r\n                Action:\r\n                  - cloudwatch:*\r\n                  - logs:*\r\n                  - s3:Get*\r\n                  - s3:List*\r\n                Resource: \"*\"\r\n      RoleName: !Sub inv-${EnvironmentName}-${MicroServiceName}-monitoring-lambda-role\r\n  LambdaLayer:\r\n    Type: \"AWS::Lambda::LayerVersion\"\r\n    Properties:\r\n      CompatibleRuntimes: \r\n        - python3.6\r\n      Content: \r\n        S3Bucket:\r\n          Ref: S3Buckets\r\n        S3Key: CloudwatchAlarm/metrics_mod.zip\r\n      Description: \"monitor_lambda_modules\"\r\n      LayerName: monitor_module\r\n  LambdaFunction: \r\n    DependsOn: \r\n      - IAMRole\r\n    Type: \"AWS::Lambda::Function\"\r\n    Properties: \r\n      Code: \r\n        S3Bucket: \r\n          Ref: S3Buckets\r\n        S3Key: CloudwatchAlarm/monitoring_common_lambda_src.zip           \r\n      FunctionName: !Sub inv-${EnvironmentName}-${MicroServiceName}-monitoring_common_lambda\r\n      Handler: lambda_function.lambda_handler\r\n      Environment: \r\n        Variables: \r\n          ENV: \r\n            Ref: EnvironmentName\r\n          STG: \r\n            Ref: MicroServiceName\r\n          fileName:\r\n            Ref: iniFileName\r\n          s3Bucket:\r\n            Ref: S3Buckets\r\n          s3keyPrefix:\r\n            Ref: S3Prefix\r\n      Role: \r\n        \"Fn::GetAtt\": \r\n          - IAMRole\r\n          - Arn\r\n      Runtime: \"python3.6\"\r\n      MemorySize: 512\r\n      Timeout: 300\r\n      Layers:\r\n        - !Ref LambdaLayer\r\n  LambdaPermission: \r\n    Type: \"AWS::Lambda::Permission\"\r\n    Properties: \r\n      Action: \"lambda:InvokeFunction\"\r\n      FunctionName: \r\n        \"Fn::GetAtt\": \r\n          - LambdaFunction\r\n          - Arn\r\n      Principal: !Sub \"sns.amazonaws.com\"\r\n      SourceArn: !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:inv-${EnvironmentName}-${MicroServiceName}\r\n  ScenarioSubscriptionFilter:\r\n    DependsOn:\r\n      - ScenarioLambdaInvokePermission\r\n    Type: \"AWS::Logs::SubscriptionFilter\"\r\n    Properties:\r\n      LogGroupName: !Ref scenarioSourceLogGroup\r\n      FilterPattern: !Ref scenarioFilterPattern\r\n      DestinationArn: !Join\r\n        - ''\r\n        - - !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:'\r\n          - !Sub inv-${EnvironmentName}-${MicroServiceName}-monitoring_common_lambda\r\n  ScenarioLambdaInvokePermission:\r\n    Type: 'AWS::Lambda::Permission'\r\n    Properties:\r\n      FunctionName:\r\n        \"Fn::GetAtt\": \r\n          - LambdaFunction\r\n          - Arn\r\n      Action: \"lambda:InvokeFunction\"\r\n      Principal: !Sub \"logs.amazonaws.com\"\r\n      SourceAccount: !Ref AWS::AccountId\r\n      SourceArn: !Sub \"arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${scenarioSourceLogGroup}:*\"\r\n  ProgramSubscriptionFilter:\r\n    DependsOn:\r\n      - ProgramLambdaInvokePermission\r\n    Type: \"AWS::Logs::SubscriptionFilter\"\r\n    Properties:\r\n      LogGroupName: !Ref programSourceLogGroup\r\n      FilterPattern: !Ref programFilterPattern\r\n      DestinationArn: !Join\r\n        - ''\r\n        - - !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:'\r\n          - !Sub inv-${EnvironmentName}-${MicroServiceName}-monitoring_common_lambda\r\n  ProgramLambdaInvokePermission:\r\n    Type: 'AWS::Lambda::Permission'\r\n    Properties:\r\n      FunctionName:\r\n        \"Fn::GetAtt\": \r\n          - LambdaFunction\r\n          - Arn\r\n      Action: \"lambda:InvokeFunction\"\r\n      Principal: !Sub \"logs.amazonaws.com\"\r\n      SourceAccount: !Ref AWS::AccountId\r\n      SourceArn: !Sub \"arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${programSourceLogGroup}:*\"\r\nOutputs: \r\n  IAMRole: \r\n    Description: \"IAM Role Name\"\r\n    Value: \r\n      Ref: IAMRole\r\n  SNSTopic: \r\n    Description: \"SNS Topic Name\"\r\n    Value: \r\n      !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:inv-${EnvironmentName}-${MicroServiceName}\r\n  LambdaFunction: \r\n    Description: \"Lambda Function Name\"\r\n    Value: \r\n      Ref: LambdaFunction"
}
enable-guardduty
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: 2010-09-09\nDescription:\n  \"enable guardduty\"\nResources:\n  GDD:\n    Type: \"AWS::GuardDuty::Detector\"\n    Properties:\n      Enable: true"
}
INV-ver-vdm01-manage-metrics-alarm
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: \"2010-09-09\"\r\nDescription: \"create_metrics_alarm.yaml\"\r\nParameters:\r\n  EnvironmentName:\r\n    Default: \"ver\"\r\n    Description: \"EnvironmentName\"\r\n    Type: String\r\n  MicroServiceName: \r\n    Default: \"cer01\"\r\n    Description: \"MicroServiceName\"\r\n    Type: String\r\n  s3keyprefix: \r\n    Default: \"_manage_metrics_alarm.xlsx\"\r\n    Description: \"excel s3 keys prefix\"\r\n    Type: String\r\n  S3Buckets: \r\n    Default: \"inv-ver-cer01-cfn\"\r\n    Description: \"source s3 backet name\"\r\n    Type: String\r\nResources: \r\n  IAMRole: \r\n    Type: \"AWS::IAM::Role\"\r\n    Properties: \r\n      AssumeRolePolicyDocument: \r\n        Version: \"2012-10-17\"\r\n        Statement: \r\n          - Effect: Allow\r\n            Principal: \r\n              Service: \"lambda.amazonaws.com\"\r\n            Action: \"sts:AssumeRole\"\r\n      ManagedPolicyArns: \r\n        - \"arn:aws:iam::aws:policy/AmazonS3FullAccess\"\r\n      Path: \"/\"\r\n      Policies:\r\n        - PolicyName: manage_metrics_alarm_lambda_policy\r\n          PolicyDocument:\r\n            Version: '2012-10-17'\r\n            Statement:\r\n              - Effect: Allow\r\n                Action:\r\n                  - cloudwatch:*\r\n                  - logs:*\r\n                Resource: \"*\"\r\n      RoleName: !Sub inv-${EnvironmentName}-${MicroServiceName}-manage-metrics-alarm-lambda-role\r\n  LambdaLayer:\r\n    Type: \"AWS::Lambda::LayerVersion\"\r\n    Properties:\r\n      CompatibleRuntimes: \r\n        - python3.6\r\n      Content: \r\n        S3Bucket:\r\n          Ref: S3Buckets\r\n        S3Key: CloudwatchAlarm/metrics_mod.zip\r\n      Description: \"manage_cloudwatch metrics alarm modules\"\r\n      LayerName: metrics_module\r\n  LambdaFunction: \r\n    DependsOn: \r\n      - IAMRole\r\n    Type: \"AWS::Lambda::Function\"\r\n    Properties: \r\n      Code: \r\n        S3Bucket: \r\n          Ref: S3Buckets\r\n        S3Key: CloudwatchAlarm/manage_metrics_alarm_src.zip\r\n      FunctionName: !Sub inv-${EnvironmentName}-${MicroServiceName}-manage-metrics-alarm-lambda\r\n      Handler: lambda_function.lambda_handler\r\n      Environment: \r\n        Variables: \r\n          fileprefix: \r\n            Ref: s3keyprefix\r\n          s3Bucket: !Sub inv-${EnvironmentName}-${MicroServiceName}-manage-metrics-alarm\r\n      Role: \r\n        \"Fn::GetAtt\": \r\n          - IAMRole\r\n          - Arn\r\n      Runtime: \"python3.6\"\r\n      MemorySize: 512\r\n      Timeout: 300\r\n      Layers:\r\n        - !Ref LambdaLayer\r\n  LambdaPermission: \r\n    Type: \"AWS::Lambda::Permission\"\r\n    Properties: \r\n      Action: \"lambda:InvokeFunction\"\r\n      FunctionName: \r\n        \"Fn::GetAtt\": \r\n          - LambdaFunction\r\n          - Arn\r\n      Principal: s3.amazonaws.com\r\n      SourceAccount: !Ref 'AWS::AccountId'\r\n      SourceArn: !Join\r\n        - ''\r\n        - - 'arn:aws:s3:::'\r\n          - !Sub inv-${EnvironmentName}-${MicroServiceName}-manage-metrics-alarm\r\n  S3Bucket:\r\n    Type: \"AWS::S3::Bucket\"\r\n    DependsOn: \r\n      - LambdaPermission\r\n    Properties:\r\n      BucketName: !Sub inv-${EnvironmentName}-${MicroServiceName}-manage-metrics-alarm\r\n      AccessControl: Private\r\n      PublicAccessBlockConfiguration:\r\n        BlockPublicAcls: True\r\n        BlockPublicPolicy: True\r\n        IgnorePublicAcls: True\r\n        RestrictPublicBuckets: True\r\n      NotificationConfiguration:\r\n        LambdaConfigurations:\r\n          - Event: \"s3:ObjectCreated:*\"\r\n            Filter:\r\n              S3Key:\r\n                Rules:\r\n                  - Name: suffix\r\n                    Value: xlsx\r\n            Function: !GetAtt\r\n              - LambdaFunction\r\n              - Arn\r\n  S3BucketPolicy:\r\n    Type: AWS::S3::BucketPolicy\r\n    Properties: \r\n      Bucket: \r\n        Ref: \"S3Bucket\"\r\n      PolicyDocument: \r\n        Version: \"2012-10-17\"\r\n        Statement: \r\n          - \r\n            Action: \r\n              - \"s3:GetObject\"\r\n            Effect: \"Allow\"\r\n            Resource: \r\n              Fn::Join: \r\n                - \"\"\r\n                - \r\n                  - \"arn:aws:s3:::\"\r\n                  - \r\n                    Ref: \"S3Bucket\"\r\n                  - \"/*\"\r\n            Principal: \r\n              AWS:\r\n                Fn::Join:\r\n                  - \"\"\r\n                  - \r\n                    - \"arn:aws:iam::\"\r\n                    - Ref: \"AWS::AccountId\"\r\n                    - \":root\"\r\nOutputs: \r\n  IAMRole: \r\n    Description: \"IAM Role Name\"\r\n    Value: \r\n      Ref: IAMRole\r\n  S3BucketName:\r\n    Value:\r\n      Ref S3BucketName\r\n  LambdaFunction: \r\n    Description: \"Lambda Function Name\"\r\n    Value: \r\n      Ref: LambdaFunction"
}
infraPipelineMain-CloudTrail-RYXP98KON5YI
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: 2010-09-09\nParameters:\n  PrjCode:\n    Type: String\n    Description: Project Code\n  AreaCode:\n    Type: String\n    Description: Area Code\n  EnvCode:\n    Type: String\n    Description: Environment Code\n  ArtifactBucketName:\n    Type: String\n    Description: Bucket Name For Artifact\n  AccesslogBucketName:\n    Type: String\n    Description: Bucket Name For Logging\n  CloudTrailLogGroupName:\n    Type: String\n    Default: cloudtrail\nResources:\n  CloudTrailLogGroup:\n    Type: \"AWS::Logs::LogGroup\"\n    Properties: \n      LogGroupName:\n        Ref: CloudTrailLogGroupName\n      RetentionInDays: 365\n  cloudTrailIamRole:\n    Type: AWS::IAM::Role\n    Properties:\n      RoleName:\n        Fn::Sub: ${PrjCode}-${EnvCode}-${AreaCode}-rl-cloudTrail\n      Path: /\n      AssumeRolePolicyDocument:\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service:\n                - cloudtrail.amazonaws.com\n            Action:\n              - \"sts:AssumeRole\"\n      Policies:\n        - PolicyName: SendtoCloudWatchLogs\n          PolicyDocument: \n            Version: '2012-10-17'\n            Statement:\n            - Sid: AWSCloudTrailCreateLogStream2014110\n              Effect: Allow\n              Action: logs:CreateLogStream\n              Resource:\n                Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${CloudTrailLogGroupName}:log-stream:*\n            - Sid: AWSCloudTrailPutLogEvents20141101\n              Effect: Allow\n              Action: logs:PutLogEvents\n              Resource:\n                Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${CloudTrailLogGroupName}:log-stream:*\n  CloudTrail:\n    Type: AWS::CloudTrail::Trail\n    Properties:\n      CloudWatchLogsLogGroupArn:\n        Fn::GetAtt: CloudTrailLogGroup.Arn\n      CloudWatchLogsRoleArn:\n        Fn::GetAtt: cloudTrailIamRole.Arn\n      TrailName: S3Put\n      S3BucketName:\n        Ref: AccesslogBucketName\n      IsLogging: true\n      EventSelectors:\n        - ReadWriteType: \"WriteOnly\" #All|ReadOnly|WriteOnly \n          IncludeManagementEvents: false #tlue|false\n          DataResources:\n          - Type: AWS::S3::Object\n            Values:\n              - Fn::Sub: arn:aws:s3:::${ArtifactBucketName}/\n              #- \"arn:aws:s3:::\"\n\n#Outputs:\n#  SourceBucketARN:\n#    Description: \"S3 bucket ARN that Cloudtrail will use\"\n#    Value:GetAtt SourceBucket.Arn\n#    Export:\n#      Name: SourceBucketARN"
}
infraPipelineMain-CloudWatchStack-QU786HC3VIP7
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: 2010-09-09\nParameters:\n  PrjCode:\n    Type: String\n    Description: Project Code\n  AreaCode:\n    Type: String\n    Description: Area Code\n  EnvCode:\n    Type: String\n    Description: Environment Code\n  ArtifactBucketName:\n    Type: String\n    Description: Source Bucket Name\n  PipelineArn:\n    Type: String\n    Description: CodePipeline Arn\n  CloudWatchEventsRole:\n    Type: String\n    Description: CloudWatch Events Role\n  ArtifactKey:\n    Type: String\n    Description: Artifact Key\nResources:\n  PipelineEventsRule:\n    Type: \"AWS::Events::Rule\"\n    Properties:\n      Name:\n        Fn::Sub: ${PrjCode}-${EnvCode}-${AreaCode}-s3-pipeline-events\n      Description:\n        Fn::Sub: Pipeline Events for ${PrjCode}. The environment is a ${EnvCode}. Area is ${AreaCode}\n      EventPattern:\n        source:\n          - aws.s3\n        detail-type:\n          - AWS API Call via CloudTrail\n        detail:\n          eventSource:\n            - s3.amazonaws.com\n          eventName:\n            - PutObject\n              CopyObject\n          requestParameters:\n            bucketName:\n              - Ref: ArtifactBucketName\n            key:\n              - Ref: ArtifactKey\n      State: ENABLED\n      Targets:\n        - Arn:\n            Ref: PipelineArn\n          Id:\n            Fn::Sub: ${PrjCode}-${EnvCode}-${AreaCode}-cfn-deploy-pipelineExecute\n          RoleArn:\n            Ref: CloudWatchEventsRole"
}
infraPipelineMain-CodePipelineStack-5PEF0IY6HZ02
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: 2010-09-09\nParameters:\n  PrjCode:\n    Type: String\n    Description: Prject Code\n  AreaCode:\n    Type: String\n    Description: Area Code\n  EnvCode:\n    Type: String\n    Description: Environment Code\n  SysName:\n    Type: String\n    Description: System Name\n  ArtifactBucketName:\n    Type: String\n    Description: Source Bucket Name\n  #ArtifactKey:\n  #  Type: String\n  #  Description: Source Bucket Key\n  CodeBuildProjectName:\n    Type: String\n    Description: CodeBuild Project name\n  CodePipelineRole:\n    Type: String\n    Description: CodePipeline Role\n  ArtifactKey:\n    Type: String\n    Description: Artifact Key\nResources:\n  Pipeline:\n    Type: \"AWS::CodePipeline::Pipeline\"\n    Properties:\n        Name:\n          Fn::Sub: ${PrjCode}-${EnvCode}-${AreaCode}-${SysName}-test\n        ArtifactStore:\n          Type: S3\n          Location:\n            Ref: ArtifactBucketName\n        RoleArn:\n          Ref: CodePipelineRole\n        Stages:\n          -\n            Name: CFNSource\n            Actions:\n              -\n                Name: Source\n                ActionTypeId:\n                  Category: Source\n                  Owner: AWS\n                  Version: \"1\"\n                  Provider: S3\n                OutputArtifacts:\n                  -\n                    Name: MyApp\n                Configuration:\n                  PollForSourceChanges: false\n                  S3Bucket:\n                    Ref: ArtifactBucketName\n                  S3ObjectKey:\n                    Ref: ArtifactKey\n                RunOrder: 1\n          -\n            Name: DoBuildSpec\n            Actions:\n              -\n                Name: CreateCFNStack\n                InputArtifacts:\n                  -\n                    Name: MyApp\n                ActionTypeId:\n                  Category: Build\n                  Owner: AWS\n                  Version: \"1\"\n                  Provider: CodeBuild\n                Configuration:\n                  ProjectName:\n                    Ref: CodeBuildProjectName\n                RunOrder: 1\nOutputs:\n  PipelineArn:\n    Description: Pipeline Arn\n    Value:\n      Fn::Sub:\n        - arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${Pipeline}\n        - Pipeline:\n            Ref: Pipeline"
}
infraPipelineMain-CodeBuildStack-158QZJIOMEYQ4
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: 2010-09-09\nParameters:\n  PrjCode:\n    Type: String\n    Description: Project Code\n  AreaCode:\n    Type: String\n    Description: Area Code\n  EnvCode:\n    Type: String\n    Description: Environment Code\n  SysName:\n    Type: String\n    Description: System Name\n  VpcId:\n    Type: String\n    Description: VPC Id\n  SubnetPri1Id:\n    Type: String\n  SubnetPri2Id:\n    Type: String\n  TemplateBucketName:\n    Type: String\n    Description: Template Bucket Name\n  CodePipelineRole:\n    Type: String\n    Description: CodePipeline Role\nResources:\n  Project:\n    Type: \"AWS::CodeBuild::Project\"\n    Properties:\n      Name:\n        Fn::Sub: ${PrjCode}-${EnvCode}-${AreaCode}-codebuild-cfn-deploy\n      Description:\n        Fn::Sub: CodeBuild for ${PrjCode}. The environment is a ${EnvCode}. Area is ${AreaCode}\n      ServiceRole:\n        Ref: CodePipelineRole\n      Source:\n        BuildSpec:\n          Fn::Sub: pkg-${SysName}/buildspec-deploy.yml\n        Type: CODEPIPELINE\n      Artifacts:\n        Type: CODEPIPELINE\n      Environment:\n        Type: LINUX_CONTAINER\n        ComputeType: BUILD_GENERAL1_SMALL\n        Image: aws/codebuild/docker:17.09.0\n        EnvironmentVariables:\n          - Name: environment\n            Type: PLAINTEXT\n            Value:\n              Ref: EnvCode\n          - Name: area\n            Type: PLAINTEXT\n            Value:\n              Ref: AreaCode\n          - Name: templateBucketName\n            Type: PLAINTEXT\n            Value:\n              Ref: TemplateBucketName\n          - Name: vpcId\n            Type: PLAINTEXT\n            Value:\n              Ref: VpcId\n          - Name: sysName\n            Type: PLAINTEXT\n            Value:\n              Ref: SysName\n          - Name: subnetIds\n            Type: PLAINTEXT\n            Value:\n              Fn::Join:\n                - \",\"\n                - - Ref: SubnetPri1Id\n                  - Ref: SubnetPri2Id\nOutputs:\n  ProjectName:\n    Description: Project name\n    Value:\n      Ref: Project\n\n\n\n"
}
infraPipelineMain
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: 2010-09-09\nParameters:\n  PrjCode:\n    Type: String\n    Description: Project Code\n  AreaCode:\n    Type: String\n    Description: Area Code\n    AllowedValues:\n      - jp\n  EnvCode:\n    Type: String\n    Description: Environment Code\n    AllowedValues:\n      - dev\n      - ver\n      - prd\n  SysName:\n    Type: String\n    Description: System Name\n  TemplateBucketName:\n    Description: S3 BucketName where CloudFormation Templates stored.\n    Type: String\n    AllowedPattern: \"[a-z0-9-]*\"\n    MinLength: 3\n    MaxLength: 63\n  TemplateKey:\n    Description: S3 DirectryName where CloudFormation Templates stored.\n    Type: String\n    AllowedPattern: \"[a-zA-Z0-9-]*\"\n    MinLength: 3\n    MaxLength: 63\n  ArtifactBucketName:\n    Type: String\n    Description: Artifact Bucket Name\n  # ArtifactKey:\n  #   Type: String\n  #   Description: Artifact Key\n  AccesslogBucketName:\n    Type: String\n    Description: Access log bucket Name\n  CodePipelineRole:\n    Type: String\n    Description: CodePipeline Role\n  CloudWatchEventsRole:\n    Type: String\n    Description: CloudWatch Events Role\n  ArtifactKey:\n    Type: String\n    Description: Artifact Key\n\nMetadata:\n  \"AWS::CloudFormation::Interface\":\n    ParameterGroups:\n      - Parameters:\n          - TemplateBucketName\n      - Parameters:\n          - PrjCode\n      - Parameters:\n          - AreaCode\n      - Parameters:\n          - EnvCode\n      # - Parameters:\n      #     - ArtifactKey\n      - Label:\n          default: Service Role\n        Parameters:\n          - CodePipelineRole\n          - CloudWatchEventsRole\nResources:\n  # S3Stack:\n  #   Type: \"AWS::CloudFormation::Stack\"\n  #   Properties:\n  #     TemplateURL:\n  #       Fn::Sub: https://s3.amazonaws.com/${TemplateBucketName}/${TemplateKey}/s3-pipeline-nest-s3.yml\n  #     Parameters:\n  #       PrjCode:\n  #         Ref: PrjCode\n  #       AreaCode:\n  #         Ref: AreaCode\n  #       EnvCode:\n  #         Ref: EnvCode\n  #       ArtifactBucketName:\n  #         Ref: ArtifactBucketName\n  CloudTrail:\n    Type: \"AWS::CloudFormation::Stack\"\n    Properties:\n      TemplateURL:\n        Fn::Sub: https://s3.amazonaws.com/${TemplateBucketName}/${TemplateKey}/s3-pipeline-nest-cloudtrail.yml\n      Parameters:\n        PrjCode:\n          Ref: PrjCode\n        AreaCode:\n          Ref: AreaCode\n        EnvCode:\n          Ref: EnvCode\n        ArtifactBucketName:\n          Ref: ArtifactBucketName\n        AccesslogBucketName:\n          Ref: AccesslogBucketName\n  CodeBuildStack:\n    Type: \"AWS::CloudFormation::Stack\"\n    Properties:\n      TemplateURL:\n        Fn::Sub: https://s3.amazonaws.com/${TemplateBucketName}/${TemplateKey}/s3-pipeline-nest-codebuild.yml\n      Parameters:\n        PrjCode:\n          Ref: PrjCode\n        AreaCode:\n          Ref: AreaCode\n        EnvCode:\n          Ref: EnvCode\n        SysName:\n          Ref: SysName\n        VpcId: vpc-012f249828c3bd2c8\n        SubnetPri1Id: subnet-05010ab7fba90820f\n        SubnetPri2Id: subnet-08aff6e601e44f7f9\n        TemplateBucketName:\n          Ref: ArtifactBucketName\n        CodePipelineRole:\n          Ref: CodePipelineRole\n  CodePipelineStack:\n    Type: \"AWS::CloudFormation::Stack\"\n    Properties:\n      TemplateURL:\n        Fn::Sub: https://s3.amazonaws.com/${TemplateBucketName}/${TemplateKey}/s3-pipeline-nest-codepipeline.yml\n      Parameters:\n        PrjCode:\n          Ref: PrjCode\n        AreaCode:\n          Ref: AreaCode\n        EnvCode:\n          Ref: EnvCode\n        SysName:\n          Ref: SysName\n        ArtifactBucketName:\n          Ref: ArtifactBucketName\n        # ArtifactKey:\n        #   Ref: ArtifactKey\n        CodeBuildProjectName:\n          Fn::GetAtt: [ CodeBuildStack, Outputs.ProjectName ]\n        CodePipelineRole:\n          Ref: CodePipelineRole\n        ArtifactKey:\n          Ref: ArtifactKey\n  CloudWatchStack:\n    Type: \"AWS::CloudFormation::Stack\"\n    Properties:\n      TemplateURL:\n        Fn::Sub: https://s3.amazonaws.com/${TemplateBucketName}/${TemplateKey}/s3-pipeline-nest-cloudwatch.yml\n      Parameters:\n        PrjCode:\n          Ref: PrjCode\n        AreaCode:\n          Ref: AreaCode\n        EnvCode:\n          Ref: EnvCode\n        ArtifactBucketName:\n          Ref: ArtifactBucketName\n        PipelineArn:\n          Fn::GetAtt: [ CodePipelineStack, Outputs.PipelineArn ]\n        CloudWatchEventsRole:\n          Ref: CloudWatchEventsRole\n        ArtifactKey:\n          Ref: ArtifactKey"
}
appPipelineMain-lambdaPipeline-N5BLEWWBPKZY-registerUpdateDataPipeline-OLU1HQJ6US98
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: \"2010-09-09\"\nDescription: samDeployPipeline template\nParameters:\n  environment:\n    Type: String\n  area:\n    Type: String\n  artifactBucketName:\n    Type: String\n  pipelineIamRoleArn:\n    Type: String\n  cloudwatchEventIamRoleArn:\n    Type: String\n  sysName:\n    Type: String\n  subnetPri1Id:\n    Type: String\n  subnetPri2Id:\n    Type: String\n  vpcId:\n    Type: AWS::EC2::VPC::Id\n  templateBucketName:\n    Type: String\nResources:\n  codecommit:\n    Type: AWS::CodeCommit::Repository\n    DeletionPolicy: Delete\n    Properties:\n      RepositoryName:\n        Fn::Sub: daq-${environment}-${area}-cdc-${sysName}\n  codebuild:\n    Type: AWS::CodeBuild::Project\n    Properties:\n      Artifacts:\n        EncryptionDisabled: true\n        Location:\n          Ref: artifactBucketName\n        Type: S3\n      Environment:\n        ComputeType: BUILD_GENERAL1_SMALL\n        EnvironmentVariables:\n          - Name: environment\n            Type: PLAINTEXT\n            Value:\n              Ref: environment\n          - Name: area\n            Type: PLAINTEXT\n            Value:\n              Ref: area\n          - Name: templateBucketName\n            Type: PLAINTEXT\n            Value:\n              Ref: templateBucketName\n          - Name: vpcId\n            Type: PLAINTEXT\n            Value:\n              Ref: vpcId\n          - Name: sysName\n            Type: PLAINTEXT\n            Value:\n              Ref: sysName\n          - Name: subnetIds\n            Type: PLAINTEXT\n            Value:\n              Fn::Join:\n                - \",\"\n                - - Ref: subnetPri1Id\n                  - Ref: subnetPri2Id\n        Image: aws/codebuild/python:3.6.5\n        PrivilegedMode: false\n        Type: LINUX_CONTAINER\n      Name:\n        Fn::Sub: daq-${environment}-${area}-cdb-${sysName}\n      ServiceRole:\n        Ref: pipelineIamRoleArn\n      Source:\n        BuildSpec: buildspec.yml\n        GitCloneDepth: 1\n        Location:\n          Fn::GetAtt: [codecommit, CloneUrlHttp]\n        Type: CODECOMMIT\n  codepipeline:\n    Type: AWS::CodePipeline::Pipeline\n    Properties:\n      Name:\n        Fn::Sub: daq-${environment}-${area}-cdp-${sysName}\n      RoleArn:\n        Ref: pipelineIamRoleArn\n      ArtifactStore:\n        Location:\n          Ref: artifactBucketName\n        Type: S3\n      Stages:\n        - Name: Source\n          Actions:\n            - Name: Source\n              ActionTypeId:\n                Category: Source\n                Owner: AWS\n                Provider: CodeCommit\n                Version: \"1\"\n              OutputArtifacts:\n                - Name: MyApp\n              Configuration:\n                PollForSourceChanges: false\n                RepositoryName:\n                  Fn::GetAtt: [codecommit, Name]\n                BranchName: master\n              RunOrder: 1\n        - Name: Build\n          Actions:\n            - Name: Build\n              ActionTypeId:\n                Category: Build\n                Owner: AWS\n                Provider: CodeBuild\n                Version: \"1\"\n              InputArtifacts:\n                - Name: MyApp\n              OutputArtifacts:\n                - Name: Unuse\n              Configuration:\n                ProjectName:\n                  Ref: codebuild\n              RunOrder: 1\n  pipelineEventsRule:\n    Type: AWS::Events::Rule\n    Properties:\n      # Name:\n      #   Fn::Sub: daq-${environment}-${area}-rule-${sysName}\n      EventPattern:\n        source:\n          - aws.codecommit\n        detail-type:\n          - CodeCommit Repository State Change\n        resources:\n          - Fn::GetAtt: [codecommit, Arn]\n        detail:\n          event:\n            - referenceCreated\n            - referenceUpdated\n            - referenceDeleted\n          referenceType:\n            - branch\n          referenceName:\n            - master\n      State: ENABLED\n      Targets:\n        - Arn:\n            Fn::Sub: arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${codepipeline}\n          Id:\n            Fn::Sub: daq-${environment}-${area}-target-${sysName}CdpExec\n          RoleArn:\n            Ref: cloudwatchEventIamRoleArn\n"
}
appPipelineMain-lambdaPipeline-N5BLEWWBPKZY-executeLastOdometerPipeline-35PGR3Y9RZAZ
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: \"2010-09-09\"\nDescription: samDeployPipeline template\nParameters:\n  environment:\n    Type: String\n  area:\n    Type: String\n  artifactBucketName:\n    Type: String\n  pipelineIamRoleArn:\n    Type: String\n  cloudwatchEventIamRoleArn:\n    Type: String\n  sysName:\n    Type: String\n  subnetPri1Id:\n    Type: String\n  subnetPri2Id:\n    Type: String\n  vpcId:\n    Type: AWS::EC2::VPC::Id\n  templateBucketName:\n    Type: String\nResources:\n  codecommit:\n    Type: AWS::CodeCommit::Repository\n    DeletionPolicy: Delete\n    Properties:\n      RepositoryName:\n        Fn::Sub: daq-${environment}-${area}-cdc-${sysName}\n  codebuild:\n    Type: AWS::CodeBuild::Project\n    Properties:\n      Artifacts:\n        EncryptionDisabled: true\n        Location:\n          Ref: artifactBucketName\n        Type: S3\n      Environment:\n        ComputeType: BUILD_GENERAL1_SMALL\n        EnvironmentVariables:\n          - Name: environment\n            Type: PLAINTEXT\n            Value:\n              Ref: environment\n          - Name: area\n            Type: PLAINTEXT\n            Value:\n              Ref: area\n          - Name: templateBucketName\n            Type: PLAINTEXT\n            Value:\n              Ref: templateBucketName\n          - Name: vpcId\n            Type: PLAINTEXT\n            Value:\n              Ref: vpcId\n          - Name: sysName\n            Type: PLAINTEXT\n            Value:\n              Ref: sysName\n          - Name: subnetIds\n            Type: PLAINTEXT\n            Value:\n              Fn::Join:\n                - \",\"\n                - - Ref: subnetPri1Id\n                  - Ref: subnetPri2Id\n        Image: aws/codebuild/python:3.6.5\n        PrivilegedMode: false\n        Type: LINUX_CONTAINER\n      Name:\n        Fn::Sub: daq-${environment}-${area}-cdb-${sysName}\n      ServiceRole:\n        Ref: pipelineIamRoleArn\n      Source:\n        BuildSpec: buildspec.yml\n        GitCloneDepth: 1\n        Location:\n          Fn::GetAtt: [codecommit, CloneUrlHttp]\n        Type: CODECOMMIT\n  codepipeline:\n    Type: AWS::CodePipeline::Pipeline\n    Properties:\n      Name:\n        Fn::Sub: daq-${environment}-${area}-cdp-${sysName}\n      RoleArn:\n        Ref: pipelineIamRoleArn\n      ArtifactStore:\n        Location:\n          Ref: artifactBucketName\n        Type: S3\n      Stages:\n        - Name: Source\n          Actions:\n            - Name: Source\n              ActionTypeId:\n                Category: Source\n                Owner: AWS\n                Provider: CodeCommit\n                Version: \"1\"\n              OutputArtifacts:\n                - Name: MyApp\n              Configuration:\n                PollForSourceChanges: false\n                RepositoryName:\n                  Fn::GetAtt: [codecommit, Name]\n                BranchName: master\n              RunOrder: 1\n        - Name: Build\n          Actions:\n            - Name: Build\n              ActionTypeId:\n                Category: Build\n                Owner: AWS\n                Provider: CodeBuild\n                Version: \"1\"\n              InputArtifacts:\n                - Name: MyApp\n              OutputArtifacts:\n                - Name: Unuse\n              Configuration:\n                ProjectName:\n                  Ref: codebuild\n              RunOrder: 1\n  pipelineEventsRule:\n    Type: AWS::Events::Rule\n    Properties:\n      # Name:\n      #   Fn::Sub: daq-${environment}-${area}-rule-${sysName}\n      EventPattern:\n        source:\n          - aws.codecommit\n        detail-type:\n          - CodeCommit Repository State Change\n        resources:\n          - Fn::GetAtt: [codecommit, Arn]\n        detail:\n          event:\n            - referenceCreated\n            - referenceUpdated\n            - referenceDeleted\n          referenceType:\n            - branch\n          referenceName:\n            - master\n      State: ENABLED\n      Targets:\n        - Arn:\n            Fn::Sub: arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${codepipeline}\n          Id:\n            Fn::Sub: daq-${environment}-${area}-target-${sysName}CdpExec\n          RoleArn:\n            Ref: cloudwatchEventIamRoleArn\n"
}
appPipelineMain-lambdaPipeline-N5BLEWWBPKZY-registerLastOdometerPipeline-1X42QYUFO5PEP
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: \"2010-09-09\"\nDescription: samDeployPipeline template\nParameters:\n  environment:\n    Type: String\n  area:\n    Type: String\n  artifactBucketName:\n    Type: String\n  pipelineIamRoleArn:\n    Type: String\n  cloudwatchEventIamRoleArn:\n    Type: String\n  sysName:\n    Type: String\n  subnetPri1Id:\n    Type: String\n  subnetPri2Id:\n    Type: String\n  vpcId:\n    Type: AWS::EC2::VPC::Id\n  templateBucketName:\n    Type: String\nResources:\n  codecommit:\n    Type: AWS::CodeCommit::Repository\n    DeletionPolicy: Delete\n    Properties:\n      RepositoryName:\n        Fn::Sub: daq-${environment}-${area}-cdc-${sysName}\n  codebuild:\n    Type: AWS::CodeBuild::Project\n    Properties:\n      Artifacts:\n        EncryptionDisabled: true\n        Location:\n          Ref: artifactBucketName\n        Type: S3\n      Environment:\n        ComputeType: BUILD_GENERAL1_SMALL\n        EnvironmentVariables:\n          - Name: environment\n            Type: PLAINTEXT\n            Value:\n              Ref: environment\n          - Name: area\n            Type: PLAINTEXT\n            Value:\n              Ref: area\n          - Name: templateBucketName\n            Type: PLAINTEXT\n            Value:\n              Ref: templateBucketName\n          - Name: vpcId\n            Type: PLAINTEXT\n            Value:\n              Ref: vpcId\n          - Name: sysName\n            Type: PLAINTEXT\n            Value:\n              Ref: sysName\n          - Name: subnetIds\n            Type: PLAINTEXT\n            Value:\n              Fn::Join:\n                - \",\"\n                - - Ref: subnetPri1Id\n                  - Ref: subnetPri2Id\n        Image: aws/codebuild/python:3.6.5\n        PrivilegedMode: false\n        Type: LINUX_CONTAINER\n      Name:\n        Fn::Sub: daq-${environment}-${area}-cdb-${sysName}\n      ServiceRole:\n        Ref: pipelineIamRoleArn\n      Source:\n        BuildSpec: buildspec.yml\n        GitCloneDepth: 1\n        Location:\n          Fn::GetAtt: [codecommit, CloneUrlHttp]\n        Type: CODECOMMIT\n  codepipeline:\n    Type: AWS::CodePipeline::Pipeline\n    Properties:\n      Name:\n        Fn::Sub: daq-${environment}-${area}-cdp-${sysName}\n      RoleArn:\n        Ref: pipelineIamRoleArn\n      ArtifactStore:\n        Location:\n          Ref: artifactBucketName\n        Type: S3\n      Stages:\n        - Name: Source\n          Actions:\n            - Name: Source\n              ActionTypeId:\n                Category: Source\n                Owner: AWS\n                Provider: CodeCommit\n                Version: \"1\"\n              OutputArtifacts:\n                - Name: MyApp\n              Configuration:\n                PollForSourceChanges: false\n                RepositoryName:\n                  Fn::GetAtt: [codecommit, Name]\n                BranchName: master\n              RunOrder: 1\n        - Name: Build\n          Actions:\n            - Name: Build\n              ActionTypeId:\n                Category: Build\n                Owner: AWS\n                Provider: CodeBuild\n                Version: \"1\"\n              InputArtifacts:\n                - Name: MyApp\n              OutputArtifacts:\n                - Name: Unuse\n              Configuration:\n                ProjectName:\n                  Ref: codebuild\n              RunOrder: 1\n  pipelineEventsRule:\n    Type: AWS::Events::Rule\n    Properties:\n      # Name:\n      #   Fn::Sub: daq-${environment}-${area}-rule-${sysName}\n      EventPattern:\n        source:\n          - aws.codecommit\n        detail-type:\n          - CodeCommit Repository State Change\n        resources:\n          - Fn::GetAtt: [codecommit, Arn]\n        detail:\n          event:\n            - referenceCreated\n            - referenceUpdated\n            - referenceDeleted\n          referenceType:\n            - branch\n          referenceName:\n            - master\n      State: ENABLED\n      Targets:\n        - Arn:\n            Fn::Sub: arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${codepipeline}\n          Id:\n            Fn::Sub: daq-${environment}-${area}-target-${sysName}CdpExec\n          RoleArn:\n            Ref: cloudwatchEventIamRoleArn\n"
}
appPipelineMain-lambdaPipeline-N5BLEWWBPKZY
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: \"2010-09-09\"\r\nDescription: lambdaPipeline template\r\nParameters:\r\n  environment:\r\n    Type: String\r\n  area:\r\n    Type: String\r\n  artifactBucketName:\r\n    Type: String\r\n  pipelineIamRoleArn:\r\n    Type: String\r\n  cloudwatchEventIamRoleArn:\r\n    Type: String\r\n  subnetPri1Id:\r\n    Type: String\r\n  subnetPri2Id:\r\n    Type: String\r\n  vpcId:\r\n    Type: String\r\n  templateBucketName:\r\n    Type: String\r\n  templateKeyPrefix:\r\n    Type: String\r\nResources:\r\n  registerLastOdometerPipeline:\r\n    Type: AWS::CloudFormation::Stack\r\n    Properties:\r\n      TemplateURL:\r\n        Fn::Sub: https://s3.amazonaws.com/${templateBucketName}/${templateKeyPrefix}/lambda/samDeployPipeline.yml\r\n      Parameters:\r\n        environment:\r\n          Ref: environment\r\n        area:\r\n          Ref: area\r\n        artifactBucketName:\r\n          Ref: artifactBucketName\r\n        pipelineIamRoleArn:\r\n          Ref: pipelineIamRoleArn\r\n        cloudwatchEventIamRoleArn:\r\n          Ref: cloudwatchEventIamRoleArn\r\n        sysName: registerlastodometer\r\n        subnetPri1Id:\r\n          Ref: subnetPri1Id\r\n        subnetPri2Id:\r\n          Ref: subnetPri2Id\r\n        # subnetIds:\r\n        #   Ref: subnetIds\r\n        vpcId:\r\n          Ref: vpcId\r\n        templateBucketName:\r\n          Ref: templateBucketName\r\n  registerUpdateDataPipeline:\r\n    Type: AWS::CloudFormation::Stack\r\n    Properties:\r\n      TemplateURL:\r\n        Fn::Sub: https://s3.amazonaws.com/${templateBucketName}/${templateKeyPrefix}/lambda/samDeployPipeline.yml\r\n      Parameters:\r\n        environment:\r\n          Ref: environment\r\n        area:\r\n          Ref: area\r\n        artifactBucketName:\r\n          Ref: artifactBucketName\r\n        pipelineIamRoleArn:\r\n          Ref: pipelineIamRoleArn\r\n        cloudwatchEventIamRoleArn:\r\n          Ref: cloudwatchEventIamRoleArn\r\n        sysName: registerupdatedata\r\n        subnetPri1Id:\r\n          Ref: subnetPri1Id\r\n        subnetPri2Id:\r\n          Ref: subnetPri2Id\r\n        # subnetIds:\r\n        #   Ref: subnetIds\r\n        vpcId:\r\n          Ref: vpcId\r\n        templateBucketName:\r\n          Ref: templateBucketName\r\n  executeLastOdometerPipeline:\r\n    Type: AWS::CloudFormation::Stack\r\n    Properties:\r\n      TemplateURL:\r\n        Fn::Sub: https://s3.amazonaws.com/${templateBucketName}/${templateKeyPrefix}/lambda/samDeployPipeline.yml\r\n      Parameters:\r\n        environment:\r\n          Ref: environment\r\n        area:\r\n          Ref: area\r\n        artifactBucketName:\r\n          Ref: artifactBucketName\r\n        pipelineIamRoleArn:\r\n          Ref: pipelineIamRoleArn\r\n        cloudwatchEventIamRoleArn:\r\n          Ref: cloudwatchEventIamRoleArn\r\n        sysName: executelastodometer\r\n        subnetPri1Id:\r\n          Ref: subnetPri1Id\r\n        subnetPri2Id:\r\n          Ref: subnetPri2Id\r\n        # subnetIds:\r\n        #   Ref: subnetIds\r\n        vpcId:\r\n          Ref: vpcId\r\n        templateBucketName:\r\n          Ref: templateBucketName\r\n"
}
appPipelineMain
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: \"2010-09-09\"\r\nDescription: main template\r\nParameters:\r\n  templateBucketName:\r\n    Type: String\r\n  templateKeyPrefix:\r\n    Type: String\r\n  environment:\r\n    Type: String\r\n    AllowedValues:\r\n      - dev\r\n      - ver\r\n      - prd\r\n  area:\r\n    Type: String\r\n    AllowedValues:\r\n      - jp\r\n  artifactBucketName:\r\n    Type: String\r\n  pipelineIamRoleArnSsmParam:\r\n    Type: AWS::SSM::Parameter::Value<String>\r\n  cloudwatchEventIamRoleArnSsmParam:\r\n    Type: AWS::SSM::Parameter::Value<String>\r\nResources:\r\n  lambdaPipeline:\r\n    Type: AWS::CloudFormation::Stack\r\n    Properties:\r\n      TemplateURL:\r\n        Fn::Sub: https://s3.amazonaws.com/${templateBucketName}/${templateKeyPrefix}/lambda/mainLambda.yml\r\n      Parameters:\r\n        environment:\r\n          Ref: environment\r\n        area:\r\n          Ref: area\r\n        artifactBucketName:\r\n          Ref: artifactBucketName\r\n        pipelineIamRoleArn:\r\n          Ref: pipelineIamRoleArnSsmParam\r\n        cloudwatchEventIamRoleArn:\r\n          Ref: cloudwatchEventIamRoleArnSsmParam\r\n        subnetPri1Id:\r\n          Fn::ImportValue:\r\n            PrivateSubnet1a\r\n            # Ref: subnetPri1IdExportName\r\n        subnetPri2Id:\r\n          Fn::ImportValue:\r\n            PrivateSubnet1c\r\n            # Ref: subnetPri2IdExportName\r\n        # subnetIds:\r\n        #   Ref: subnetIds\r\n        vpcId:\r\n          Fn::ImportValue:\r\n            VPC\r\n            # Ref: vpcIdExportName\r\n        templateBucketName:\r\n          Ref: templateBucketName\r\n        templateKeyPrefix:\r\n          Ref: templateKeyPrefix\r\n"
}
executelastodometerStack
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": {
        "AWSTemplateFormatVersion": "2010-09-09", 
        "Outputs": {
            "FunctionName": {
                "Description": "Function Name", 
                "Value": {
                    "Ref": "Function"
                }
            }, 
            "FunctionArn": {
                "Description": "Function ARN", 
                "Value": {
                    "Fn::GetAtt": [
                        "Function", 
                        "Arn"
                    ]
                }
            }
        }, 
        "Parameters": {
            "sysName": {
                "Type": "String"
            }, 
            "vpcId": {
                "Type": "String"
            }, 
            "kinesisStreamArnSsmParam": {
                "Type": "AWS::SSM::Parameter::Value<String>"
            }, 
            "area": {
                "Type": "String", 
                "AllowedValues": [
                    "jp"
                ]
            }, 
            "subnetIds": {
                "Type": "List<String>"
            }, 
            "environment": {
                "Type": "String", 
                "AllowedValues": [
                    "dev", 
                    "ver", 
                    "prd"
                ]
            }
        }, 
        "Resources": {
            "IamRole": {
                "Type": "AWS::IAM::Role", 
                "Properties": {
                    "RoleName": {
                        "Fn::Sub": "daq-${environment}-${area}-rl-${sysName}"
                    }, 
                    "AssumeRolePolicyDocument": {
                        "Statement": [
                            {
                                "Action": "sts:AssumeRole", 
                                "Effect": "Allow", 
                                "Principal": {
                                    "Service": "lambda.amazonaws.com"
                                }
                            }
                        ]
                    }, 
                    "ManagedPolicyArns": [
                        "arn:aws:iam::aws:policy/IAMFullAccess", 
                        "arn:aws:iam::aws:policy/AdministratorAccess"
                    ], 
                    "Path": "/"
                }
            }, 
            "FunctionArn": {
                "Type": "AWS::SSM::Parameter", 
                "Properties": {
                    "Type": "String", 
                    "Name": {
                        "Fn::Sub": "/lambda/${sysName}Function/arn"
                    }, 
                    "Value": {
                        "Fn::GetAtt": [
                            "Function", 
                            "Arn"
                        ]
                    }, 
                    "Description": "Function ARN"
                }
            }, 
            "Function": {
                "Type": "AWS::Lambda::Function", 
                "Properties": {
                    "Code": {
                        "S3Bucket": "daq-dev-jp-s3-template", 
                        "S3Key": "pkg-executelastodometer/aed496c2b5190f7fc9b17594d226fcc0"
                    }, 
                    "FunctionName": {
                        "Fn::Sub": "daq-${environment}-${area}-lm-${sysName}"
                    }, 
                    "VpcConfig": {
                        "SubnetIds": {
                            "Ref": "subnetIds"
                        }, 
                        "SecurityGroupIds": [
                            {
                                "Ref": "securityGroup"
                            }
                        ]
                    }, 
                    "Tags": [
                        {
                            "Value": "SAM", 
                            "Key": "lambda:createdBy"
                        }
                    ], 
                    "MemorySize": 128, 
                    "Handler": "executeLastOdometer.lambda_handler", 
                    "Role": {
                        "Fn::GetAtt": [
                            "IamRole", 
                            "Arn"
                        ]
                    }, 
                    "Timeout": 30, 
                    "Runtime": "python3.6"
                }
            }, 
            "FunctionName": {
                "Type": "AWS::SSM::Parameter", 
                "Properties": {
                    "Type": "String", 
                    "Name": {
                        "Fn::Sub": "/lambda/${sysName}Function/name"
                    }, 
                    "Value": {
                        "Ref": "Function"
                    }, 
                    "Description": "Function Name"
                }
            }, 
            "FunctionStream": {
                "Type": "AWS::Lambda::EventSourceMapping", 
                "Properties": {
                    "BatchSize": 100, 
                    "EventSourceArn": {
                        "Ref": "kinesisStreamArnSsmParam"
                    }, 
                    "FunctionName": {
                        "Ref": "Function"
                    }, 
                    "StartingPosition": "LATEST"
                }
            }, 
            "securityGroup": {
                "Type": "AWS::EC2::SecurityGroup", 
                "Properties": {
                    "SecurityGroupIngress": [
                        {
                            "ToPort": 65535, 
                            "FromPort": 0, 
                            "CidrIp": "0.0.0.0/0", 
                            "IpProtocol": "tcp"
                        }
                    ], 
                    "VpcId": {
                        "Ref": "vpcId"
                    }, 
                    "GroupDescription": "Security Group for Lambda", 
                    "Tags": [
                        {
                            "Key": "Name", 
                            "Value": {
                                "Fn::Sub": "inv-${environment}-${area}-sg-lambda-${sysName}"
                            }
                        }
                    ]
                }
            }
        }
    }
}
registerupdatedataStack
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": {
        "AWSTemplateFormatVersion": "2010-09-09", 
        "Outputs": {
            "FunctionName": {
                "Description": "Function Name", 
                "Value": {
                    "Ref": "Function"
                }
            }, 
            "FunctionArn": {
                "Description": "Function ARN", 
                "Value": {
                    "Fn::GetAtt": [
                        "Function", 
                        "Arn"
                    ]
                }
            }
        }, 
        "Parameters": {
            "environment": {
                "Type": "String", 
                "AllowedValues": [
                    "dev", 
                    "ver", 
                    "prd"
                ]
            }, 
            "sysName": {
                "Type": "String"
            }, 
            "dynamoDbStreamArnSsmParam": {
                "Type": "AWS::SSM::Parameter::Value<String>"
            }, 
            "area": {
                "Type": "String", 
                "AllowedValues": [
                    "jp"
                ]
            }
        }, 
        "Resources": {
            "IamRole": {
                "Type": "AWS::IAM::Role", 
                "Properties": {
                    "RoleName": {
                        "Fn::Sub": "daq-${environment}-${area}-rl-${sysName}"
                    }, 
                    "AssumeRolePolicyDocument": {
                        "Statement": [
                            {
                                "Action": "sts:AssumeRole", 
                                "Effect": "Allow", 
                                "Principal": {
                                    "Service": "lambda.amazonaws.com"
                                }
                            }
                        ]
                    }, 
                    "ManagedPolicyArns": [
                        "arn:aws:iam::aws:policy/IAMFullAccess", 
                        "arn:aws:iam::aws:policy/AdministratorAccess"
                    ], 
                    "Path": "/"
                }
            }, 
            "Function": {
                "Type": "AWS::Lambda::Function", 
                "Properties": {
                    "Code": {
                        "S3Bucket": "daq-ver-jp-s3-template", 
                        "S3Key": "pkg-registerupdatedata/ecaaff93aca6c56577309dfac95e613d"
                    }, 
                    "FunctionName": {
                        "Fn::Sub": "daq-${environment}-${area}-lm-${sysName}"
                    }, 
                    "Tags": [
                        {
                            "Value": "SAM", 
                            "Key": "lambda:createdBy"
                        }
                    ], 
                    "MemorySize": 128, 
                    "Handler": "registerUpdateData.lambda_handler", 
                    "Role": {
                        "Fn::GetAtt": [
                            "IamRole", 
                            "Arn"
                        ]
                    }, 
                    "Timeout": 30, 
                    "Runtime": "python3.6"
                }
            }, 
            "FunctionName": {
                "Type": "AWS::SSM::Parameter", 
                "Properties": {
                    "Type": "String", 
                    "Name": {
                        "Fn::Sub": "/lambda/${sysName}Function/name"
                    }, 
                    "Value": {
                        "Ref": "Function"
                    }, 
                    "Description": "Function Name"
                }
            }, 
            "FunctionArn": {
                "Type": "AWS::SSM::Parameter", 
                "Properties": {
                    "Type": "String", 
                    "Name": {
                        "Fn::Sub": "/lambda/${sysName}Function/arn"
                    }, 
                    "Value": {
                        "Fn::GetAtt": [
                            "Function", 
                            "Arn"
                        ]
                    }, 
                    "Description": "Function ARN"
                }
            }, 
            "FunctionStream": {
                "Type": "AWS::Lambda::EventSourceMapping", 
                "Properties": {
                    "BatchSize": 100, 
                    "EventSourceArn": {
                        "Ref": "dynamoDbStreamArnSsmParam"
                    }, 
                    "FunctionName": {
                        "Ref": "Function"
                    }, 
                    "StartingPosition": "LATEST"
                }
            }
        }
    }
}
registerlastodometerStack
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": {
        "AWSTemplateFormatVersion": "2010-09-09", 
        "Outputs": {
            "FunctionName": {
                "Description": "Function Name", 
                "Value": {
                    "Ref": "Function"
                }
            }, 
            "FunctionArn": {
                "Description": "Function ARN", 
                "Value": {
                    "Fn::GetAtt": [
                        "Function", 
                        "Arn"
                    ]
                }
            }
        }, 
        "Parameters": {
            "environment": {
                "Type": "String", 
                "AllowedValues": [
                    "dev", 
                    "ver", 
                    "prd"
                ]
            }, 
            "sysName": {
                "Type": "String"
            }, 
            "dynamoDbStreamArnSsmParam": {
                "Type": "AWS::SSM::Parameter::Value<String>"
            }, 
            "area": {
                "Type": "String", 
                "AllowedValues": [
                    "jp"
                ]
            }
        }, 
        "Resources": {
            "IamRole": {
                "Type": "AWS::IAM::Role", 
                "Properties": {
                    "RoleName": {
                        "Fn::Sub": "daq-${environment}-${area}-rl-${sysName}"
                    }, 
                    "AssumeRolePolicyDocument": {
                        "Statement": [
                            {
                                "Action": "sts:AssumeRole", 
                                "Effect": "Allow", 
                                "Principal": {
                                    "Service": "lambda.amazonaws.com"
                                }
                            }
                        ]
                    }, 
                    "ManagedPolicyArns": [
                        "arn:aws:iam::aws:policy/IAMFullAccess", 
                        "arn:aws:iam::aws:policy/AdministratorAccess"
                    ], 
                    "Path": "/"
                }
            }, 
            "Function": {
                "Type": "AWS::Lambda::Function", 
                "Properties": {
                    "Code": {
                        "S3Bucket": "daq-ver-jp-s3-artifact-test", 
                        "S3Key": "pkg-registerlastodometer/2a9d889fdc2b3e5608a172b704451348"
                    }, 
                    "FunctionName": {
                        "Fn::Sub": "daq-${environment}-${area}-lm-${sysName}"
                    }, 
                    "Tags": [
                        {
                            "Value": "SAM", 
                            "Key": "lambda:createdBy"
                        }
                    ], 
                    "MemorySize": 128, 
                    "Handler": "registerUpdateData.lambda_handler", 
                    "Role": {
                        "Fn::GetAtt": [
                            "IamRole", 
                            "Arn"
                        ]
                    }, 
                    "Timeout": 30, 
                    "Runtime": "python3.6"
                }
            }, 
            "FunctionName": {
                "Type": "AWS::SSM::Parameter", 
                "Properties": {
                    "Type": "String", 
                    "Name": {
                        "Fn::Sub": "/lambda/${sysName}Function/name"
                    }, 
                    "Value": {
                        "Ref": "Function"
                    }, 
                    "Description": "Function Name"
                }
            }, 
            "FunctionArn": {
                "Type": "AWS::SSM::Parameter", 
                "Properties": {
                    "Type": "String", 
                    "Name": {
                        "Fn::Sub": "/lambda/${sysName}Function/arn"
                    }, 
                    "Value": {
                        "Fn::GetAtt": [
                            "Function", 
                            "Arn"
                        ]
                    }, 
                    "Description": "Function ARN"
                }
            }, 
            "FunctionStream": {
                "Type": "AWS::Lambda::EventSourceMapping", 
                "Properties": {
                    "BatchSize": 100, 
                    "EventSourceArn": {
                        "Ref": "dynamoDbStreamArnSsmParam"
                    }, 
                    "FunctionName": {
                        "Ref": "Function"
                    }, 
                    "StartingPosition": "LATEST"
                }
            }
        }
    }
}
infraMain-kinesis-6VJ3AWIVQIC8
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: \"2010-09-09\"\r\nDescription: kinesis template\r\nParameters:\r\n  environment:\r\n    Type: String\r\n  area:\r\n    Type: String\r\n  iamRoleArn:\r\n    Type: String\r\n  bucketArn:\r\n    Type: String\r\nResources:\r\n  kinesisIn:\r\n    Type: AWS::Kinesis::Stream\r\n    Properties:\r\n      Name: kinesisIn\r\n      RetentionPeriodHours: 24\r\n      ShardCount: 1\r\n      # StreamEncryption: Kinesis StreamEncryption\r\n      # Tags:\r\n      #   - Resource Tag\r\n  kinesisFirehose:\r\n    Type: AWS::KinesisFirehose::DeliveryStream\r\n    Properties:\r\n      DeliveryStreamName: test\r\n      DeliveryStreamType: KinesisStreamAsSource #or DirectPut\r\n      # ElasticsearchDestinationConfiguration:\r\n      #   ElasticsearchDestinationConfiguration\r\n      S3DestinationConfiguration:\r\n        BucketARN:\r\n          Ref: bucketArn\r\n        BufferingHints:\r\n          IntervalInSeconds: 60 #60~900 defalut:300\r\n          SizeInMBs: 5 #1~128 default:5\r\n        CloudWatchLoggingOptions:\r\n          Enabled: false\r\n          # LogGroupName: String\r\n          # LogStreamName: String\r\n        CompressionFormat: UNCOMPRESSED #UNCOMPRESSED | GZIP | ZIP | Snappy\r\n        # EncryptionConfiguration:\r\n        #   KMSEncryptionConfig:\r\n        #     AWSKMSKeyARN: String\r\n        #   NoEncryptionConfig: String\r\n        Prefix: hogehuga\r\n        RoleARN:\r\n          Ref: iamRoleArn\r\n      # ExtendedS3DestinationConfiguration:\r\n      #   BucketARN: String\r\n      #   BufferingHints: BufferingHints\r\n      #   CloudWatchLoggingOptions: CloudWatchLoggingOptions\r\n      #   CompressionFormat: String\r\n      #   EncryptionConfiguration: EncryptionConfiguration\r\n      #   Prefix: String\r\n      #   ProcessingConfiguration: ProcessingConfiguration\r\n      #   RoleARN: String\r\n      #   S3BackupConfiguration: S3DestinationConfiguration\r\n      #   S3BackupMode: String\r\n      KinesisStreamSourceConfiguration:\r\n        KinesisStreamARN:\r\n          Fn::GetAtt: [kinesisIn, Arn]\r\n        RoleARN:\r\n          Ref: iamRoleArn\r\n      # RedshiftDestinationConfiguration:\r\n      #   RedshiftDestinationConfiguration\r\n      # SplunkDestinationConfiguration:\r\n      #   SplunkDestinationConfiguration\r\n  kinesisOut:\r\n    Type: AWS::Kinesis::Stream\r\n    Properties:\r\n      Name: kinesisOut\r\n      RetentionPeriodHours: 24\r\n      ShardCount: 1\r\n      # StreamEncryption: Kinesis StreamEncryption\r\n      # Tags:\r\n      #   - Resource Tag\r\n  kinesisInArn:\r\n    Type: AWS::SSM::Parameter\r\n    Properties:\r\n      Type: String\r\n      Name:\r\n        Fn::Sub: /kinesis/kinesisIn/arn\r\n      Value:\r\n        Fn::GetAtt: [kinesisIn, Arn]\r\n      Description: kinesisIn ARN\r\n  kinesisOutArn:\r\n    Type: AWS::SSM::Parameter\r\n    Properties:\r\n      Type: String\r\n      Name:\r\n        Fn::Sub: /kinesis/kinesisOut/arn\r\n      Value:\r\n        Fn::GetAtt: [kinesisOut, Arn]\r\n      Description: kinesisOut ARN\r\n"
}
infraMain-s3-1LJPSGW97ERHJ
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: \"2010-09-09\"\nDescription: s3 template\nParameters:\n  environment:\n    Type: String\n  area:\n    Type: String\nResources:\n  archiveFileBucket:\n    Type: AWS::S3::Bucket\n    DeletionPolicy: Delete\n    Properties:\n      BucketName:\n        Fn::Sub: daq-${environment}-${area}-s3-archivefile\n      LifecycleConfiguration:\n        Rules:\n          - Id: GlacierRule\n            Prefix: glacier\n            Status: Enabled\n            ExpirationInDays: 365\n            Transitions:\n              - TransitionInDays: 1\n                StorageClass: Glacier\n      LoggingConfiguration:\n        DestinationBucketName:\n          Ref: accesslogBucket\n        LogFilePrefix:\n          Fn::Sub: daq-${environment}-${area}-s3-archivefile/\n  artifactBucket:\n    Type: AWS::S3::Bucket\n    DeletionPolicy: Delete\n    Properties:\n      BucketName:\n        Fn::Sub: daq-${environment}-${area}-s3-artifact\n      VersioningConfiguration:\n        Status: Enabled\n      LoggingConfiguration:\n        DestinationBucketName:\n          Ref: accesslogBucket\n        LogFilePrefix:\n          Fn::Sub: daq-${environment}-${area}-s3-artifact/\n  accesslogBucket:\n    Type: AWS::S3::Bucket\n    DeletionPolicy: Delete\n    Properties:\n      BucketName:\n        Fn::Sub: daq-${environment}-${area}-s3-accesslog\n      AccessControl: LogDeliveryWrite\n  accesslogBucketPolicy:\n    Type: AWS::S3::BucketPolicy\n    Properties:\n      Bucket: \n        Ref: accesslogBucket\n      PolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Sid: AWSCloudTrailAclCheck\n            Effect: Allow\n            Principal:\n              Service: cloudtrail.amazonaws.com\n            Action: s3:GetBucketAcl\n            Resource:\n              Fn::GetAtt: accesslogBucket.Arn\n          - Sid: AWSCloudTrailWrite\n            Effect: Allow\n            Principal:\n              Service: cloudtrail.amazonaws.com\n            Action: s3:PutObject\n            Resource:\n              Fn::Join: [ '', [ !GetAtt accesslogBucket.Arn, !Sub '/AWSLogs/${AWS::AccountId}/*'] ]\n            Condition: \n              StringEquals:\n                s3:x-amz-acl: bucket-owner-full-control\nOutputs:\n  archiveFileBucketName:\n    Description: ArchiveFile for Lambda\n    Value:\n      Ref: archiveFileBucket\n  archiveFileBucketArn:\n    Description: ArchiveFile for Lambda\n    Value:\n      Fn::GetAtt: [archiveFileBucket, Arn]\n"
}
infraMain-iam-1OVWA260T4D37
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: \"2010-09-09\"\nDescription: iam template\nParameters:\n  environment:\n    Type: String\n  area:\n    Type: String\nResources:\n  pipelineIamRole:\n    Type: AWS::IAM::Role\n    Properties:\n      RoleName:\n        Fn::Sub: daq-${environment}-${area}-rl-pipeline\n      AssumeRolePolicyDocument:\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service: codebuild.amazonaws.com\n            Action: \"sts:AssumeRole\"\n          - Effect: Allow\n            Principal:\n              Service: codepipeline.amazonaws.com\n            Action: \"sts:AssumeRole\"\n      ManagedPolicyArns:\n        - \"arn:aws:iam::aws:policy/AWSCodeCommitFullAccess\"\n        - \"arn:aws:iam::aws:policy/AWSCodePipelineFullAccess\"\n        - \"arn:aws:iam::aws:policy/AWSCodeBuildDeveloperAccess\"\n        - \"arn:aws:iam::aws:policy/IAMFullAccess\"\n        - \"arn:aws:iam::aws:policy/AmazonSSMFullAccess\"\n      Path: /\n  pipelineIamPolicy:\n    Type: AWS::IAM::Policy\n    Properties:\n      PolicyName:\n        Fn::Sub: daq-${environment}-${area}-pl-pipeline\n      PolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Action:\n              - \"*\"\n            Resource: \"*\"\n      Roles:\n        - Ref: pipelineIamRole\n  cloudwatchEventIamRole:\n    Type: AWS::IAM::Role\n    Properties:\n      RoleName:\n        Fn::Sub: daq-${environment}-${area}-rl-cloudwatchEvent\n      AssumeRolePolicyDocument:\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service: events.amazonaws.com\n            Action: \"sts:AssumeRole\"\n      Path: /\n  cloudwatchEventIamPolicy:\n    Type: AWS::IAM::Policy\n    Properties:\n      PolicyName:\n        Fn::Sub: daq-${environment}-${area}-pl-cloudwatchEvent\n      PolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Action:\n              - \"codepipeline:StartPipelineExecution\"\n            Resource: \"arn:aws:codepipeline:*\"\n      Roles:\n        - Ref: cloudwatchEventIamRole\n  lambdaIamRole:\n    Type: AWS::IAM::Role\n    Properties:\n      RoleName:\n        Fn::Sub: daq-${environment}-${area}-rl-lambda\n      AssumeRolePolicyDocument:\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service: lambda.amazonaws.com\n            Action: \"sts:AssumeRole\"\n      Path: /\n  lambdaIamPolicy:\n    Type: AWS::IAM::Policy\n    Properties:\n      PolicyName:\n        Fn::Sub: daq-${environment}-${area}-pl-lambda\n      PolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Action:\n              - \"kinesis:GetRecords\"\n              - \"kinesis:GetShardIterator\"\n              - \"kinesis:DescribeStream\"\n              - \"kinesis:ListStreams\"\n            Resource: \"*\"\n          - Effect: Allow\n            Action:\n              - \"logs:CreateLogGroup\"\n              - \"logs:CreateLogStream\"\n              - \"logs:PutLogEvents\"\n            Resource: \"arn:aws:logs:*:*:*\"\n      Roles:\n        - Ref: lambdaIamRole\n  kinesisIamRole:\n    Type: AWS::IAM::Role\n    Properties:\n      RoleName:\n        Fn::Sub: daq-${environment}-${area}-rl-kinesis\n      AssumeRolePolicyDocument:\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service: firehose.amazonaws.com\n            Action: \"sts:AssumeRole\"\n      Path: /\n  kinesisIamPolicy:\n    Type: AWS::IAM::Policy\n    Properties:\n      PolicyName:\n        Fn::Sub: daq-${environment}-${area}-pl-kinesis\n      PolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Action:\n              - \"kinesis:GetRecords\"\n              - \"kinesis:GetShardIterator\"\n              - \"kinesis:DescribeStream\"\n              - \"kinesis:ListStreams\"\n              - \"s3:*\"\n            Resource: \"*\"\n          - Effect: Allow\n            Action:\n              - \"logs:CreateLogGroup\"\n              - \"logs:CreateLogStream\"\n              - \"logs:PutLogEvents\"\n            Resource: \"arn:aws:logs:*:*:*\"\n      Roles:\n        - Ref: kinesisIamRole\n  pipelineIamRoleArnParam:\n    Type: AWS::SSM::Parameter\n    Properties:\n      Type: String\n      Name: /iam/role/pipelineIamRole/arn\n      Value:\n        Fn::GetAtt: [pipelineIamRole, Arn]\n      Description: IAM Role ARN\n  cloudwatchEventIamRoleArnParam:\n    Type: AWS::SSM::Parameter\n    Properties:\n      Type: String\n      Name: /iam/role/cloudwatchEventIamRole/arn\n      Value:\n        Fn::GetAtt: [cloudwatchEventIamRole, Arn]\n      Description: IAM Role ARN\nOutputs:\n  # pipelineIamRoleName:\n  #   Description: pipelineIamRole Name\n  #   Value:\n  #     Ref: pipelineIamRole\n  # pipelineIamRoleArn:\n  #   Description: pipelineIamRole Name\n  #   Value:\n  #     Fn::GetAtt: [pipelineIamRole, Arn]\n  #   # Export:\n  #   #   Name: pipelineIamRoleArn\n  # cloudwatchEventIamRoleName:\n  #   Description: cloudwatchEventIamRole Name\n  #   Value:\n  #     Ref: cloudwatchEventIamRole\n  # cloudwatchEventIamRoleArn:\n  #   Description: cloudwatchEventIamRole Name\n  #   Value:\n  #     Fn::GetAtt: [cloudwatchEventIamRole, Arn]\n  #   # Export:\n  #   #   Name: cloudwatchEventIamRoleArn\n  kinesisIamRoleArn:\n    Description: kinesisIamRoleArn\n    Value:\n      Fn::GetAtt: [kinesisIamRole, Arn]\n"
}
infraMain-dynamoDb-1JE2SUGUGO3PK
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: \"2010-09-09\"\nDescription: dynamoDb template\nResources:\n  dynamoTable1:\n    Type: AWS::DynamoDB::Table\n    Properties:\n      AttributeDefinitions:\n        - AttributeName: VIN\n          AttributeType: S\n      KeySchema:\n        - AttributeName: VIN\n          KeyType: HASH\n      BillingMode: PAY_PER_REQUEST\n      TableName: LAST_ODO_METER\n      TimeToLiveSpecification:\n        AttributeName: timestamp\n        Enabled: True\n      StreamSpecification:\n        StreamViewType: NEW_IMAGE\n  dynamoTable2:\n    Type: AWS::DynamoDB::Table\n    Properties:\n      AttributeDefinitions:\n        - AttributeName: VIN\n          AttributeType: S\n      KeySchema:\n        - AttributeName: VIN\n          KeyType: HASH\n      BillingMode: PAY_PER_REQUEST\n      TableName: PROCESSING_STATE\n      TimeToLiveSpecification:\n        AttributeName: timestamp\n        Enabled: True\n  dynamoTable1StreamArn:\n    Type: AWS::SSM::Parameter\n    Properties:\n      Type: String\n      Name:\n        Fn::Sub: /dynamodb/dynamoTable1/stream/arn\n      Value:\n        Fn::GetAtt: [dynamoTable1, StreamArn]\n      Description: dynamoTable1 ARN     \n"
}
infraMain
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: \"2010-09-09\"\r\nDescription: main template\r\nParameters:\r\n  templateBucketName:\r\n    Type: String\r\n  templateKeyPrefix:\r\n    Type: String\r\n  environment:\r\n    Type: String\r\n    AllowedValues:\r\n      - dev\r\n      - ver\r\n      - prd\r\n  area:\r\n    Type: String\r\n    AllowedValues:\r\n      - jp\r\nResources:\r\n  # vpc:\r\n  #   Type: AWS::CloudFormation::Stack\r\n  #   Properties:\r\n  #     TemplateURL:\r\n  #       Fn::Sub: https://s3.amazonaws.com/${templateBucketName}/${templateKeyPrefix}/vpc.yml\r\n  #     Parameters:\r\n  #       environment:\r\n  #         Ref: environment\r\n  #       area:\r\n  #         Ref: area\r\n  dynamoDb:\r\n    Type: AWS::CloudFormation::Stack\r\n    Properties:\r\n      TemplateURL:\r\n        Fn::Sub: https://s3.amazonaws.com/${templateBucketName}/${templateKeyPrefix}/dynamoDb.yml\r\n  s3:\r\n    Type: AWS::CloudFormation::Stack\r\n    Properties:\r\n      TemplateURL:\r\n        Fn::Sub: https://s3.amazonaws.com/${templateBucketName}/${templateKeyPrefix}/s3.yml\r\n      Parameters:\r\n        environment:\r\n          Ref: environment\r\n        area:\r\n          Ref: area\r\n  iam:\r\n    Type: AWS::CloudFormation::Stack\r\n    Properties:\r\n      TemplateURL:\r\n        Fn::Sub: https://s3.amazonaws.com/${templateBucketName}/${templateKeyPrefix}/iam.yml\r\n      Parameters:\r\n        environment:\r\n          Ref: environment\r\n        area:\r\n          Ref: area\r\n  kinesis:\r\n    Type: AWS::CloudFormation::Stack\r\n    Properties:\r\n      TemplateURL:\r\n        Fn::Sub: https://s3.amazonaws.com/${templateBucketName}/${templateKeyPrefix}/kinesis.yml\r\n      Parameters:\r\n        environment:\r\n          Ref: environment\r\n        area:\r\n          Ref: area\r\n        iamRoleArn:\r\n          Fn::GetAtt: [iam, Outputs.kinesisIamRoleArn]\r\n        bucketArn:\r\n          Fn::GetAtt: [s3, Outputs.archiveFileBucketArn]\r\n"
}
StackSet-J0126970-createIamRole-895b4fdf-75ed-4afe-a5e1-ffadd5e47a82
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "{\n  \"AWSTemplateFormatVersion\" : \"2010-09-09\",\n  \"Description\" : \"Template for Creating IAM Role to Switch from Internavi Login AWS Account\",\n  \"Parameters\" : {\n    \"TrustedAWSAccountId\" : {\n      \"AllowedPattern\" : \"^[0-9]*$\",\n      \"Type\" : \"String\",\n      \"Default\" : \"975196479634\",\n      \"Description\" : \"Trusted AWS Account ID\"\n    },\n    \"IAMRoleName\": {\n      \"Type\": \"String\",\n      \"Default\": \"HmSolUser\",\n      \"Description\": \"IAM Role Name\"\n    },\n    \"IAMPolicyType\": {\n      \"Type\": \"String\",\n      \"Default\": \"HmSolUser\",\n      \"Description\": \"IAM Policy Type\",\n      \"AllowedValues\": [ \"HmSolUser\", \"HmAdmin\" ]\n    },\n    \"IAMUserName\": {\n      \"Type\": \"String\",\n      \"Default\": \"\",\n      \"Description\": \"IAM User Name\"\n    }\n  },\n  \"Conditions\" : {\n    \"user\"        : { \"Fn::Equals\" : [{\"Ref\" : \"IAMPolicyType\"}, \"HmSolUser\" ]},\n    \"admin\"        : { \"Fn::Equals\" : [{\"Ref\" : \"IAMPolicyType\"}, \"HmAdmin\" ]}\n  },\n  \"Resources\" : {\n    \"IAMRoleForAdmin\": {\n      \"Type\": \"AWS::IAM::Role\",\n      \"Condition\" : \"admin\",\n      \"Properties\": {\n        \"AssumeRolePolicyDocument\": {\n          \"Version\": \"2012-10-17\",\n          \"Statement\": [\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", { \"Ref\" : \"IAMUserName\" } ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            }\n          ]\n        },\n        \"ManagedPolicyArns\": [\n          \"arn:aws:iam::aws:policy/AdministratorAccess\"\n        ],\n        \"Path\": \"/\",\n        \"RoleName\": { \"Ref\" : \"IAMRoleName\" }\n      }\n    },\n    \"IAMRoleForUser\": {\n      \"Type\": \"AWS::IAM::Role\",\n      \"Condition\" : \"user\",\n      \"Properties\": {\n        \"AssumeRolePolicyDocument\": {\n          \"Version\": \"2012-10-17\",\n          \"Statement\": [\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", { \"Ref\" : \"IAMUserName\" } ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            }\n          ]\n        },\n        \"ManagedPolicyArns\": [\n          \"arn:aws:iam::aws:policy/AdministratorAccess\"\n        ],\n        \"Path\": \"/\",\n        \"RoleName\": { \"Ref\" : \"IAMRoleName\" }\n      }\n    }\n  },\n  \"Outputs\" : {\n    \"IAMRoleAdminArn\": {\n      \"Value\": { \"Fn::GetAtt\" : [ \"IAMRoleForAdmin\", \"Arn\" ] },\n      \"Condition\" : \"admin\"\n    },\n    \"IAMRoleUserArn\": {\n      \"Value\": { \"Fn::GetAtt\" : [ \"IAMRoleForUser\", \"Arn\" ] },\n      \"Condition\" : \"user\"\n    },\n    \"LinkForSwitchRole\": {\n      \"Value\": { \"Fn::Join\": [ \"\", [ \"https://signin.aws.amazon.com/switchrole?roleName=\", { \"Ref\" : \"IAMRoleName\" }, \"&account=\", { \"Ref\" : \"AWS::AccountId\" } ] ] }\n    }\n  }\n}\n"
}
StackSet-InfraAdmin-CreateIamRole-8c1b2f93-1d77-4d46-a5e3-4bea3d390ef0
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": {
        "AWSTemplateFormatVersion": "2010-09-09", 
        "Description": "Template for Creating IAM Role to Switch from Internavi Login AWS Account", 
        "Parameters": {
            "TrustedAWSAccountId": {
                "AllowedPattern": "^[0-9]*$", 
                "Type": "String", 
                "Default": "975196479634", 
                "Description": "Trusted AWS Account ID"
            }, 
            "IAMRoleName": {
                "Type": "String", 
                "Default": "InfraAdmin", 
                "Description": "IAM Role Name"
            }
        }, 
        "Resources": {
            "IAMRoleForEngineer": {
                "Type": "AWS::IAM::Role", 
                "Properties": {
                    "AssumeRolePolicyDocument": {
                        "Version": "2012-10-17", 
                        "Statement": [
                            {
                                "Effect": "Allow", 
                                "Principal": {
                                    "AWS": {
                                        "Fn::Join": [
                                            "", 
                                            [
                                                "arn:aws:iam::", 
                                                {
                                                    "Ref": "TrustedAWSAccountId"
                                                }, 
                                                ":user/", 
                                                "JV010031"
                                            ]
                                        ]
                                    }
                                }, 
                                "Action": [
                                    "sts:AssumeRole"
                                ], 
                                "Condition": {
                                    "Bool": {
                                        "aws:MultiFactorAuthPresent": "true"
                                    }
                                }
                            }, 
                            {
                                "Effect": "Allow", 
                                "Principal": {
                                    "AWS": {
                                        "Fn::Join": [
                                            "", 
                                            [
                                                "arn:aws:iam::", 
                                                {
                                                    "Ref": "TrustedAWSAccountId"
                                                }, 
                                                ":user/", 
                                                "JV010024"
                                            ]
                                        ]
                                    }
                                }, 
                                "Action": [
                                    "sts:AssumeRole"
                                ], 
                                "Condition": {
                                    "Bool": {
                                        "aws:MultiFactorAuthPresent": "true"
                                    }
                                }
                            }
                        ]
                    }, 
                    "ManagedPolicyArns": [
                        "arn:aws:iam::aws:policy/AdministratorAccess"
                    ], 
                    "Path": "/", 
                    "RoleName": {
                        "Ref": "IAMRoleName"
                    }
                }
            }
        }, 
        "Outputs": {
            "IAMRoleArn": {
                "Value": {
                    "Fn::GetAtt": [
                        "IAMRoleForEngineer", 
                        "Arn"
                    ]
                }
            }, 
            "LinkForSwitchRole": {
                "Value": {
                    "Fn::Join": [
                        "", 
                        [
                            "https://signin.aws.amazon.com/switchrole?roleName=", 
                            {
                                "Ref": "IAMRoleName"
                            }, 
                            "&account=", 
                            {
                                "Ref": "AWS::AccountId"
                            }
                        ]
                    ]
                }
            }
        }
    }
}
StackSet-OpeAdmin-CreateIamRole-117a61ff-8131-4daa-839e-e5b39bac5b71
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "{\n  \"AWSTemplateFormatVersion\" : \"2010-09-09\",\n  \"Description\" : \"Template for Creating IAM Role to Switch from Internavi Login AWS Account\",\n  \"Parameters\" : {\n    \"TrustedAWSAccountId\" : {\n      \"AllowedPattern\" : \"^[0-9]*$\",\n      \"Type\" : \"String\",\n      \"Default\" : \"975196479634\",\n      \"Description\" : \"Trusted AWS Account ID\"\n    },\n    \"IAMRoleName\": {\n      \"Type\": \"String\",\n      \"Default\": \"OpeAdminRole\",\n      \"Description\": \"IAM Role Name\"\n    }\n  },\n  \"Resources\" : {\n    \"IAMRoleForEngineer\": {\n      \"Type\": \"AWS::IAM::Role\",\n      \"Properties\": {\n        \"AssumeRolePolicyDocument\": {\n          \"Version\": \"2012-10-17\",\n          \"Statement\": [\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010002\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010025\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010026\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010027\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010028\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010030\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            }\n          ]\n        },\n        \"ManagedPolicyArns\": [\n          \"arn:aws:iam::aws:policy/AdministratorAccess\"\n        ],\n        \"Path\": \"/\",\n        \"RoleName\": { \"Ref\" : \"IAMRoleName\" }\n      }\n    }\n  },\n  \"Outputs\" : {\n    \"IAMRoleArn\": {\n      \"Value\": { \"Fn::GetAtt\" : [ \"IAMRoleForEngineer\", \"Arn\" ] }\n    },\n    \"LinkForSwitchRole\": {\n      \"Value\": { \"Fn::Join\": [ \"\", [ \"https://signin.aws.amazon.com/switchrole?roleName=\", { \"Ref\" : \"IAMRoleName\" }, \"&account=\", { \"Ref\" : \"AWS::AccountId\" } ] ] }\n    }\n  }\n}\n"
}
StackSet-cfn-exec-ec2-8bbb13cb-317f-4b65-ac41-a401be282a27
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: 2010-09-09\nDescription: CloudFormation Execute EC2\nParameters:\n  amiId:\n    Type: String\n    Default: ami-0d7ed3ddb85b521a6\n  SshCidr1:\n    Type: String\n    Default: 121.2.65.36/32\n  SshCidr2:\n    Type: String\n    Default: 39.110.201.10/32\n  SshCidr3:\n    Type: String\n    Default: 222.11.38.119/32\n  SshCidr4:\n    Type: String\n    Default: 1.21.118.25/32\n  SshCidr5:\n    Type: String\n    Default: 153.163.63.48/32\n  SshCidr6:\n    Type: String\n    Default: 13.231.11.115/32\nResources:\n  EC2Role:\n    Type: \"AWS::IAM::Role\"\n    Properties:\n      RoleName: cfn-exec-ec2-role\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/AdministratorAccess\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement:\n          -\n            Effect: \"Allow\"\n            Principal:\n              Service:\n                - \"ec2.amazonaws.com\"\n            Action:\n              - \"sts:AssumeRole\"\n      Path: \"/\"\n  Profile:\n    Type: AWS::IAM::InstanceProfile\n    Properties:\n      Roles:\n        - !Ref EC2Role\n  SSHSecurityGroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupName: cfn-exec-sg\n      GroupDescription: cfn-exec-sg\n      SecurityGroupIngress:\n      - IpProtocol: tcp\n        FromPort: '22'\n        ToPort: '22'\n        CidrIp: !Ref SshCidr1\n        Description: Classmethod\n      - IpProtocol: tcp\n        FromPort: '22'\n        ToPort: '22'\n        CidrIp: !Ref SshCidr2\n        Description: Classmethod\n      - IpProtocol: tcp\n        FromPort: '22'\n        ToPort: '22'\n        CidrIp: !Ref SshCidr3\n        Description: Classmethod\n      - IpProtocol: tcp\n        FromPort: '22'\n        ToPort: '22'\n        CidrIp: !Ref SshCidr4\n        Description: Classmethod\n      - IpProtocol: tcp\n        FromPort: '22'\n        ToPort: '22'\n        CidrIp: !Ref SshCidr5\n        Description: Classmethod\n      - IpProtocol: tcp\n        FromPort: '22'\n        ToPort: '22'\n        CidrIp: !Ref SshCidr6\n        Description: Classmethod\n      Tags:\n        - Key: Name\n          Value: cfn-exec-sg\n  EC2:\n    Type: AWS::EC2::Instance\n    Properties:\n      ImageId: !Ref amiId\n      InstanceType: t3.micro\n      KeyName: cfn-exec-key\n      IamInstanceProfile: !Ref Profile\n      NetworkInterfaces:\n        - AssociatePublicIpAddress: true\n          DeviceIndex: 0\n          GroupSet:\n            - !GetAtt SSHSecurityGroup.GroupId\n      UserData:\n        Fn::Base64: !Sub |\n          #!/bin/bash\n          yum -y update\n          yum -y install git\n      Tags:\n        - Key: Name\n          Value: cfn-exec\n  EIP:\n    Type: AWS::EC2::EIP\n    Properties:\n      Domain: vpc\n  AssociateEIP:\n    Type: AWS::EC2::EIPAssociation\n    Properties:\n      EIP: !Ref EIP\n      InstanceId: !Ref EC2\nOutputs:\n  EC2:\n    Value: !Ref EC2\n    Export:\n      Name: cfn-exex-ec2\n  EIP:\n    Value: !Ref EIP\n    Export:\n      Name: cfn-exex-IP\n"
}
StackSet-dev-vdm01-createIamRole-2c8d9dc9-b3da-465f-bbef-9173323af520
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "{\n  \"AWSTemplateFormatVersion\" : \"2010-09-09\",\n  \"Description\" : \"Template for Creating IAM Role to Switch from Internavi Login AWS Account\",\n  \"Parameters\" : {\n    \"TrustedAWSAccountId\" : {\n      \"AllowedPattern\" : \"^[0-9]*$\",\n      \"Type\" : \"String\",\n      \"Default\" : \"975196479634\",\n      \"Description\" : \"Trusted AWS Account ID\"\n    },\n    \"IAMRoleName\": {\n      \"Type\": \"String\",\n      \"Default\": \"SolDeveloper\",\n      \"Description\": \"IAM Role Name\"\n    },\n    \"IAMPolicyType\": {\n      \"Type\": \"String\",\n      \"Default\": \"SolUser\",\n      \"Description\": \"IAM Policy Type\",\n      \"AllowedValues\": [ \"SolUser\", \"Admin\" ]\n    }\n  },\n  \"Conditions\" : {\n    \"user\"        : { \"Fn::Equals\" : [{\"Ref\" : \"IAMPolicyType\"}, \"SolUser\" ]},\n    \"admin\"        : { \"Fn::Equals\" : [{\"Ref\" : \"IAMPolicyType\"}, \"Admin\" ]}\n  },\n  \"Resources\" : {\n    \"IAMRoleForAdmin\": {\n      \"Type\": \"AWS::IAM::Role\",\n      \"Condition\" : \"admin\",\n      \"Properties\": {\n        \"AssumeRolePolicyDocument\": {\n          \"Version\": \"2012-10-17\",\n          \"Statement\": [\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010003\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010004\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010005\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010010\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010011\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            }\n          ]\n        },\n        \"ManagedPolicyArns\": [\n          \"arn:aws:iam::aws:policy/AdministratorAccess\"\n        ],\n        \"Path\": \"/\",\n        \"RoleName\": { \"Ref\" : \"IAMRoleName\" }\n      }\n    },\n    \"IAMRoleForUser\": {\n      \"Type\": \"AWS::IAM::Role\",\n      \"Condition\" : \"user\",\n      \"Properties\": {\n        \"AssumeRolePolicyDocument\": {\n          \"Version\": \"2012-10-17\",\n          \"Statement\": [\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010003\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010004\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010005\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010010\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010011\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            }\n          ]\n        },\n        \"ManagedPolicyArns\": [\n          \"arn:aws:iam::aws:policy/ReadOnlyAccess\",\n          \"arn:aws:iam::aws:policy/AWSCodeCommitPowerUser\"\n        ],\n        \"Path\": \"/\",\n        \"RoleName\": { \"Ref\" : \"IAMRoleName\" }\n      }\n    }\n  },\n  \"Outputs\" : {\n    \"IAMRoleAdminArn\": {\n      \"Value\": { \"Fn::GetAtt\" : [ \"IAMRoleForAdmin\", \"Arn\" ] },\n      \"Condition\" : \"admin\"\n    },\n    \"IAMRoleUserArn\": {\n      \"Value\": { \"Fn::GetAtt\" : [ \"IAMRoleForUser\", \"Arn\" ] },\n      \"Condition\" : \"user\"\n    },\n    \"LinkForSwitchRole\": {\n      \"Value\": { \"Fn::Join\": [ \"\", [ \"https://signin.aws.amazon.com/switchrole?roleName=\", { \"Ref\" : \"IAMRoleName\" }, \"&account=\", { \"Ref\" : \"AWS::AccountId\" } ] ] }\n    }\n  }\n}\n"
}
INV-ver-vdm01-vehicle-api-ver-ysd
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: Create Service Endpoint\n\nParameters:\n  serviceAlliasLowerCase:\n    Type: String\n  serviceName:\n    Type: String\n  cidr:\n    Type: String\n\nResources:\n\n  endpointSecuritygroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupName: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      GroupDescription: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      Tags:\n        - Key: Name\n          Value: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      VpcId: !ImportValue VPC\n      SecurityGroupIngress:\n        - IpProtocol: tcp\n          FromPort: 80\n          ToPort: 80\n          CidrIp: !Ref cidr\n  endpoint:\n    Type: AWS::EC2::VPCEndpoint\n    Properties:\n      VpcEndpointType: Interface\n      VpcId: !ImportValue VPC\n      SubnetIds:\n        - !ImportValue PrivateSubnet1a\n        - !ImportValue PrivateSubnet1c\n      SecurityGroupIds:\n        - !Ref endpointSecuritygroup\n      ServiceName: !Ref serviceName\n      PrivateDnsEnabled: false\n"
}
INV-ver-vdm01-ap1-ver-ysd
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: Create Service Endpoint\n\nParameters:\n  serviceAlliasLowerCase:\n    Type: String\n  serviceName:\n    Type: String\n  cidr:\n    Type: String\n\nResources:\n\n  endpointSecuritygroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupName: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      GroupDescription: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      Tags:\n        - Key: Name\n          Value: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      VpcId: !ImportValue VPC\n      SecurityGroupIngress:\n        - IpProtocol: tcp\n          FromPort: 80\n          ToPort: 80\n          CidrIp: !Ref cidr\n  endpoint:\n    Type: AWS::EC2::VPCEndpoint\n    Properties:\n      VpcEndpointType: Interface\n      VpcId: !ImportValue VPC\n      SubnetIds:\n        - !ImportValue PrivateSubnet1a\n        - !ImportValue PrivateSubnet1c\n      SecurityGroupIds:\n        - !Ref endpointSecuritygroup\n      ServiceName: !Ref serviceName\n      PrivateDnsEnabled: false\n"
}
INV-ver-vdm01-vpc-base
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "---\nAWSTemplateFormatVersion: '2010-09-09'\nDescription: VPC Network Template\nParameters:\n  SolName:\n    Type: String\n    Default: base01\n    Description: Solution Name.\n  SubSolName:\n    Type: String\n    Default: base\n    Description: Solution Name.\n  EnvName:\n    Type: String\n    Default: dev\n    Description: Env Name.\n  VPCCIDR:\n    Description: First and Second Octet of VPC, For example xxx.xxx\n    Type: String\n    Default: '10.0'\n    AllowedPattern: \"^(10\\\\.([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])|172\\\\.(1[6-9]|2[0-9]|3[0-1])|192\\\\.168)$\"\n    ConstraintDescription: xxx.xxx\nMappings:\n  StackConfig:\n    VPC:\n      CIDR: \".0.0/16\"\n    PublicSubnet1:\n      CIDR: \".0.0/24\"\n    PublicSubnet2:\n      CIDR: \".1.0/24\"\n    PrivateSubnet1:\n      CIDR: \".10.0/24\"\n    PrivateSubnet2:\n      CIDR: \".11.0/24\"\n\nResources:\n  VPC:\n    Type: AWS::EC2::VPC\n    Properties:\n      CidrBlock: !Sub\n        - ${VPCCIDR}${SubCIDR}\n        - SubCIDR: {\"Fn::FindInMap\": [ StackConfig, VPC, CIDR ]}\n      EnableDnsSupport: 'true'\n      EnableDnsHostnames: 'true'\n      InstanceTenancy: default\n      Tags:\n      - Key: Name\n        Value: !Sub INV-${EnvName}-${SolName}\n  InternetGateway:\n    Type: AWS::EC2::InternetGateway\n    Properties:\n      Tags:\n      - Key: Name\n        Value: !Sub INV-${EnvName}-${SolName}\n  AttachGateway:\n    Type: AWS::EC2::VPCGatewayAttachment\n    Properties:\n      VpcId: !Ref VPC\n      InternetGatewayId: !Ref InternetGateway\n\n  PublicSubnet1a:\n    Type: AWS::EC2::Subnet\n    DependsOn: AttachGateway\n    Properties:\n      AvailabilityZone: !Select [ 0, \"Fn::GetAZs\": {Ref: \"AWS::Region\"}]\n      CidrBlock: !Sub\n        - ${VPCCIDR}${SubCIDR}\n        - SubCIDR: {\"Fn::FindInMap\": [ StackConfig, PublicSubnet1, CIDR ]}\n      MapPublicIpOnLaunch: 'true'\n      Tags:\n      - Key: Name\n        Value: !Sub INV-${EnvName}-${SolName}-PublicSubnet1a\n      VpcId: !Ref VPC\n  PublicSubnet1c:\n    Type: AWS::EC2::Subnet\n    DependsOn: AttachGateway\n    Properties:\n      AvailabilityZone: !Select [ 1, \"Fn::GetAZs\": {Ref: \"AWS::Region\"}]\n      CidrBlock: !Sub\n        - ${VPCCIDR}${SubCIDR}\n        - SubCIDR: {\"Fn::FindInMap\": [ StackConfig, PublicSubnet2, CIDR ]}\n      MapPublicIpOnLaunch: 'true'\n      Tags:\n      - Key: Name\n        Value: !Sub INV-${EnvName}-${SolName}-PublicSubnet1c\n      VpcId: !Ref VPC\n  PrivateSubnet1a:\n    Type: AWS::EC2::Subnet\n    DependsOn: AttachGateway\n    Properties:\n      AvailabilityZone: !Select [ 0, \"Fn::GetAZs\": {Ref: \"AWS::Region\"}]\n      CidrBlock: !Sub\n        - ${VPCCIDR}${SubCIDR}\n        - SubCIDR: {\"Fn::FindInMap\": [ StackConfig, PrivateSubnet1, CIDR ]}\n      MapPublicIpOnLaunch: 'true'\n      Tags:\n      - Key: Name\n        Value: !Sub INV-${EnvName}-${SolName}-PrivateSubnet1a\n      VpcId: !Ref VPC\n  PrivateSubnet1c:\n    Type: AWS::EC2::Subnet\n    DependsOn: AttachGateway\n    Properties:\n      AvailabilityZone: !Select [ 1, \"Fn::GetAZs\": {Ref: \"AWS::Region\"}]\n      CidrBlock: !Sub\n        - ${VPCCIDR}${SubCIDR}\n        - SubCIDR: {\"Fn::FindInMap\": [ StackConfig, PrivateSubnet2, CIDR ]}\n      MapPublicIpOnLaunch: 'true'\n      Tags:\n      - Key: Name\n        Value: !Sub INV-${EnvName}-${SolName}-PrivateSubnet1c\n      VpcId: !Ref VPC\n\n  EIP1a:\n    Type: AWS::EC2::EIP\n    Properties:\n      Domain: vpc\n  NAT1a:\n    Type: AWS::EC2::NatGateway\n    Properties:\n      AllocationId:\n        Fn::GetAtt:\n          - EIP1a\n          - AllocationId\n      SubnetId: !Ref PublicSubnet1a\n      Tags:\n        - Key: Name\n          Value: !Sub INV-${EnvName}-${SolName}-NGW1a\n\n  EIP1c:\n    Type: AWS::EC2::EIP\n    Properties:\n      Domain: vpc\n  NAT1c:\n    Type: AWS::EC2::NatGateway\n    Properties:\n      AllocationId:\n        Fn::GetAtt:\n          - EIP1c\n          - AllocationId\n      SubnetId: !Ref PublicSubnet1c\n      Tags:\n        - Key: Name\n          Value: !Sub INV-${EnvName}-${SolName}-NGW1c\n\n  PublicRouteTable:\n    Type: AWS::EC2::RouteTable\n    DependsOn: AttachGateway\n    Properties:\n      VpcId: !Ref VPC\n      Tags:\n      - Key: Name\n        Value: !Sub INV-${EnvName}-${SolName}-PublicRoute\n  PublicRoute:\n    Type: AWS::EC2::Route\n    DependsOn: AttachGateway\n    Properties:\n      RouteTableId: !Ref PublicRouteTable\n      DestinationCidrBlock: 0.0.0.0/0\n      GatewayId: !Ref InternetGateway\n  PrivateRouteTable1a:\n    Type: AWS::EC2::RouteTable\n    DependsOn: NAT1a\n    Properties:\n      VpcId: !Ref VPC\n      Tags:\n      - Key: Name\n        Value: !Sub INV-${EnvName}-${SolName}-PrivateRoute1a\n  PrivateRoute1a:\n    Type: AWS::EC2::Route\n    DependsOn: NAT1a\n    Properties:\n      RouteTableId: !Ref PrivateRouteTable1a\n      DestinationCidrBlock: 0.0.0.0/0\n      NatGatewayId: !Ref NAT1a\n  PrivateRouteTable1c:\n    Type: AWS::EC2::RouteTable\n    DependsOn: NAT1c\n    Properties:\n      VpcId: !Ref VPC\n      Tags:\n      - Key: Name\n        Value: !Sub INV-${EnvName}-${SolName}-PrivateRoute1c\n  PrivateRoute1c:\n    Type: AWS::EC2::Route\n    DependsOn: NAT1c\n    Properties:\n      RouteTableId: !Ref PrivateRouteTable1c\n      DestinationCidrBlock: 0.0.0.0/0\n      NatGatewayId: !Ref NAT1c\n\n  PublicSubnet1aRouteTableAssociation:\n    Type: AWS::EC2::SubnetRouteTableAssociation\n    Properties:\n      SubnetId: !Ref PublicSubnet1a\n      RouteTableId: !Ref PublicRouteTable\n  PublicSubnet1cRouteTableAssociation:\n    Type: AWS::EC2::SubnetRouteTableAssociation\n    Properties:\n      SubnetId: !Ref PublicSubnet1c\n      RouteTableId: !Ref PublicRouteTable\n  PrivateSubnet1aRouteTableAssociation:\n    Type: AWS::EC2::SubnetRouteTableAssociation\n    Properties:\n      SubnetId: !Ref PrivateSubnet1a\n      RouteTableId: !Ref PrivateRouteTable1a\n  PrivateSubnet1cRouteTableAssociation:\n    Type: AWS::EC2::SubnetRouteTableAssociation\n    Properties:\n      SubnetId: !Ref PrivateSubnet1c\n      RouteTableId: !Ref PrivateRouteTable1c\n\n  DNS1:\n    Type: \"AWS::Route53::HostedZone\"\n    Properties:\n      HostedZoneConfig:\n        Comment: INV-LocalDomain\n      Name: internal-internavi\n      VPCs:\n        -\n          VPCId: !Ref VPC\n          VPCRegion: !Ref AWS::Region\n      HostedZoneTags:\n        -\n          Key: \"Name\"\n          Value: !Sub INV-${EnvName}-${SolName}\n\n  FlowLogBucket:\n    Type: AWS::S3::Bucket\n    Properties:\n        BucketName: !Join\n          - \"-\"\n          -\n            - inv\n            - !Ref EnvName\n            - !Ref SolName\n            - !Ref VPC\n  FlowLogBucketPolicy:\n    Type: AWS::S3::BucketPolicy\n    DependsOn: NAT1c\n    Properties:\n      Bucket: !Ref FlowLogBucket\n      PolicyDocument:\n        Statement:\n          -\n            Action:\n              - \"s3:PutObject\"\n            Effect: \"Allow\"\n            Resource:\n              Fn::Join:\n                - \"\"\n                -\n                  - \"arn:aws:s3:::\"\n                  - !Ref FlowLogBucket\n                  - \"/*\"\n            Principal:\n              Service: \"delivery.logs.amazonaws.com\"\n            Condition:\n              StringEquals:\n                s3:x-amz-acl: bucket-owner-full-control\n          -\n            Action:\n              - \"s3:GetBucketAcl\"\n            Effect: \"Allow\"\n            Resource:\n              Fn::Join:\n                - \"\"\n                -\n                  - \"arn:aws:s3:::\"\n                  - !Ref FlowLogBucket\n            Principal:\n              Service: \"delivery.logs.amazonaws.com\"\n  FlowLog:\n    Type: AWS::EC2::FlowLog\n    DependsOn: FlowLogBucketPolicy\n    Properties:\n      LogDestinationType : \"s3\"\n      LogDestination : !Join\n        - \"\"\n        -\n          - \"arn:aws:s3:::\"\n          - !Ref FlowLogBucket\n          - /FlowLogs/\n      ResourceType : VPC\n      ResourceId : !Ref VPC\n      TrafficType : ALL\n\n  S3Endpoint:\n    Type: AWS::EC2::VPCEndpoint\n    Properties:\n      RouteTableIds:\n        - !Ref PublicRouteTable\n        - !Ref PrivateRouteTable1a\n        - !Ref PrivateRouteTable1c\n      ServiceName: !Join\n        - ''\n        - - com.amazonaws.\n          - !Ref 'AWS::Region'\n          - .s3\n      VpcId: !Ref VPC\n  DynamoEndpoint:\n    Type: AWS::EC2::VPCEndpoint\n    Properties:\n      RouteTableIds:\n        - !Ref PublicRouteTable\n        - !Ref PrivateRouteTable1a\n        - !Ref PrivateRouteTable1c\n      ServiceName: !Join\n        - ''\n        - - com.amazonaws.\n          - !Ref 'AWS::Region'\n          - .dynamodb\n      VpcId: !Ref VPC\n  Certificate:\n    Type: AWS::CertificateManager::Certificate\n    Properties:\n      DomainName: !Sub '*.${EnvName}-${SubSolName}.cloud.internavi.ne.jp'\n      SubjectAlternativeNames:\n        - '*.cloud.internavi.ne.jp'\n      ValidationMethod: DNS\n\nOutputs:\n  VPC:\n    Value: !Ref VPC\n    Export:\n      Name: VPC\n  PublicSubnet1a:\n    Value: !Ref PublicSubnet1a\n    Export:\n      Name: PublicSubnet1a\n  PublicSubnet1c:\n    Value: !Ref PublicSubnet1c\n    Export:\n      Name: PublicSubnet1c\n  PrivateSubnet1a:\n    Value: !Ref PrivateSubnet1a\n    Export:\n      Name: PrivateSubnet1a\n  PrivateSubnet1c:\n    Value: !Ref PrivateSubnet1c\n    Export:\n      Name: PrivateSubnet1c\n  PublicRouteTable:\n    Value: !Ref PublicRouteTable\n    Export:\n      Name: PublicRouteTable\n  PrivateRouteTable1a:\n    Value: !Ref PrivateRouteTable1a\n    Export:\n      Name: PrivateRouteTable1a\n  PrivateRouteTable1c:\n    Value: !Ref PrivateRouteTable1c\n    Export:\n      Name: PrivateRouteTable1c\n  DNS1:\n    Value: !Ref DNS1\n    Export:\n      Name: DNS1\n"
}
INV-ver-vdm01-codecommit-ecr
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: codecommit and ecr\n\nParameters:\n  accountAllias:\n    Type: String\n  accountAlliasLowerCase:\n    Type: String\n\n\nResources:\n  codecommit:\n    Type: AWS::CodeCommit::Repository\n    Properties:\n      RepositoryName: !Sub ${accountAllias}-codecommit\n      RepositoryDescription: !Sub ${accountAllias}-codecommit\n  codecommitcfn:\n    Type: AWS::CodeCommit::Repository\n    Properties:\n      RepositoryName: !Sub ${accountAllias}-cfn\n      RepositoryDescription: !Sub ${accountAllias}-cfn\n  ecr:\n    Type: AWS::ECR::Repository\n    Properties: \n      RepositoryName: !Sub ${accountAlliasLowerCase}-ecr\n\nOutputs:\n  codecommit:\n    Value: !Ref codecommit\n    Export:\n      Name: codecommit\n  codecommitcfn:\n    Value: !Ref codecommitcfn\n    Export:\n      Name: codecommitcfn\n  ecr:\n    Value: !GetAtt ecr.Arn\n    Export:\n      Name: ecr\n\n"
}
StackSet-HmAdmin-createIamRole-2e452091-0071-46ef-b222-0805a1e55a40
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "{\n  \"AWSTemplateFormatVersion\" : \"2010-09-09\",\n  \"Description\" : \"Template for Creating IAM Role to Switch from Internavi Login AWS Account\",\n  \"Parameters\" : {\n    \"TrustedAWSAccountId\" : {\n      \"AllowedPattern\" : \"^[0-9]*$\",\n      \"Type\" : \"String\",\n      \"Default\" : \"975196479634\",\n      \"Description\" : \"Trusted AWS Account ID\"\n    },\n    \"IAMRoleName\": {\n      \"Type\": \"String\",\n      \"Default\": \"HmAdmin\",\n      \"Description\": \"IAM Role Name\"\n    }\n  },\n  \"Resources\" : {\n    \"IAMRoleForEngineer\": {\n      \"Type\": \"AWS::IAM::Role\",\n      \"Properties\": {\n        \"AssumeRolePolicyDocument\": {\n          \"Version\": \"2012-10-17\",\n          \"Statement\": [\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"J0322720\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"J0116063\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JP300063\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JP310643\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JP311734\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            }\n          ]\n        },\n        \"ManagedPolicyArns\": [\n          \"arn:aws:iam::aws:policy/AdministratorAccess\"\n        ],\n        \"Path\": \"/\",\n        \"RoleName\": { \"Ref\" : \"IAMRoleName\" }\n      }\n    }\n  },\n  \"Outputs\" : {\n    \"IAMRoleArn\": {\n      \"Value\": { \"Fn::GetAtt\" : [ \"IAMRoleForEngineer\", \"Arn\" ] }\n    },\n    \"LinkForSwitchRole\": {\n      \"Value\": { \"Fn::Join\": [ \"\", [ \"https://signin.aws.amazon.com/switchrole?roleName=\", { \"Ref\" : \"IAMRoleName\" }, \"&account=\", { \"Ref\" : \"AWS::AccountId\" } ] ] }\n    }\n  }\n}\n"
}
StackSet-cm-cm-hamada-koji-iamRole-1246f68c-0fce-4f8f-bb95-aa7b6354129a
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": {
        "AWSTemplateFormatVersion": "2010-09-09", 
        "Description": "Template for Creating IAM Role to Switch from Classmethod AWS Account", 
        "Parameters": {
            "TrustedAWSAccountId": {
                "AllowedPattern": "^[0-9]*$", 
                "Type": "String", 
                "Default": "", 
                "Description": "Trusted AWS Account ID"
            }, 
            "IAMUserName": {
                "AllowedPattern": "^cm-[a-z.]*$", 
                "Type": "String", 
                "Default": "cm-xxx.xxx", 
                "Description": "IAM Role Name"
            }
        }, 
        "Resources": {
            "IAMRoleForCmEngineer": {
                "Type": "AWS::IAM::Role", 
                "Properties": {
                    "AssumeRolePolicyDocument": {
                        "Version": "2012-10-17", 
                        "Statement": [
                            {
                                "Effect": "Allow", 
                                "Principal": {
                                    "AWS": {
                                        "Fn::Join": [
                                            "", 
                                            [
                                                "arn:aws:iam::", 
                                                {
                                                    "Ref": "TrustedAWSAccountId"
                                                }, 
                                                ":user/", 
                                                {
                                                    "Ref": "IAMUserName"
                                                }
                                            ]
                                        ]
                                    }
                                }, 
                                "Action": [
                                    "sts:AssumeRole"
                                ], 
                                "Condition": {
                                    "Bool": {
                                        "aws:MultiFactorAuthPresent": "true"
                                    }
                                }
                            }
                        ]
                    }, 
                    "ManagedPolicyArns": [
                        "arn:aws:iam::aws:policy/AdministratorAccess"
                    ], 
                    "Path": "/", 
                    "RoleName": {
                        "Ref": "IAMUserName"
                    }
                }
            }
        }, 
        "Outputs": {
            "IAMRoleArn": {
                "Value": {
                    "Fn::GetAtt": [
                        "IAMRoleForCmEngineer", 
                        "Arn"
                    ]
                }
            }, 
            "LinkForSwitchRole": {
                "Value": {
                    "Fn::Join": [
                        "", 
                        [
                            "https://signin.aws.amazon.com/switchrole?roleName=", 
                            {
                                "Ref": "IAMUserName"
                            }, 
                            "&account=", 
                            {
                                "Ref": "AWS::AccountId"
                            }
                        ]
                    ]
                }
            }
        }
    }
}
StackSetsExecutionRole
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: 2010-09-09\nDescription: Configure the AWSCloudFormationStackSetExecutionRole to support AWS CloudFormation StackSets in a managed account.\n\nParameters:\n  MasterAccountId:\n    Type: String\n    Description: AWS Account Id of the master account (the account in which StackSets will be created).\n    MaxLength: 12\n    MinLength: 12\n\nResources:\n  ExecutionRole:\n    Type: AWS::IAM::Role\n    Properties:\n      RoleName: AWSCloudFormationStackSetExecutionRole\n      AssumeRolePolicyDocument: \n        Version: 2012-10-17\n        Statement: \n          - Effect: Allow\n            Principal: \n              AWS:\n                - !Ref MasterAccountId\n            Action: \n              - sts:AssumeRole\n      Path: /\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/AdministratorAccess\n"
}
cm-kikuchi-shuji-iamRole
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": {
        "AWSTemplateFormatVersion": "2010-09-09", 
        "Description": "Template for Creating IAM Role to Switch from Classmethod AWS Account", 
        "Parameters": {
            "TrustedAWSAccountId": {
                "AllowedPattern": "^[0-9]*$", 
                "Type": "String", 
                "Default": "", 
                "Description": "Trusted AWS Account ID"
            }, 
            "IAMUserName": {
                "AllowedPattern": "^cm-[a-z.]*$", 
                "Type": "String", 
                "Default": "cm-xxx.xxx", 
                "Description": "IAM Role Name"
            }
        }, 
        "Resources": {
            "IAMRoleForCmEngineer": {
                "Type": "AWS::IAM::Role", 
                "Properties": {
                    "AssumeRolePolicyDocument": {
                        "Version": "2012-10-17", 
                        "Statement": [
                            {
                                "Effect": "Allow", 
                                "Principal": {
                                    "AWS": {
                                        "Fn::Join": [
                                            "", 
                                            [
                                                "arn:aws:iam::", 
                                                {
                                                    "Ref": "TrustedAWSAccountId"
                                                }, 
                                                ":user/", 
                                                {
                                                    "Ref": "IAMUserName"
                                                }
                                            ]
                                        ]
                                    }
                                }, 
                                "Action": [
                                    "sts:AssumeRole"
                                ], 
                                "Condition": {
                                    "Bool": {
                                        "aws:MultiFactorAuthPresent": "true"
                                    }
                                }
                            }
                        ]
                    }, 
                    "ManagedPolicyArns": [
                        "arn:aws:iam::aws:policy/AdministratorAccess"
                    ], 
                    "Path": "/", 
                    "RoleName": {
                        "Ref": "IAMUserName"
                    }
                }
            }
        }, 
        "Outputs": {
            "IAMRoleArn": {
                "Value": {
                    "Fn::GetAtt": [
                        "IAMRoleForCmEngineer", 
                        "Arn"
                    ]
                }
            }, 
            "LinkForSwitchRole": {
                "Value": {
                    "Fn::Join": [
                        "", 
                        [
                            "https://signin.aws.amazon.com/switchrole?roleName=", 
                            {
                                "Ref": "IAMUserName"
                            }, 
                            "&account=", 
                            {
                                "Ref": "AWS::AccountId"
                            }
                        ]
                    ]
                }
            }
        }
    }
}
]
スクリプトを終了します
  1- INV-ver-htc01:arn:aws:iam::686753218709:role/OpeAdminRole
  2- INV-ver-sub01:arn:aws:iam::495152581087:role/OpeAdminRole
  3- INV-ver-cer01:arn:aws:iam::339311866652:role/OpeAdminRole
  4- INV-ver-des01:arn:aws:iam::302986797475:role/OpeAdminRole
  5- INV-ver-agw01:arn:aws:iam::859823971378:role/OpeAdminRole
  6- INV-ver-vdm01:arn:aws:iam::497617980196:role/OpeAdminRole
  7- INV-ver-wfi01:arn:aws:iam::932204081418:role/OpeAdminRole
  8- INV-ver-esp01:arn:aws:iam::131000633826:role/OpeAdminRole
  9- INV-ver-rmt01:arn:aws:iam::604584103104:role/OpeAdminRole
 10- INV-ver-esw01:arn:aws:iam::170541451228:role/OpeAdminRole
 11- INV-ver-tcu01:arn:aws:iam::951453431396:role/OpeAdminRole
 12- INV-ver-vky01:arn:aws:iam::207429400733:role/OpeAdminRole
     all- All Environments:select all environments
スクリプトを実行します。
aws cloudformation describe-stacks --query Stacks[*].StackName
{
    "Account": "975196479634", 
    "UserId": "AIDA6GDR5MCJLYN4JQRFZ", 
    "Arn": "arn:aws:iam::975196479634:user/JV010028"
}
{
    "Account": "932204081418", 
    "UserId": "AROA5SC5ROEFF6QAXYDCX:inv-20190702040913", 
    "Arn": "arn:aws:sts::932204081418:assumed-role/OpeAdminRole/inv-20190702040913"
}
[
inv-ver-wfi01-monitoring-lambda
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: \"2010-09-09\"\r\nDescription: \"monitoring-lambda.yml\"\r\nParameters: \r\n  EnvironmentName: \r\n    Default: ver\r\n    Description: \"Environment Name\"\r\n    Type: String\r\n  MicroServiceName: \r\n    Default: cer01\r\n    Description: \"MicroService Name\"\r\n    Type: String\r\n  S3Buckets: \r\n    Default: \"inv-ver-cer01-cfn\"\r\n    Description: \"source s3 backet name\"\r\n    Type: String\r\n  S3Prefix:\r\n    Default: \"monitor-config/\"\r\n    Description: \"source s3 backet file prefix\"\r\n    Type: String\r\n  iniFileName: \r\n    Default: \"monitor.json\"\r\n    Description: \"scenario file name\"\r\n    Type: String\r\n  scenarioSourceLogGroup:\r\n    Description: \"Scenario CWL log group name\"\r\n    Type: \"String\"\r\n  scenarioFilterPattern:\r\n    Default: \"\"\r\n    Description: \"Scenario Monitor CWL log FilterPattern\"\r\n    Type: \"String\"\r\n  programSourceLogGroup:\r\n    Description: \"program CWL log group name\"\r\n    Type: \"String\"\r\n  programFilterPattern:\r\n    Default: ?\"ERROR\" ?\"FATAL\" ?\"WARN\"\r\n    Description: \"program Monitor CWL log FilterPattern\"\r\n    Type: \"String\"\r\nResources:\r\n  IAMRole:\r\n    Type: \"AWS::IAM::Role\"\r\n    Properties: \r\n      AssumeRolePolicyDocument: \r\n        Version: \"2012-10-17\"\r\n        Statement: \r\n          - Effect: Allow\r\n            Principal: \r\n              Service: \"lambda.amazonaws.com\"\r\n            Action: \"sts:AssumeRole\"\r\n      ManagedPolicyArns: \r\n        - \"arn:aws:iam::aws:policy/AmazonSNSFullAccess\"\r\n      Path: \"/\"\r\n      Policies:\r\n        - PolicyName: monitor_lambda_policy\r\n          PolicyDocument:\r\n            Version: '2012-10-17'\r\n            Statement:\r\n              - Effect: Allow\r\n                Action:\r\n                  - cloudwatch:*\r\n                  - logs:*\r\n                  - s3:Get*\r\n                  - s3:List*\r\n                Resource: \"*\"\r\n      RoleName: !Sub inv-${EnvironmentName}-${MicroServiceName}-monitoring-lambda-role\r\n  LambdaLayer:\r\n    Type: \"AWS::Lambda::LayerVersion\"\r\n    Properties:\r\n      CompatibleRuntimes: \r\n        - python3.6\r\n      Content: \r\n        S3Bucket:\r\n          Ref: S3Buckets\r\n        S3Key: CloudwatchAlarm/metrics_mod.zip\r\n      Description: \"monitor_lambda_modules\"\r\n      LayerName: monitor_module\r\n  LambdaFunction: \r\n    DependsOn: \r\n      - IAMRole\r\n    Type: \"AWS::Lambda::Function\"\r\n    Properties: \r\n      Code: \r\n        S3Bucket: \r\n          Ref: S3Buckets\r\n        S3Key: CloudwatchAlarm/monitoring_common_lambda_src.zip           \r\n      FunctionName: !Sub inv-${EnvironmentName}-${MicroServiceName}-monitoring_common_lambda\r\n      Handler: lambda_function.lambda_handler\r\n      Environment: \r\n        Variables: \r\n          ENV: \r\n            Ref: EnvironmentName\r\n          STG: \r\n            Ref: MicroServiceName\r\n          fileName:\r\n            Ref: iniFileName\r\n          s3Bucket:\r\n            Ref: S3Buckets\r\n          s3keyPrefix:\r\n            Ref: S3Prefix\r\n      Role: \r\n        \"Fn::GetAtt\": \r\n          - IAMRole\r\n          - Arn\r\n      Runtime: \"python3.6\"\r\n      MemorySize: 512\r\n      Timeout: 300\r\n      Layers:\r\n        - !Ref LambdaLayer\r\n  LambdaPermission: \r\n    Type: \"AWS::Lambda::Permission\"\r\n    Properties: \r\n      Action: \"lambda:InvokeFunction\"\r\n      FunctionName: \r\n        \"Fn::GetAtt\": \r\n          - LambdaFunction\r\n          - Arn\r\n      Principal: !Sub \"sns.amazonaws.com\"\r\n      SourceArn: !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:inv-${EnvironmentName}-${MicroServiceName}\r\n  ScenarioSubscriptionFilter:\r\n    DependsOn:\r\n      - ScenarioLambdaInvokePermission\r\n    Type: \"AWS::Logs::SubscriptionFilter\"\r\n    Properties:\r\n      LogGroupName: !Ref scenarioSourceLogGroup\r\n      FilterPattern: !Ref scenarioFilterPattern\r\n      DestinationArn: !Join\r\n        - ''\r\n        - - !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:'\r\n          - !Sub inv-${EnvironmentName}-${MicroServiceName}-monitoring_common_lambda\r\n  ScenarioLambdaInvokePermission:\r\n    Type: 'AWS::Lambda::Permission'\r\n    Properties:\r\n      FunctionName:\r\n        \"Fn::GetAtt\": \r\n          - LambdaFunction\r\n          - Arn\r\n      Action: \"lambda:InvokeFunction\"\r\n      Principal: !Sub \"logs.amazonaws.com\"\r\n      SourceAccount: !Ref AWS::AccountId\r\n      SourceArn: !Sub \"arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${scenarioSourceLogGroup}:*\"\r\n  ProgramSubscriptionFilter:\r\n    DependsOn:\r\n      - ProgramLambdaInvokePermission\r\n    Type: \"AWS::Logs::SubscriptionFilter\"\r\n    Properties:\r\n      LogGroupName: !Ref programSourceLogGroup\r\n      FilterPattern: !Ref programFilterPattern\r\n      DestinationArn: !Join\r\n        - ''\r\n        - - !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:'\r\n          - !Sub inv-${EnvironmentName}-${MicroServiceName}-monitoring_common_lambda\r\n  ProgramLambdaInvokePermission:\r\n    Type: 'AWS::Lambda::Permission'\r\n    Properties:\r\n      FunctionName:\r\n        \"Fn::GetAtt\": \r\n          - LambdaFunction\r\n          - Arn\r\n      Action: \"lambda:InvokeFunction\"\r\n      Principal: !Sub \"logs.amazonaws.com\"\r\n      SourceAccount: !Ref AWS::AccountId\r\n      SourceArn: !Sub \"arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${programSourceLogGroup}:*\"\r\nOutputs: \r\n  IAMRole: \r\n    Description: \"IAM Role Name\"\r\n    Value: \r\n      Ref: IAMRole\r\n  SNSTopic: \r\n    Description: \"SNS Topic Name\"\r\n    Value: \r\n      !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:inv-${EnvironmentName}-${MicroServiceName}\r\n  LambdaFunction: \r\n    Description: \"Lambda Function Name\"\r\n    Value: \r\n      Ref: LambdaFunction"
}
enable-guardduty
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: 2010-09-09\nDescription:\n  \"enable guardduty\"\nResources:\n  GDD:\n    Type: \"AWS::GuardDuty::Detector\"\n    Properties:\n      Enable: true"
}
INV-ver-wfi01-manage-metrics-alarm
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: \"2010-09-09\"\r\nDescription: \"create_metrics_alarm.yaml\"\r\nParameters:\r\n  EnvironmentName:\r\n    Default: \"ver\"\r\n    Description: \"EnvironmentName\"\r\n    Type: String\r\n  MicroServiceName: \r\n    Default: \"cer01\"\r\n    Description: \"MicroServiceName\"\r\n    Type: String\r\n  s3keyprefix: \r\n    Default: \"_manage_metrics_alarm.xlsx\"\r\n    Description: \"excel s3 keys prefix\"\r\n    Type: String\r\n  S3Buckets: \r\n    Default: \"inv-ver-cer01-cfn\"\r\n    Description: \"source s3 backet name\"\r\n    Type: String\r\nResources: \r\n  IAMRole: \r\n    Type: \"AWS::IAM::Role\"\r\n    Properties: \r\n      AssumeRolePolicyDocument: \r\n        Version: \"2012-10-17\"\r\n        Statement: \r\n          - Effect: Allow\r\n            Principal: \r\n              Service: \"lambda.amazonaws.com\"\r\n            Action: \"sts:AssumeRole\"\r\n      ManagedPolicyArns: \r\n        - \"arn:aws:iam::aws:policy/AmazonS3FullAccess\"\r\n      Path: \"/\"\r\n      Policies:\r\n        - PolicyName: manage_metrics_alarm_lambda_policy\r\n          PolicyDocument:\r\n            Version: '2012-10-17'\r\n            Statement:\r\n              - Effect: Allow\r\n                Action:\r\n                  - cloudwatch:*\r\n                  - logs:*\r\n                Resource: \"*\"\r\n      RoleName: !Sub inv-${EnvironmentName}-${MicroServiceName}-manage-metrics-alarm-lambda-role\r\n  LambdaLayer:\r\n    Type: \"AWS::Lambda::LayerVersion\"\r\n    Properties:\r\n      CompatibleRuntimes: \r\n        - python3.6\r\n      Content: \r\n        S3Bucket:\r\n          Ref: S3Buckets\r\n        S3Key: CloudwatchAlarm/metrics_mod.zip\r\n      Description: \"manage_cloudwatch metrics alarm modules\"\r\n      LayerName: metrics_module\r\n  LambdaFunction: \r\n    DependsOn: \r\n      - IAMRole\r\n    Type: \"AWS::Lambda::Function\"\r\n    Properties: \r\n      Code: \r\n        S3Bucket: \r\n          Ref: S3Buckets\r\n        S3Key: CloudwatchAlarm/manage_metrics_alarm_src.zip\r\n      FunctionName: !Sub inv-${EnvironmentName}-${MicroServiceName}-manage-metrics-alarm-lambda\r\n      Handler: lambda_function.lambda_handler\r\n      Environment: \r\n        Variables: \r\n          fileprefix: \r\n            Ref: s3keyprefix\r\n          s3Bucket: !Sub inv-${EnvironmentName}-${MicroServiceName}-manage-metrics-alarm\r\n      Role: \r\n        \"Fn::GetAtt\": \r\n          - IAMRole\r\n          - Arn\r\n      Runtime: \"python3.6\"\r\n      MemorySize: 512\r\n      Timeout: 300\r\n      Layers:\r\n        - !Ref LambdaLayer\r\n  LambdaPermission: \r\n    Type: \"AWS::Lambda::Permission\"\r\n    Properties: \r\n      Action: \"lambda:InvokeFunction\"\r\n      FunctionName: \r\n        \"Fn::GetAtt\": \r\n          - LambdaFunction\r\n          - Arn\r\n      Principal: s3.amazonaws.com\r\n      SourceAccount: !Ref 'AWS::AccountId'\r\n      SourceArn: !Join\r\n        - ''\r\n        - - 'arn:aws:s3:::'\r\n          - !Sub inv-${EnvironmentName}-${MicroServiceName}-manage-metrics-alarm\r\n  S3Bucket:\r\n    Type: \"AWS::S3::Bucket\"\r\n    DependsOn: \r\n      - LambdaPermission\r\n    Properties:\r\n      BucketName: !Sub inv-${EnvironmentName}-${MicroServiceName}-manage-metrics-alarm\r\n      AccessControl: Private\r\n      PublicAccessBlockConfiguration:\r\n        BlockPublicAcls: True\r\n        BlockPublicPolicy: True\r\n        IgnorePublicAcls: True\r\n        RestrictPublicBuckets: True\r\n      NotificationConfiguration:\r\n        LambdaConfigurations:\r\n          - Event: \"s3:ObjectCreated:*\"\r\n            Filter:\r\n              S3Key:\r\n                Rules:\r\n                  - Name: suffix\r\n                    Value: xlsx\r\n            Function: !GetAtt\r\n              - LambdaFunction\r\n              - Arn\r\n  S3BucketPolicy:\r\n    Type: AWS::S3::BucketPolicy\r\n    Properties: \r\n      Bucket: \r\n        Ref: \"S3Bucket\"\r\n      PolicyDocument: \r\n        Version: \"2012-10-17\"\r\n        Statement: \r\n          - \r\n            Action: \r\n              - \"s3:GetObject\"\r\n            Effect: \"Allow\"\r\n            Resource: \r\n              Fn::Join: \r\n                - \"\"\r\n                - \r\n                  - \"arn:aws:s3:::\"\r\n                  - \r\n                    Ref: \"S3Bucket\"\r\n                  - \"/*\"\r\n            Principal: \r\n              AWS:\r\n                Fn::Join:\r\n                  - \"\"\r\n                  - \r\n                    - \"arn:aws:iam::\"\r\n                    - Ref: \"AWS::AccountId\"\r\n                    - \":root\"\r\nOutputs: \r\n  IAMRole: \r\n    Description: \"IAM Role Name\"\r\n    Value: \r\n      Ref: IAMRole\r\n  S3BucketName:\r\n    Value:\r\n      Ref S3BucketName\r\n  LambdaFunction: \r\n    Description: \"Lambda Function Name\"\r\n    Value: \r\n      Ref: LambdaFunction"
}
StackSet-J0126970-createIamRole-070418fd-4386-4ce6-a5f0-2b75d3c8979f
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "{\n  \"AWSTemplateFormatVersion\" : \"2010-09-09\",\n  \"Description\" : \"Template for Creating IAM Role to Switch from Internavi Login AWS Account\",\n  \"Parameters\" : {\n    \"TrustedAWSAccountId\" : {\n      \"AllowedPattern\" : \"^[0-9]*$\",\n      \"Type\" : \"String\",\n      \"Default\" : \"975196479634\",\n      \"Description\" : \"Trusted AWS Account ID\"\n    },\n    \"IAMRoleName\": {\n      \"Type\": \"String\",\n      \"Default\": \"HmSolUser\",\n      \"Description\": \"IAM Role Name\"\n    },\n    \"IAMPolicyType\": {\n      \"Type\": \"String\",\n      \"Default\": \"HmSolUser\",\n      \"Description\": \"IAM Policy Type\",\n      \"AllowedValues\": [ \"HmSolUser\", \"HmAdmin\" ]\n    },\n    \"IAMUserName\": {\n      \"Type\": \"String\",\n      \"Default\": \"\",\n      \"Description\": \"IAM User Name\"\n    }\n  },\n  \"Conditions\" : {\n    \"user\"        : { \"Fn::Equals\" : [{\"Ref\" : \"IAMPolicyType\"}, \"HmSolUser\" ]},\n    \"admin\"        : { \"Fn::Equals\" : [{\"Ref\" : \"IAMPolicyType\"}, \"HmAdmin\" ]}\n  },\n  \"Resources\" : {\n    \"IAMRoleForAdmin\": {\n      \"Type\": \"AWS::IAM::Role\",\n      \"Condition\" : \"admin\",\n      \"Properties\": {\n        \"AssumeRolePolicyDocument\": {\n          \"Version\": \"2012-10-17\",\n          \"Statement\": [\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", { \"Ref\" : \"IAMUserName\" } ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            }\n          ]\n        },\n        \"ManagedPolicyArns\": [\n          \"arn:aws:iam::aws:policy/AdministratorAccess\"\n        ],\n        \"Path\": \"/\",\n        \"RoleName\": { \"Ref\" : \"IAMRoleName\" }\n      }\n    },\n    \"IAMRoleForUser\": {\n      \"Type\": \"AWS::IAM::Role\",\n      \"Condition\" : \"user\",\n      \"Properties\": {\n        \"AssumeRolePolicyDocument\": {\n          \"Version\": \"2012-10-17\",\n          \"Statement\": [\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", { \"Ref\" : \"IAMUserName\" } ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            }\n          ]\n        },\n        \"ManagedPolicyArns\": [\n          \"arn:aws:iam::aws:policy/AdministratorAccess\"\n        ],\n        \"Path\": \"/\",\n        \"RoleName\": { \"Ref\" : \"IAMRoleName\" }\n      }\n    }\n  },\n  \"Outputs\" : {\n    \"IAMRoleAdminArn\": {\n      \"Value\": { \"Fn::GetAtt\" : [ \"IAMRoleForAdmin\", \"Arn\" ] },\n      \"Condition\" : \"admin\"\n    },\n    \"IAMRoleUserArn\": {\n      \"Value\": { \"Fn::GetAtt\" : [ \"IAMRoleForUser\", \"Arn\" ] },\n      \"Condition\" : \"user\"\n    },\n    \"LinkForSwitchRole\": {\n      \"Value\": { \"Fn::Join\": [ \"\", [ \"https://signin.aws.amazon.com/switchrole?roleName=\", { \"Ref\" : \"IAMRoleName\" }, \"&account=\", { \"Ref\" : \"AWS::AccountId\" } ] ] }\n    }\n  }\n}\n"
}
StackSet-InfraAdmin-CreateIamRole-b676fde1-b818-4ff5-9670-53c316865b0f
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": {
        "AWSTemplateFormatVersion": "2010-09-09", 
        "Description": "Template for Creating IAM Role to Switch from Internavi Login AWS Account", 
        "Parameters": {
            "TrustedAWSAccountId": {
                "AllowedPattern": "^[0-9]*$", 
                "Type": "String", 
                "Default": "975196479634", 
                "Description": "Trusted AWS Account ID"
            }, 
            "IAMRoleName": {
                "Type": "String", 
                "Default": "InfraAdmin", 
                "Description": "IAM Role Name"
            }
        }, 
        "Resources": {
            "IAMRoleForEngineer": {
                "Type": "AWS::IAM::Role", 
                "Properties": {
                    "AssumeRolePolicyDocument": {
                        "Version": "2012-10-17", 
                        "Statement": [
                            {
                                "Effect": "Allow", 
                                "Principal": {
                                    "AWS": {
                                        "Fn::Join": [
                                            "", 
                                            [
                                                "arn:aws:iam::", 
                                                {
                                                    "Ref": "TrustedAWSAccountId"
                                                }, 
                                                ":user/", 
                                                "JV010031"
                                            ]
                                        ]
                                    }
                                }, 
                                "Action": [
                                    "sts:AssumeRole"
                                ], 
                                "Condition": {
                                    "Bool": {
                                        "aws:MultiFactorAuthPresent": "true"
                                    }
                                }
                            }, 
                            {
                                "Effect": "Allow", 
                                "Principal": {
                                    "AWS": {
                                        "Fn::Join": [
                                            "", 
                                            [
                                                "arn:aws:iam::", 
                                                {
                                                    "Ref": "TrustedAWSAccountId"
                                                }, 
                                                ":user/", 
                                                "JV010024"
                                            ]
                                        ]
                                    }
                                }, 
                                "Action": [
                                    "sts:AssumeRole"
                                ], 
                                "Condition": {
                                    "Bool": {
                                        "aws:MultiFactorAuthPresent": "true"
                                    }
                                }
                            }
                        ]
                    }, 
                    "ManagedPolicyArns": [
                        "arn:aws:iam::aws:policy/AdministratorAccess"
                    ], 
                    "Path": "/", 
                    "RoleName": {
                        "Ref": "IAMRoleName"
                    }
                }
            }
        }, 
        "Outputs": {
            "IAMRoleArn": {
                "Value": {
                    "Fn::GetAtt": [
                        "IAMRoleForEngineer", 
                        "Arn"
                    ]
                }
            }, 
            "LinkForSwitchRole": {
                "Value": {
                    "Fn::Join": [
                        "", 
                        [
                            "https://signin.aws.amazon.com/switchrole?roleName=", 
                            {
                                "Ref": "IAMRoleName"
                            }, 
                            "&account=", 
                            {
                                "Ref": "AWS::AccountId"
                            }
                        ]
                    ]
                }
            }
        }
    }
}
INV-ver-wfi01-nginx-codepipeline-ver
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: codepipeline\n\n# ------------------------------------------------------------#\n#  Parameters\n# ------------------------------------------------------------#\nParameters:\n  accountAllias:\n    Type: String\n  accountAlliasLowerCase:\n    Type: String\n\nResources:\n# ------------------------------------------------------------#\n#  Role\n# ------------------------------------------------------------#\n  nginxCodeBuildRoleVer:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement: \n          - Effect: \"Allow\"\n            Principal: \n              Service: \n                - \"codebuild.amazonaws.com\"\n            Action: \n              - \"sts:AssumeRole\"\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess\n        - arn:aws:iam::aws:policy/AmazonS3FullAccess\n        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess\n  nginxCodePipelineRoleVer:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement: \n          - Effect: \"Allow\"\n            Principal: \n              Service: \n                - \"codepipeline.amazonaws.com\"\n            Action: \n              - \"sts:AssumeRole\"\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess\n        - arn:aws:iam::aws:policy/AWSCodeCommitFullAccess\n        - arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess\n        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess\n        - arn:aws:iam::aws:policy/AmazonS3FullAccess\n        - arn:aws:iam::aws:policy/CloudWatchFullAccess\n        - arn:aws:iam::aws:policy/AmazonEC2ContainerServiceFullAccess\n\n# ------------------------------------------------------------#\n#  CodeBuild\n# ------------------------------------------------------------#\n  nginxCodeBuildProjectVer:\n    Type: AWS::CodeBuild::Project\n    Properties:\n      Name: !Sub ${accountAlliasLowerCase}-nginx-build-project-ver\n      Artifacts:\n        Type: CODEPIPELINE\n      Description: !Sub Building stage for ${accountAlliasLowerCase}-ver\n      Environment:\n        ComputeType: BUILD_GENERAL1_SMALL\n        EnvironmentVariables:\n          - Name: AWS_ACCOUNT_ID\n            Value: !Ref AWS::AccountId\n          - Name: IMAGE_NAME\n            Value: !Sub ${accountAlliasLowerCase}-nginx-ecr\n          - Name: CONTAINER_NAME\n            Value: !Sub ${accountAlliasLowerCase}-nginx-container\n        Image: aws/codebuild/java:openjdk-8\n        Type: LINUX_CONTAINER\n        PrivilegedMode: True\n      ServiceRole: !Ref nginxCodeBuildRoleVer\n      Source:\n        Type: CODEPIPELINE\n        BuildSpec: |\n          version: 0.2 \n          phases:\n            build:\n              commands:\n                - REPOSITORY_URI=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_NAME}\n                - IMAGE_TAG=latest\n                - echo \"[{\\\"name\\\":\\\"${CONTAINER_NAME}\\\",\\\"imageUri\\\":\\\"${REPOSITORY_URI}:${IMAGE_TAG}\\\"}]\"\n                - echo \"[{\\\"name\\\":\\\"${CONTAINER_NAME}\\\",\\\"imageUri\\\":\\\"${REPOSITORY_URI}:${IMAGE_TAG}\\\"}]\" > imagedefinitions.json\n          artifacts:\n              files: imagedefinitions.json\n      TimeoutInMinutes: 30\n# ------------------------------------------------------------#\n#  S3\n# ------------------------------------------------------------#\n  nginxS3bucketforcodepipelineVer:\n    Type: AWS::S3::Bucket\n    Properties:\n      BucketName: !Sub ${accountAlliasLowerCase}-nginx-codepipeline-ver\n# ------------------------------------------------------------#\n#  CodePipeline\n# ------------------------------------------------------------#\n  nginxCodePipelineVer:\n    Type: AWS::CodePipeline::Pipeline\n    DependsOn: nginxS3bucketforcodepipelineVer\n    Properties:\n      ArtifactStore:\n        Location: !Ref nginxS3bucketforcodepipelineVer \n        Type: S3\n      Name: !Sub ${accountAlliasLowerCase}-nginx-codepipeline-ver\n      RestartExecutionOnUpdate: false\n      RoleArn: !GetAtt nginxCodePipelineRoleVer.Arn\n      Stages:\n        - Name: Source\n          Actions:\n            - Name: SourceAction\n              ActionTypeId: \n                Category: Source\n                Owner: AWS\n                Provider: ECR\n                Version: 1\n              OutputArtifacts: \n                - Name: SourceArtifact\n              Configuration: \n                RepositoryName: !Sub ${accountAlliasLowerCase}-nginx-ecr\n              RunOrder: 1\n        - Name: Build\n          Actions:\n            - Name: CodeBuild\n              InputArtifacts:\n                - Name: SourceArtifact\n              ActionTypeId: \n                Category: Build\n                Owner: AWS\n                Provider: CodeBuild\n                Version: 1\n              Configuration: \n                ProjectName: !Ref nginxCodeBuildProjectVer\n              OutputArtifacts: \n                - Name: CodebuildOutput\n              RunOrder: 1\n        - Name: Staging\n          Actions:\n            - Name: Deploy2vehicleApiService\n              InputArtifacts:\n                - Name: CodebuildOutput\n              ActionTypeId: \n                Category: Deploy\n                Owner: AWS\n                Provider: ECS\n                Version: 1\n              Configuration:\n                ClusterName: !ImportValue wifiCluster\n                FileName: imagedefinitions.json\n                ServiceName: !ImportValue vehicleApiService\n              OutputArtifacts: []\n              RunOrder: 1\n            - Name: Deploy2serviceApiService\n              InputArtifacts:\n                - Name: CodebuildOutput\n              ActionTypeId: \n                Category: Deploy\n                Owner: AWS\n                Provider: ECS\n                Version: 1\n              Configuration:\n                ClusterName: !ImportValue wifiCluster\n                FileName: imagedefinitions.json\n                ServiceName: !ImportValue serviceApiService\n              OutputArtifacts: []\n              RunOrder: 1\n# ------------------------------------------------------------#\n#  CloudWatch Event\n# ------------------------------------------------------------#\n  nginxCloudWatchEventRoleVer:\n    Type: 'AWS::IAM::Role'\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service:\n                - events.amazonaws.com\n            Action: 'sts:AssumeRole'\n      Path: /\n      Policies:\n        - PolicyName: cwe-pipeline-execution\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Effect: Allow\n                Action: 'codepipeline:StartPipelineExecution'\n                Resource: !Join \n                  - ''\n                  - - 'arn:aws:codepipeline:'\n                    - !Ref 'AWS::Region'\n                    - ':'\n                    - !Ref 'AWS::AccountId'\n                    - ':'\n                    - !Ref nginxCodePipelineVer\n  nginxCloudwatchEventsRuleVer:\n    Type: AWS::Events::Rule\n    Properties:\n      EventPattern:\n        source:\n          - aws.ecr\n        detail:\n          eventName:\n            - PutImage\n          requestParameters:\n            repositoryName: \n              - !Sub ${accountAlliasLowerCase}-nginx-ecr\n            imageTag: \n              - latest\n      Targets:\n        - Arn:  !Join \n          - ''\n          - - 'arn:aws:codepipeline:'\n            - !Ref 'AWS::Region'\n            - ':'\n            - !Ref 'AWS::AccountId'\n            - ':'\n            - !Ref nginxCodePipelineVer\n          Id: !Sub ${accountAlliasLowerCase}-nginx-codepipeline-ver\n          RoleArn: !GetAtt nginxCloudWatchEventRoleVer.Arn\n\n# ------------------------------------------------------------#\n#  Outputs\n# ------------------------------------------------------------#\nOutputs:\n  nginxCodeBuildRoleVer:\n    Value: !Ref nginxCodeBuildRoleVer\n    Export:\n      Name: nginxCodeBuildRoleVer\n  nginxCodePipelineRoleVer:\n    Value: !Ref nginxCodePipelineRoleVer\n    Export:\n      Name: nginxCodePipelineRoleVer\n  nginxCodeBuildProjectVer:\n    Value: !Ref nginxCodeBuildProjectVer\n    Export:\n      Name: nginxCodeBuildProjectVer\n  nginxS3bucketforcodepipelineVer:\n    Value: !Ref nginxS3bucketforcodepipelineVer\n    Export:\n      Name: nginxS3bucketforcodepipelineVer\n  nginxCodePipelineVer:\n    Value: !Ref nginxCodePipelineVer\n    Export:\n      Name: nginxCodePipelineVer\n  nginxCloudWatchEventRoleVer:\n    Value: !Ref nginxCloudWatchEventRoleVer\n    Export:\n      Name: nginxCloudWatchEventRoleVer\n  nginxCloudwatchEventsRuleVer:\n    Value: !Ref nginxCloudwatchEventsRuleVer\n    Export:\n      Name: nginxCloudwatchEventsRuleVer\n\n"
}
INV-ver-wfi01-jasper-control-codepipeline-ver
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: codepipeline\n\n# ------------------------------------------------------------#\n#  Parameters\n# ------------------------------------------------------------#\nParameters:\n  accountAllias:\n    Type: String\n  accountAlliasLowerCase:\n    Type: String\n\nResources:\n# ------------------------------------------------------------#\n#  Role\n# ------------------------------------------------------------#\n  jasperControlCodeBuildRoleVer:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement: \n          - Effect: \"Allow\"\n            Principal: \n              Service: \n                - \"codebuild.amazonaws.com\"\n            Action: \n              - \"sts:AssumeRole\"\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess\n        - arn:aws:iam::aws:policy/AmazonS3FullAccess\n        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess\n  jasperControlCodePipelineRoleVer:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement: \n          - Effect: \"Allow\"\n            Principal: \n              Service: \n                - \"codepipeline.amazonaws.com\"\n            Action: \n              - \"sts:AssumeRole\"\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess\n        - arn:aws:iam::aws:policy/AWSCodeCommitFullAccess\n        - arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess\n        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess\n        - arn:aws:iam::aws:policy/AmazonS3FullAccess\n        - arn:aws:iam::aws:policy/CloudWatchFullAccess\n        - arn:aws:iam::aws:policy/AmazonEC2ContainerServiceFullAccess\n\n# ------------------------------------------------------------#\n#  CodeBuild\n# ------------------------------------------------------------#\n  jasperControlCodeBuildProjectVer:\n    Type: AWS::CodeBuild::Project\n    Properties:\n      Name: !Sub ${accountAlliasLowerCase}-jasper-control-build-project-ver\n      Artifacts:\n        Type: CODEPIPELINE\n      Description: !Sub Building stage for ${accountAlliasLowerCase}-ver\n      Environment:\n        ComputeType: BUILD_GENERAL1_SMALL\n        EnvironmentVariables:\n          - Name: AWS_ACCOUNT_ID\n            Value: !Ref AWS::AccountId\n          - Name: IMAGE_NAME\n            Value: !Sub ${accountAlliasLowerCase}-jasper-control-ecr\n          - Name: CONTAINER_NAME\n            Value: !Sub ${accountAlliasLowerCase}-jasper-control-container\n        Image: aws/codebuild/java:openjdk-8\n        Type: LINUX_CONTAINER\n        PrivilegedMode: True\n      ServiceRole: !Ref jasperControlCodeBuildRoleVer\n      Source:\n        Type: CODEPIPELINE\n        BuildSpec: |\n          version: 0.2 \n          phases:\n            build:\n              commands:\n                - REPOSITORY_URI=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_NAME}\n                - IMAGE_TAG=latest\n                - echo \"[{\\\"name\\\":\\\"${CONTAINER_NAME}\\\",\\\"imageUri\\\":\\\"${REPOSITORY_URI}:${IMAGE_TAG}\\\"}]\"\n                - echo \"[{\\\"name\\\":\\\"${CONTAINER_NAME}\\\",\\\"imageUri\\\":\\\"${REPOSITORY_URI}:${IMAGE_TAG}\\\"}]\" > imagedefinitions.json\n          artifacts:\n              files: imagedefinitions.json\n      TimeoutInMinutes: 30\n# ------------------------------------------------------------#\n#  S3\n# ------------------------------------------------------------#\n  jasperControlS3bucketforcodepipelineVer:\n    Type: AWS::S3::Bucket\n    Properties:\n      BucketName: !Sub ${accountAlliasLowerCase}-jasper-control-codepipeline-ver\n# ------------------------------------------------------------#\n#  CodePipeline\n# ------------------------------------------------------------#\n  jasperControlCodePipelineVer:\n    Type: AWS::CodePipeline::Pipeline\n    DependsOn: jasperControlS3bucketforcodepipelineVer\n    Properties:\n      ArtifactStore:\n        Location: !Ref jasperControlS3bucketforcodepipelineVer \n        Type: S3\n      Name: !Sub ${accountAlliasLowerCase}-jasper-control-codepipeline-ver\n      RestartExecutionOnUpdate: false\n      RoleArn: !GetAtt jasperControlCodePipelineRoleVer.Arn\n      Stages:\n        - Name: Source\n          Actions:\n            - Name: SourceAction\n              ActionTypeId: \n                Category: Source\n                Owner: AWS\n                Provider: ECR\n                Version: 1\n              OutputArtifacts: \n                - Name: SourceArtifact\n              Configuration: \n                RepositoryName: !Sub ${accountAlliasLowerCase}-jasper-control-ecr\n              RunOrder: 1\n        - Name: Build\n          Actions:\n            - Name: CodeBuild\n              InputArtifacts:\n                - Name: SourceArtifact\n              ActionTypeId: \n                Category: Build\n                Owner: AWS\n                Provider: CodeBuild\n                Version: 1\n              Configuration: \n                ProjectName: !Ref jasperControlCodeBuildProjectVer\n              OutputArtifacts: \n                - Name: CodebuildOutput\n              RunOrder: 1\n        - Name: Staging\n          Actions:\n            - Name: Deploy2jasperControl\n              InputArtifacts:\n                - Name: CodebuildOutput\n              ActionTypeId: \n                Category: Deploy\n                Owner: AWS\n                Provider: ECS\n                Version: 1\n              Configuration:\n                ClusterName: !ImportValue wifiCluster\n                FileName: imagedefinitions.json\n                ServiceName: !ImportValue jasperControlService\n              OutputArtifacts: []\n              RunOrder: 1\n# ------------------------------------------------------------#\n#  CloudWatch Event\n# ------------------------------------------------------------#\n  jasperControlCloudWatchEventRoleVer:\n    Type: 'AWS::IAM::Role'\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service:\n                - events.amazonaws.com\n            Action: 'sts:AssumeRole'\n      Path: /\n      Policies:\n        - PolicyName: cwe-pipeline-execution\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Effect: Allow\n                Action: 'codepipeline:StartPipelineExecution'\n                Resource: !Join \n                  - ''\n                  - - 'arn:aws:codepipeline:'\n                    - !Ref 'AWS::Region'\n                    - ':'\n                    - !Ref 'AWS::AccountId'\n                    - ':'\n                    - !Ref jasperControlCodePipelineVer\n  jasperControlCloudwatchEventsRuleVer:\n    Type: AWS::Events::Rule\n    Properties:\n      EventPattern:\n        source:\n          - aws.ecr\n        detail:\n          eventName:\n            - PutImage\n          requestParameters:\n            repositoryName: \n              - !Sub ${accountAlliasLowerCase}-jasper-control-ecr\n            imageTag: \n              - latest\n      Targets:\n        - Arn:  !Join \n          - ''\n          - - 'arn:aws:codepipeline:'\n            - !Ref 'AWS::Region'\n            - ':'\n            - !Ref 'AWS::AccountId'\n            - ':'\n            - !Ref jasperControlCodePipelineVer\n          Id: !Sub ${accountAlliasLowerCase}-jasper-control-codepipeline-ver\n          RoleArn: !GetAtt jasperControlCloudWatchEventRoleVer.Arn\n\n# ------------------------------------------------------------#\n#  Outputs\n# ------------------------------------------------------------#\nOutputs:\n  jasperControlCodeBuildRoleVer:\n    Value: !Ref jasperControlCodeBuildRoleVer\n    Export:\n      Name: jasperControlCodeBuildRoleVer\n  jasperControlCodePipelineRoleVer:\n    Value: !Ref jasperControlCodePipelineRoleVer\n    Export:\n      Name: jasperControlCodePipelineRoleVer\n  jasperControlCodeBuildProjectVer:\n    Value: !Ref jasperControlCodeBuildProjectVer\n    Export:\n      Name: jasperControlCodeBuildProjectVer\n  jasperControlS3bucketforcodepipelineVer:\n    Value: !Ref jasperControlS3bucketforcodepipelineVer\n    Export:\n      Name: jasperControlS3bucketforcodepipelineVer\n  jasperControlCodePipelineVer:\n    Value: !Ref jasperControlCodePipelineVer\n    Export:\n      Name: jasperControlCodePipelineVer\n  jasperControlCloudWatchEventRoleVer:\n    Value: !Ref jasperControlCloudWatchEventRoleVer\n    Export:\n      Name: jasperControlCloudWatchEventRoleVer\n  jasperControlCloudwatchEventsRuleVer:\n    Value: !Ref jasperControlCloudwatchEventsRuleVer\n    Export:\n      Name: jasperControlCloudwatchEventsRuleVer\n\n"
}
INV-ver-wfi01-service-api-codepipeline-ver
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: codepipeline\n\n# ------------------------------------------------------------#\n#  Parameters\n# ------------------------------------------------------------#\nParameters:\n  accountAllias:\n    Type: String\n  accountAlliasLowerCase:\n    Type: String\n\nResources:\n# ------------------------------------------------------------#\n#  Role\n# ------------------------------------------------------------#\n  serviceApiCodeBuildRoleVer:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement: \n          - Effect: \"Allow\"\n            Principal: \n              Service: \n                - \"codebuild.amazonaws.com\"\n            Action: \n              - \"sts:AssumeRole\"\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess\n        - arn:aws:iam::aws:policy/AmazonS3FullAccess\n        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess\n  serviceApiCodePipelineRoleVer:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement: \n          - Effect: \"Allow\"\n            Principal: \n              Service: \n                - \"codepipeline.amazonaws.com\"\n            Action: \n              - \"sts:AssumeRole\"\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess\n        - arn:aws:iam::aws:policy/AWSCodeCommitFullAccess\n        - arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess\n        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess\n        - arn:aws:iam::aws:policy/AmazonS3FullAccess\n        - arn:aws:iam::aws:policy/CloudWatchFullAccess\n        - arn:aws:iam::aws:policy/AmazonEC2ContainerServiceFullAccess\n\n# ------------------------------------------------------------#\n#  CodeBuild\n# ------------------------------------------------------------#\n  serviceApiCodeBuildProjectVer:\n    Type: AWS::CodeBuild::Project\n    Properties:\n      Name: !Sub ${accountAlliasLowerCase}-service-api-build-project-ver\n      Artifacts:\n        Type: CODEPIPELINE\n      Description: !Sub Building stage for ${accountAlliasLowerCase}-ver\n      Environment:\n        ComputeType: BUILD_GENERAL1_SMALL\n        EnvironmentVariables:\n          - Name: AWS_ACCOUNT_ID\n            Value: !Ref AWS::AccountId\n          - Name: IMAGE_NAME\n            Value: !Sub ${accountAlliasLowerCase}-service-api-ecr\n          - Name: CONTAINER_NAME\n            Value: !Sub ${accountAlliasLowerCase}-service-api-app-container\n        Image: aws/codebuild/java:openjdk-8\n        Type: LINUX_CONTAINER\n        PrivilegedMode: True\n      ServiceRole: !Ref serviceApiCodeBuildRoleVer\n      Source:\n        Type: CODEPIPELINE\n        BuildSpec: |\n          version: 0.2 \n          phases:\n            build:\n              commands:\n                - REPOSITORY_URI=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_NAME}\n                - IMAGE_TAG=latest\n                - echo \"[{\\\"name\\\":\\\"${CONTAINER_NAME}\\\",\\\"imageUri\\\":\\\"${REPOSITORY_URI}:${IMAGE_TAG}\\\"}]\"\n                - echo \"[{\\\"name\\\":\\\"${CONTAINER_NAME}\\\",\\\"imageUri\\\":\\\"${REPOSITORY_URI}:${IMAGE_TAG}\\\"}]\" > imagedefinitions.json\n          artifacts:\n              files: imagedefinitions.json\n      TimeoutInMinutes: 30\n# ------------------------------------------------------------#\n#  S3\n# ------------------------------------------------------------#\n  serviceApiS3bucketforcodepipelineVer:\n    Type: AWS::S3::Bucket\n    Properties:\n      BucketName: !Sub ${accountAlliasLowerCase}-service-api-codepipeline-ver\n# ------------------------------------------------------------#\n#  CodePipeline\n# ------------------------------------------------------------#\n  serviceApiCodePipelineVer:\n    Type: AWS::CodePipeline::Pipeline\n    DependsOn: serviceApiS3bucketforcodepipelineVer\n    Properties:\n      ArtifactStore:\n        Location: !Ref serviceApiS3bucketforcodepipelineVer \n        Type: S3\n      Name: !Sub ${accountAlliasLowerCase}-service-api-codepipeline-ver\n      RestartExecutionOnUpdate: false\n      RoleArn: !GetAtt serviceApiCodePipelineRoleVer.Arn\n      Stages:\n        - Name: Source\n          Actions:\n            - Name: SourceAction\n              ActionTypeId: \n                Category: Source\n                Owner: AWS\n                Provider: ECR\n                Version: 1\n              OutputArtifacts: \n                - Name: SourceArtifact\n              Configuration: \n                RepositoryName: !Sub ${accountAlliasLowerCase}-service-api-ecr\n              RunOrder: 1\n        - Name: Build\n          Actions:\n            - Name: CodeBuild\n              InputArtifacts:\n                - Name: SourceArtifact\n              ActionTypeId: \n                Category: Build\n                Owner: AWS\n                Provider: CodeBuild\n                Version: 1\n              Configuration: \n                ProjectName: !Ref serviceApiCodeBuildProjectVer\n              OutputArtifacts: \n                - Name: CodebuildOutput\n              RunOrder: 1\n        - Name: Staging\n          Actions:\n            - Name: Deploy2serviceApi\n              InputArtifacts:\n                - Name: CodebuildOutput\n              ActionTypeId: \n                Category: Deploy\n                Owner: AWS\n                Provider: ECS\n                Version: 1\n              Configuration:\n                ClusterName: !ImportValue wifiCluster\n                FileName: imagedefinitions.json\n                ServiceName: !ImportValue serviceApiService\n              OutputArtifacts: []\n              RunOrder: 1\n# ------------------------------------------------------------#\n#  CloudWatch Event\n# ------------------------------------------------------------#\n  serviceApiCloudWatchEventRoleVer:\n    Type: 'AWS::IAM::Role'\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service:\n                - events.amazonaws.com\n            Action: 'sts:AssumeRole'\n      Path: /\n      Policies:\n        - PolicyName: cwe-pipeline-execution\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Effect: Allow\n                Action: 'codepipeline:StartPipelineExecution'\n                Resource: !Join \n                  - ''\n                  - - 'arn:aws:codepipeline:'\n                    - !Ref 'AWS::Region'\n                    - ':'\n                    - !Ref 'AWS::AccountId'\n                    - ':'\n                    - !Ref serviceApiCodePipelineVer\n  serviceApiCloudwatchEventsRuleVer:\n    Type: AWS::Events::Rule\n    Properties:\n      EventPattern:\n        source:\n          - aws.ecr\n        detail:\n          eventName:\n            - PutImage\n          requestParameters:\n            repositoryName: \n              - !Sub ${accountAlliasLowerCase}-service-api-ecr\n            imageTag: \n              - latest\n      Targets:\n        - Arn:  !Join \n          - ''\n          - - 'arn:aws:codepipeline:'\n            - !Ref 'AWS::Region'\n            - ':'\n            - !Ref 'AWS::AccountId'\n            - ':'\n            - !Ref serviceApiCodePipelineVer\n          Id: !Sub ${accountAlliasLowerCase}-service-api-codepipeline-ver\n          RoleArn: !GetAtt serviceApiCloudWatchEventRoleVer.Arn\n\n# ------------------------------------------------------------#\n#  Outputs\n# ------------------------------------------------------------#\nOutputs:\n  serviceApiCodeBuildRoleVer:\n    Value: !Ref serviceApiCodeBuildRoleVer\n    Export:\n      Name: serviceApiCodeBuildRoleVer\n  serviceApiCodePipelineRoleVer:\n    Value: !Ref serviceApiCodePipelineRoleVer\n    Export:\n      Name: serviceApiCodePipelineRoleVer\n  serviceApiCodeBuildProjectVer:\n    Value: !Ref serviceApiCodeBuildProjectVer\n    Export:\n      Name: serviceApiCodeBuildProjectVer\n  serviceApiS3bucketforcodepipelineVer:\n    Value: !Ref serviceApiS3bucketforcodepipelineVer\n    Export:\n      Name: serviceApiS3bucketforcodepipelineVer\n  serviceApiCodePipelineVer:\n    Value: !Ref serviceApiCodePipelineVer\n    Export:\n      Name: serviceApiCodePipelineVer\n  serviceApiCloudWatchEventRoleVer:\n    Value: !Ref serviceApiCloudWatchEventRoleVer\n    Export:\n      Name: serviceApiCloudWatchEventRoleVer\n  serviceApiCloudwatchEventsRuleVer:\n    Value: !Ref serviceApiCloudwatchEventsRuleVer\n    Export:\n      Name: serviceApiCloudwatchEventsRuleVer\n\n"
}
INV-ver-wfi01-data-monitoring-codepipeline-ver
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: codepipeline\n\n# ------------------------------------------------------------#\n#  Parameters\n# ------------------------------------------------------------#\nParameters:\n  accountAllias:\n    Type: String\n  accountAlliasLowerCase:\n    Type: String\n\nResources:\n# ------------------------------------------------------------#\n#  Role\n# ------------------------------------------------------------#\n  dataMonitoringCodeBuildRoleVer:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement: \n          - Effect: \"Allow\"\n            Principal: \n              Service: \n                - \"codebuild.amazonaws.com\"\n            Action: \n              - \"sts:AssumeRole\"\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess\n        - arn:aws:iam::aws:policy/AmazonS3FullAccess\n        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess\n  dataMonitoringCodePipelineRoleVer:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement: \n          - Effect: \"Allow\"\n            Principal: \n              Service: \n                - \"codepipeline.amazonaws.com\"\n            Action: \n              - \"sts:AssumeRole\"\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess\n        - arn:aws:iam::aws:policy/AWSCodeCommitFullAccess\n        - arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess\n        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess\n        - arn:aws:iam::aws:policy/AmazonS3FullAccess\n        - arn:aws:iam::aws:policy/CloudWatchFullAccess\n        - arn:aws:iam::aws:policy/AmazonEC2ContainerServiceFullAccess\n\n# ------------------------------------------------------------#\n#  CodeBuild\n# ------------------------------------------------------------#\n  dataMonitoringCodeBuildProjectVer:\n    Type: AWS::CodeBuild::Project\n    Properties:\n      Name: !Sub ${accountAlliasLowerCase}-data-monitoring-build-project-ver\n      Artifacts:\n        Type: CODEPIPELINE\n      Description: !Sub Building stage for ${accountAlliasLowerCase}-ver\n      Environment:\n        ComputeType: BUILD_GENERAL1_SMALL\n        EnvironmentVariables:\n          - Name: AWS_ACCOUNT_ID\n            Value: !Ref AWS::AccountId\n          - Name: IMAGE_NAME\n            Value: !Sub ${accountAlliasLowerCase}-data-monitoring-ecr\n          - Name: CONTAINER_NAME\n            Value: !Sub ${accountAlliasLowerCase}-data-monitoring-container\n        Image: aws/codebuild/java:openjdk-8\n        Type: LINUX_CONTAINER\n        PrivilegedMode: True\n      ServiceRole: !Ref dataMonitoringCodeBuildRoleVer\n      Source:\n        Type: CODEPIPELINE\n        BuildSpec: |\n          version: 0.2 \n          phases:\n            build:\n              commands:\n                - REPOSITORY_URI=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_NAME}\n                - IMAGE_TAG=latest\n                - echo \"[{\\\"name\\\":\\\"${CONTAINER_NAME}\\\",\\\"imageUri\\\":\\\"${REPOSITORY_URI}:${IMAGE_TAG}\\\"}]\"\n                - echo \"[{\\\"name\\\":\\\"${CONTAINER_NAME}\\\",\\\"imageUri\\\":\\\"${REPOSITORY_URI}:${IMAGE_TAG}\\\"}]\" > imagedefinitions.json\n          artifacts:\n              files: imagedefinitions.json\n      TimeoutInMinutes: 30\n# ------------------------------------------------------------#\n#  S3\n# ------------------------------------------------------------#\n  dataMonitoringS3bucketforcodepipelineVer:\n    Type: AWS::S3::Bucket\n    Properties:\n      BucketName: !Sub ${accountAlliasLowerCase}-data-monitoring-codepipeline-ver\n# ------------------------------------------------------------#\n#  CodePipeline\n# ------------------------------------------------------------#\n  dataMonitoringCodePipelineVer:\n    Type: AWS::CodePipeline::Pipeline\n    DependsOn: dataMonitoringS3bucketforcodepipelineVer\n    Properties:\n      ArtifactStore:\n        Location: !Ref dataMonitoringS3bucketforcodepipelineVer \n        Type: S3\n      Name: !Sub ${accountAlliasLowerCase}-data-monitoring-codepipeline-ver\n      RestartExecutionOnUpdate: false\n      RoleArn: !GetAtt dataMonitoringCodePipelineRoleVer.Arn\n      Stages:\n        - Name: Source\n          Actions:\n            - Name: SourceAction\n              ActionTypeId: \n                Category: Source\n                Owner: AWS\n                Provider: ECR\n                Version: 1\n              OutputArtifacts: \n                - Name: SourceArtifact\n              Configuration: \n                RepositoryName: !Sub ${accountAlliasLowerCase}-data-monitoring-ecr\n              RunOrder: 1\n        - Name: Build\n          Actions:\n            - Name: CodeBuild\n              InputArtifacts:\n                - Name: SourceArtifact\n              ActionTypeId: \n                Category: Build\n                Owner: AWS\n                Provider: CodeBuild\n                Version: 1\n              Configuration: \n                ProjectName: !Ref dataMonitoringCodeBuildProjectVer\n              OutputArtifacts: \n                - Name: CodebuildOutput\n              RunOrder: 1\n        - Name: Staging\n          Actions:\n            - Name: Deploy2dataMonitoring\n              InputArtifacts:\n                - Name: CodebuildOutput\n              ActionTypeId: \n                Category: Deploy\n                Owner: AWS\n                Provider: ECS\n                Version: 1\n              Configuration:\n                ClusterName: !ImportValue wifiCluster\n                FileName: imagedefinitions.json\n                ServiceName: !ImportValue dataMonitoringService\n              OutputArtifacts: []\n              RunOrder: 1\n# ------------------------------------------------------------#\n#  CloudWatch Event\n# ------------------------------------------------------------#\n  dataMonitoringCloudWatchEventRoleVer:\n    Type: 'AWS::IAM::Role'\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service:\n                - events.amazonaws.com\n            Action: 'sts:AssumeRole'\n      Path: /\n      Policies:\n        - PolicyName: cwe-pipeline-execution\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Effect: Allow\n                Action: 'codepipeline:StartPipelineExecution'\n                Resource: !Join \n                  - ''\n                  - - 'arn:aws:codepipeline:'\n                    - !Ref 'AWS::Region'\n                    - ':'\n                    - !Ref 'AWS::AccountId'\n                    - ':'\n                    - !Ref dataMonitoringCodePipelineVer\n  dataMonitoringCloudwatchEventsRuleVer:\n    Type: AWS::Events::Rule\n    Properties:\n      EventPattern:\n        source:\n          - aws.ecr\n        detail:\n          eventName:\n            - PutImage\n          requestParameters:\n            repositoryName: \n              - !Sub ${accountAlliasLowerCase}-data-monitoring-ecr\n            imageTag: \n              - latest\n      Targets:\n        - Arn:  !Join \n          - ''\n          - - 'arn:aws:codepipeline:'\n            - !Ref 'AWS::Region'\n            - ':'\n            - !Ref 'AWS::AccountId'\n            - ':'\n            - !Ref dataMonitoringCodePipelineVer\n          Id: !Sub ${accountAlliasLowerCase}-data-monitoring-codepipeline-ver\n          RoleArn: !GetAtt dataMonitoringCloudWatchEventRoleVer.Arn\n\n# ------------------------------------------------------------#\n#  Outputs\n# ------------------------------------------------------------#\nOutputs:\n  dataMonitoringCodeBuildRoleVer:\n    Value: !Ref dataMonitoringCodeBuildRoleVer\n    Export:\n      Name: dataMonitoringCodeBuildRoleVer\n  dataMonitoringCodePipelineRoleVer:\n    Value: !Ref dataMonitoringCodePipelineRoleVer\n    Export:\n      Name: dataMonitoringCodePipelineRoleVer\n  dataMonitoringCodeBuildProjectVer:\n    Value: !Ref dataMonitoringCodeBuildProjectVer\n    Export:\n      Name: dataMonitoringCodeBuildProjectVer\n  dataMonitoringS3bucketforcodepipelineVer:\n    Value: !Ref dataMonitoringS3bucketforcodepipelineVer\n    Export:\n      Name: dataMonitoringS3bucketforcodepipelineVer\n  dataMonitoringCodePipelineVer:\n    Value: !Ref dataMonitoringCodePipelineVer\n    Export:\n      Name: dataMonitoringCodePipelineVer\n  dataMonitoringCloudWatchEventRoleVer:\n    Value: !Ref dataMonitoringCloudWatchEventRoleVer\n    Export:\n      Name: dataMonitoringCloudWatchEventRoleVer\n  dataMonitoringCloudwatchEventsRuleVer:\n    Value: !Ref dataMonitoringCloudwatchEventsRuleVer\n    Export:\n      Name: dataMonitoringCloudwatchEventsRuleVer\n\n"
}
INV-ver-wfi01-vehicle-api-codepipeline-ver
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: codepipeline\n\n# ------------------------------------------------------------#\n#  Parameters\n# ------------------------------------------------------------#\nParameters:\n  accountAllias:\n    Type: String\n  accountAlliasLowerCase:\n    Type: String\n\nResources:\n# ------------------------------------------------------------#\n#  Role\n# ------------------------------------------------------------#\n  vehicleApiCodeBuildRoleVer:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement: \n          - Effect: \"Allow\"\n            Principal: \n              Service: \n                - \"codebuild.amazonaws.com\"\n            Action: \n              - \"sts:AssumeRole\"\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess\n        - arn:aws:iam::aws:policy/AmazonS3FullAccess\n        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess\n  vehicleApiCodePipelineRoleVer:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement: \n          - Effect: \"Allow\"\n            Principal: \n              Service: \n                - \"codepipeline.amazonaws.com\"\n            Action: \n              - \"sts:AssumeRole\"\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess\n        - arn:aws:iam::aws:policy/AWSCodeCommitFullAccess\n        - arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess\n        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess\n        - arn:aws:iam::aws:policy/AmazonS3FullAccess\n        - arn:aws:iam::aws:policy/CloudWatchFullAccess\n        - arn:aws:iam::aws:policy/AmazonEC2ContainerServiceFullAccess\n\n# ------------------------------------------------------------#\n#  CodeBuild\n# ------------------------------------------------------------#\n  vehicleApiCodeBuildProjectVer:\n    Type: AWS::CodeBuild::Project\n    Properties:\n      Name: !Sub ${accountAlliasLowerCase}-vehicle-api-build-project-ver\n      Artifacts:\n        Type: CODEPIPELINE\n      Description: !Sub Building stage for ${accountAlliasLowerCase}-ver\n      Environment:\n        ComputeType: BUILD_GENERAL1_SMALL\n        EnvironmentVariables:\n          - Name: AWS_ACCOUNT_ID\n            Value: !Ref AWS::AccountId\n          - Name: IMAGE_NAME\n            Value: !Sub ${accountAlliasLowerCase}-vehicle-api-ecr\n          - Name: CONTAINER_NAME\n            Value: !Sub ${accountAlliasLowerCase}-vehicle-api-app-container\n        Image: aws/codebuild/java:openjdk-8\n        Type: LINUX_CONTAINER\n        PrivilegedMode: True\n      ServiceRole: !Ref vehicleApiCodeBuildRoleVer\n      Source:\n        Type: CODEPIPELINE\n        BuildSpec: |\n          version: 0.2 \n          phases:\n            build:\n              commands:\n                - REPOSITORY_URI=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_NAME}\n                - IMAGE_TAG=latest\n                - echo \"[{\\\"name\\\":\\\"${CONTAINER_NAME}\\\",\\\"imageUri\\\":\\\"${REPOSITORY_URI}:${IMAGE_TAG}\\\"}]\"\n                - echo \"[{\\\"name\\\":\\\"${CONTAINER_NAME}\\\",\\\"imageUri\\\":\\\"${REPOSITORY_URI}:${IMAGE_TAG}\\\"}]\" > imagedefinitions.json\n          artifacts:\n              files: imagedefinitions.json\n      TimeoutInMinutes: 30\n# ------------------------------------------------------------#\n#  S3\n# ------------------------------------------------------------#\n  vehicleApiS3bucketforcodepipelineVer:\n    Type: AWS::S3::Bucket\n    Properties:\n      BucketName: !Sub ${accountAlliasLowerCase}-vehicle-api-codepipeline-ver\n# ------------------------------------------------------------#\n#  CodePipeline\n# ------------------------------------------------------------#\n  vehicleApiCodePipelineVer:\n    Type: AWS::CodePipeline::Pipeline\n    DependsOn: vehicleApiS3bucketforcodepipelineVer\n    Properties:\n      ArtifactStore:\n        Location: !Ref vehicleApiS3bucketforcodepipelineVer \n        Type: S3\n      Name: !Sub ${accountAlliasLowerCase}-vehicle-api-codepipeline-ver\n      RestartExecutionOnUpdate: false\n      RoleArn: !GetAtt vehicleApiCodePipelineRoleVer.Arn\n      Stages:\n        - Name: Source\n          Actions:\n            - Name: SourceAction\n              ActionTypeId: \n                Category: Source\n                Owner: AWS\n                Provider: ECR\n                Version: 1\n              OutputArtifacts: \n                - Name: SourceArtifact\n              Configuration: \n                RepositoryName: !Sub ${accountAlliasLowerCase}-vehicle-api-ecr\n              RunOrder: 1\n        - Name: Build\n          Actions:\n            - Name: CodeBuild\n              InputArtifacts:\n                - Name: SourceArtifact\n              ActionTypeId: \n                Category: Build\n                Owner: AWS\n                Provider: CodeBuild\n                Version: 1\n              Configuration: \n                ProjectName: !Ref vehicleApiCodeBuildProjectVer\n              OutputArtifacts: \n                - Name: CodebuildOutput\n              RunOrder: 1\n        - Name: Staging\n          Actions:\n            - Name: Deploy2VehicleApi\n              InputArtifacts:\n                - Name: CodebuildOutput\n              ActionTypeId: \n                Category: Deploy\n                Owner: AWS\n                Provider: ECS\n                Version: 1\n              Configuration:\n                ClusterName: !ImportValue wifiCluster\n                FileName: imagedefinitions.json\n                ServiceName: !ImportValue vehicleApiService\n              OutputArtifacts: []\n              RunOrder: 1\n# ------------------------------------------------------------#\n#  CloudWatch Event\n# ------------------------------------------------------------#\n  vehicleApiCloudWatchEventRoleVer:\n    Type: 'AWS::IAM::Role'\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service:\n                - events.amazonaws.com\n            Action: 'sts:AssumeRole'\n      Path: /\n      Policies:\n        - PolicyName: cwe-pipeline-execution\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Effect: Allow\n                Action: 'codepipeline:StartPipelineExecution'\n                Resource: !Join \n                  - ''\n                  - - 'arn:aws:codepipeline:'\n                    - !Ref 'AWS::Region'\n                    - ':'\n                    - !Ref 'AWS::AccountId'\n                    - ':'\n                    - !Ref vehicleApiCodePipelineVer\n  vehicleApiCloudwatchEventsRuleVer:\n    Type: AWS::Events::Rule\n    Properties:\n      EventPattern:\n        source:\n          - aws.ecr\n        detail:\n          eventName:\n            - PutImage\n          requestParameters:\n            repositoryName: \n              - !Sub ${accountAlliasLowerCase}-vehicle-api-ecr\n            imageTag: \n              - latest\n      Targets:\n        - Arn:  !Join \n          - ''\n          - - 'arn:aws:codepipeline:'\n            - !Ref 'AWS::Region'\n            - ':'\n            - !Ref 'AWS::AccountId'\n            - ':'\n            - !Ref vehicleApiCodePipelineVer\n          Id: !Sub ${accountAlliasLowerCase}-vehicle-api-codepipeline-ver\n          RoleArn: !GetAtt vehicleApiCloudWatchEventRoleVer.Arn\n\n# ------------------------------------------------------------#\n#  Outputs\n# ------------------------------------------------------------#\nOutputs:\n  vehicleApiCodeBuildRoleVer:\n    Value: !Ref vehicleApiCodeBuildRoleVer\n    Export:\n      Name: vehicleApiCodeBuildRoleVer\n  vehicleApiCodePipelineRoleVer:\n    Value: !Ref vehicleApiCodePipelineRoleVer\n    Export:\n      Name: vehicleApiCodePipelineRoleVer\n  vehicleApiCodeBuildProjectVer:\n    Value: !Ref vehicleApiCodeBuildProjectVer\n    Export:\n      Name: vehicleApiCodeBuildProjectVer\n  vehicleApiS3bucketforcodepipelineVer:\n    Value: !Ref vehicleApiS3bucketforcodepipelineVer\n    Export:\n      Name: vehicleApiS3bucketforcodepipelineVer\n  vehicleApiCodePipelineVer:\n    Value: !Ref vehicleApiCodePipelineVer\n    Export:\n      Name: vehicleApiCodePipelineVer\n  vehicleApiCloudWatchEventRoleVer:\n    Value: !Ref vehicleApiCloudWatchEventRoleVer\n    Export:\n      Name: vehicleApiCloudWatchEventRoleVer\n  vehicleApiCloudwatchEventsRuleVer:\n    Value: !Ref vehicleApiCloudwatchEventsRuleVer\n    Export:\n      Name: vehicleApiCloudwatchEventsRuleVer\n\n"
}
INV-ver-wfi01-ver-ecr-access-role
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: codepipeline\n\n# ------------------------------------------------------------#\n#  Parameters\n# ------------------------------------------------------------#\nParameters:\n  accountAllias:\n    Type: String\n  accountAlliasLowerCase:\n    Type: String\n  devAwsAccountId:\n    Type: String\n\nResources:\n# ------------------------------------------------------------#\n#  Role\n# ------------------------------------------------------------#\n  verEcrAccessRole:\n    Type: AWS::IAM::Role\n    Properties:\n      RoleName: ver-ecr-access-role\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement: \n          - Effect: \"Allow\"\n            Principal: \n              AWS: \n                - !Sub arn:aws:iam::${devAwsAccountId}:root\n            Action: \n              - \"sts:AssumeRole\"\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess\n\n# ------------------------------------------------------------#\n#  Outputs\n# ------------------------------------------------------------#\nOutputs:\n  verEcrAccessRole:\n    Value: !Ref verEcrAccessRole\n    Export:\n      Name: verEcrAccessRole"
}
StackSet-OpeAdmin-CreateIamRole-0b2872bd-33d5-465d-92be-a08f0dbcca7e
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "{\n  \"AWSTemplateFormatVersion\" : \"2010-09-09\",\n  \"Description\" : \"Template for Creating IAM Role to Switch from Internavi Login AWS Account\",\n  \"Parameters\" : {\n    \"TrustedAWSAccountId\" : {\n      \"AllowedPattern\" : \"^[0-9]*$\",\n      \"Type\" : \"String\",\n      \"Default\" : \"975196479634\",\n      \"Description\" : \"Trusted AWS Account ID\"\n    },\n    \"IAMRoleName\": {\n      \"Type\": \"String\",\n      \"Default\": \"OpeAdminRole\",\n      \"Description\": \"IAM Role Name\"\n    }\n  },\n  \"Resources\" : {\n    \"IAMRoleForEngineer\": {\n      \"Type\": \"AWS::IAM::Role\",\n      \"Properties\": {\n        \"AssumeRolePolicyDocument\": {\n          \"Version\": \"2012-10-17\",\n          \"Statement\": [\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010002\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010025\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010026\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010027\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010028\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010030\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            }\n          ]\n        },\n        \"ManagedPolicyArns\": [\n          \"arn:aws:iam::aws:policy/AdministratorAccess\"\n        ],\n        \"Path\": \"/\",\n        \"RoleName\": { \"Ref\" : \"IAMRoleName\" }\n      }\n    }\n  },\n  \"Outputs\" : {\n    \"IAMRoleArn\": {\n      \"Value\": { \"Fn::GetAtt\" : [ \"IAMRoleForEngineer\", \"Arn\" ] }\n    },\n    \"LinkForSwitchRole\": {\n      \"Value\": { \"Fn::Join\": [ \"\", [ \"https://signin.aws.amazon.com/switchrole?roleName=\", { \"Ref\" : \"IAMRoleName\" }, \"&account=\", { \"Ref\" : \"AWS::AccountId\" } ] ] }\n    }\n  }\n}\n"
}
INV-ver-wfi01-data-monitoring-service
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: internal ecs service\n\nParameters:\n  accountAllias:\n    Type: String\n  accountAlliasLowerCase:\n    Type: String\n  desiredCount:\n    Type: Number\n\nResources:\n  dataMonitoringService:\n    Type: AWS::ECS::Service\n    Properties:\n      Cluster: !ImportValue wifiCluster\n      DeploymentConfiguration:\n        MaximumPercent: 200\n        MinimumHealthyPercent: 50\n      DesiredCount: !Ref desiredCount\n      LaunchType: FARGATE\n      NetworkConfiguration:\n        AwsvpcConfiguration:\n          AssignPublicIp: DISABLED\n          SecurityGroups: \n            - !ImportValue dataMonitoringSecuritygroup\n          Subnets: \n            - !ImportValue PrivateSubnet1a\n            - !ImportValue PrivateSubnet1c\n      ServiceName: !Sub ${accountAlliasLowerCase}-data-monitoring-service\n      TaskDefinition: !ImportValue dataMonitoringTaskdefinition\n\nOutputs:\n  dataMonitoringService:\n    Value: !Ref dataMonitoringService\n    Export:\n      Name: dataMonitoringService\n"
}
INV-ver-wfi01-data-monitoring-task
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: ecs task definition\n\nParameters:\n  accountAllias:\n    Type: String\n  accountAlliasLowerCase:\n    Type: String\n  cpu:\n    Type: Number\n  memory:\n    Type: Number\n  imageUri:\n    Type: String\n\nResources:\n  dataMonitoringEcsTaskExecutionRole:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement: \n          - Effect: \"Allow\"\n            Principal: \n              Service: \n                - \"ecs-tasks.amazonaws.com\"\n            Action: \n              - \"sts:AssumeRole\"\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy\n        - !ImportValue accessSecureStringPolicy\n        - !ImportValue accessSqsPolicy\n      RoleName: !Sub ${accountAlliasLowerCase}-data-monitoring-ecsTaskExecutionRole\n  dataMonitoringTaskdefinition:\n    Type: AWS::ECS::TaskDefinition\n    DependsOn: dataMonitoringEcsTaskExecutionRole\n    Properties:\n      Family: !Sub ${accountAlliasLowerCase}-data-monitoring-task\n      RequiresCompatibilities:\n        - FARGATE\n      Cpu: !Ref cpu\n      Memory: !Ref memory\n      NetworkMode: awsvpc\n      ExecutionRoleArn: !GetAtt dataMonitoringEcsTaskExecutionRole.Arn\n      TaskRoleArn: !GetAtt dataMonitoringEcsTaskExecutionRole.Arn\n      ContainerDefinitions:\n        - Name: !Sub ${accountAlliasLowerCase}-data-monitoring-container\n          Image: !Ref imageUri\n          PortMappings:\n            - ContainerPort: 8080\n              HostPort: 8080\n          Environment:\n            - Name: SQS_REGIONS\n              Value: ap-northeast-1\n            - Name: SQS_QUEUE_URL\n              Value: !ImportValue SourceQueueUrl\n            - Name: DBMS_HOST\n              Value: !ImportValue DBClusterMasterEndPoint\n            - Name: DBMS_PORT\n              Value: 3306\n            - Name: DB_NAME\n              Value: inv_wfi_db\n            - Name: SUB_BASE_URL\n              Value: localhost\n            - Name: LOGLEVEL_APP\n              Value: INFO\n            - Name: LOGLEVEL_FRAMEWORK\n              Value: ERROR\n            - Name: PROFILE_ACTIVE\n              Value: DEV\n          LogConfiguration:\n            LogDriver: awslogs\n            Options:\n              awslogs-region: !Ref AWS::Region\n              awslogs-group: !ImportValue wifiLogGroup\n              awslogs-stream-prefix: !Sub ${accountAlliasLowerCase}-data-monitoring-task\n          HealthCheck:\n            Command:\n              - CMD-SHELL\n              - curl -f http://localhost:8080/healthcheck || exit 1\n            Interval: 30\n            Retries: 3\n            StartPeriod: 60\n            Timeout: 5\n\nOutputs:\n  dataMonitoringEcsTaskExecutionRole:\n    Value: !Ref dataMonitoringEcsTaskExecutionRole\n    Export:\n      Name: dataMonitoringEcsTaskExecutionRole\n  dataMonitoringTaskdefinition:\n    Value: !Ref dataMonitoringTaskdefinition\n    Export:\n      Name: dataMonitoringTaskdefinition\n"
}
INV-ver-wfi01-jasper-control-service
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: internal ecs service\n\nParameters:\n  accountAllias:\n    Type: String\n  accountAlliasLowerCase:\n    Type: String\n  desiredCount:\n    Type: Number\n\nResources:\n  jasperControlService:\n    Type: AWS::ECS::Service\n    Properties:\n      Cluster: !ImportValue wifiCluster\n      DeploymentConfiguration:\n        MaximumPercent: 200\n        MinimumHealthyPercent: 50\n      DesiredCount: !Ref desiredCount\n      LaunchType: FARGATE\n      NetworkConfiguration:\n        AwsvpcConfiguration:\n          AssignPublicIp: DISABLED\n          SecurityGroups: \n            - !ImportValue jasperControlSecuritygroup\n          Subnets: \n            - !ImportValue PrivateSubnet1a\n            - !ImportValue PrivateSubnet1c\n      ServiceName: !Sub ${accountAlliasLowerCase}-jasper-control-service\n      TaskDefinition: !ImportValue jasperControlTaskdefinition\n\nOutputs:\n  jasperControlService:\n    Value: !Ref jasperControlService\n    Export:\n      Name: jasperControlService\n"
}
INV-ver-wfi01-jasper-control-task
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: ecs task definition\n\nParameters:\n  accountAllias:\n    Type: String\n  accountAlliasLowerCase:\n    Type: String\n  cpu:\n    Type: Number\n  memory:\n    Type: Number\n  imageUri:\n    Type: String\n\nResources:\n  jasperControlEcsTaskExecutionRole:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement: \n          - Effect: \"Allow\"\n            Principal: \n              Service: \n                - \"ecs-tasks.amazonaws.com\"\n            Action: \n              - \"sts:AssumeRole\"\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy\n        - !ImportValue accessSecureStringPolicy\n        - !ImportValue accessSqsPolicy\n      RoleName: !Sub ${accountAlliasLowerCase}-jasper-control-ecsTaskExecutionRole\n  jasperControlTaskdefinition:\n    Type: AWS::ECS::TaskDefinition\n    DependsOn: jasperControlEcsTaskExecutionRole\n    Properties:\n      Family: !Sub ${accountAlliasLowerCase}-jasper-control-task\n      RequiresCompatibilities:\n        - FARGATE\n      Cpu: !Ref cpu\n      Memory: !Ref memory\n      NetworkMode: awsvpc\n      ExecutionRoleArn: !GetAtt jasperControlEcsTaskExecutionRole.Arn\n      TaskRoleArn: !GetAtt jasperControlEcsTaskExecutionRole.Arn\n      ContainerDefinitions:\n        - Name: !Sub ${accountAlliasLowerCase}-jasper-control-container\n          Image: !Ref imageUri\n          PortMappings:\n            - ContainerPort: 8080\n              HostPort: 8080\n          Environment:\n            - Name: MYSQL_HOST\n              Value: !ImportValue DBClusterMasterEndPoint\n            - Name: MYSQL_PORT\n              Value: 3306\n            - Name: MYSQL_DB_NAME\n              Value: inv_wfi_db\n            - Name: SQS_REGIONS\n              Value: ap-northeast-1\n            - Name: SQS_QUEUE_URL\n              Value: !ImportValue SourceQueueUrl\n            - Name: JASPER_SERVER_URL\n              Value: localhost\n            - Name: LOGLEVEL_APP\n              Value: INFO\n            - Name: LOGLEVEL_FRAMEWORK\n              Value: ERROR\n            - Name: PROFILE_ACTIVE\n              Value: DEV\n          LogConfiguration:\n            LogDriver: awslogs\n            Options:\n              awslogs-region: !Ref AWS::Region\n              awslogs-group: !ImportValue wifiLogGroup\n              awslogs-stream-prefix: !Sub ${accountAlliasLowerCase}-jasper-control-task\n          HealthCheck:\n            Command:\n              - CMD-SHELL\n              - curl -f http://localhost:8080/healthcheck || exit 1\n            Interval: 30\n            Retries: 3\n            StartPeriod: 90\n            Timeout: 5\n\nOutputs:\n  jasperControlEcsTaskExecutionRole:\n    Value: !Ref jasperControlEcsTaskExecutionRole\n    Export:\n      Name: jasperControlEcsTaskExecutionRole\n  jasperControlTaskdefinition:\n    Value: !Ref jasperControlTaskdefinition\n    Export:\n      Name: jasperControlTaskdefinition\n"
}
INV-ver-wfi01-service-api-service
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: internal ecs service\n\nParameters:\n  accountAllias:\n    Type: String\n  accountAlliasLowerCase:\n    Type: String\n  desiredCount:\n    Type: Number\n\nResources:\n  serviceApiService:\n    Type: AWS::ECS::Service\n    Properties:\n      Cluster: !ImportValue wifiCluster\n      DeploymentConfiguration:\n        MaximumPercent: 200\n        MinimumHealthyPercent: 50\n      DesiredCount: !Ref desiredCount\n      LaunchType: FARGATE\n      LoadBalancers:\n        - ContainerName: !Sub ${accountAlliasLowerCase}-nginx-container\n          ContainerPort: 80\n          TargetGroupArn: !ImportValue serviceApiTargetGroup\n      NetworkConfiguration:\n        AwsvpcConfiguration:\n          AssignPublicIp: DISABLED\n          SecurityGroups: \n            - !ImportValue serviceApiSecuritygroup\n          Subnets: \n            - !ImportValue PrivateSubnet1a\n            - !ImportValue PrivateSubnet1c\n      ServiceName: !Sub ${accountAlliasLowerCase}-service-api-service\n      TaskDefinition: !ImportValue serviceApiTaskdefinition\n\nOutputs:\n  serviceApiService:\n    Value: !Ref serviceApiService\n    Export:\n      Name: serviceApiService\n\n"
}
INV-ver-wfi01-service-api-task
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: ecs task definition\n\nParameters:\n  accountAllias:\n    Type: String\n  accountAlliasLowerCase:\n    Type: String\n  cpu:\n    Type: Number\n  memory:\n    Type: Number\n  nginxImageUri:\n    Type: String\n  appImageUri:\n    Type: String\n\nResources:\n  serviceApiEcsTaskExecutionRole:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement: \n          - Effect: \"Allow\"\n            Principal: \n              Service: \n                - \"ecs-tasks.amazonaws.com\"\n            Action: \n              - \"sts:AssumeRole\"\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy\n        - !ImportValue accessSecureStringPolicy\n      RoleName: !Sub ${accountAlliasLowerCase}-service-api-ecsTaskExecutionRole\n  serviceApiTaskdefinition:\n    Type: AWS::ECS::TaskDefinition\n    DependsOn: serviceApiEcsTaskExecutionRole\n    Properties:\n      Family: !Sub ${accountAlliasLowerCase}-service-api-task\n      RequiresCompatibilities:\n        - FARGATE\n      Cpu: !Ref cpu\n      Memory: !Ref memory\n      NetworkMode: awsvpc\n      ExecutionRoleArn: !GetAtt serviceApiEcsTaskExecutionRole.Arn\n      TaskRoleArn: !GetAtt serviceApiEcsTaskExecutionRole.Arn\n      ContainerDefinitions:\n        - Name: !Sub ${accountAlliasLowerCase}-nginx-container\n          Image: !Ref nginxImageUri\n          PortMappings:\n            - ContainerPort: 80\n              HostPort: 80\n          LogConfiguration:\n            LogDriver: awslogs\n            Options:\n              awslogs-region: !Ref AWS::Region\n              awslogs-group: !ImportValue wifiLogGroup\n              awslogs-stream-prefix: !Sub ${accountAlliasLowerCase}-service-api-nginx-container\n        - Name: !Sub ${accountAlliasLowerCase}-service-api-app-container\n          Image: !Ref appImageUri\n          PortMappings:\n            - ContainerPort: 8080\n              HostPort: 8080\n          Environment:\n            - Name: AURORA_CLUSTER_ENDPOINT\n              Value: !ImportValue DBClusterMasterEndPoint\n            - Name: AURORA_READER_ENDPOINT\n              Value: !ImportValue DBClusterReadEndPoint\n            - Name: AURORA_PORT\n              Value: 3306\n            - Name: AURORA_DB_NAME\n              Value: inv_wfi_db\n            - Name: SUB_BASE_URL\n              Value: localhost\n            - Name: VINTCU_BASE_URL\n              Value: localhost\n            - Name: LOGLEVEL_APP\n              Value: INFO\n            - Name: LOGLEVEL_FRAMEWORK\n              Value: ERROR\n            - Name: PROFILE_ACTIVE\n              Value: DEV\n          LogConfiguration:\n            LogDriver: awslogs\n            Options:\n              awslogs-region: !Ref AWS::Region\n              awslogs-group: !ImportValue wifiLogGroup\n              awslogs-stream-prefix: !Sub ${accountAlliasLowerCase}-service-api-app-container\nOutputs:\n  serviceApiEcsTaskExecutionRole:\n    Value: !Ref serviceApiEcsTaskExecutionRole\n    Export:\n      Name: serviceApiEcsTaskExecutionRole\n  serviceApiTaskdefinition:\n    Value: !Ref serviceApiTaskdefinition\n    Export:\n      Name: serviceApiTaskdefinition\n"
}
INV-ver-wfi01-vehicle-api-service
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: internal ecs service\n\nParameters:\n  accountAllias:\n    Type: String\n  accountAlliasLowerCase:\n    Type: String\n  desiredCount:\n    Type: Number\n\nResources:\n  vehicleApiService:\n    Type: AWS::ECS::Service\n    Properties:\n      Cluster: !ImportValue wifiCluster\n      DeploymentConfiguration:\n        MaximumPercent: 200\n        MinimumHealthyPercent: 50\n      DesiredCount: !Ref desiredCount\n      LaunchType: FARGATE\n      LoadBalancers:\n        - ContainerName: !Sub ${accountAlliasLowerCase}-nginx-container\n          ContainerPort: 80\n          TargetGroupArn: !ImportValue vehicleApiTargetGroup\n      NetworkConfiguration:\n        AwsvpcConfiguration:\n          AssignPublicIp: DISABLED\n          SecurityGroups: \n            - !ImportValue vehicleApiSecuritygroup\n          Subnets: \n            - !ImportValue PrivateSubnet1a\n            - !ImportValue PrivateSubnet1c\n      ServiceName: !Sub ${accountAlliasLowerCase}-vehicle-api-service\n      TaskDefinition: !ImportValue vehicleApiTaskdefinition\n\nOutputs:\n  vehicleApiService:\n    Value: !Ref vehicleApiService\n    Export:\n      Name: vehicleApiService\n\n"
}
INV-ver-wfi01-vehicle-api-task
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: ecs task definition\n\nParameters:\n  accountAllias:\n    Type: String\n  accountAlliasLowerCase:\n    Type: String\n  cpu:\n    Type: Number\n  memory:\n    Type: Number\n  nginxImageUri:\n    Type: String\n  appImageUri:\n    Type: String\n\nResources:\n  vehicleApiEcsTaskExecutionRole:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement: \n          - Effect: \"Allow\"\n            Principal: \n              Service: \n                - \"ecs-tasks.amazonaws.com\"\n            Action: \n              - \"sts:AssumeRole\"\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy\n        - !ImportValue accessSecureStringPolicy\n      RoleName: !Sub ${accountAlliasLowerCase}-vehicle-api-ecsTaskExecutionRole\n  vehicleApiTaskdefinition:\n    Type: AWS::ECS::TaskDefinition\n    DependsOn: vehicleApiEcsTaskExecutionRole\n    Properties:\n      Family: !Sub ${accountAlliasLowerCase}-vehicle-api-task\n      RequiresCompatibilities:\n        - FARGATE\n      Cpu: !Ref cpu\n      Memory: !Ref memory\n      NetworkMode: awsvpc\n      ExecutionRoleArn: !GetAtt vehicleApiEcsTaskExecutionRole.Arn\n      TaskRoleArn: !GetAtt vehicleApiEcsTaskExecutionRole.Arn\n      ContainerDefinitions:\n        - Name: !Sub ${accountAlliasLowerCase}-nginx-container\n          Image: !Ref nginxImageUri\n          PortMappings:\n            - ContainerPort: 80\n              HostPort: 80\n          LogConfiguration:\n            LogDriver: awslogs\n            Options:\n              awslogs-region: !Ref AWS::Region\n              awslogs-group: !ImportValue wifiLogGroup\n              awslogs-stream-prefix: !Sub ${accountAlliasLowerCase}-vehicle-api-nginx-container\n        - Name: !Sub ${accountAlliasLowerCase}-vehicle-api-app-container\n          Image: !Ref appImageUri\n          PortMappings:\n            - ContainerPort: 8080\n              HostPort: 8080\n          Environment:\n            - Name: AURORA_CLUSTER_ENDPOINT\n              Value: !ImportValue DBClusterMasterEndPoint\n            - Name: AURORA_READER_ENDPOINT\n              Value: !ImportValue DBClusterReadEndPoint\n            - Name: AURORA_PORT\n              Value: 3306\n            - Name: AURORA_DB_NAME\n              Value: inv_wfi_db\n            - Name: SUB_BASE_URL\n              Value: localhost\n            - Name: VINTCU_BASE_URL\n              Value: localhost\n            - Name: LOGLEVEL_APP\n              Value: INFO\n            - Name: LOGLEVEL_FRAMEWORK\n              Value: ERROR\n            - Name: PROFILE_ACTIVE\n              Value: DEV\n          LogConfiguration:\n            LogDriver: awslogs\n            Options:\n              awslogs-region: !Ref AWS::Region\n              awslogs-group: !ImportValue wifiLogGroup\n              awslogs-stream-prefix: !Sub ${accountAlliasLowerCase}-vehicle-api-app-container\n\nOutputs:\n  vehicleApiEcsTaskExecutionRole:\n    Value: !Ref vehicleApiEcsTaskExecutionRole\n    Export:\n      Name: vehicleApiEcsTaskExecutionRole\n  vehicleApiTaskdefinition:\n    Value: !Ref vehicleApiTaskdefinition\n    Export:\n      Name: vehicleApiTaskdefinition\n"
}
INV-ver-wfi01-rds
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "---\nAWSTemplateFormatVersion: '2010-09-09'\nDescription: RDS Aurora MySQL5.6 Template\nParameters:\n  accountAllias:\n    Type: String\n  accountAlliasLowerCase:\n    Type: String\n  DBClusterMasterUsername:\n    NoEcho: true\n    Type: String\n  DBClusterMasterUserPassword:\n    NoEcho: true\n    Type: String\n  DBName:\n    Type: String\n  DBInstanceClass:\n    Type: String\n\nResources:\n#---------------------------------------------\n# SubnetGroup\n#---------------------------------------------\n  DBSubnetGroup:\n    Type: AWS::RDS::DBSubnetGroup\n    Properties:\n      DBSubnetGroupDescription: aurora subnet group\n      DBSubnetGroupName: !Sub ${accountAlliasLowerCase}-subnetgroup\n      SubnetIds:\n        - !ImportValue PrivateSubnet1a\n        - !ImportValue PrivateSubnet1c\n#---------------------------------------------\n# Cluster ParameterGroup\n#---------------------------------------------\n  DBClusterParameterGroup:\n    Type: AWS::RDS::DBClusterParameterGroup\n    Properties: \n      Parameters: \n        character_set_client: utf8mb4\n        character_set_connection: utf8mb4\n        character_set_database: utf8mb4\n        character_set_results: utf8mb4\n        character_set_server: utf8mb4\n        time_zone: Asia/Tokyo\n        autocommit: 0\n      Family: aurora5.6\n      Description: cluster parameter group\n#---------------------------------------------\n# DB ParameterGroup\n#---------------------------------------------\n  DBParameterGroup:\n    Type: AWS::RDS::DBParameterGroup\n    Properties:\n      Description: parameter group\n      Family: aurora5.6\n#---------------------------------------------\n# DB Cluster\n#---------------------------------------------\n  DBCluster:\n    Type: AWS::RDS::DBCluster\n    Properties:\n      DBClusterIdentifier: !Sub ${accountAlliasLowerCase}-db-cluster\n#--MySQL 5.6-compatible Aurora--\n      Engine: aurora\n      EngineVersion: 5.6.10a\n      DBSubnetGroupName: !Ref DBSubnetGroup\n      DatabaseName: !Ref DBName\n      DBClusterParameterGroupName: !Ref DBClusterParameterGroup\n      MasterUsername: !Ref DBClusterMasterUsername\n      MasterUserPassword: !Ref DBClusterMasterUserPassword\n      VpcSecurityGroupIds:\n        - !ImportValue DBSecuritygroup\n      StorageEncrypted: true\n      BackupRetentionPeriod: 14\n#---------------------------------------------\n# DB Instance Primary\n#---------------------------------------------\n  DBInstancePrimary:\n    Type: AWS::RDS::DBInstance\n    Properties:\n      DBInstanceIdentifier: !Sub ${accountAlliasLowerCase}-db-primary\n      Engine: aurora\n      DBClusterIdentifier: !Ref DBCluster\n      DBInstanceClass: !Ref DBInstanceClass\n#---------------------------------------------\n# DB Instance Replica\n#---------------------------------------------\n  DBInstanceReplica:\n    Type: AWS::RDS::DBInstance\n    DependsOn: DBInstancePrimary\n    Properties:\n      DBInstanceIdentifier: !Sub ${accountAlliasLowerCase}-db-replica\n      Engine: aurora\n      DBClusterIdentifier: !Ref DBCluster\n      DBInstanceClass: !Ref DBInstanceClass\n\n\nOutputs:\n  DBClusterMasterEndPoint:\n    Value: !GetAtt DBCluster.Endpoint.Address\n    Export:\n      Name: DBClusterMasterEndPoint\n  DBClusterReadEndPoint:\n    Value: !GetAtt DBCluster.ReadEndpoint.Address\n    Export:\n      Name: DBClusterReadEndPoint\n\n"
}
INV-ver-wfi01-securitygroup
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: internal security group\n\nParameters:\n  accountAllias:\n    Type: String\n  accountAlliasLowerCase:\n    Type: String\n  internalSecurityGroupCidr:\n    Type: String\n\nResources:\n  jasperControlSecuritygroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupName: !Sub ${accountAlliasLowerCase}-jasper-control-sg\n      GroupDescription: !Sub ${accountAlliasLowerCase}-jasper-control-sg\n      Tags:\n        - Key: Name\n          Value: !Sub ${accountAlliasLowerCase}-jasper-control-sg\n      VpcId: !ImportValue VPC\n  dataMonitoringSecuritygroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupName: !Sub ${accountAlliasLowerCase}-data-monitoring-sg\n      GroupDescription: !Sub ${accountAlliasLowerCase}-data-monitoring-sg\n      Tags:\n        - Key: Name\n          Value: !Sub ${accountAlliasLowerCase}-data-monitoring-sg\n      VpcId: !ImportValue VPC\n  DBSecuritygroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupName: !Sub ${accountAlliasLowerCase}-db-sg\n      GroupDescription: !Sub ${accountAlliasLowerCase}-db-sg\n      Tags:\n        - Key: Name\n          Value: !Sub ${accountAlliasLowerCase}-db-sg\n      VpcId: !ImportValue VPC\n      SecurityGroupIngress:\n      - IpProtocol: tcp\n        FromPort: '3306'\n        ToPort: '3306'\n        CidrIp: !Ref internalSecurityGroupCidr\n\nOutputs:\n  jasperControlSecuritygroup:\n    Value: !Ref jasperControlSecuritygroup\n    Export:\n      Name: jasperControlSecuritygroup\n  dataMonitoringSecuritygroup:\n    Value: !Ref dataMonitoringSecuritygroup\n    Export:\n      Name: dataMonitoringSecuritygroup\n  DBSecuritygroup:\n    Value: !Ref DBSecuritygroup\n    Export:\n      Name: DBSecuritygroup\n"
}
INV-ver-wfi01-policy
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "---\nAWSTemplateFormatVersion: '2010-09-09'\nDescription: iam policy resource\nParameters:\n  accountAllias:\n    Type: String\n  accountAlliasLowerCase:\n    Type: String\n\nResources:\n#---------------------------------------------\n# Policy\n#---------------------------------------------\n  accessSecureStringPolicy:\n    Type: AWS::IAM::ManagedPolicy\n    Properties:\n      ManagedPolicyName: !Sub ${accountAllias}-SecureStringAccess\n      PolicyDocument: \n        Version: \"2012-10-17\"\n        Statement: \n          - Effect: \"Allow\"\n            Action: \n              - \"ssm:GetParameters\"\n              - \"kms:Decrypt\"\n            Resource: \"*\"\n      Description: available SSM KMS access policy\n\n  accessSqsPolicy:\n    Type: AWS::IAM::ManagedPolicy\n    Properties:\n      ManagedPolicyName: !Sub ${accountAllias}-SQSAccess\n      PolicyDocument: \n        Version: \"2012-10-17\"\n        Statement: \n          - Effect: \"Allow\"\n            Action: \n              - \"sqs:*\"\n            Resource: !ImportValue SourceQueueArn\n      Description: available SQS access policy\n\nOutputs:\n  accessSecureStringPolicy:\n    Value: !Ref accessSecureStringPolicy\n    Export:\n      Name: accessSecureStringPolicy\n  accessSqsPolicy:\n    Value: !Ref accessSqsPolicy\n    Export:\n      Name: accessSqsPolicy\n"
}
INV-ver-wfi01-sqs
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "---\nAWSTemplateFormatVersion: '2010-09-09'\nDescription: sqs queue resource\nParameters:\n  accountAllias:\n    Type: String\n  accountAlliasLowerCase:\n    Type: String\n\nResources:\n#---------------------------------------------\n# SQS\n#---------------------------------------------\n  Sqs:\n   Type: AWS::SQS::Queue\n   Properties:\n     ContentBasedDeduplication: \"true\"\n     DelaySeconds: 0\n     FifoQueue: \"true\"\n     MaximumMessageSize: 1024\n     MessageRetentionPeriod: 345600\n     QueueName: !Sub ${accountAlliasLowerCase}.fifo\n     ReceiveMessageWaitTimeSeconds: 20\n     VisibilityTimeout: 30\n\nOutputs:\n  SourceQueueUrl:\n    Value: !Ref Sqs\n    Export:\n      Name: SourceQueueUrl\n  SourceQueueArn:\n    Value: !GetAtt Sqs.Arn\n    Export:\n      Name: SourceQueueArn\n\n"
}
INV-ver-wfi01-ecs-loggroup
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: ecs and loggroup\n\nParameters:\n  accountAllias:\n    Type: String\n  accountAlliasLowerCase:\n    Type: String\n  logGroupName:\n    Type: String\n\nResources:\n  wifiCluster:\n    Type: AWS::ECS::Cluster\n    Properties:\n      ClusterName: !Sub ${accountAlliasLowerCase}-cluster\n  wifiLogGroup:\n    Type: AWS::Logs::LogGroup\n    Properties: \n      LogGroupName: !Ref logGroupName\n\nOutputs:\n  wifiCluster:\n    Value: !Ref wifiCluster\n    Export:\n      Name: wifiCluster\n  wifiLogGroup:\n    Value: !Ref wifiLogGroup\n    Export:\n      Name: wifiLogGroup"
}
StackSet-cfn-exec-ec2-4fb48d42-3ce4-4131-9fc9-c17f6e3bc1ac
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: 2010-09-09\nDescription: CloudFormation Execute EC2\nParameters:\n  amiId:\n    Type: String\n    Default: ami-0d7ed3ddb85b521a6\n  SshCidr1:\n    Type: String\n    Default: 121.2.65.36/32\n  SshCidr2:\n    Type: String\n    Default: 39.110.201.10/32\n  SshCidr3:\n    Type: String\n    Default: 222.11.38.119/32\n  SshCidr4:\n    Type: String\n    Default: 1.21.118.25/32\n  SshCidr5:\n    Type: String\n    Default: 153.163.63.48/32\n  SshCidr6:\n    Type: String\n    Default: 13.231.11.115/32\nResources:\n  EC2Role:\n    Type: \"AWS::IAM::Role\"\n    Properties:\n      RoleName: cfn-exec-ec2-role\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/AdministratorAccess\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement:\n          -\n            Effect: \"Allow\"\n            Principal:\n              Service:\n                - \"ec2.amazonaws.com\"\n            Action:\n              - \"sts:AssumeRole\"\n      Path: \"/\"\n  Profile:\n    Type: AWS::IAM::InstanceProfile\n    Properties:\n      Roles:\n        - !Ref EC2Role\n  SSHSecurityGroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupName: cfn-exec-sg\n      GroupDescription: cfn-exec-sg\n      SecurityGroupIngress:\n      - IpProtocol: tcp\n        FromPort: '22'\n        ToPort: '22'\n        CidrIp: !Ref SshCidr1\n        Description: Classmethod\n      - IpProtocol: tcp\n        FromPort: '22'\n        ToPort: '22'\n        CidrIp: !Ref SshCidr2\n        Description: Classmethod\n      - IpProtocol: tcp\n        FromPort: '22'\n        ToPort: '22'\n        CidrIp: !Ref SshCidr3\n        Description: Classmethod\n      - IpProtocol: tcp\n        FromPort: '22'\n        ToPort: '22'\n        CidrIp: !Ref SshCidr4\n        Description: Classmethod\n      - IpProtocol: tcp\n        FromPort: '22'\n        ToPort: '22'\n        CidrIp: !Ref SshCidr5\n        Description: Classmethod\n      - IpProtocol: tcp\n        FromPort: '22'\n        ToPort: '22'\n        CidrIp: !Ref SshCidr6\n        Description: Classmethod\n      Tags:\n        - Key: Name\n          Value: cfn-exec-sg\n  EC2:\n    Type: AWS::EC2::Instance\n    Properties:\n      ImageId: !Ref amiId\n      InstanceType: t3.micro\n      KeyName: cfn-exec-key\n      IamInstanceProfile: !Ref Profile\n      NetworkInterfaces:\n        - AssociatePublicIpAddress: true\n          DeviceIndex: 0\n          GroupSet:\n            - !GetAtt SSHSecurityGroup.GroupId\n      UserData:\n        Fn::Base64: !Sub |\n          #!/bin/bash\n          yum -y update\n          yum -y install git\n      Tags:\n        - Key: Name\n          Value: cfn-exec\n  EIP:\n    Type: AWS::EC2::EIP\n    Properties:\n      Domain: vpc\n  AssociateEIP:\n    Type: AWS::EC2::EIPAssociation\n    Properties:\n      EIP: !Ref EIP\n      InstanceId: !Ref EC2\nOutputs:\n  EC2:\n    Value: !Ref EC2\n    Export:\n      Name: cfn-exex-ec2\n  EIP:\n    Value: !Ref EIP\n    Export:\n      Name: cfn-exex-IP\n"
}
INV-ver-wfi01-bastion
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: 2010-09-09\nDescription: Bastion EC2\nParameters:\n  accountAllias:\n    Type: String\n  amiId:\n    Type: String\nResources:\n  SSHSecurityGroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      VpcId: !ImportValue VPC\n      GroupName: !Sub ${accountAllias}-bastion-sg\n      GroupDescription: !Sub ${accountAllias}-bastion-sg\n      Tags:\n        - Key: Name\n          Value: !Sub ${accountAllias}-bastion-sg\n  EC2:\n    Type: AWS::EC2::Instance\n    Properties:\n      ImageId: !Ref amiId\n      InstanceType: t3.micro\n      KeyName: !Sub ${accountAllias}-bastion-key\n      NetworkInterfaces:\n        - AssociatePublicIpAddress: true\n          SubnetId: !ImportValue PublicSubnet1a\n          DeviceIndex: 0\n          GroupSet:\n            - !Ref SSHSecurityGroup\n      UserData:\n        Fn::Base64: !Sub |\n          #!/bin/bash\n          yum -y update\n      Tags:\n        - Key: Name\n          Value: !Sub ${accountAllias}-bastion\n  EIP:\n    Type: AWS::EC2::EIP\n    Properties:\n      Domain: vpc\n  AssociateEIP:\n    Type: AWS::EC2::EIPAssociation\n    Properties:\n      EIP: !Ref EIP\n      InstanceId: !Ref EC2\nOutputs:\n  EC2:\n    Value: !Ref EC2\n    Export:\n      Name: BastionEC2\n  EIP:\n    Value: !Ref EIP\n    Export:\n      Name: BastionIP\n"
}
INV-ver-wfi01-web-ver-sub01
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: Create Service Endpoint\n\nParameters:\n  serviceAlliasLowerCase:\n    Type: String\n  serviceName:\n    Type: String\n  cidr:\n    Type: String\n\nResources:\n\n  endpointSecuritygroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupName: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      GroupDescription: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      Tags:\n        - Key: Name\n          Value: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      VpcId: !ImportValue VPC\n      SecurityGroupIngress:\n        - IpProtocol: tcp\n          FromPort: 80\n          ToPort: 80\n          CidrIp: !Ref cidr\n  endpoint:\n    Type: AWS::EC2::VPCEndpoint\n    Properties:\n      VpcEndpointType: Interface\n      VpcId: !ImportValue VPC\n      SubnetIds:\n        - !ImportValue PrivateSubnet1a\n        - !ImportValue PrivateSubnet1c\n      SecurityGroupIds:\n        - !Ref endpointSecuritygroup\n      ServiceName: !Ref serviceName\n      PrivateDnsEnabled: false\n"
}
INV-ver-wfi01-service-api-endpointService
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: Create Service Endpoint\n\nParameters:\n  arrowedAccountId1:\n    Type: String\n  arrowedAccountId2:\n    Type: String\n\nResources:\n  endpointService:\n    Type: \"AWS::EC2::VPCEndpointService\"\n    Properties:\n      NetworkLoadBalancerArns:\n        - !ImportValue serviceApiNlb\n      AcceptanceRequired: false\n  servicePermisstions:\n    Type: \"AWS::EC2::VPCEndpointServicePermissions\"\n    Properties:\n      AllowedPrincipals:\n        - !Sub arn:aws:iam::${arrowedAccountId1}:root\n        - !Sub arn:aws:iam::${arrowedAccountId2}:root\n      ServiceId: !Ref endpointService\n\nOutputs:\n  servicePermisstions:\n    Value: !Ref servicePermisstions\n    Export:\n      Name: service-api-servicePermisstions\n"
}
INV-ver-wfi01-vehicle-api-endpointService
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: Create Service Endpoint\n\nParameters:\n  arrowedAccountId1:\n    Type: String\n\nResources:\n  endpointService:\n    Type: \"AWS::EC2::VPCEndpointService\"\n    Properties:\n      NetworkLoadBalancerArns:\n        - !ImportValue vehicleApiNlb\n      AcceptanceRequired: false\n  servicePermisstions:\n    Type: \"AWS::EC2::VPCEndpointServicePermissions\"\n    Properties:\n      AllowedPrincipals:\n        - !Sub arn:aws:iam::${arrowedAccountId1}:root\n      ServiceId: !Ref endpointService\n\nOutputs:\n  servicePermisstions:\n    Value: !Ref servicePermisstions\n    Export:\n      Name: servicePermisstions\n"
}
INV-ver-wfi01-service-api-nlb
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: internal security group and nlb\n\nParameters:\n  accountAllias:\n    Type: String\n  accountAlliasLowerCase:\n    Type: String\n  internalSecurityGroupCidr:\n    Type: String\n\nResources:\n  serviceApiSecuritygroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupName: !Sub ${accountAlliasLowerCase}-service-api-sg\n      GroupDescription: !Sub ${accountAlliasLowerCase}-service-api-sg\n      Tags:\n        - Key: Name\n          Value: !Sub ${accountAlliasLowerCase}-service-api-sg\n      VpcId: !ImportValue VPC\n      SecurityGroupIngress:\n      - IpProtocol: tcp\n        FromPort: '80'\n        ToPort: '80'\n        CidrIp: !Ref internalSecurityGroupCidr\n  serviceApiTargetGroup:\n    Type: AWS::ElasticLoadBalancingV2::TargetGroup\n    Properties:\n      HealthCheckIntervalSeconds: 30\n      HealthCheckPath: /healthcheck\n      HealthCheckPort: 80\n      HealthCheckProtocol: HTTP\n      HealthCheckTimeoutSeconds: 6\n      HealthyThresholdCount: 3\n      Name: !Sub ${accountAlliasLowerCase}-service-api-tg\n      Port: 80\n      Protocol: TCP\n      UnhealthyThresholdCount: 3\n      TargetType: ip\n      VpcId: !ImportValue VPC\n  serviceApiNlb:\n    Type: AWS::ElasticLoadBalancingV2::LoadBalancer\n    Properties:\n      Name: !Sub ${accountAlliasLowerCase}-service-api-nlb\n      Scheme: internal\n      Subnets:\n        - !ImportValue PrivateSubnet1a\n        - !ImportValue PrivateSubnet1c\n      Tags:\n        - Key: Name\n          Value: !Sub ${accountAlliasLowerCase}-service-api-nlb\n      Type: network\n      LoadBalancerAttributes:\n        - Key: load_balancing.cross_zone.enabled\n          Value: true\n  serviceApillistnener:\n    Type: AWS::ElasticLoadBalancingV2::Listener\n    Properties:\n      DefaultActions:\n        - TargetGroupArn: !Ref serviceApiTargetGroup\n          Type: forward\n      LoadBalancerArn: !Ref serviceApiNlb\n      Port: 80\n      Protocol: TCP\n\nOutputs:\n  serviceApiSecuritygroup:\n    Value: !Ref serviceApiSecuritygroup\n    Export:\n      Name: serviceApiSecuritygroup\n  serviceApiTargetGroup:\n    Value: !Ref serviceApiTargetGroup\n    Export:\n      Name: serviceApiTargetGroup\n  serviceApiNlb:\n    Value: !Ref serviceApiNlb\n    Export:\n      Name: serviceApiNlb\n  serviceApillistnener:\n    Value: !Ref serviceApillistnener\n    Export:\n      Name: serviceApillistnener\n"
}
INV-ver-wfi01-vehicle-api-nlb
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: internal security group and nlb\n\nParameters:\n  accountAllias:\n    Type: String\n  accountAlliasLowerCase:\n    Type: String\n  internalSecurityGroupCidr:\n    Type: String\n\nResources:\n  vehicleApiSecuritygroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupName: !Sub ${accountAlliasLowerCase}-vehicle-api-sg\n      GroupDescription: !Sub ${accountAlliasLowerCase}-vehicle-api-sg\n      Tags:\n        - Key: Name\n          Value: !Sub ${accountAlliasLowerCase}-vehicle-api-sg\n      VpcId: !ImportValue VPC\n      SecurityGroupIngress:\n      - IpProtocol: tcp\n        FromPort: '80'\n        ToPort: '80'\n        CidrIp: !Ref internalSecurityGroupCidr\n  vehicleApiTargetGroup:\n    Type: AWS::ElasticLoadBalancingV2::TargetGroup\n    Properties:\n      HealthCheckIntervalSeconds: 30\n      HealthCheckPath: /healthcheck\n      HealthCheckPort: 80\n      HealthCheckProtocol: HTTP\n      HealthCheckTimeoutSeconds: 6\n      HealthyThresholdCount: 3\n      Name: !Sub ${accountAlliasLowerCase}-vehicle-api-tg\n      Port: 80\n      Protocol: TCP\n      UnhealthyThresholdCount: 3\n      TargetType: ip\n      VpcId: !ImportValue VPC\n  vehicleApiNlb:\n    Type: AWS::ElasticLoadBalancingV2::LoadBalancer\n    Properties:\n      Name: !Sub ${accountAlliasLowerCase}-vehicle-api-nlb\n      Scheme: internal\n      Subnets:\n        - !ImportValue PrivateSubnet1a\n        - !ImportValue PrivateSubnet1c\n      Tags:\n        - Key: Name\n          Value: !Sub ${accountAlliasLowerCase}-vehicle-api-nlb\n      Type: network\n      LoadBalancerAttributes:\n        - Key: load_balancing.cross_zone.enabled\n          Value: true\n  vehicleApillistnener:\n    Type: AWS::ElasticLoadBalancingV2::Listener\n    Properties:\n      DefaultActions:\n        - TargetGroupArn: !Ref vehicleApiTargetGroup\n          Type: forward\n      LoadBalancerArn: !Ref vehicleApiNlb\n      Port: 80\n      Protocol: TCP\n\nOutputs:\n  vehicleApiSecuritygroup:\n    Value: !Ref vehicleApiSecuritygroup\n    Export:\n      Name: vehicleApiSecuritygroup\n  vehicleApiTargetGroup:\n    Value: !Ref vehicleApiTargetGroup\n    Export:\n      Name: vehicleApiTargetGroup\n  vehicleApiNlb:\n    Value: !Ref vehicleApiNlb\n    Export:\n      Name: vehicleApiNlb\n  vehicleApillistnener:\n    Value: !Ref vehicleApillistnener\n    Export:\n      Name: vehicleApillistnener\n"
}
StackSet-ver-wfi01-createIamRole-40ec7f65-4438-440c-873c-b135f625405c
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "{\n  \"AWSTemplateFormatVersion\" : \"2010-09-09\",\n  \"Description\" : \"Template for Creating IAM Role to Switch from Internavi Login AWS Account\",\n  \"Parameters\" : {\n    \"TrustedAWSAccountId\" : {\n      \"AllowedPattern\" : \"^[0-9]*$\",\n      \"Type\" : \"String\",\n      \"Default\" : \"975196479634\",\n      \"Description\" : \"Trusted AWS Account ID\"\n    },\n    \"IAMRoleName\": {\n      \"Type\": \"String\",\n      \"Default\": \"SolDeveloper\",\n      \"Description\": \"IAM Role Name\"\n    },\n    \"IAMPolicyType\": {\n      \"Type\": \"String\",\n      \"Default\": \"SolUser\",\n      \"Description\": \"IAM Policy Type\",\n      \"AllowedValues\": [ \"SolUser\", \"Admin\" ]\n    }\n  },\n  \"Conditions\" : {\n    \"user\"        : { \"Fn::Equals\" : [{\"Ref\" : \"IAMPolicyType\"}, \"SolUser\" ]},\n    \"admin\"        : { \"Fn::Equals\" : [{\"Ref\" : \"IAMPolicyType\"}, \"Admin\" ]}\n  },\n  \"Resources\" : {\n    \"IAMRoleForAdmin\": {\n      \"Type\": \"AWS::IAM::Role\",\n      \"Condition\" : \"admin\",\n      \"Properties\": {\n        \"AssumeRolePolicyDocument\": {\n          \"Version\": \"2012-10-17\",\n          \"Statement\": [\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV040001\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV040002\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV040003\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV040004\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            }\n          ]\n        },\n        \"ManagedPolicyArns\": [\n          \"arn:aws:iam::aws:policy/AdministratorAccess\"\n        ],\n        \"Path\": \"/\",\n        \"RoleName\": { \"Ref\" : \"IAMRoleName\" }\n      }\n    },\n    \"IAMRoleForUser\": {\n      \"Type\": \"AWS::IAM::Role\",\n      \"Condition\" : \"user\",\n      \"Properties\": {\n        \"AssumeRolePolicyDocument\": {\n          \"Version\": \"2012-10-17\",\n          \"Statement\": [\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV040001\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV040002\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV040003\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV040004\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            }\n          ]\n        },\n        \"ManagedPolicyArns\": [\n          \"arn:aws:iam::aws:policy/ReadOnlyAccess\",\n          \"arn:aws:iam::aws:policy/AWSCodeCommitPowerUser\"\n        ],\n        \"Path\": \"/\",\n        \"RoleName\": { \"Ref\" : \"IAMRoleName\" }\n      }\n    }\n  },\n  \"Outputs\" : {\n    \"IAMRoleAdminArn\": {\n      \"Value\": { \"Fn::GetAtt\" : [ \"IAMRoleForAdmin\", \"Arn\" ] },\n      \"Condition\" : \"admin\"\n    },\n    \"IAMRoleUserArn\": {\n      \"Value\": { \"Fn::GetAtt\" : [ \"IAMRoleForUser\", \"Arn\" ] },\n      \"Condition\" : \"user\"\n    },\n    \"LinkForSwitchRole\": {\n      \"Value\": { \"Fn::Join\": [ \"\", [ \"https://signin.aws.amazon.com/switchrole?roleName=\", { \"Ref\" : \"IAMRoleName\" }, \"&account=\", { \"Ref\" : \"AWS::AccountId\" } ] ] }\n    }\n  }\n}\n"
}
INV-ver-wfi01-vpc-base
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "---\nAWSTemplateFormatVersion: '2010-09-09'\nDescription: VPC Network Template\nParameters:\n  SolName:\n    Type: String\n    Default: base01\n    Description: Solution Name.\n  SubSolName:\n    Type: String\n    Default: base\n    Description: Solution Name.\n  EnvName:\n    Type: String\n    Default: dev\n    Description: Env Name.\n  VPCCIDR:\n    Description: First and Second Octet of VPC, For example xxx.xxx\n    Type: String\n    Default: '10.0'\n    AllowedPattern: \"^(10\\\\.([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])|172\\\\.(1[6-9]|2[0-9]|3[0-1])|192\\\\.168)$\"\n    ConstraintDescription: xxx.xxx\nMappings:\n  StackConfig:\n    VPC:\n      CIDR: \".0.0/16\"\n    PublicSubnet1:\n      CIDR: \".0.0/24\"\n    PublicSubnet2:\n      CIDR: \".1.0/24\"\n    PrivateSubnet1:\n      CIDR: \".10.0/24\"\n    PrivateSubnet2:\n      CIDR: \".11.0/24\"\n\nResources:\n  VPC:\n    Type: AWS::EC2::VPC\n    Properties:\n      CidrBlock: !Sub\n        - ${VPCCIDR}${SubCIDR}\n        - SubCIDR: {\"Fn::FindInMap\": [ StackConfig, VPC, CIDR ]}\n      EnableDnsSupport: 'true'\n      EnableDnsHostnames: 'true'\n      InstanceTenancy: default\n      Tags:\n      - Key: Name\n        Value: !Sub INV-${EnvName}-${SolName}\n  InternetGateway:\n    Type: AWS::EC2::InternetGateway\n    Properties:\n      Tags:\n      - Key: Name\n        Value: !Sub INV-${EnvName}-${SolName}\n  AttachGateway:\n    Type: AWS::EC2::VPCGatewayAttachment\n    Properties:\n      VpcId: !Ref VPC\n      InternetGatewayId: !Ref InternetGateway\n\n  PublicSubnet1a:\n    Type: AWS::EC2::Subnet\n    DependsOn: AttachGateway\n    Properties:\n      AvailabilityZone: !Select [ 0, \"Fn::GetAZs\": {Ref: \"AWS::Region\"}]\n      CidrBlock: !Sub\n        - ${VPCCIDR}${SubCIDR}\n        - SubCIDR: {\"Fn::FindInMap\": [ StackConfig, PublicSubnet1, CIDR ]}\n      MapPublicIpOnLaunch: 'true'\n      Tags:\n      - Key: Name\n        Value: !Sub INV-${EnvName}-${SolName}-PublicSubnet1a\n      VpcId: !Ref VPC\n  PublicSubnet1c:\n    Type: AWS::EC2::Subnet\n    DependsOn: AttachGateway\n    Properties:\n      AvailabilityZone: !Select [ 1, \"Fn::GetAZs\": {Ref: \"AWS::Region\"}]\n      CidrBlock: !Sub\n        - ${VPCCIDR}${SubCIDR}\n        - SubCIDR: {\"Fn::FindInMap\": [ StackConfig, PublicSubnet2, CIDR ]}\n      MapPublicIpOnLaunch: 'true'\n      Tags:\n      - Key: Name\n        Value: !Sub INV-${EnvName}-${SolName}-PublicSubnet1c\n      VpcId: !Ref VPC\n  PrivateSubnet1a:\n    Type: AWS::EC2::Subnet\n    DependsOn: AttachGateway\n    Properties:\n      AvailabilityZone: !Select [ 0, \"Fn::GetAZs\": {Ref: \"AWS::Region\"}]\n      CidrBlock: !Sub\n        - ${VPCCIDR}${SubCIDR}\n        - SubCIDR: {\"Fn::FindInMap\": [ StackConfig, PrivateSubnet1, CIDR ]}\n      MapPublicIpOnLaunch: 'true'\n      Tags:\n      - Key: Name\n        Value: !Sub INV-${EnvName}-${SolName}-PrivateSubnet1a\n      VpcId: !Ref VPC\n  PrivateSubnet1c:\n    Type: AWS::EC2::Subnet\n    DependsOn: AttachGateway\n    Properties:\n      AvailabilityZone: !Select [ 1, \"Fn::GetAZs\": {Ref: \"AWS::Region\"}]\n      CidrBlock: !Sub\n        - ${VPCCIDR}${SubCIDR}\n        - SubCIDR: {\"Fn::FindInMap\": [ StackConfig, PrivateSubnet2, CIDR ]}\n      MapPublicIpOnLaunch: 'true'\n      Tags:\n      - Key: Name\n        Value: !Sub INV-${EnvName}-${SolName}-PrivateSubnet1c\n      VpcId: !Ref VPC\n\n  EIP1a:\n    Type: AWS::EC2::EIP\n    Properties:\n      Domain: vpc\n  NAT1a:\n    Type: AWS::EC2::NatGateway\n    Properties:\n      AllocationId:\n        Fn::GetAtt:\n          - EIP1a\n          - AllocationId\n      SubnetId: !Ref PublicSubnet1a\n      Tags:\n        - Key: Name\n          Value: !Sub INV-${EnvName}-${SolName}-NGW1a\n\n  EIP1c:\n    Type: AWS::EC2::EIP\n    Properties:\n      Domain: vpc\n  NAT1c:\n    Type: AWS::EC2::NatGateway\n    Properties:\n      AllocationId:\n        Fn::GetAtt:\n          - EIP1c\n          - AllocationId\n      SubnetId: !Ref PublicSubnet1c\n      Tags:\n        - Key: Name\n          Value: !Sub INV-${EnvName}-${SolName}-NGW1c\n\n  PublicRouteTable:\n    Type: AWS::EC2::RouteTable\n    DependsOn: AttachGateway\n    Properties:\n      VpcId: !Ref VPC\n      Tags:\n      - Key: Name\n        Value: !Sub INV-${EnvName}-${SolName}-PublicRoute\n  PublicRoute:\n    Type: AWS::EC2::Route\n    DependsOn: AttachGateway\n    Properties:\n      RouteTableId: !Ref PublicRouteTable\n      DestinationCidrBlock: 0.0.0.0/0\n      GatewayId: !Ref InternetGateway\n  PrivateRouteTable1a:\n    Type: AWS::EC2::RouteTable\n    DependsOn: NAT1a\n    Properties:\n      VpcId: !Ref VPC\n      Tags:\n      - Key: Name\n        Value: !Sub INV-${EnvName}-${SolName}-PrivateRoute1a\n  PrivateRoute1a:\n    Type: AWS::EC2::Route\n    DependsOn: NAT1a\n    Properties:\n      RouteTableId: !Ref PrivateRouteTable1a\n      DestinationCidrBlock: 0.0.0.0/0\n      NatGatewayId: !Ref NAT1a\n  PrivateRouteTable1c:\n    Type: AWS::EC2::RouteTable\n    DependsOn: NAT1c\n    Properties:\n      VpcId: !Ref VPC\n      Tags:\n      - Key: Name\n        Value: !Sub INV-${EnvName}-${SolName}-PrivateRoute1c\n  PrivateRoute1c:\n    Type: AWS::EC2::Route\n    DependsOn: NAT1c\n    Properties:\n      RouteTableId: !Ref PrivateRouteTable1c\n      DestinationCidrBlock: 0.0.0.0/0\n      NatGatewayId: !Ref NAT1c\n\n  PublicSubnet1aRouteTableAssociation:\n    Type: AWS::EC2::SubnetRouteTableAssociation\n    Properties:\n      SubnetId: !Ref PublicSubnet1a\n      RouteTableId: !Ref PublicRouteTable\n  PublicSubnet1cRouteTableAssociation:\n    Type: AWS::EC2::SubnetRouteTableAssociation\n    Properties:\n      SubnetId: !Ref PublicSubnet1c\n      RouteTableId: !Ref PublicRouteTable\n  PrivateSubnet1aRouteTableAssociation:\n    Type: AWS::EC2::SubnetRouteTableAssociation\n    Properties:\n      SubnetId: !Ref PrivateSubnet1a\n      RouteTableId: !Ref PrivateRouteTable1a\n  PrivateSubnet1cRouteTableAssociation:\n    Type: AWS::EC2::SubnetRouteTableAssociation\n    Properties:\n      SubnetId: !Ref PrivateSubnet1c\n      RouteTableId: !Ref PrivateRouteTable1c\n\n  DNS1:\n    Type: \"AWS::Route53::HostedZone\"\n    Properties:\n      HostedZoneConfig:\n        Comment: INV-LocalDomain\n      Name: internal-internavi\n      VPCs:\n        -\n          VPCId: !Ref VPC\n          VPCRegion: !Ref AWS::Region\n      HostedZoneTags:\n        -\n          Key: \"Name\"\n          Value: !Sub INV-${EnvName}-${SolName}\n\n  FlowLogBucket:\n    Type: AWS::S3::Bucket\n    Properties:\n        BucketName: !Join\n          - \"-\"\n          -\n            - inv\n            - !Ref EnvName\n            - !Ref SolName\n            - !Ref VPC\n  FlowLogBucketPolicy:\n    Type: AWS::S3::BucketPolicy\n    DependsOn: NAT1c\n    Properties:\n      Bucket: !Ref FlowLogBucket\n      PolicyDocument:\n        Statement:\n          -\n            Action:\n              - \"s3:PutObject\"\n            Effect: \"Allow\"\n            Resource:\n              Fn::Join:\n                - \"\"\n                -\n                  - \"arn:aws:s3:::\"\n                  - !Ref FlowLogBucket\n                  - \"/*\"\n            Principal:\n              Service: \"delivery.logs.amazonaws.com\"\n            Condition:\n              StringEquals:\n                s3:x-amz-acl: bucket-owner-full-control\n          -\n            Action:\n              - \"s3:GetBucketAcl\"\n            Effect: \"Allow\"\n            Resource:\n              Fn::Join:\n                - \"\"\n                -\n                  - \"arn:aws:s3:::\"\n                  - !Ref FlowLogBucket\n            Principal:\n              Service: \"delivery.logs.amazonaws.com\"\n  FlowLog:\n    Type: AWS::EC2::FlowLog\n    DependsOn: FlowLogBucketPolicy\n    Properties:\n      LogDestinationType : \"s3\"\n      LogDestination : !Join\n        - \"\"\n        -\n          - \"arn:aws:s3:::\"\n          - !Ref FlowLogBucket\n          - /FlowLogs/\n      ResourceType : VPC\n      ResourceId : !Ref VPC\n      TrafficType : ALL\n\n  S3Endpoint:\n    Type: AWS::EC2::VPCEndpoint\n    Properties:\n      RouteTableIds:\n        - !Ref PublicRouteTable\n        - !Ref PrivateRouteTable1a\n        - !Ref PrivateRouteTable1c\n      ServiceName: !Join\n        - ''\n        - - com.amazonaws.\n          - !Ref 'AWS::Region'\n          - .s3\n      VpcId: !Ref VPC\n  DynamoEndpoint:\n    Type: AWS::EC2::VPCEndpoint\n    Properties:\n      RouteTableIds:\n        - !Ref PublicRouteTable\n        - !Ref PrivateRouteTable1a\n        - !Ref PrivateRouteTable1c\n      ServiceName: !Join\n        - ''\n        - - com.amazonaws.\n          - !Ref 'AWS::Region'\n          - .dynamodb\n      VpcId: !Ref VPC\n  Certificate:\n    Type: AWS::CertificateManager::Certificate\n    Properties:\n      DomainName: !Sub '*.${EnvName}-${SubSolName}.cloud.internavi.ne.jp'\n      SubjectAlternativeNames:\n        - '*.cloud.internavi.ne.jp'\n      ValidationMethod: DNS\n\nOutputs:\n  VPC:\n    Value: !Ref VPC\n    Export:\n      Name: VPC\n  PublicSubnet1a:\n    Value: !Ref PublicSubnet1a\n    Export:\n      Name: PublicSubnet1a\n  PublicSubnet1c:\n    Value: !Ref PublicSubnet1c\n    Export:\n      Name: PublicSubnet1c\n  PrivateSubnet1a:\n    Value: !Ref PrivateSubnet1a\n    Export:\n      Name: PrivateSubnet1a\n  PrivateSubnet1c:\n    Value: !Ref PrivateSubnet1c\n    Export:\n      Name: PrivateSubnet1c\n  PublicRouteTable:\n    Value: !Ref PublicRouteTable\n    Export:\n      Name: PublicRouteTable\n  PrivateRouteTable1a:\n    Value: !Ref PrivateRouteTable1a\n    Export:\n      Name: PrivateRouteTable1a\n  PrivateRouteTable1c:\n    Value: !Ref PrivateRouteTable1c\n    Export:\n      Name: PrivateRouteTable1c\n  DNS1:\n    Value: !Ref DNS1\n    Export:\n      Name: DNS1\n"
}
INV-ver-wfi01-codecommit-ecr
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: codecommit and ecr\n\nParameters:\n  accountAllias:\n    Type: String\n  accountAlliasLowerCase:\n    Type: String\n\n\nResources:\n  codecommit:\n    Type: AWS::CodeCommit::Repository\n    Properties:\n      RepositoryName: !Sub ${accountAllias}-codecommit\n      RepositoryDescription: !Sub ${accountAllias}-codecommit\n  codecommitcfn:\n    Type: AWS::CodeCommit::Repository\n    Properties:\n      RepositoryName: !Sub ${accountAllias}-cfn\n      RepositoryDescription: !Sub ${accountAllias}-cfn\n  ecr:\n    Type: AWS::ECR::Repository\n    Properties: \n      RepositoryName: !Sub ${accountAlliasLowerCase}-ecr\n  vehicleApiEcr:\n    Type: AWS::ECR::Repository\n    Properties: \n      RepositoryName: !Sub ${accountAlliasLowerCase}-vehicle-api-ecr\n  serviceApiEcr:\n    Type: AWS::ECR::Repository\n    Properties: \n      RepositoryName: !Sub ${accountAlliasLowerCase}-service-api-ecr\n  jasperControlEcr:\n    Type: AWS::ECR::Repository\n    Properties: \n      RepositoryName: !Sub ${accountAlliasLowerCase}-jasper-control-ecr\n  dataMonitoringEcr:\n    Type: AWS::ECR::Repository\n    Properties: \n      RepositoryName: !Sub ${accountAlliasLowerCase}-data-monitoring-ecr\n  nginxEcr:\n    Type: AWS::ECR::Repository\n    Properties: \n      RepositoryName: !Sub ${accountAlliasLowerCase}-nginx-ecr\n\nOutputs:\n  codecommit:\n    Value: !Ref codecommit\n    Export:\n      Name: codecommit\n  codecommitcfn:\n    Value: !Ref codecommitcfn\n    Export:\n      Name: codecommitcfn\n  ecr:\n    Value: !GetAtt ecr.Arn\n    Export:\n      Name: ecr\n  vehicleApiEcr:\n    Value: !GetAtt vehicleApiEcr.Arn\n    Export:\n      Name: vehicleApiEcr\n  serviceApiEcr:\n    Value: !GetAtt serviceApiEcr.Arn\n    Export:\n      Name: serviceApiEcr\n  jasperControlEcr:\n    Value: !GetAtt jasperControlEcr.Arn\n    Export:\n      Name: jasperControlEcr\n  dataMonitoringEcr:\n    Value: !GetAtt dataMonitoringEcr.Arn\n    Export:\n      Name: dataMonitoringEcr\n  nginxEcr:\n    Value: !GetAtt nginxEcr.Arn\n    Export:\n      Name: nginxEcr\n\n"
}
StackSet-HmAdmin-createIamRole-497d0225-16c8-44aa-8f3b-463c180bab73
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "{\n  \"AWSTemplateFormatVersion\" : \"2010-09-09\",\n  \"Description\" : \"Template for Creating IAM Role to Switch from Internavi Login AWS Account\",\n  \"Parameters\" : {\n    \"TrustedAWSAccountId\" : {\n      \"AllowedPattern\" : \"^[0-9]*$\",\n      \"Type\" : \"String\",\n      \"Default\" : \"975196479634\",\n      \"Description\" : \"Trusted AWS Account ID\"\n    },\n    \"IAMRoleName\": {\n      \"Type\": \"String\",\n      \"Default\": \"HmAdmin\",\n      \"Description\": \"IAM Role Name\"\n    }\n  },\n  \"Resources\" : {\n    \"IAMRoleForEngineer\": {\n      \"Type\": \"AWS::IAM::Role\",\n      \"Properties\": {\n        \"AssumeRolePolicyDocument\": {\n          \"Version\": \"2012-10-17\",\n          \"Statement\": [\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"J0322720\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"J0116063\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JP300063\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JP310643\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JP311734\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            }\n          ]\n        },\n        \"ManagedPolicyArns\": [\n          \"arn:aws:iam::aws:policy/AdministratorAccess\"\n        ],\n        \"Path\": \"/\",\n        \"RoleName\": { \"Ref\" : \"IAMRoleName\" }\n      }\n    }\n  },\n  \"Outputs\" : {\n    \"IAMRoleArn\": {\n      \"Value\": { \"Fn::GetAtt\" : [ \"IAMRoleForEngineer\", \"Arn\" ] }\n    },\n    \"LinkForSwitchRole\": {\n      \"Value\": { \"Fn::Join\": [ \"\", [ \"https://signin.aws.amazon.com/switchrole?roleName=\", { \"Ref\" : \"IAMRoleName\" }, \"&account=\", { \"Ref\" : \"AWS::AccountId\" } ] ] }\n    }\n  }\n}\n"
}
StackSet-cm-cm-hamada-koji-iamRole-e519fff8-37b4-446c-af02-d4f69e0dcb62
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": {
        "AWSTemplateFormatVersion": "2010-09-09", 
        "Description": "Template for Creating IAM Role to Switch from Classmethod AWS Account", 
        "Parameters": {
            "TrustedAWSAccountId": {
                "AllowedPattern": "^[0-9]*$", 
                "Type": "String", 
                "Default": "", 
                "Description": "Trusted AWS Account ID"
            }, 
            "IAMUserName": {
                "AllowedPattern": "^cm-[a-z.]*$", 
                "Type": "String", 
                "Default": "cm-xxx.xxx", 
                "Description": "IAM Role Name"
            }
        }, 
        "Resources": {
            "IAMRoleForCmEngineer": {
                "Type": "AWS::IAM::Role", 
                "Properties": {
                    "AssumeRolePolicyDocument": {
                        "Version": "2012-10-17", 
                        "Statement": [
                            {
                                "Effect": "Allow", 
                                "Principal": {
                                    "AWS": {
                                        "Fn::Join": [
                                            "", 
                                            [
                                                "arn:aws:iam::", 
                                                {
                                                    "Ref": "TrustedAWSAccountId"
                                                }, 
                                                ":user/", 
                                                {
                                                    "Ref": "IAMUserName"
                                                }
                                            ]
                                        ]
                                    }
                                }, 
                                "Action": [
                                    "sts:AssumeRole"
                                ], 
                                "Condition": {
                                    "Bool": {
                                        "aws:MultiFactorAuthPresent": "true"
                                    }
                                }
                            }
                        ]
                    }, 
                    "ManagedPolicyArns": [
                        "arn:aws:iam::aws:policy/AdministratorAccess"
                    ], 
                    "Path": "/", 
                    "RoleName": {
                        "Ref": "IAMUserName"
                    }
                }
            }
        }, 
        "Outputs": {
            "IAMRoleArn": {
                "Value": {
                    "Fn::GetAtt": [
                        "IAMRoleForCmEngineer", 
                        "Arn"
                    ]
                }
            }, 
            "LinkForSwitchRole": {
                "Value": {
                    "Fn::Join": [
                        "", 
                        [
                            "https://signin.aws.amazon.com/switchrole?roleName=", 
                            {
                                "Ref": "IAMUserName"
                            }, 
                            "&account=", 
                            {
                                "Ref": "AWS::AccountId"
                            }
                        ]
                    ]
                }
            }
        }
    }
}
StackSetsExecutionRole
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: 2010-09-09\nDescription: Configure the AWSCloudFormationStackSetExecutionRole to support AWS CloudFormation StackSets in a managed account.\n\nParameters:\n  MasterAccountId:\n    Type: String\n    Description: AWS Account Id of the master account (the account in which StackSets will be created).\n    MaxLength: 12\n    MinLength: 12\n\nResources:\n  ExecutionRole:\n    Type: AWS::IAM::Role\n    Properties:\n      RoleName: AWSCloudFormationStackSetExecutionRole\n      AssumeRolePolicyDocument: \n        Version: 2012-10-17\n        Statement: \n          - Effect: Allow\n            Principal: \n              AWS:\n                - !Ref MasterAccountId\n            Action: \n              - sts:AssumeRole\n      Path: /\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/AdministratorAccess\n"
}
cm-kikuchi-shuji-iamRole
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": {
        "AWSTemplateFormatVersion": "2010-09-09", 
        "Description": "Template for Creating IAM Role to Switch from Classmethod AWS Account", 
        "Parameters": {
            "TrustedAWSAccountId": {
                "AllowedPattern": "^[0-9]*$", 
                "Type": "String", 
                "Default": "", 
                "Description": "Trusted AWS Account ID"
            }, 
            "IAMUserName": {
                "AllowedPattern": "^cm-[a-z.]*$", 
                "Type": "String", 
                "Default": "cm-xxx.xxx", 
                "Description": "IAM Role Name"
            }
        }, 
        "Resources": {
            "IAMRoleForCmEngineer": {
                "Type": "AWS::IAM::Role", 
                "Properties": {
                    "AssumeRolePolicyDocument": {
                        "Version": "2012-10-17", 
                        "Statement": [
                            {
                                "Effect": "Allow", 
                                "Principal": {
                                    "AWS": {
                                        "Fn::Join": [
                                            "", 
                                            [
                                                "arn:aws:iam::", 
                                                {
                                                    "Ref": "TrustedAWSAccountId"
                                                }, 
                                                ":user/", 
                                                {
                                                    "Ref": "IAMUserName"
                                                }
                                            ]
                                        ]
                                    }
                                }, 
                                "Action": [
                                    "sts:AssumeRole"
                                ], 
                                "Condition": {
                                    "Bool": {
                                        "aws:MultiFactorAuthPresent": "true"
                                    }
                                }
                            }
                        ]
                    }, 
                    "ManagedPolicyArns": [
                        "arn:aws:iam::aws:policy/AdministratorAccess"
                    ], 
                    "Path": "/", 
                    "RoleName": {
                        "Ref": "IAMUserName"
                    }
                }
            }
        }, 
        "Outputs": {
            "IAMRoleArn": {
                "Value": {
                    "Fn::GetAtt": [
                        "IAMRoleForCmEngineer", 
                        "Arn"
                    ]
                }
            }, 
            "LinkForSwitchRole": {
                "Value": {
                    "Fn::Join": [
                        "", 
                        [
                            "https://signin.aws.amazon.com/switchrole?roleName=", 
                            {
                                "Ref": "IAMUserName"
                            }, 
                            "&account=", 
                            {
                                "Ref": "AWS::AccountId"
                            }
                        ]
                    ]
                }
            }
        }
    }
}
]
スクリプトを終了します
  1- INV-ver-htc01:arn:aws:iam::686753218709:role/OpeAdminRole
  2- INV-ver-sub01:arn:aws:iam::495152581087:role/OpeAdminRole
  3- INV-ver-cer01:arn:aws:iam::339311866652:role/OpeAdminRole
  4- INV-ver-des01:arn:aws:iam::302986797475:role/OpeAdminRole
  5- INV-ver-agw01:arn:aws:iam::859823971378:role/OpeAdminRole
  6- INV-ver-vdm01:arn:aws:iam::497617980196:role/OpeAdminRole
  7- INV-ver-wfi01:arn:aws:iam::932204081418:role/OpeAdminRole
  8- INV-ver-esp01:arn:aws:iam::131000633826:role/OpeAdminRole
  9- INV-ver-rmt01:arn:aws:iam::604584103104:role/OpeAdminRole
 10- INV-ver-esw01:arn:aws:iam::170541451228:role/OpeAdminRole
 11- INV-ver-tcu01:arn:aws:iam::951453431396:role/OpeAdminRole
 12- INV-ver-vky01:arn:aws:iam::207429400733:role/OpeAdminRole
     all- All Environments:select all environments
スクリプトを実行します。
aws cloudformation describe-stacks --query Stacks[*].StackName
{
    "Account": "975196479634", 
    "UserId": "AIDA6GDR5MCJLYN4JQRFZ", 
    "Arn": "arn:aws:iam::975196479634:user/JV010028"
}
{
    "Account": "131000633826", 
    "UserId": "AROAR5AB7BHRG45LPA2AQ:inv-20190702040933", 
    "Arn": "arn:aws:sts::131000633826:assumed-role/OpeAdminRole/inv-20190702040933"
}
[
inv-ver-esp01-monitoring-lambda
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: \"2010-09-09\"\r\nDescription: \"monitoring-lambda.yml\"\r\nParameters: \r\n  EnvironmentName: \r\n    Default: ver\r\n    Description: \"Environment Name\"\r\n    Type: String\r\n  MicroServiceName: \r\n    Default: cer01\r\n    Description: \"MicroService Name\"\r\n    Type: String\r\n  S3Buckets: \r\n    Default: \"inv-ver-cer01-cfn\"\r\n    Description: \"source s3 backet name\"\r\n    Type: String\r\n  S3Prefix:\r\n    Default: \"monitor-config/\"\r\n    Description: \"source s3 backet file prefix\"\r\n    Type: String\r\n  iniFileName: \r\n    Default: \"monitor.json\"\r\n    Description: \"scenario file name\"\r\n    Type: String\r\n  scenarioSourceLogGroup:\r\n    Description: \"Scenario CWL log group name\"\r\n    Type: \"String\"\r\n  scenarioFilterPattern:\r\n    Default: \"\"\r\n    Description: \"Scenario Monitor CWL log FilterPattern\"\r\n    Type: \"String\"\r\n  programSourceLogGroup:\r\n    Description: \"program CWL log group name\"\r\n    Type: \"String\"\r\n  programFilterPattern:\r\n    Default: ?\"ERROR\" ?\"FATAL\" ?\"WARN\"\r\n    Description: \"program Monitor CWL log FilterPattern\"\r\n    Type: \"String\"\r\nResources:\r\n  IAMRole:\r\n    Type: \"AWS::IAM::Role\"\r\n    Properties: \r\n      AssumeRolePolicyDocument: \r\n        Version: \"2012-10-17\"\r\n        Statement: \r\n          - Effect: Allow\r\n            Principal: \r\n              Service: \"lambda.amazonaws.com\"\r\n            Action: \"sts:AssumeRole\"\r\n      ManagedPolicyArns: \r\n        - \"arn:aws:iam::aws:policy/AmazonSNSFullAccess\"\r\n      Path: \"/\"\r\n      Policies:\r\n        - PolicyName: monitor_lambda_policy\r\n          PolicyDocument:\r\n            Version: '2012-10-17'\r\n            Statement:\r\n              - Effect: Allow\r\n                Action:\r\n                  - cloudwatch:*\r\n                  - logs:*\r\n                  - s3:Get*\r\n                  - s3:List*\r\n                Resource: \"*\"\r\n      RoleName: !Sub inv-${EnvironmentName}-${MicroServiceName}-monitoring-lambda-role\r\n  LambdaLayer:\r\n    Type: \"AWS::Lambda::LayerVersion\"\r\n    Properties:\r\n      CompatibleRuntimes: \r\n        - python3.6\r\n      Content: \r\n        S3Bucket:\r\n          Ref: S3Buckets\r\n        S3Key: CloudwatchAlarm/metrics_mod.zip\r\n      Description: \"monitor_lambda_modules\"\r\n      LayerName: monitor_module\r\n  LambdaFunction: \r\n    DependsOn: \r\n      - IAMRole\r\n    Type: \"AWS::Lambda::Function\"\r\n    Properties: \r\n      Code: \r\n        S3Bucket: \r\n          Ref: S3Buckets\r\n        S3Key: CloudwatchAlarm/monitoring_common_lambda_src.zip           \r\n      FunctionName: !Sub inv-${EnvironmentName}-${MicroServiceName}-monitoring_common_lambda\r\n      Handler: lambda_function.lambda_handler\r\n      Environment: \r\n        Variables: \r\n          ENV: \r\n            Ref: EnvironmentName\r\n          STG: \r\n            Ref: MicroServiceName\r\n          fileName:\r\n            Ref: iniFileName\r\n          s3Bucket:\r\n            Ref: S3Buckets\r\n          s3keyPrefix:\r\n            Ref: S3Prefix\r\n      Role: \r\n        \"Fn::GetAtt\": \r\n          - IAMRole\r\n          - Arn\r\n      Runtime: \"python3.6\"\r\n      MemorySize: 512\r\n      Timeout: 300\r\n      Layers:\r\n        - !Ref LambdaLayer\r\n  LambdaPermission: \r\n    Type: \"AWS::Lambda::Permission\"\r\n    Properties: \r\n      Action: \"lambda:InvokeFunction\"\r\n      FunctionName: \r\n        \"Fn::GetAtt\": \r\n          - LambdaFunction\r\n          - Arn\r\n      Principal: !Sub \"sns.amazonaws.com\"\r\n      SourceArn: !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:inv-${EnvironmentName}-${MicroServiceName}\r\n  ScenarioSubscriptionFilter:\r\n    DependsOn:\r\n      - ScenarioLambdaInvokePermission\r\n    Type: \"AWS::Logs::SubscriptionFilter\"\r\n    Properties:\r\n      LogGroupName: !Ref scenarioSourceLogGroup\r\n      FilterPattern: !Ref scenarioFilterPattern\r\n      DestinationArn: !Join\r\n        - ''\r\n        - - !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:'\r\n          - !Sub inv-${EnvironmentName}-${MicroServiceName}-monitoring_common_lambda\r\n  ScenarioLambdaInvokePermission:\r\n    Type: 'AWS::Lambda::Permission'\r\n    Properties:\r\n      FunctionName:\r\n        \"Fn::GetAtt\": \r\n          - LambdaFunction\r\n          - Arn\r\n      Action: \"lambda:InvokeFunction\"\r\n      Principal: !Sub \"logs.amazonaws.com\"\r\n      SourceAccount: !Ref AWS::AccountId\r\n      SourceArn: !Sub \"arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${scenarioSourceLogGroup}:*\"\r\n  ProgramSubscriptionFilter:\r\n    DependsOn:\r\n      - ProgramLambdaInvokePermission\r\n    Type: \"AWS::Logs::SubscriptionFilter\"\r\n    Properties:\r\n      LogGroupName: !Ref programSourceLogGroup\r\n      FilterPattern: !Ref programFilterPattern\r\n      DestinationArn: !Join\r\n        - ''\r\n        - - !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:'\r\n          - !Sub inv-${EnvironmentName}-${MicroServiceName}-monitoring_common_lambda\r\n  ProgramLambdaInvokePermission:\r\n    Type: 'AWS::Lambda::Permission'\r\n    Properties:\r\n      FunctionName:\r\n        \"Fn::GetAtt\": \r\n          - LambdaFunction\r\n          - Arn\r\n      Action: \"lambda:InvokeFunction\"\r\n      Principal: !Sub \"logs.amazonaws.com\"\r\n      SourceAccount: !Ref AWS::AccountId\r\n      SourceArn: !Sub \"arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${programSourceLogGroup}:*\"\r\nOutputs: \r\n  IAMRole: \r\n    Description: \"IAM Role Name\"\r\n    Value: \r\n      Ref: IAMRole\r\n  SNSTopic: \r\n    Description: \"SNS Topic Name\"\r\n    Value: \r\n      !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:inv-${EnvironmentName}-${MicroServiceName}\r\n  LambdaFunction: \r\n    Description: \"Lambda Function Name\"\r\n    Value: \r\n      Ref: LambdaFunction"
}
infraMain-apiGateway-1PH7UN8MDYYZW
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: \"2010-09-09\"\r\nDescription: apigateway template\r\nParameters: \r\n  environment: \r\n    Type: String \r\n    AllowedValues: \r\n      - dev \r\n      - ver \r\n      - prd \r\n  area: \r\n    Type: String \r\n    AllowedValues: \r\n      - jp \r\nResources: \r\n  Account:  \r\n    Type: AWS::ApiGateway::Account \r\n    Properties:  \r\n     CloudWatchRoleArn:\r\n      Fn::GetAtt: [CloudWatchRole, Arn] \r\n  CloudWatchRole:  \r\n    Type: AWS::IAM::Role \r\n    Properties:  \r\n      RoleName:\r\n        Fn::Sub: inv-${environment}-${area}-rl-apigateway\r\n      AssumeRolePolicyDocument:  \r\n        Version: \"2012-10-17\" \r\n        Statement:  \r\n          - Effect: Allow \r\n            Principal:  \r\n              Service:  \r\n                - \"apigateway.amazonaws.com\" \r\n            Action: \"sts:AssumeRole\" \r\n      Path: \"/\" \r\n      ManagedPolicyArns:  \r\n        - \"arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs\" "
}
INV-ver-esp01-gtc-role
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: GTC Access Role\n\n# ------------------------------------------------------------#\n#  Parameters\n# ------------------------------------------------------------#\nParameters:\n  trustedRole1:\n    Type: String\n  resourceArn:\n    Type: String\n\nResources:\n# ------------------------------------------------------------#\n#  Role\n# ------------------------------------------------------------#\n  accessPolicy:\n      Type: AWS::IAM::ManagedPolicy\n      Properties:\n        ManagedPolicyName: gtcApiAccessPlicy\n        Description: \"Policy for API Access by GTC\"\n        Path: \"/\"\n        PolicyDocument:\n          Version: \"2012-10-17\"\n          Statement:\n            -\n              Effect: \"Allow\"\n              Action: \"execute-api:Invoke\"\n              Resource: !Ref resourceArn\n  gtcRole:\n    Type: AWS::IAM::Role\n    Properties:\n      RoleName: gtc-role\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement:\n          - Effect: \"Allow\"\n            Principal:\n              AWS:\n                - !Ref trustedRole1\n            Action:\n              - \"sts:AssumeRole\"\n      ManagedPolicyArns:\n        - !Ref accessPolicy\n      MaxSessionDuration: 43200\n\n# ------------------------------------------------------------#\n#  Outputs\n# ------------------------------------------------------------#\nOutputs:\n  verEcrAccessRole:\n    Value: !Ref gtcRole\n    Export:\n      Name: gtcRole\n"
}
enable-guardduty
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: 2010-09-09\nDescription:\n  \"enable guardduty\"\nResources:\n  GDD:\n    Type: \"AWS::GuardDuty::Detector\"\n    Properties:\n      Enable: true"
}
INV-ver-esp01-manage-metrics-alarm
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: \"2010-09-09\"\r\nDescription: \"create_metrics_alarm.yaml\"\r\nParameters:\r\n  EnvironmentName:\r\n    Default: \"ver\"\r\n    Description: \"EnvironmentName\"\r\n    Type: String\r\n  MicroServiceName: \r\n    Default: \"cer01\"\r\n    Description: \"MicroServiceName\"\r\n    Type: String\r\n  s3keyprefix: \r\n    Default: \"_manage_metrics_alarm.xlsx\"\r\n    Description: \"excel s3 keys prefix\"\r\n    Type: String\r\n  S3Buckets: \r\n    Default: \"inv-ver-cer01-cfn\"\r\n    Description: \"source s3 backet name\"\r\n    Type: String\r\nResources: \r\n  IAMRole: \r\n    Type: \"AWS::IAM::Role\"\r\n    Properties: \r\n      AssumeRolePolicyDocument: \r\n        Version: \"2012-10-17\"\r\n        Statement: \r\n          - Effect: Allow\r\n            Principal: \r\n              Service: \"lambda.amazonaws.com\"\r\n            Action: \"sts:AssumeRole\"\r\n      ManagedPolicyArns: \r\n        - \"arn:aws:iam::aws:policy/AmazonS3FullAccess\"\r\n      Path: \"/\"\r\n      Policies:\r\n        - PolicyName: manage_metrics_alarm_lambda_policy\r\n          PolicyDocument:\r\n            Version: '2012-10-17'\r\n            Statement:\r\n              - Effect: Allow\r\n                Action:\r\n                  - cloudwatch:*\r\n                  - logs:*\r\n                Resource: \"*\"\r\n      RoleName: !Sub inv-${EnvironmentName}-${MicroServiceName}-manage-metrics-alarm-lambda-role\r\n  LambdaLayer:\r\n    Type: \"AWS::Lambda::LayerVersion\"\r\n    Properties:\r\n      CompatibleRuntimes: \r\n        - python3.6\r\n      Content: \r\n        S3Bucket:\r\n          Ref: S3Buckets\r\n        S3Key: CloudwatchAlarm/metrics_mod.zip\r\n      Description: \"manage_cloudwatch metrics alarm modules\"\r\n      LayerName: metrics_module\r\n  LambdaFunction: \r\n    DependsOn: \r\n      - IAMRole\r\n    Type: \"AWS::Lambda::Function\"\r\n    Properties: \r\n      Code: \r\n        S3Bucket: \r\n          Ref: S3Buckets\r\n        S3Key: CloudwatchAlarm/manage_metrics_alarm_src.zip\r\n      FunctionName: !Sub inv-${EnvironmentName}-${MicroServiceName}-manage-metrics-alarm-lambda\r\n      Handler: lambda_function.lambda_handler\r\n      Environment: \r\n        Variables: \r\n          fileprefix: \r\n            Ref: s3keyprefix\r\n          s3Bucket: !Sub inv-${EnvironmentName}-${MicroServiceName}-manage-metrics-alarm\r\n      Role: \r\n        \"Fn::GetAtt\": \r\n          - IAMRole\r\n          - Arn\r\n      Runtime: \"python3.6\"\r\n      MemorySize: 512\r\n      Timeout: 300\r\n      Layers:\r\n        - !Ref LambdaLayer\r\n  LambdaPermission: \r\n    Type: \"AWS::Lambda::Permission\"\r\n    Properties: \r\n      Action: \"lambda:InvokeFunction\"\r\n      FunctionName: \r\n        \"Fn::GetAtt\": \r\n          - LambdaFunction\r\n          - Arn\r\n      Principal: s3.amazonaws.com\r\n      SourceAccount: !Ref 'AWS::AccountId'\r\n      SourceArn: !Join\r\n        - ''\r\n        - - 'arn:aws:s3:::'\r\n          - !Sub inv-${EnvironmentName}-${MicroServiceName}-manage-metrics-alarm\r\n  S3Bucket:\r\n    Type: \"AWS::S3::Bucket\"\r\n    DependsOn: \r\n      - LambdaPermission\r\n    Properties:\r\n      BucketName: !Sub inv-${EnvironmentName}-${MicroServiceName}-manage-metrics-alarm\r\n      AccessControl: Private\r\n      PublicAccessBlockConfiguration:\r\n        BlockPublicAcls: True\r\n        BlockPublicPolicy: True\r\n        IgnorePublicAcls: True\r\n        RestrictPublicBuckets: True\r\n      NotificationConfiguration:\r\n        LambdaConfigurations:\r\n          - Event: \"s3:ObjectCreated:*\"\r\n            Filter:\r\n              S3Key:\r\n                Rules:\r\n                  - Name: suffix\r\n                    Value: xlsx\r\n            Function: !GetAtt\r\n              - LambdaFunction\r\n              - Arn\r\n  S3BucketPolicy:\r\n    Type: AWS::S3::BucketPolicy\r\n    Properties: \r\n      Bucket: \r\n        Ref: \"S3Bucket\"\r\n      PolicyDocument: \r\n        Version: \"2012-10-17\"\r\n        Statement: \r\n          - \r\n            Action: \r\n              - \"s3:GetObject\"\r\n            Effect: \"Allow\"\r\n            Resource: \r\n              Fn::Join: \r\n                - \"\"\r\n                - \r\n                  - \"arn:aws:s3:::\"\r\n                  - \r\n                    Ref: \"S3Bucket\"\r\n                  - \"/*\"\r\n            Principal: \r\n              AWS:\r\n                Fn::Join:\r\n                  - \"\"\r\n                  - \r\n                    - \"arn:aws:iam::\"\r\n                    - Ref: \"AWS::AccountId\"\r\n                    - \":root\"\r\nOutputs: \r\n  IAMRole: \r\n    Description: \"IAM Role Name\"\r\n    Value: \r\n      Ref: IAMRole\r\n  S3BucketName:\r\n    Value:\r\n      Ref S3BucketName\r\n  LambdaFunction: \r\n    Description: \"Lambda Function Name\"\r\n    Value: \r\n      Ref: LambdaFunction"
}
cloudwatchEventsRule-notificationroadserviceeventRule-18T0CGZ2P4RIY
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: 2010-09-09\r\nParameters:\r\n  environment:\r\n    Type: String\r\n    Description: Environment\r\n  area:\r\n    Type: String\r\n    Description: Area\r\n  apiName:\r\n    Type: String\r\n    Description: System Name\r\nResources:\r\n  Rule:\r\n    Type: 'AWS::Events::Rule'\r\n    Properties:\r\n      Description: \r\n        Fn::Sub: Rule for Execute ${apiName}\r\n      Name:\r\n        Fn::Sub: inv-${environment}-${area}-clrl-${apiName}\r\n      ScheduleExpression: 'cron(0/5 * * * ? *)'\r\n      State: ENABLED\r\n      Targets:\r\n        - Arn:\r\n            Fn::Sub: arn:aws:lambda:ap-northeast-1:${AWS::AccountId}:function:inv-${environment}-${area}-lm-${apiName}\r\n          Id: lambda\r\n          Input: '{\"body\": {\"call_api\": \"empty\"}}'\r\n  LambdaEvent:\r\n    Type: 'AWS::Lambda::Permission'\r\n    Properties:\r\n      Action: 'lambda:InvokeFunction'\r\n      #FunctionName: !Ref Lambda\r\n      FunctionName:\r\n        Fn::Sub: inv-${environment}-${area}-lm-${apiName}\r\n      Principal: 'events.amazonaws.com'\r\n      #SourceAccount: !Ref AWS::AccountId\r\n      SourceArn: !GetAtt Rule.Arn"
}
cloudwatchEventsRule-getIdInformationCacheRule-1CJJADYXC91AF
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: 2010-09-09\r\nParameters:\r\n  environment:\r\n    Type: String\r\n    Description: Environment\r\n  area:\r\n    Type: String\r\n    Description: Area\r\n  apiName:\r\n    Type: String\r\n    Description: System Name\r\nResources:\r\n  Rule:\r\n    Type: 'AWS::Events::Rule'\r\n    Properties:\r\n      Description: \r\n        Fn::Sub: Rule for Execute ${apiName}\r\n      Name:\r\n        Fn::Sub: inv-${environment}-${area}-clrl-${apiName}\r\n      ScheduleExpression: 'cron(0/5 * * * ? *)'\r\n      State: ENABLED\r\n      Targets:\r\n        - Arn:\r\n            Fn::Sub: arn:aws:lambda:ap-northeast-1:${AWS::AccountId}:function:inv-${environment}-${area}-lm-${apiName}\r\n          Id: lambda\r\n          Input: '{\"body\": {\"call_api\": \"empty\"}}'\r\n  LambdaEvent:\r\n    Type: 'AWS::Lambda::Permission'\r\n    Properties:\r\n      Action: 'lambda:InvokeFunction'\r\n      #FunctionName: !Ref Lambda\r\n      FunctionName:\r\n        Fn::Sub: inv-${environment}-${area}-lm-${apiName}\r\n      Principal: 'events.amazonaws.com'\r\n      #SourceAccount: !Ref AWS::AccountId\r\n      SourceArn: !GetAtt Rule.Arn"
}
cloudwatchEventsRule-notificationOrderCompleteRule-RM2FPFJ8ZO4
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: 2010-09-09\r\nParameters:\r\n  environment:\r\n    Type: String\r\n    Description: Environment\r\n  area:\r\n    Type: String\r\n    Description: Area\r\n  apiName:\r\n    Type: String\r\n    Description: System Name\r\nResources:\r\n  Rule:\r\n    Type: 'AWS::Events::Rule'\r\n    Properties:\r\n      Description: \r\n        Fn::Sub: Rule for Execute ${apiName}\r\n      Name:\r\n        Fn::Sub: inv-${environment}-${area}-clrl-${apiName}\r\n      ScheduleExpression: 'cron(0/5 * * * ? *)'\r\n      State: ENABLED\r\n      Targets:\r\n        - Arn:\r\n            Fn::Sub: arn:aws:lambda:ap-northeast-1:${AWS::AccountId}:function:inv-${environment}-${area}-lm-${apiName}\r\n          Id: lambda\r\n          Input: '{\"body\": {\"call_api\": \"empty\"}}'\r\n  LambdaEvent:\r\n    Type: 'AWS::Lambda::Permission'\r\n    Properties:\r\n      Action: 'lambda:InvokeFunction'\r\n      #FunctionName: !Ref Lambda\r\n      FunctionName:\r\n        Fn::Sub: inv-${environment}-${area}-lm-${apiName}\r\n      Principal: 'events.amazonaws.com'\r\n      #SourceAccount: !Ref AWS::AccountId\r\n      SourceArn: !GetAtt Rule.Arn"
}
cloudwatchEventsRule-getVehicleLocationInformationRule-1X5JHA4H2UFOB
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: 2010-09-09\r\nParameters:\r\n  environment:\r\n    Type: String\r\n    Description: Environment\r\n  area:\r\n    Type: String\r\n    Description: Area\r\n  apiName:\r\n    Type: String\r\n    Description: System Name\r\nResources:\r\n  Rule:\r\n    Type: 'AWS::Events::Rule'\r\n    Properties:\r\n      Description: \r\n        Fn::Sub: Rule for Execute ${apiName}\r\n      Name:\r\n        Fn::Sub: inv-${environment}-${area}-clrl-${apiName}\r\n      ScheduleExpression: 'cron(0/5 * * * ? *)'\r\n      State: ENABLED\r\n      Targets:\r\n        - Arn:\r\n            Fn::Sub: arn:aws:lambda:ap-northeast-1:${AWS::AccountId}:function:inv-${environment}-${area}-lm-${apiName}\r\n          Id: lambda\r\n          Input: '{\"body\": {\"call_api\": \"empty\"}}'\r\n  LambdaEvent:\r\n    Type: 'AWS::Lambda::Permission'\r\n    Properties:\r\n      Action: 'lambda:InvokeFunction'\r\n      #FunctionName: !Ref Lambda\r\n      FunctionName:\r\n        Fn::Sub: inv-${environment}-${area}-lm-${apiName}\r\n      Principal: 'events.amazonaws.com'\r\n      #SourceAccount: !Ref AWS::AccountId\r\n      SourceArn: !GetAtt Rule.Arn"
}
cloudwatchEventsRule-hcpMessageRegisterRule-ELFOJRL81W33
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: 2010-09-09\r\nParameters:\r\n  environment:\r\n    Type: String\r\n    Description: Environment\r\n  area:\r\n    Type: String\r\n    Description: Area\r\n  apiName:\r\n    Type: String\r\n    Description: System Name\r\nResources:\r\n  Rule:\r\n    Type: 'AWS::Events::Rule'\r\n    Properties:\r\n      Description: \r\n        Fn::Sub: Rule for Execute ${apiName}\r\n      Name:\r\n        Fn::Sub: inv-${environment}-${area}-clrl-${apiName}\r\n      ScheduleExpression: 'cron(0/5 * * * ? *)'\r\n      State: ENABLED\r\n      Targets:\r\n        - Arn:\r\n            Fn::Sub: arn:aws:lambda:ap-northeast-1:${AWS::AccountId}:function:inv-${environment}-${area}-lm-${apiName}\r\n          Id: lambda\r\n          Input: '{\"body\": {\"call_api\": \"empty\"}}'\r\n  LambdaEvent:\r\n    Type: 'AWS::Lambda::Permission'\r\n    Properties:\r\n      Action: 'lambda:InvokeFunction'\r\n      #FunctionName: !Ref Lambda\r\n      FunctionName:\r\n        Fn::Sub: inv-${environment}-${area}-lm-${apiName}\r\n      Principal: 'events.amazonaws.com'\r\n      #SourceAccount: !Ref AWS::AccountId\r\n      SourceArn: !GetAtt Rule.Arn"
}
cloudwatchEventsRule-notificationsecurityalertactuationRule-RF6MZHTBCDZS
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: 2010-09-09\r\nParameters:\r\n  environment:\r\n    Type: String\r\n    Description: Environment\r\n  area:\r\n    Type: String\r\n    Description: Area\r\n  apiName:\r\n    Type: String\r\n    Description: System Name\r\nResources:\r\n  Rule:\r\n    Type: 'AWS::Events::Rule'\r\n    Properties:\r\n      Description: \r\n        Fn::Sub: Rule for Execute ${apiName}\r\n      Name:\r\n        Fn::Sub: inv-${environment}-${area}-clrl-${apiName}\r\n      ScheduleExpression: 'cron(0/5 * * * ? *)'\r\n      State: ENABLED\r\n      Targets:\r\n        - Arn:\r\n            Fn::Sub: arn:aws:lambda:ap-northeast-1:${AWS::AccountId}:function:inv-${environment}-${area}-lm-${apiName}\r\n          Id: lambda\r\n          Input: '{\"body\": {\"call_api\": \"empty\"}}'\r\n  LambdaEvent:\r\n    Type: 'AWS::Lambda::Permission'\r\n    Properties:\r\n      Action: 'lambda:InvokeFunction'\r\n      #FunctionName: !Ref Lambda\r\n      FunctionName:\r\n        Fn::Sub: inv-${environment}-${area}-lm-${apiName}\r\n      Principal: 'events.amazonaws.com'\r\n      #SourceAccount: !Ref AWS::AccountId\r\n      SourceArn: !GetAtt Rule.Arn"
}
cloudwatchEventsRule
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: 2010-09-09\r\nParameters:\r\n  templateBucketName:\r\n    Type: String\r\n  templateKeyPrefix:\r\n    Type: String\r\n  environment:\r\n    Type: String\r\n    Description: Environment\r\n  area:\r\n    Type: String\r\n    Description: Area\r\nResources:\r\n  getVehicleLocationInformationRule:\r\n    Type: \"AWS::CloudFormation::Stack\"\r\n    Properties:\r\n      TemplateURL:\r\n        Fn::Sub: https://s3.amazonaws.com/${templateBucketName}/${templateKeyPrefix}/cloudwatchEventsRule.yml\r\n      Parameters:\r\n        environment:\r\n          Ref: environment\r\n        area:\r\n          Ref: area\r\n        apiName: getVehicleLocationInformation\r\n  notificationOrderCompleteRule:\r\n    Type: \"AWS::CloudFormation::Stack\"\r\n    Properties:\r\n      TemplateURL:\r\n        Fn::Sub: https://s3.amazonaws.com/${templateBucketName}/${templateKeyPrefix}/cloudwatchEventsRule.yml\r\n      Parameters:\r\n        environment:\r\n          Ref: environment\r\n        area:\r\n          Ref: area\r\n        apiName: notificationOrderComplete\r\n  hcpMessageRegisterRule:\r\n    Type: \"AWS::CloudFormation::Stack\"\r\n    Properties:\r\n      TemplateURL:\r\n        Fn::Sub: https://s3.amazonaws.com/${templateBucketName}/${templateKeyPrefix}/cloudwatchEventsRule.yml\r\n      Parameters:\r\n        environment:\r\n          Ref: environment\r\n        area:\r\n          Ref: area\r\n        apiName: hcpMessageRegister\r\n  notificationroadserviceeventRule:\r\n    Type: \"AWS::CloudFormation::Stack\"\r\n    Properties:\r\n      TemplateURL:\r\n        Fn::Sub: https://s3.amazonaws.com/${templateBucketName}/${templateKeyPrefix}/cloudwatchEventsRule.yml\r\n      Parameters:\r\n        environment:\r\n          Ref: environment\r\n        area:\r\n          Ref: area\r\n        apiName: notificationroadserviceevent\r\n  notificationsecurityalertactuationRule:\r\n    Type: \"AWS::CloudFormation::Stack\"\r\n    Properties:\r\n      TemplateURL:\r\n        Fn::Sub: https://s3.amazonaws.com/${templateBucketName}/${templateKeyPrefix}/cloudwatchEventsRule.yml\r\n      Parameters:\r\n        environment:\r\n          Ref: environment\r\n        area:\r\n          Ref: area\r\n        apiName: notificationsecurityalertactuation\r\n  getIdInformationCacheRule:\r\n    Type: \"AWS::CloudFormation::Stack\"\r\n    Properties:\r\n      TemplateURL:\r\n        Fn::Sub: https://s3.amazonaws.com/${templateBucketName}/${templateKeyPrefix}/cloudwatchEventsRule.yml\r\n      Parameters:\r\n        environment:\r\n          Ref: environment\r\n        area:\r\n          Ref: area\r\n        apiName: getIdInformationCache"
}
StackSet-J0126970-createIamRole-e3214c20-0617-48b4-ae00-46ba5795a35f
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "{\n  \"AWSTemplateFormatVersion\" : \"2010-09-09\",\n  \"Description\" : \"Template for Creating IAM Role to Switch from Internavi Login AWS Account\",\n  \"Parameters\" : {\n    \"TrustedAWSAccountId\" : {\n      \"AllowedPattern\" : \"^[0-9]*$\",\n      \"Type\" : \"String\",\n      \"Default\" : \"975196479634\",\n      \"Description\" : \"Trusted AWS Account ID\"\n    },\n    \"IAMRoleName\": {\n      \"Type\": \"String\",\n      \"Default\": \"HmSolUser\",\n      \"Description\": \"IAM Role Name\"\n    },\n    \"IAMPolicyType\": {\n      \"Type\": \"String\",\n      \"Default\": \"HmSolUser\",\n      \"Description\": \"IAM Policy Type\",\n      \"AllowedValues\": [ \"HmSolUser\", \"HmAdmin\" ]\n    },\n    \"IAMUserName\": {\n      \"Type\": \"String\",\n      \"Default\": \"\",\n      \"Description\": \"IAM User Name\"\n    }\n  },\n  \"Conditions\" : {\n    \"user\"        : { \"Fn::Equals\" : [{\"Ref\" : \"IAMPolicyType\"}, \"HmSolUser\" ]},\n    \"admin\"        : { \"Fn::Equals\" : [{\"Ref\" : \"IAMPolicyType\"}, \"HmAdmin\" ]}\n  },\n  \"Resources\" : {\n    \"IAMRoleForAdmin\": {\n      \"Type\": \"AWS::IAM::Role\",\n      \"Condition\" : \"admin\",\n      \"Properties\": {\n        \"AssumeRolePolicyDocument\": {\n          \"Version\": \"2012-10-17\",\n          \"Statement\": [\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", { \"Ref\" : \"IAMUserName\" } ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            }\n          ]\n        },\n        \"ManagedPolicyArns\": [\n          \"arn:aws:iam::aws:policy/AdministratorAccess\"\n        ],\n        \"Path\": \"/\",\n        \"RoleName\": { \"Ref\" : \"IAMRoleName\" }\n      }\n    },\n    \"IAMRoleForUser\": {\n      \"Type\": \"AWS::IAM::Role\",\n      \"Condition\" : \"user\",\n      \"Properties\": {\n        \"AssumeRolePolicyDocument\": {\n          \"Version\": \"2012-10-17\",\n          \"Statement\": [\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", { \"Ref\" : \"IAMUserName\" } ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            }\n          ]\n        },\n        \"ManagedPolicyArns\": [\n          \"arn:aws:iam::aws:policy/AdministratorAccess\"\n        ],\n        \"Path\": \"/\",\n        \"RoleName\": { \"Ref\" : \"IAMRoleName\" }\n      }\n    }\n  },\n  \"Outputs\" : {\n    \"IAMRoleAdminArn\": {\n      \"Value\": { \"Fn::GetAtt\" : [ \"IAMRoleForAdmin\", \"Arn\" ] },\n      \"Condition\" : \"admin\"\n    },\n    \"IAMRoleUserArn\": {\n      \"Value\": { \"Fn::GetAtt\" : [ \"IAMRoleForUser\", \"Arn\" ] },\n      \"Condition\" : \"user\"\n    },\n    \"LinkForSwitchRole\": {\n      \"Value\": { \"Fn::Join\": [ \"\", [ \"https://signin.aws.amazon.com/switchrole?roleName=\", { \"Ref\" : \"IAMRoleName\" }, \"&account=\", { \"Ref\" : \"AWS::AccountId\" } ] ] }\n    }\n  }\n}\n"
}
INV-ver-esp01-bastion
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: 2010-09-09\nDescription: Bastion EC2\nParameters:\n  accountAllias:\n    Type: String\n  amiId:\n    Type: String\nResources:\n  SSHSecurityGroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      VpcId: !ImportValue VPC\n      GroupName: !Sub ${accountAllias}-bastion-sg\n      GroupDescription: !Sub ${accountAllias}-bastion-sg\n      Tags:\n        - Key: Name\n          Value: !Sub ${accountAllias}-bastion-sg\n  EC2:\n    Type: AWS::EC2::Instance\n    Properties:\n      ImageId: !Ref amiId\n      InstanceType: t3.micro\n      KeyName: !Sub ${accountAllias}-bastion-key\n      NetworkInterfaces:\n        - AssociatePublicIpAddress: true\n          SubnetId: !ImportValue PublicSubnet1a\n          DeviceIndex: 0\n          GroupSet:\n            - !Ref SSHSecurityGroup\n      UserData:\n        Fn::Base64: !Sub |\n          #!/bin/bash\n          yum -y update\n      Tags:\n        - Key: Name\n          Value: !Sub ${accountAllias}-bastion\n  EIP:\n    Type: AWS::EC2::EIP\n    Properties:\n      Domain: vpc\n  AssociateEIP:\n    Type: AWS::EC2::EIPAssociation\n    Properties:\n      EIP: !Ref EIP\n      InstanceId: !Ref EC2\nOutputs:\n  EC2:\n    Value: !Ref EC2\n    Export:\n      Name: BastionEC2\n  EIP:\n    Value: !Ref EIP\n    Export:\n      Name: BastionIP\n"
}
createDynamoDB
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: \"2010-09-09\"\nDescription: dynamoDb template\nResources:\n  dynamoTable1:\n    Type: AWS::DynamoDB::Table\n    Properties:\n      AttributeDefinitions:\n        - AttributeName: RECID\n          AttributeType: N\n        - AttributeName: FRAME_NUMBER\n          AttributeType: S\n      KeySchema:\n        - AttributeName: RECID\n          KeyType: HASH\n        - AttributeName: FRAME_NUMBER\n          KeyType: RANGE\n      BillingMode: PAY_PER_REQUEST\n      TableName: VEHICLE_LAST_LOCATION\n      TimeToLiveSpecification:\n        AttributeName: TTL\n        Enabled: True\n  dynamoTable2:\n    Type: AWS::DynamoDB::Table\n    Properties:\n      AttributeDefinitions:\n        - AttributeName: RECID\n          AttributeType: N\n        - AttributeName: EVENTID\n          AttributeType: N\n      KeySchema:\n        - AttributeName: RECID\n          KeyType: HASH\n        - AttributeName: EVENTID\n          KeyType: RANGE\n      BillingMode: PAY_PER_REQUEST\n      TableName: BCALL_HISTORY\n      TimeToLiveSpecification:\n        AttributeName: TTL\n        Enabled: True\n  dynamoTable3:\n    Type: AWS::DynamoDB::Table\n    Properties:\n      AttributeDefinitions:\n        - AttributeName: RECID\n          AttributeType: N\n        - AttributeName: EVENTID\n          AttributeType: N\n        - AttributeName: EVENTTIME\n          AttributeType: S\n        - AttributeName: PUSH_RESULT\n          AttributeType: S\n      KeySchema:\n        - AttributeName: RECID\n          KeyType: HASH\n        - AttributeName: EVENTID\n          KeyType: RANGE\n      LocalSecondaryIndexes:\n        - IndexName: localSecondaryIndex1\n          KeySchema:\n            - AttributeName: RECID\n              KeyType: HASH\n            - AttributeName: EVENTTIME\n              KeyType: RANGE\n          Projection:\n            # NonKeyAttributes:\n            #   - EVENTID\n            ProjectionType: ALL #KEY_ONLY or INCLUDE or ALL\n        - IndexName: localSecondaryIndex2\n          KeySchema:\n            - AttributeName: RECID\n              KeyType: HASH\n            - AttributeName: PUSH_RESULT\n              KeyType: RANGE\n          Projection:\n            # NonKeyAttributes:\n            #   - EVENTID\n            ProjectionType: ALL #KEY_ONLY or INCLUDE or ALL\n      BillingMode: PAY_PER_REQUEST\n      TableName: SECURITY_ALERT_HISTORY\n      TimeToLiveSpecification:\n        AttributeName: TTL\n        Enabled: True\n  dynamoTable4:\n    Type: AWS::DynamoDB::Table\n    Properties:\n      AttributeDefinitions:\n        - AttributeName: FRAME_NUMBER\n          AttributeType: S\n      KeySchema:\n        - AttributeName: FRAME_NUMBER\n          KeyType: HASH\n      BillingMode: PAY_PER_REQUEST\n      TableName: VEHICLE_INFORMATION_CACHE\n      TimeToLiveSpecification:\n        AttributeName: TTL\n        Enabled: True\n"
}
StackSet-InfraAdmin-CreateIamRole-b802178a-540e-43a6-a00d-92d864a731a8
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": {
        "AWSTemplateFormatVersion": "2010-09-09", 
        "Description": "Template for Creating IAM Role to Switch from Internavi Login AWS Account", 
        "Parameters": {
            "TrustedAWSAccountId": {
                "AllowedPattern": "^[0-9]*$", 
                "Type": "String", 
                "Default": "975196479634", 
                "Description": "Trusted AWS Account ID"
            }, 
            "IAMRoleName": {
                "Type": "String", 
                "Default": "InfraAdmin", 
                "Description": "IAM Role Name"
            }
        }, 
        "Resources": {
            "IAMRoleForEngineer": {
                "Type": "AWS::IAM::Role", 
                "Properties": {
                    "AssumeRolePolicyDocument": {
                        "Version": "2012-10-17", 
                        "Statement": [
                            {
                                "Effect": "Allow", 
                                "Principal": {
                                    "AWS": {
                                        "Fn::Join": [
                                            "", 
                                            [
                                                "arn:aws:iam::", 
                                                {
                                                    "Ref": "TrustedAWSAccountId"
                                                }, 
                                                ":user/", 
                                                "JV010031"
                                            ]
                                        ]
                                    }
                                }, 
                                "Action": [
                                    "sts:AssumeRole"
                                ], 
                                "Condition": {
                                    "Bool": {
                                        "aws:MultiFactorAuthPresent": "true"
                                    }
                                }
                            }, 
                            {
                                "Effect": "Allow", 
                                "Principal": {
                                    "AWS": {
                                        "Fn::Join": [
                                            "", 
                                            [
                                                "arn:aws:iam::", 
                                                {
                                                    "Ref": "TrustedAWSAccountId"
                                                }, 
                                                ":user/", 
                                                "JV010024"
                                            ]
                                        ]
                                    }
                                }, 
                                "Action": [
                                    "sts:AssumeRole"
                                ], 
                                "Condition": {
                                    "Bool": {
                                        "aws:MultiFactorAuthPresent": "true"
                                    }
                                }
                            }
                        ]
                    }, 
                    "ManagedPolicyArns": [
                        "arn:aws:iam::aws:policy/AdministratorAccess"
                    ], 
                    "Path": "/", 
                    "RoleName": {
                        "Ref": "IAMRoleName"
                    }
                }
            }
        }, 
        "Outputs": {
            "IAMRoleArn": {
                "Value": {
                    "Fn::GetAtt": [
                        "IAMRoleForEngineer", 
                        "Arn"
                    ]
                }
            }, 
            "LinkForSwitchRole": {
                "Value": {
                    "Fn::Join": [
                        "", 
                        [
                            "https://signin.aws.amazon.com/switchrole?roleName=", 
                            {
                                "Ref": "IAMRoleName"
                            }, 
                            "&account=", 
                            {
                                "Ref": "AWS::AccountId"
                            }
                        ]
                    ]
                }
            }
        }
    }
}
StackSet-OpeAdmin-CreateIamRole-06b7bf46-a795-4f1f-8eec-e7b717917138
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "{\n  \"AWSTemplateFormatVersion\" : \"2010-09-09\",\n  \"Description\" : \"Template for Creating IAM Role to Switch from Internavi Login AWS Account\",\n  \"Parameters\" : {\n    \"TrustedAWSAccountId\" : {\n      \"AllowedPattern\" : \"^[0-9]*$\",\n      \"Type\" : \"String\",\n      \"Default\" : \"975196479634\",\n      \"Description\" : \"Trusted AWS Account ID\"\n    },\n    \"IAMRoleName\": {\n      \"Type\": \"String\",\n      \"Default\": \"OpeAdminRole\",\n      \"Description\": \"IAM Role Name\"\n    }\n  },\n  \"Resources\" : {\n    \"IAMRoleForEngineer\": {\n      \"Type\": \"AWS::IAM::Role\",\n      \"Properties\": {\n        \"AssumeRolePolicyDocument\": {\n          \"Version\": \"2012-10-17\",\n          \"Statement\": [\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010002\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010025\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010026\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010027\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010028\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010030\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            }\n          ]\n        },\n        \"ManagedPolicyArns\": [\n          \"arn:aws:iam::aws:policy/AdministratorAccess\"\n        ],\n        \"Path\": \"/\",\n        \"RoleName\": { \"Ref\" : \"IAMRoleName\" }\n      }\n    }\n  },\n  \"Outputs\" : {\n    \"IAMRoleArn\": {\n      \"Value\": { \"Fn::GetAtt\" : [ \"IAMRoleForEngineer\", \"Arn\" ] }\n    },\n    \"LinkForSwitchRole\": {\n      \"Value\": { \"Fn::Join\": [ \"\", [ \"https://signin.aws.amazon.com/switchrole?roleName=\", { \"Ref\" : \"IAMRoleName\" }, \"&account=\", { \"Ref\" : \"AWS::AccountId\" } ] ] }\n    }\n  }\n}\n"
}
getvehiclelocationinformationStack
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": {
        "AWSTemplateFormatVersion": "2010-09-09", 
        "Outputs": {
            "FunctionName": {
                "Description": "Function Name", 
                "Value": {
                    "Ref": "Function"
                }
            }, 
            "FunctionArn": {
                "Description": "Function ARN", 
                "Value": {
                    "Fn::GetAtt": [
                        "Function", 
                        "Arn"
                    ]
                }
            }
        }, 
        "Parameters": {
            "environment": {
                "Type": "String", 
                "AllowedValues": [
                    "dev", 
                    "ver", 
                    "prd"
                ]
            }, 
            "sysName": {
                "Type": "String"
            }, 
            "subnetIds": {
                "Type": "List<String>"
            }, 
            "vpcId": {
                "Type": "String"
            }, 
            "area": {
                "Type": "String", 
                "AllowedValues": [
                    "jp"
                ]
            }
        }, 
        "Resources": {
            "IamRole": {
                "Type": "AWS::IAM::Role", 
                "Properties": {
                    "RoleName": {
                        "Fn::Sub": "inv-${environment}-${area}-rl-${sysName}"
                    }, 
                    "AssumeRolePolicyDocument": {
                        "Statement": [
                            {
                                "Action": "sts:AssumeRole", 
                                "Effect": "Allow", 
                                "Principal": {
                                    "Service": "lambda.amazonaws.com"
                                }
                            }
                        ]
                    }, 
                    "ManagedPolicyArns": [
                        "arn:aws:iam::aws:policy/IAMFullAccess", 
                        "arn:aws:iam::aws:policy/AdministratorAccess"
                    ], 
                    "Path": "/"
                }
            }, 
            "FunctionArn": {
                "Type": "AWS::SSM::Parameter", 
                "Properties": {
                    "Type": "String", 
                    "Name": {
                        "Fn::Sub": "/lambda/${sysName}Function/arn"
                    }, 
                    "Value": {
                        "Fn::GetAtt": [
                            "Function", 
                            "Arn"
                        ]
                    }, 
                    "Description": "Function ARN"
                }
            }, 
            "Function": {
                "Type": "AWS::Lambda::Function", 
                "Properties": {
                    "Code": {
                        "S3Bucket": "inv-ver-esp01-cfn", 
                        "S3Key": "pkg-getvehiclelocationinformation/23332a2bd6800edffee37a17460e4241"
                    }, 
                    "FunctionName": {
                        "Fn::Sub": "inv-${environment}-${area}-lm-${sysName}"
                    }, 
                    "VpcConfig": {
                        "SubnetIds": {
                            "Ref": "subnetIds"
                        }, 
                        "SecurityGroupIds": [
                            {
                                "Ref": "securityGroup"
                            }
                        ]
                    }, 
                    "Tags": [
                        {
                            "Value": "SAM", 
                            "Key": "lambda:createdBy"
                        }
                    ], 
                    "MemorySize": 512, 
                    "Handler": "getVehicleLocationInformation.lambda_handler", 
                    "Role": {
                        "Fn::GetAtt": [
                            "IamRole", 
                            "Arn"
                        ]
                    }, 
                    "Timeout": 30, 
                    "Runtime": "python3.6"
                }
            }, 
            "FunctionName": {
                "Type": "AWS::SSM::Parameter", 
                "Properties": {
                    "Type": "String", 
                    "Name": {
                        "Fn::Sub": "/lambda/${sysName}Function/name"
                    }, 
                    "Value": {
                        "Ref": "Function"
                    }, 
                    "Description": "Function Name"
                }
            }, 
            "securityGroup": {
                "Type": "AWS::EC2::SecurityGroup", 
                "Properties": {
                    "SecurityGroupIngress": [
                        {
                            "ToPort": 65535, 
                            "FromPort": 0, 
                            "CidrIp": "0.0.0.0/0", 
                            "IpProtocol": "tcp"
                        }
                    ], 
                    "VpcId": {
                        "Ref": "vpcId"
                    }, 
                    "GroupDescription": "Security Group for Lambda", 
                    "Tags": [
                        {
                            "Key": "Name", 
                            "Value": {
                                "Fn::Sub": "inv-${environment}-${area}-sg-lambda-${sysName}"
                            }
                        }
                    ]
                }
            }
        }
    }
}
hcpmessageregisterStack
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": {
        "AWSTemplateFormatVersion": "2010-09-09", 
        "Outputs": {
            "FunctionName": {
                "Description": "Function Name", 
                "Value": {
                    "Ref": "Function"
                }
            }, 
            "FunctionArn": {
                "Description": "Function ARN", 
                "Value": {
                    "Fn::GetAtt": [
                        "Function", 
                        "Arn"
                    ]
                }
            }
        }, 
        "Parameters": {
            "sysName": {
                "Type": "String"
            }, 
            "vpcId": {
                "Type": "String"
            }, 
            "area": {
                "Type": "String", 
                "AllowedValues": [
                    "jp"
                ]
            }, 
            "subnetIds": {
                "Type": "List<String>"
            }, 
            "environment": {
                "Type": "String", 
                "AllowedValues": [
                    "dev", 
                    "ver", 
                    "prd"
                ]
            }, 
            "sqsQueueArnSsmParam": {
                "Type": "AWS::SSM::Parameter::Value<String>"
            }
        }, 
        "Resources": {
            "IamRole": {
                "Type": "AWS::IAM::Role", 
                "Properties": {
                    "RoleName": {
                        "Fn::Sub": "inv-${environment}-${area}-rl-${sysName}"
                    }, 
                    "AssumeRolePolicyDocument": {
                        "Statement": [
                            {
                                "Action": "sts:AssumeRole", 
                                "Effect": "Allow", 
                                "Principal": {
                                    "Service": "lambda.amazonaws.com"
                                }
                            }
                        ]
                    }, 
                    "ManagedPolicyArns": [
                        "arn:aws:iam::aws:policy/IAMFullAccess", 
                        "arn:aws:iam::aws:policy/AdministratorAccess"
                    ], 
                    "Path": "/"
                }
            }, 
            "FunctionArn": {
                "Type": "AWS::SSM::Parameter", 
                "Properties": {
                    "Type": "String", 
                    "Name": {
                        "Fn::Sub": "/lambda/${sysName}Function/arn"
                    }, 
                    "Value": {
                        "Fn::GetAtt": [
                            "Function", 
                            "Arn"
                        ]
                    }, 
                    "Description": "Function ARN"
                }
            }, 
            "Function": {
                "Type": "AWS::Lambda::Function", 
                "Properties": {
                    "Code": {
                        "S3Bucket": "inv-ver-esp01-cfn", 
                        "S3Key": "pkg-hcpmessageregister/a61c65a711d27885e1a40f862ea09d41"
                    }, 
                    "FunctionName": {
                        "Fn::Sub": "inv-${environment}-${area}-lm-${sysName}"
                    }, 
                    "VpcConfig": {
                        "SubnetIds": {
                            "Ref": "subnetIds"
                        }, 
                        "SecurityGroupIds": [
                            {
                                "Ref": "securityGroup"
                            }
                        ]
                    }, 
                    "Tags": [
                        {
                            "Value": "SAM", 
                            "Key": "lambda:createdBy"
                        }
                    ], 
                    "MemorySize": 512, 
                    "Handler": "hcpMessageRegister.lambda_handler", 
                    "Role": {
                        "Fn::GetAtt": [
                            "IamRole", 
                            "Arn"
                        ]
                    }, 
                    "Timeout": 30, 
                    "Runtime": "python3.6"
                }
            }, 
            "FunctionName": {
                "Type": "AWS::SSM::Parameter", 
                "Properties": {
                    "Type": "String", 
                    "Name": {
                        "Fn::Sub": "/lambda/${sysName}Function/name"
                    }, 
                    "Value": {
                        "Ref": "Function"
                    }, 
                    "Description": "Function Name"
                }
            }, 
            "FunctionSqs": {
                "Type": "AWS::Lambda::EventSourceMapping", 
                "Properties": {
                    "BatchSize": 10, 
                    "EventSourceArn": {
                        "Ref": "sqsQueueArnSsmParam"
                    }, 
                    "FunctionName": {
                        "Ref": "Function"
                    }
                }
            }, 
            "securityGroup": {
                "Type": "AWS::EC2::SecurityGroup", 
                "Properties": {
                    "SecurityGroupIngress": [
                        {
                            "ToPort": 65535, 
                            "FromPort": 0, 
                            "CidrIp": "0.0.0.0/0", 
                            "IpProtocol": "tcp"
                        }
                    ], 
                    "VpcId": {
                        "Ref": "vpcId"
                    }, 
                    "GroupDescription": "Security Group for Lambda", 
                    "Tags": [
                        {
                            "Key": "Name", 
                            "Value": {
                                "Fn::Sub": "inv-${environment}-${area}-sg-lambda-${sysName}"
                            }
                        }
                    ]
                }
            }
        }
    }
}
apigatewaygtcStack
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": {
        "AWSTemplateFormatVersion": "2010-09-09", 
        "Parameters": {
            "notificationroadserviceeventFunctionArnSsmParam": {
                "Type": "AWS::SSM::Parameter::Value<String>"
            }, 
            "customDomainNameExportName": {
                "Type": "String"
            }, 
            "area": {
                "Type": "String", 
                "AllowedValues": [
                    "jp"
                ]
            }, 
            "notificationsecurityalertactuationFunctionArnSsmParam": {
                "Type": "AWS::SSM::Parameter::Value<String>"
            }, 
            "environment": {
                "Type": "String", 
                "AllowedValues": [
                    "dev", 
                    "ver", 
                    "prd"
                ]
            }, 
            "notificationroadserviceeventFunctionNameSsmParam": {
                "Type": "AWS::SSM::Parameter::Value<String>"
            }, 
            "notificationsecurityalertactuationFunctionNameSsmParam": {
                "Type": "AWS::SSM::Parameter::Value<String>"
            }
        }, 
        "Resources": {
            "apiGateway": {
                "Type": "AWS::ApiGateway::RestApi", 
                "Properties": {
                    "Body": {
                        "info": {
                            "version": "2018-10-18T08:36:32Z", 
                            "title": "apiGatewayforGtc"
                        }, 
                        "paths": {
                            "/SecurityAlert": {
                                "post": {
                                    "security": [
                                        {
                                            "sigv4": []
                                        }
                                    ], 
                                    "x-amazon-apigateway-integration": {
                                        "contentHandling": "CONVERT_TO_TEXT", 
                                        "responses": {
                                            "default": {
                                                "responseParameters": {
                                                    "method.response.header.Access-Control-Allow-Origin": "'*'"
                                                }, 
                                                "statusCode": "200"
                                            }
                                        }, 
                                        "uri": {
                                            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${notificationsecurityalertactuationFunctionArnSsmParam}/invocations"
                                        }, 
                                        "httpMethod": "POST", 
                                        "passthroughBehavior": "when_no_match", 
                                        "type": "aws_proxy"
                                    }, 
                                    "responses": {
                                        "200": {
                                            "headers": {
                                                "Access-Control-Allow-Origin": {
                                                    "type": "string"
                                                }
                                            }, 
                                            "description": "200 response", 
                                            "schema": {
                                                "$ref": "#/definitions/Empty"
                                            }
                                        }
                                    }, 
                                    "produces": [
                                        "application/json"
                                    ]
                                }, 
                                "options": {
                                    "responses": {
                                        "200": {
                                            "headers": {
                                                "Access-Control-Allow-Origin": {
                                                    "type": "string"
                                                }, 
                                                "Access-Control-Allow-Methods": {
                                                    "type": "string"
                                                }, 
                                                "Access-Control-Allow-Headers": {
                                                    "type": "string"
                                                }
                                            }, 
                                            "description": "200 response", 
                                            "schema": {
                                                "$ref": "#/definitions/Empty"
                                            }
                                        }
                                    }, 
                                    "x-amazon-apigateway-integration": {
                                        "type": "mock", 
                                        "passthroughBehavior": "when_no_match", 
                                        "requestTemplates": {
                                            "application/json": "{\"statusCode\": 200}"
                                        }, 
                                        "responses": {
                                            "default": {
                                                "responseParameters": {
                                                    "method.response.header.Access-Control-Allow-Origin": "'*'", 
                                                    "method.response.header.Access-Control-Allow-Methods": "'POST,OPTIONS'", 
                                                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                                                }, 
                                                "statusCode": "200"
                                            }
                                        }
                                    }, 
                                    "consumes": [
                                        "application/json"
                                    ], 
                                    "produces": [
                                        "application/json"
                                    ]
                                }
                            }, 
                            "/RoadsideCall": {
                                "post": {
                                    "security": [
                                        {
                                            "sigv4": []
                                        }
                                    ], 
                                    "x-amazon-apigateway-integration": {
                                        "contentHandling": "CONVERT_TO_TEXT", 
                                        "responses": {
                                            "default": {
                                                "responseParameters": {
                                                    "method.response.header.Access-Control-Allow-Origin": "'*'"
                                                }, 
                                                "statusCode": "200"
                                            }
                                        }, 
                                        "uri": {
                                            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${notificationroadserviceeventFunctionArnSsmParam}/invocations"
                                        }, 
                                        "httpMethod": "POST", 
                                        "passthroughBehavior": "when_no_match", 
                                        "type": "aws_proxy"
                                    }, 
                                    "responses": {
                                        "200": {
                                            "headers": {
                                                "Access-Control-Allow-Origin": {
                                                    "type": "string"
                                                }
                                            }, 
                                            "description": "200 response", 
                                            "schema": {
                                                "$ref": "#/definitions/Empty"
                                            }
                                        }
                                    }, 
                                    "produces": [
                                        "application/json"
                                    ]
                                }, 
                                "options": {
                                    "responses": {
                                        "200": {
                                            "headers": {
                                                "Access-Control-Allow-Origin": {
                                                    "type": "string"
                                                }, 
                                                "Access-Control-Allow-Methods": {
                                                    "type": "string"
                                                }, 
                                                "Access-Control-Allow-Headers": {
                                                    "type": "string"
                                                }
                                            }, 
                                            "description": "200 response", 
                                            "schema": {
                                                "$ref": "#/definitions/Empty"
                                            }
                                        }
                                    }, 
                                    "x-amazon-apigateway-integration": {
                                        "type": "mock", 
                                        "passthroughBehavior": "when_no_match", 
                                        "requestTemplates": {
                                            "application/json": "{\"statusCode\": 200}"
                                        }, 
                                        "responses": {
                                            "default": {
                                                "responseParameters": {
                                                    "method.response.header.Access-Control-Allow-Origin": "'*'", 
                                                    "method.response.header.Access-Control-Allow-Methods": "'POST,OPTIONS'", 
                                                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                                                }, 
                                                "statusCode": "200"
                                            }
                                        }
                                    }, 
                                    "consumes": [
                                        "application/json"
                                    ], 
                                    "produces": [
                                        "application/json"
                                    ]
                                }
                            }
                        }, 
                        "schemes": [
                            "https"
                        ], 
                        "basePath": {
                            "Fn::Sub": "/${environment}"
                        }, 
                        "securityDefinitions": {
                            "sigv4": {
                                "x-amazon-apigateway-authtype": "awsSigv4", 
                                "type": "apiKey", 
                                "name": "Authorization", 
                                "in": "header"
                            }
                        }, 
                        "definitions": {
                            "Empty": {
                                "type": "object", 
                                "title": "Empty Schema"
                            }
                        }, 
                        "swagger": "2.0"
                    }, 
                    "EndpointConfiguration": {
                        "Types": [
                            "REGIONAL"
                        ]
                    }, 
                    "Parameters": {
                        "endpointConfigurationTypes": "REGIONAL"
                    }
                }
            }, 
            "apiGatewayStage": {
                "Type": "AWS::ApiGateway::Stage", 
                "Properties": {
                    "RestApiId": {
                        "Ref": "apiGateway"
                    }, 
                    "StageName": {
                        "Fn::Sub": "${environment}"
                    }, 
                    "Variables": {
                        "notificationsecurityalertactuationFuncArn": {
                            "Ref": "notificationsecurityalertactuationFunctionArnSsmParam"
                        }, 
                        "notificationroadserviceeventFuncArn": {
                            "Ref": "notificationroadserviceeventFunctionArnSsmParam"
                        }
                    }, 
                    "DeploymentId": {
                        "Ref": "apiGatewayDeploymentc229868efe"
                    }, 
                    "MethodSettings": [
                        {
                            "HttpMethod": "*", 
                            "ResourcePath": "/*", 
                            "DataTraceEnabled": true, 
                            "LoggingLevel": "INFO"
                        }
                    ], 
                    "AccessLogSetting": {
                        "DestinationArn": {
                            "Fn::GetAtt": [
                                "cloudWatchGroup", 
                                "Arn"
                            ]
                        }, 
                        "Format": "{ \"requestId\":\"$context.requestId\", \"ip\": \"$context.identity.sourceIp\", \"caller\":\"$context.identity.caller\", \"user\":\"$context.identity.user\",\"requestTime\":\"$context.requestTime\", \"httpMethod\":\"$context.httpMethod\",\"resourcePath\":\"$context.resourcePath\", \"status\":\"$context.status\",\"protocol\":\"$context.protocol\", \"responseLength\":\"$context.responseLength\" }"
                    }
                }
            }, 
            "apiGatewayArn": {
                "Type": "AWS::SSM::Parameter", 
                "Properties": {
                    "Type": "String", 
                    "Name": "/apigateway/arn/apiGatewaygtc", 
                    "Value": {
                        "Ref": "apiGateway"
                    }, 
                    "Description": "API Gateway ARN"
                }
            }, 
            "basePathMapping": {
                "Type": "AWS::ApiGateway::BasePathMapping", 
                "Properties": {
                    "BasePath": "gtc", 
                    "DomainName": {
                        "Fn::ImportValue": {
                            "Ref": "customDomainNameExportName"
                        }
                    }, 
                    "RestApiId": {
                        "Ref": "apiGateway"
                    }, 
                    "Stage": {
                        "Ref": "apiGatewayStage"
                    }
                }
            }, 
            "notificationsecurityalertactuationFunctionPermission": {
                "Type": "AWS::Lambda::Permission", 
                "Properties": {
                    "Action": "lambda:InvokeFunction", 
                    "Principal": "apigateway.amazonaws.com", 
                    "FunctionName": {
                        "Ref": "notificationsecurityalertactuationFunctionNameSsmParam"
                    }, 
                    "SourceArn": {
                        "Fn::Sub": "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/*/*/*"
                    }
                }
            }, 
            "cloudWatchGroup": {
                "Type": "AWS::Logs::LogGroup", 
                "Properties": {
                    "LogGroupName": {
                        "Fn::Sub": "/aws/apigateway/apiGatewayforGtc/${environment}"
                    }
                }
            }, 
            "apiGatewayDeploymentc229868efe": {
                "Type": "AWS::ApiGateway::Deployment", 
                "Properties": {
                    "RestApiId": {
                        "Ref": "apiGateway"
                    }, 
                    "Description": "RestApi deployment id: c229868efe419e319dbd089f03c4252ef90ed706", 
                    "StageName": "Stage"
                }
            }, 
            "notificationroadserviceeventFunctionPermission": {
                "Type": "AWS::Lambda::Permission", 
                "Properties": {
                    "Action": "lambda:InvokeFunction", 
                    "Principal": "apigateway.amazonaws.com", 
                    "FunctionName": {
                        "Ref": "notificationroadserviceeventFunctionNameSsmParam"
                    }, 
                    "SourceArn": {
                        "Fn::Sub": "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/*/*/*"
                    }
                }
            }
        }
    }
}
INV-ver-esp01-tsp-user
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: 2010-09-09\nDescription: IAM User for Kinesis Access\nParameters:\n  resourceArns:\n    Type: String\n    Default: \"*\"\nResources:\n  apiPolicy:\n    Type: AWS::IAM::ManagedPolicy\n    Properties:\n      ManagedPolicyName: api-tsp-policy\n#      Groups:\n#        - !Ref Group1\n      PolicyDocument:\n        Version: \"2012-10-17\"\n        Statement:\n          -\n            Effect: \"Allow\"\n            Action:\n              - \"execute-api:Invoke\"\n            Resource: !Ref resourceArns\n  Group1:\n    Type: AWS::IAM::Group\n    Properties:\n      GroupName: tsp-user-group\n      ManagedPolicyArns:\n        - !Ref apiPolicy\n  User1:\n    Type: AWS::IAM::User\n    Properties:\n      Groups:\n        - !Ref Group1\n      UserName: tsp-api-user01\nOutputs:\n  User1:\n    Value: !Ref User1\n    Export:\n      Name: tspUser1\n  Group1:\n    Value: !Ref Group1\n    Export:\n      Name: tspUserGroup1\n"
}
notificationsecurityalertactuationStack
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": {
        "AWSTemplateFormatVersion": "2010-09-09", 
        "Outputs": {
            "FunctionName": {
                "Description": "Function Name", 
                "Value": {
                    "Ref": "Function"
                }
            }, 
            "FunctionArn": {
                "Description": "Function ARN", 
                "Value": {
                    "Fn::GetAtt": [
                        "Function", 
                        "Arn"
                    ]
                }
            }
        }, 
        "Parameters": {
            "environment": {
                "Type": "String", 
                "AllowedValues": [
                    "dev", 
                    "ver", 
                    "prd"
                ]
            }, 
            "sysName": {
                "Type": "String"
            }, 
            "subnetIds": {
                "Type": "List<String>"
            }, 
            "vpcId": {
                "Type": "String"
            }, 
            "area": {
                "Type": "String", 
                "AllowedValues": [
                    "jp"
                ]
            }
        }, 
        "Resources": {
            "IamRole": {
                "Type": "AWS::IAM::Role", 
                "Properties": {
                    "RoleName": {
                        "Fn::Sub": "inv-${environment}-${area}-rl-${sysName}"
                    }, 
                    "AssumeRolePolicyDocument": {
                        "Statement": [
                            {
                                "Action": "sts:AssumeRole", 
                                "Effect": "Allow", 
                                "Principal": {
                                    "Service": "lambda.amazonaws.com"
                                }
                            }
                        ]
                    }, 
                    "ManagedPolicyArns": [
                        "arn:aws:iam::aws:policy/IAMFullAccess", 
                        "arn:aws:iam::aws:policy/AdministratorAccess"
                    ], 
                    "Path": "/"
                }
            }, 
            "FunctionArn": {
                "Type": "AWS::SSM::Parameter", 
                "Properties": {
                    "Type": "String", 
                    "Name": {
                        "Fn::Sub": "/lambda/${sysName}Function/arn"
                    }, 
                    "Value": {
                        "Fn::GetAtt": [
                            "Function", 
                            "Arn"
                        ]
                    }, 
                    "Description": "Function ARN"
                }
            }, 
            "Function": {
                "Type": "AWS::Lambda::Function", 
                "Properties": {
                    "Code": {
                        "S3Bucket": "inv-ver-esp01-cfn", 
                        "S3Key": "pkg-notificationsecurityalertactuation/457ebcb8e24ba2b538ea16913afbf05a"
                    }, 
                    "FunctionName": {
                        "Fn::Sub": "inv-${environment}-${area}-lm-${sysName}"
                    }, 
                    "VpcConfig": {
                        "SubnetIds": {
                            "Ref": "subnetIds"
                        }, 
                        "SecurityGroupIds": [
                            {
                                "Ref": "securityGroup"
                            }
                        ]
                    }, 
                    "Tags": [
                        {
                            "Value": "SAM", 
                            "Key": "lambda:createdBy"
                        }
                    ], 
                    "MemorySize": 512, 
                    "Handler": "notificationSecurityAlertActuation.lambda_handler", 
                    "Role": {
                        "Fn::GetAtt": [
                            "IamRole", 
                            "Arn"
                        ]
                    }, 
                    "Timeout": 30, 
                    "Runtime": "python3.6"
                }
            }, 
            "FunctionName": {
                "Type": "AWS::SSM::Parameter", 
                "Properties": {
                    "Type": "String", 
                    "Name": {
                        "Fn::Sub": "/lambda/${sysName}Function/name"
                    }, 
                    "Value": {
                        "Ref": "Function"
                    }, 
                    "Description": "Function Name"
                }
            }, 
            "securityGroup": {
                "Type": "AWS::EC2::SecurityGroup", 
                "Properties": {
                    "SecurityGroupIngress": [
                        {
                            "ToPort": 65535, 
                            "FromPort": 0, 
                            "CidrIp": "0.0.0.0/0", 
                            "IpProtocol": "tcp"
                        }
                    ], 
                    "VpcId": {
                        "Ref": "vpcId"
                    }, 
                    "GroupDescription": "Security Group for Lambda", 
                    "Tags": [
                        {
                            "Key": "Name", 
                            "Value": {
                                "Fn::Sub": "inv-${environment}-${area}-sg-lambda-${sysName}"
                            }
                        }
                    ]
                }
            }
        }
    }
}
notificationroadserviceeventStack
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": {
        "AWSTemplateFormatVersion": "2010-09-09", 
        "Outputs": {
            "FunctionName": {
                "Description": "Function Name", 
                "Value": {
                    "Ref": "Function"
                }
            }, 
            "FunctionArn": {
                "Description": "Function ARN", 
                "Value": {
                    "Fn::GetAtt": [
                        "Function", 
                        "Arn"
                    ]
                }
            }
        }, 
        "Parameters": {
            "environment": {
                "Type": "String", 
                "AllowedValues": [
                    "dev", 
                    "ver", 
                    "prd"
                ]
            }, 
            "sysName": {
                "Type": "String"
            }, 
            "subnetIds": {
                "Type": "List<String>"
            }, 
            "vpcId": {
                "Type": "String"
            }, 
            "area": {
                "Type": "String", 
                "AllowedValues": [
                    "jp"
                ]
            }
        }, 
        "Resources": {
            "IamRole": {
                "Type": "AWS::IAM::Role", 
                "Properties": {
                    "RoleName": {
                        "Fn::Sub": "inv-${environment}-${area}-rl-${sysName}"
                    }, 
                    "AssumeRolePolicyDocument": {
                        "Statement": [
                            {
                                "Action": "sts:AssumeRole", 
                                "Effect": "Allow", 
                                "Principal": {
                                    "Service": "lambda.amazonaws.com"
                                }
                            }
                        ]
                    }, 
                    "ManagedPolicyArns": [
                        "arn:aws:iam::aws:policy/IAMFullAccess", 
                        "arn:aws:iam::aws:policy/AdministratorAccess"
                    ], 
                    "Path": "/"
                }
            }, 
            "FunctionArn": {
                "Type": "AWS::SSM::Parameter", 
                "Properties": {
                    "Type": "String", 
                    "Name": {
                        "Fn::Sub": "/lambda/${sysName}Function/arn"
                    }, 
                    "Value": {
                        "Fn::GetAtt": [
                            "Function", 
                            "Arn"
                        ]
                    }, 
                    "Description": "Function ARN"
                }
            }, 
            "Function": {
                "Type": "AWS::Lambda::Function", 
                "Properties": {
                    "Code": {
                        "S3Bucket": "inv-ver-esp01-cfn", 
                        "S3Key": "pkg-notificationroadserviceevent/60f09d007c4aa47b70e4bdbebbbf9666"
                    }, 
                    "FunctionName": {
                        "Fn::Sub": "inv-${environment}-${area}-lm-${sysName}"
                    }, 
                    "VpcConfig": {
                        "SubnetIds": {
                            "Ref": "subnetIds"
                        }, 
                        "SecurityGroupIds": [
                            {
                                "Ref": "securityGroup"
                            }
                        ]
                    }, 
                    "Tags": [
                        {
                            "Value": "SAM", 
                            "Key": "lambda:createdBy"
                        }
                    ], 
                    "MemorySize": 512, 
                    "Handler": "notificationRoadServiceEvent.lambda_handler", 
                    "Role": {
                        "Fn::GetAtt": [
                            "IamRole", 
                            "Arn"
                        ]
                    }, 
                    "Timeout": 30, 
                    "Runtime": "python3.6"
                }
            }, 
            "FunctionName": {
                "Type": "AWS::SSM::Parameter", 
                "Properties": {
                    "Type": "String", 
                    "Name": {
                        "Fn::Sub": "/lambda/${sysName}Function/name"
                    }, 
                    "Value": {
                        "Ref": "Function"
                    }, 
                    "Description": "Function Name"
                }
            }, 
            "securityGroup": {
                "Type": "AWS::EC2::SecurityGroup", 
                "Properties": {
                    "SecurityGroupIngress": [
                        {
                            "ToPort": 65535, 
                            "FromPort": 0, 
                            "CidrIp": "0.0.0.0/0", 
                            "IpProtocol": "tcp"
                        }
                    ], 
                    "VpcId": {
                        "Ref": "vpcId"
                    }, 
                    "GroupDescription": "Security Group for Lambda", 
                    "Tags": [
                        {
                            "Key": "Name", 
                            "Value": {
                                "Fn::Sub": "inv-${environment}-${area}-sg-lambda-${sysName}"
                            }
                        }
                    ]
                }
            }
        }
    }
}
getidinformationcacheStack
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": {
        "AWSTemplateFormatVersion": "2010-09-09", 
        "Outputs": {
            "FunctionName": {
                "Description": "Function Name", 
                "Value": {
                    "Ref": "Function"
                }
            }, 
            "FunctionArn": {
                "Description": "Function ARN", 
                "Value": {
                    "Fn::GetAtt": [
                        "Function", 
                        "Arn"
                    ]
                }
            }
        }, 
        "Parameters": {
            "environment": {
                "Type": "String", 
                "AllowedValues": [
                    "dev", 
                    "ver", 
                    "prd"
                ]
            }, 
            "sysName": {
                "Type": "String"
            }, 
            "subnetIds": {
                "Type": "List<String>"
            }, 
            "vpcId": {
                "Type": "String"
            }, 
            "area": {
                "Type": "String", 
                "AllowedValues": [
                    "jp"
                ]
            }
        }, 
        "Resources": {
            "IamRole": {
                "Type": "AWS::IAM::Role", 
                "Properties": {
                    "RoleName": {
                        "Fn::Sub": "inv-${environment}-${area}-rl-${sysName}"
                    }, 
                    "AssumeRolePolicyDocument": {
                        "Statement": [
                            {
                                "Action": "sts:AssumeRole", 
                                "Effect": "Allow", 
                                "Principal": {
                                    "Service": "lambda.amazonaws.com"
                                }
                            }
                        ]
                    }, 
                    "ManagedPolicyArns": [
                        "arn:aws:iam::aws:policy/IAMFullAccess", 
                        "arn:aws:iam::aws:policy/AdministratorAccess"
                    ], 
                    "Path": "/"
                }
            }, 
            "FunctionArn": {
                "Type": "AWS::SSM::Parameter", 
                "Properties": {
                    "Type": "String", 
                    "Name": {
                        "Fn::Sub": "/lambda/${sysName}Function/arn"
                    }, 
                    "Value": {
                        "Fn::GetAtt": [
                            "Function", 
                            "Arn"
                        ]
                    }, 
                    "Description": "Function ARN"
                }
            }, 
            "Function": {
                "Type": "AWS::Lambda::Function", 
                "Properties": {
                    "Code": {
                        "S3Bucket": "inv-ver-esp01-cfn", 
                        "S3Key": "pkg-getidinformationcache/3d93e116471f706c68ffdb5f23e0b2e9"
                    }, 
                    "FunctionName": {
                        "Fn::Sub": "inv-${environment}-${area}-lm-${sysName}"
                    }, 
                    "VpcConfig": {
                        "SubnetIds": {
                            "Ref": "subnetIds"
                        }, 
                        "SecurityGroupIds": [
                            {
                                "Ref": "securityGroup"
                            }
                        ]
                    }, 
                    "Tags": [
                        {
                            "Value": "SAM", 
                            "Key": "lambda:createdBy"
                        }
                    ], 
                    "MemorySize": 512, 
                    "Handler": "getIdInformationCache.lambda_handler", 
                    "Role": {
                        "Fn::GetAtt": [
                            "IamRole", 
                            "Arn"
                        ]
                    }, 
                    "Timeout": 30, 
                    "Runtime": "python3.6"
                }
            }, 
            "FunctionName": {
                "Type": "AWS::SSM::Parameter", 
                "Properties": {
                    "Type": "String", 
                    "Name": {
                        "Fn::Sub": "/lambda/${sysName}Function/name"
                    }, 
                    "Value": {
                        "Ref": "Function"
                    }, 
                    "Description": "Function Name"
                }
            }, 
            "securityGroup": {
                "Type": "AWS::EC2::SecurityGroup", 
                "Properties": {
                    "SecurityGroupIngress": [
                        {
                            "ToPort": 65535, 
                            "FromPort": 0, 
                            "CidrIp": "0.0.0.0/0", 
                            "IpProtocol": "tcp"
                        }
                    ], 
                    "VpcId": {
                        "Ref": "vpcId"
                    }, 
                    "GroupDescription": "Security Group for Lambda", 
                    "Tags": [
                        {
                            "Key": "Name", 
                            "Value": {
                                "Fn::Sub": "inv-${environment}-${area}-sg-lambda-${sysName}"
                            }
                        }
                    ]
                }
            }
        }
    }
}
apigatewaytspStack
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": {
        "AWSTemplateFormatVersion": "2010-09-09", 
        "Parameters": {
            "environment": {
                "Type": "String", 
                "AllowedValues": [
                    "dev", 
                    "ver", 
                    "prd"
                ]
            }, 
            "notificationOrderCompleteFunctionNameSsmParam": {
                "Type": "AWS::SSM::Parameter::Value<String>"
            }, 
            "area": {
                "Type": "String", 
                "AllowedValues": [
                    "jp"
                ]
            }, 
            "notificationOrderCompleteFunctionArnSsmParam": {
                "Type": "AWS::SSM::Parameter::Value<String>"
            }, 
            "customDomainNameExportName": {
                "Type": "String"
            }
        }, 
        "Resources": {
            "apiGateway": {
                "Type": "AWS::ApiGateway::RestApi", 
                "Properties": {
                    "Body": {
                        "info": {
                            "version": "2018-10-18T08:36:32Z", 
                            "title": "apiGatewayforTsp"
                        }, 
                        "paths": {
                            "/RoadServiceNotification": {
                                "post": {
                                    "security": [
                                        {
                                            "sigv4": []
                                        }
                                    ], 
                                    "x-amazon-apigateway-integration": {
                                        "contentHandling": "CONVERT_TO_TEXT", 
                                        "responses": {
                                            "default": {
                                                "responseParameters": {
                                                    "method.response.header.Access-Control-Allow-Origin": "'*'"
                                                }, 
                                                "statusCode": "200"
                                            }
                                        }, 
                                        "uri": {
                                            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${notificationOrderCompleteFunctionArnSsmParam}/invocations"
                                        }, 
                                        "httpMethod": "POST", 
                                        "passthroughBehavior": "when_no_match", 
                                        "type": "aws_proxy"
                                    }, 
                                    "responses": {
                                        "200": {
                                            "headers": {
                                                "Access-Control-Allow-Origin": {
                                                    "type": "string"
                                                }
                                            }, 
                                            "description": "200 response", 
                                            "schema": {
                                                "$ref": "#/definitions/Empty"
                                            }
                                        }
                                    }, 
                                    "produces": [
                                        "application/json"
                                    ]
                                }, 
                                "options": {
                                    "responses": {
                                        "200": {
                                            "headers": {
                                                "Access-Control-Allow-Origin": {
                                                    "type": "string"
                                                }, 
                                                "Access-Control-Allow-Methods": {
                                                    "type": "string"
                                                }, 
                                                "Access-Control-Allow-Headers": {
                                                    "type": "string"
                                                }
                                            }, 
                                            "description": "200 response", 
                                            "schema": {
                                                "$ref": "#/definitions/Empty"
                                            }
                                        }
                                    }, 
                                    "x-amazon-apigateway-integration": {
                                        "type": "mock", 
                                        "passthroughBehavior": "when_no_match", 
                                        "requestTemplates": {
                                            "application/json": "{\"statusCode\": 200}"
                                        }, 
                                        "responses": {
                                            "default": {
                                                "responseParameters": {
                                                    "method.response.header.Access-Control-Allow-Origin": "'*'", 
                                                    "method.response.header.Access-Control-Allow-Methods": "'POST,OPTIONS'", 
                                                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                                                }, 
                                                "statusCode": "200"
                                            }
                                        }
                                    }, 
                                    "consumes": [
                                        "application/json"
                                    ], 
                                    "produces": [
                                        "application/json"
                                    ]
                                }
                            }
                        }, 
                        "schemes": [
                            "https"
                        ], 
                        "basePath": {
                            "Fn::Sub": "/${environment}"
                        }, 
                        "securityDefinitions": {
                            "sigv4": {
                                "x-amazon-apigateway-authtype": "awsSigv4", 
                                "type": "apiKey", 
                                "name": "Authorization", 
                                "in": "header"
                            }
                        }, 
                        "definitions": {
                            "Empty": {
                                "type": "object", 
                                "title": "Empty Schema"
                            }
                        }, 
                        "swagger": "2.0"
                    }, 
                    "EndpointConfiguration": {
                        "Types": [
                            "REGIONAL"
                        ]
                    }, 
                    "Parameters": {
                        "endpointConfigurationTypes": "REGIONAL"
                    }
                }
            }, 
            "basePathMapping": {
                "Type": "AWS::ApiGateway::BasePathMapping", 
                "Properties": {
                    "BasePath": "tsp", 
                    "DomainName": {
                        "Fn::ImportValue": {
                            "Ref": "customDomainNameExportName"
                        }
                    }, 
                    "RestApiId": {
                        "Ref": "apiGateway"
                    }, 
                    "Stage": {
                        "Ref": "apiGatewayStage"
                    }
                }
            }, 
            "apiGatewayDeploymentcf491fd208": {
                "Type": "AWS::ApiGateway::Deployment", 
                "Properties": {
                    "RestApiId": {
                        "Ref": "apiGateway"
                    }, 
                    "Description": "RestApi deployment id: cf491fd2086d5bdb62244068931d5fe64f1a029c", 
                    "StageName": "Stage"
                }
            }, 
            "cloudWatchGroup": {
                "Type": "AWS::Logs::LogGroup", 
                "Properties": {
                    "LogGroupName": {
                        "Fn::Sub": "/aws/apigateway/apiGatewayforTsp/${environment}"
                    }
                }
            }, 
            "apiGatewayStage": {
                "Type": "AWS::ApiGateway::Stage", 
                "Properties": {
                    "RestApiId": {
                        "Ref": "apiGateway"
                    }, 
                    "StageName": {
                        "Fn::Sub": "${environment}"
                    }, 
                    "Variables": {
                        "notificationOrderCompleteFuncArn": {
                            "Ref": "notificationOrderCompleteFunctionArnSsmParam"
                        }
                    }, 
                    "DeploymentId": {
                        "Ref": "apiGatewayDeploymentcf491fd208"
                    }, 
                    "MethodSettings": [
                        {
                            "HttpMethod": "*", 
                            "ResourcePath": "/*", 
                            "DataTraceEnabled": true, 
                            "LoggingLevel": "INFO"
                        }
                    ], 
                    "AccessLogSetting": {
                        "DestinationArn": {
                            "Fn::GetAtt": [
                                "cloudWatchGroup", 
                                "Arn"
                            ]
                        }, 
                        "Format": "{ \"requestId\":\"$context.requestId\", \"ip\": \"$context.identity.sourceIp\", \"caller\":\"$context.identity.caller\", \"user\":\"$context.identity.user\",\"requestTime\":\"$context.requestTime\", \"httpMethod\":\"$context.httpMethod\",\"resourcePath\":\"$context.resourcePath\", \"status\":\"$context.status\",\"protocol\":\"$context.protocol\", \"responseLength\":\"$context.responseLength\" }"
                    }
                }
            }, 
            "notificationOrderCompleteFunctionPermission": {
                "Type": "AWS::Lambda::Permission", 
                "Properties": {
                    "Action": "lambda:InvokeFunction", 
                    "Principal": "apigateway.amazonaws.com", 
                    "FunctionName": {
                        "Ref": "notificationOrderCompleteFunctionNameSsmParam"
                    }, 
                    "SourceArn": {
                        "Fn::Sub": "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/*/*/*"
                    }
                }
            }, 
            "apiGatewayArn": {
                "Type": "AWS::SSM::Parameter", 
                "Properties": {
                    "Type": "String", 
                    "Name": "/apigateway/arn/apiGatewaytsp", 
                    "Value": {
                        "Ref": "apiGateway"
                    }, 
                    "Description": "API Gateway ARN"
                }
            }
        }
    }
}
notificationordercompleteStack
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": {
        "AWSTemplateFormatVersion": "2010-09-09", 
        "Outputs": {
            "FunctionName": {
                "Description": "Function Name", 
                "Value": {
                    "Ref": "Function"
                }
            }, 
            "FunctionArn": {
                "Description": "Function ARN", 
                "Value": {
                    "Fn::GetAtt": [
                        "Function", 
                        "Arn"
                    ]
                }
            }
        }, 
        "Parameters": {
            "environment": {
                "Type": "String", 
                "AllowedValues": [
                    "dev", 
                    "ver", 
                    "prd"
                ]
            }, 
            "sysName": {
                "Type": "String"
            }, 
            "subnetIds": {
                "Type": "List<String>"
            }, 
            "vpcId": {
                "Type": "String"
            }, 
            "area": {
                "Type": "String", 
                "AllowedValues": [
                    "jp"
                ]
            }
        }, 
        "Resources": {
            "IamRole": {
                "Type": "AWS::IAM::Role", 
                "Properties": {
                    "RoleName": {
                        "Fn::Sub": "inv-${environment}-${area}-rl-${sysName}"
                    }, 
                    "AssumeRolePolicyDocument": {
                        "Statement": [
                            {
                                "Action": "sts:AssumeRole", 
                                "Effect": "Allow", 
                                "Principal": {
                                    "Service": "lambda.amazonaws.com"
                                }
                            }
                        ]
                    }, 
                    "ManagedPolicyArns": [
                        "arn:aws:iam::aws:policy/IAMFullAccess", 
                        "arn:aws:iam::aws:policy/AdministratorAccess"
                    ], 
                    "Path": "/"
                }
            }, 
            "FunctionArn": {
                "Type": "AWS::SSM::Parameter", 
                "Properties": {
                    "Type": "String", 
                    "Name": {
                        "Fn::Sub": "/lambda/${sysName}Function/arn"
                    }, 
                    "Value": {
                        "Fn::GetAtt": [
                            "Function", 
                            "Arn"
                        ]
                    }, 
                    "Description": "Function ARN"
                }
            }, 
            "Function": {
                "Type": "AWS::Lambda::Function", 
                "Properties": {
                    "Code": {
                        "S3Bucket": "inv-ver-esp01-cfn", 
                        "S3Key": "pkg-notificationordercomplete/cd868e2aadce77c6e313b8233b3b3813"
                    }, 
                    "FunctionName": {
                        "Fn::Sub": "inv-${environment}-${area}-lm-${sysName}"
                    }, 
                    "VpcConfig": {
                        "SubnetIds": {
                            "Ref": "subnetIds"
                        }, 
                        "SecurityGroupIds": [
                            {
                                "Ref": "securityGroup"
                            }
                        ]
                    }, 
                    "Tags": [
                        {
                            "Value": "SAM", 
                            "Key": "lambda:createdBy"
                        }
                    ], 
                    "MemorySize": 512, 
                    "Handler": "notificationOrderComplete.lambda_handler", 
                    "Role": {
                        "Fn::GetAtt": [
                            "IamRole", 
                            "Arn"
                        ]
                    }, 
                    "Timeout": 30, 
                    "Runtime": "python3.6"
                }
            }, 
            "FunctionName": {
                "Type": "AWS::SSM::Parameter", 
                "Properties": {
                    "Type": "String", 
                    "Name": {
                        "Fn::Sub": "/lambda/${sysName}Function/name"
                    }, 
                    "Value": {
                        "Ref": "Function"
                    }, 
                    "Description": "Function Name"
                }
            }, 
            "securityGroup": {
                "Type": "AWS::EC2::SecurityGroup", 
                "Properties": {
                    "SecurityGroupIngress": [
                        {
                            "ToPort": 65535, 
                            "FromPort": 0, 
                            "CidrIp": "0.0.0.0/0", 
                            "IpProtocol": "tcp"
                        }
                    ], 
                    "VpcId": {
                        "Ref": "vpcId"
                    }, 
                    "GroupDescription": "Security Group for Lambda", 
                    "Tags": [
                        {
                            "Key": "Name", 
                            "Value": {
                                "Fn::Sub": "inv-${environment}-${area}-sg-lambda-${sysName}"
                            }
                        }
                    ]
                }
            }
        }
    }
}
appPipelineMain-ecsPipeline-1UHMQY4HB0IGO-authorizationGatewayPipe-ecsAppImagePipeline-12KUQOE7E2GGM
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: \"2010-09-09\"\r\nDescription: ecsAppImagePipeline template\r\nParameters:\r\n  environment:\r\n    Type: String\r\n  area:\r\n    Type: String\r\n  artifactBucketName:\r\n    Type: String\r\n  pipelineIamRoleArn:\r\n    Type: String\r\n  cloudwatchEventIamRoleArn:\r\n    Type: String\r\n  sysName:\r\n    Type: String\r\n  # subnetIds:\r\n  #   Type: List<AWS::EC2::Subnet::Id>\r\n  subnetPri1Id:\r\n    Type: String\r\n  subnetPri2Id:\r\n    Type: String\r\n  vpcId:\r\n    Type: AWS::EC2::VPC::Id\r\n  templateBucketName:\r\n    Type: String\r\n  baseImageEcrName:\r\n    Type: String\r\n  appImageEcrName:\r\n    Type: String\r\n  clusterName:\r\n    Type: String\r\n  serviceName:\r\n    Type: String\r\n  appImageCodeCommitCloneUrlHttp:\r\n    Type: String\r\n  appImageCodeCommitName:\r\n    Type: String\r\n  appImageCodeCommitArn:\r\n    Type: String\r\n  desiredCountSsmParam:\r\n    Type: String\r\nResources:\r\n  # codecommit:\r\n  #   Type: AWS::CodeCommit::Repository\r\n  #   DeletionPolicy: Delete\r\n  #   Properties:\r\n  #     RepositoryName:\r\n  #       Fn::Sub: inv-${environment}-${area}-cdc-${sysName}\r\n  # ecr:\r\n  #   Type: AWS::ECR::Repository\r\n  #   Properties:\r\n  #     # LifecyclePolicy:\r\n  #     #   LifecyclePolicy\r\n  #     RepositoryName:\r\n  #       Fn::Sub: inv-${environment}-${area}-ecr-appimage-${sysName}\r\n  #     # RepositoryPolicyText: JSON object\r\n  codebuild:\r\n    Type: AWS::CodeBuild::Project\r\n    Properties:\r\n      Artifacts:\r\n        EncryptionDisabled: true\r\n        Location:\r\n          Ref: artifactBucketName\r\n        Type: S3\r\n      Environment:\r\n        ComputeType: BUILD_GENERAL1_SMALL\r\n        EnvironmentVariables:\r\n          - Name: environment\r\n            Type: PLAINTEXT\r\n            Value:\r\n              Ref: environment\r\n          - Name: area\r\n            Type: PLAINTEXT\r\n            Value:\r\n              Ref: area\r\n          - Name: templateBucketName\r\n            Type: PLAINTEXT\r\n            Value:\r\n              Ref: templateBucketName\r\n          - Name: vpcId\r\n            Type: PLAINTEXT\r\n            Value:\r\n              Ref: vpcId\r\n          - Name: sysName\r\n            Type: PLAINTEXT\r\n            Value:\r\n              Ref: sysName\r\n          - Name: subnetIds\r\n            Type: PLAINTEXT\r\n            Value:\r\n              Fn::Join:\r\n                - \",\"\r\n                - - Ref: subnetPri1Id\r\n                  - Ref: subnetPri2Id\r\n          - Name: baseImageRepositoryUri\r\n            Type: PLAINTEXT\r\n            Value:\r\n              Fn::Sub: ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${baseImageEcrName}\r\n          - Name: appImageRepositoryUri\r\n            Type: PLAINTEXT\r\n            Value:\r\n              Fn::Sub: ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${appImageEcrName}\r\n          - Name: region\r\n            Type: PLAINTEXT\r\n            Value:\r\n              Ref: AWS::Region\r\n          - Name: desiredCountSsmParam\r\n            Type: PLAINTEXT\r\n            Value:\r\n              Ref: desiredCountSsmParam\r\n        Image: aws/codebuild/docker:18.09.0\r\n        PrivilegedMode: true\r\n        Type: LINUX_CONTAINER\r\n      Name:\r\n        Fn::Sub: inv-${environment}-${area}-cdb-appimage-${sysName}\r\n      ServiceRole:\r\n        Ref: pipelineIamRoleArn\r\n      Source:\r\n        BuildSpec: buildspec.yml\r\n        GitCloneDepth: 1\r\n        Location:\r\n          Ref: appImageCodeCommitCloneUrlHttp\r\n          # Fn::GetAtt: [codecommit, CloneUrlHttp]\r\n        Type: CODECOMMIT\r\n  codepipeline:\r\n    Type: AWS::CodePipeline::Pipeline\r\n    Properties:\r\n      Name:\r\n        Fn::Sub: inv-${environment}-${area}-cdp-appimage-${sysName}\r\n      RoleArn:\r\n        Ref: pipelineIamRoleArn\r\n      ArtifactStore:\r\n        Location:\r\n          Ref: artifactBucketName\r\n        Type: S3\r\n      Stages:\r\n        - Name: Source\r\n          Actions:\r\n            - Name: ImageSource\r\n              ActionTypeId:\r\n                Category: Source\r\n                Owner: AWS\r\n                Provider: ECR\r\n                Version: \"1\"\r\n              OutputArtifacts:\r\n                - Name: Image\r\n              Configuration:\r\n                RepositoryName:\r\n                  Ref: baseImageEcrName\r\n                ImageTag: latest\r\n              RunOrder: 1\r\n            - Name: AppSource\r\n              ActionTypeId:\r\n                Category: Source\r\n                Owner: AWS\r\n                Provider: CodeCommit\r\n                Version: \"1\"\r\n              OutputArtifacts:\r\n                - Name: App\r\n              Configuration:\r\n                PollForSourceChanges: false\r\n                RepositoryName:\r\n                  Ref: appImageCodeCommitName\r\n                  # Fn::GetAtt: [codecommit, Name]\r\n                BranchName: master\r\n              RunOrder: 1\r\n        - Name: Build\r\n          Actions:\r\n            - Name: Build\r\n              ActionTypeId:\r\n                Category: Build\r\n                Owner: AWS\r\n                Provider: CodeBuild\r\n                Version: \"1\"\r\n              InputArtifacts:\r\n                - Name: Image\r\n                - Name: App\r\n              OutputArtifacts:\r\n                - Name: Unuse\r\n              Configuration:\r\n                ProjectName:\r\n                  Ref: codebuild\r\n                PrimarySource: App\r\n              RunOrder: 1\r\n        - Name: Deploy\r\n          Actions:\r\n            - Name: Deploy\r\n              ActionTypeId:\r\n                Category: Deploy\r\n                Owner: AWS\r\n                Provider: ECS\r\n                Version: \"1\"\r\n              InputArtifacts:\r\n                - Name: Unuse\r\n              Configuration:\r\n                ClusterName:\r\n                  Ref: clusterName\r\n                ServiceName:\r\n                  Ref: serviceName\r\n              RunOrder: 1\r\n  pipelineEventsRule:\r\n    Type: AWS::Events::Rule\r\n    Properties:\r\n      # Name:\r\n      #   Fn::Sub: inv-${environment}-${area}-rule-${sysName}-appimagepipeline\r\n      EventPattern:\r\n        source:\r\n          - aws.codecommit\r\n        detail-type:\r\n          - CodeCommit Repository State Change\r\n        resources:\r\n          - Ref: appImageCodeCommitArn\r\n          # - Fn::GetAtt: [codecommit, Arn]\r\n        detail:\r\n          event:\r\n            - referenceCreated\r\n            - referenceUpdated\r\n            - referenceDeleted\r\n          referenceType:\r\n            - branch\r\n          referenceName:\r\n            - master\r\n      State: ENABLED\r\n      Targets:\r\n        - Arn:\r\n            Fn::Sub: arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${codepipeline}\r\n          Id:\r\n            Fn::Sub: inv-${environment}-${area}-target-${sysName}CdpExec\r\n          RoleArn:\r\n            Ref: cloudwatchEventIamRoleArn\r\n  pipelineEventsRuleEcr:\r\n    Type: AWS::Events::Rule\r\n    Properties:\r\n      # Name:\r\n      #   Fn::Sub: inv-${environment}-${area}-rule-${sysName}-appimagepipeline-ecr\r\n      EventPattern:\r\n        source:\r\n          - aws.ecr\r\n        # detail-type:\r\n        #   - AWS API Call via CloudTrail\r\n        detail:\r\n          # eventSource:\r\n          #   - ecr.amazonaws.com\r\n          eventName:\r\n            - PutImage\r\n          requestParameters:\r\n            repositoryName:\r\n              - Ref: baseImageEcrName\r\n            imageTag:\r\n              - latest\r\n        # resources:\r\n        #   - Fn::Sub: arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${repositoryName}\r\n      State: ENABLED\r\n      Targets:\r\n        - Arn:\r\n            Fn::Sub: arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${codepipeline}\r\n          Id:\r\n            Fn::Sub: inv-${environment}-${area}-target-${sysName}CdpExec\r\n          RoleArn:\r\n            Ref: cloudwatchEventIamRoleArn\r\n# Outputs:\r\n# repositoryName:\r\n#   Description: ECR Name\r\n#   Value:\r\n#     Ref: ecr\r\n"
}
appPipelineMain-ecsPipeline-1UHMQY4HB0IGO-referenceSecurityAlertHi-ecsAppImagePipeline-1NHVE8TH54ZCR
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: \"2010-09-09\"\r\nDescription: ecsAppImagePipeline template\r\nParameters:\r\n  environment:\r\n    Type: String\r\n  area:\r\n    Type: String\r\n  artifactBucketName:\r\n    Type: String\r\n  pipelineIamRoleArn:\r\n    Type: String\r\n  cloudwatchEventIamRoleArn:\r\n    Type: String\r\n  sysName:\r\n    Type: String\r\n  # subnetIds:\r\n  #   Type: List<AWS::EC2::Subnet::Id>\r\n  subnetPri1Id:\r\n    Type: String\r\n  subnetPri2Id:\r\n    Type: String\r\n  vpcId:\r\n    Type: AWS::EC2::VPC::Id\r\n  templateBucketName:\r\n    Type: String\r\n  baseImageEcrName:\r\n    Type: String\r\n  appImageEcrName:\r\n    Type: String\r\n  clusterName:\r\n    Type: String\r\n  serviceName:\r\n    Type: String\r\n  appImageCodeCommitCloneUrlHttp:\r\n    Type: String\r\n  appImageCodeCommitName:\r\n    Type: String\r\n  appImageCodeCommitArn:\r\n    Type: String\r\n  desiredCountSsmParam:\r\n    Type: String\r\nResources:\r\n  # codecommit:\r\n  #   Type: AWS::CodeCommit::Repository\r\n  #   DeletionPolicy: Delete\r\n  #   Properties:\r\n  #     RepositoryName:\r\n  #       Fn::Sub: inv-${environment}-${area}-cdc-${sysName}\r\n  # ecr:\r\n  #   Type: AWS::ECR::Repository\r\n  #   Properties:\r\n  #     # LifecyclePolicy:\r\n  #     #   LifecyclePolicy\r\n  #     RepositoryName:\r\n  #       Fn::Sub: inv-${environment}-${area}-ecr-appimage-${sysName}\r\n  #     # RepositoryPolicyText: JSON object\r\n  codebuild:\r\n    Type: AWS::CodeBuild::Project\r\n    Properties:\r\n      Artifacts:\r\n        EncryptionDisabled: true\r\n        Location:\r\n          Ref: artifactBucketName\r\n        Type: S3\r\n      Environment:\r\n        ComputeType: BUILD_GENERAL1_SMALL\r\n        EnvironmentVariables:\r\n          - Name: environment\r\n            Type: PLAINTEXT\r\n            Value:\r\n              Ref: environment\r\n          - Name: area\r\n            Type: PLAINTEXT\r\n            Value:\r\n              Ref: area\r\n          - Name: templateBucketName\r\n            Type: PLAINTEXT\r\n            Value:\r\n              Ref: templateBucketName\r\n          - Name: vpcId\r\n            Type: PLAINTEXT\r\n            Value:\r\n              Ref: vpcId\r\n          - Name: sysName\r\n            Type: PLAINTEXT\r\n            Value:\r\n              Ref: sysName\r\n          - Name: subnetIds\r\n            Type: PLAINTEXT\r\n            Value:\r\n              Fn::Join:\r\n                - \",\"\r\n                - - Ref: subnetPri1Id\r\n                  - Ref: subnetPri2Id\r\n          - Name: baseImageRepositoryUri\r\n            Type: PLAINTEXT\r\n            Value:\r\n              Fn::Sub: ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${baseImageEcrName}\r\n          - Name: appImageRepositoryUri\r\n            Type: PLAINTEXT\r\n            Value:\r\n              Fn::Sub: ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${appImageEcrName}\r\n          - Name: region\r\n            Type: PLAINTEXT\r\n            Value:\r\n              Ref: AWS::Region\r\n          - Name: desiredCountSsmParam\r\n            Type: PLAINTEXT\r\n            Value:\r\n              Ref: desiredCountSsmParam\r\n        Image: aws/codebuild/docker:18.09.0\r\n        PrivilegedMode: true\r\n        Type: LINUX_CONTAINER\r\n      Name:\r\n        Fn::Sub: inv-${environment}-${area}-cdb-appimage-${sysName}\r\n      ServiceRole:\r\n        Ref: pipelineIamRoleArn\r\n      Source:\r\n        BuildSpec: buildspec.yml\r\n        GitCloneDepth: 1\r\n        Location:\r\n          Ref: appImageCodeCommitCloneUrlHttp\r\n          # Fn::GetAtt: [codecommit, CloneUrlHttp]\r\n        Type: CODECOMMIT\r\n  codepipeline:\r\n    Type: AWS::CodePipeline::Pipeline\r\n    Properties:\r\n      Name:\r\n        Fn::Sub: inv-${environment}-${area}-cdp-appimage-${sysName}\r\n      RoleArn:\r\n        Ref: pipelineIamRoleArn\r\n      ArtifactStore:\r\n        Location:\r\n          Ref: artifactBucketName\r\n        Type: S3\r\n      Stages:\r\n        - Name: Source\r\n          Actions:\r\n            - Name: ImageSource\r\n              ActionTypeId:\r\n                Category: Source\r\n                Owner: AWS\r\n                Provider: ECR\r\n                Version: \"1\"\r\n              OutputArtifacts:\r\n                - Name: Image\r\n              Configuration:\r\n                RepositoryName:\r\n                  Ref: baseImageEcrName\r\n                ImageTag: latest\r\n              RunOrder: 1\r\n            - Name: AppSource\r\n              ActionTypeId:\r\n                Category: Source\r\n                Owner: AWS\r\n                Provider: CodeCommit\r\n                Version: \"1\"\r\n              OutputArtifacts:\r\n                - Name: App\r\n              Configuration:\r\n                PollForSourceChanges: false\r\n                RepositoryName:\r\n                  Ref: appImageCodeCommitName\r\n                  # Fn::GetAtt: [codecommit, Name]\r\n                BranchName: master\r\n              RunOrder: 1\r\n        - Name: Build\r\n          Actions:\r\n            - Name: Build\r\n              ActionTypeId:\r\n                Category: Build\r\n                Owner: AWS\r\n                Provider: CodeBuild\r\n                Version: \"1\"\r\n              InputArtifacts:\r\n                - Name: Image\r\n                - Name: App\r\n              OutputArtifacts:\r\n                - Name: Unuse\r\n              Configuration:\r\n                ProjectName:\r\n                  Ref: codebuild\r\n                PrimarySource: App\r\n              RunOrder: 1\r\n        - Name: Deploy\r\n          Actions:\r\n            - Name: Deploy\r\n              ActionTypeId:\r\n                Category: Deploy\r\n                Owner: AWS\r\n                Provider: ECS\r\n                Version: \"1\"\r\n              InputArtifacts:\r\n                - Name: Unuse\r\n              Configuration:\r\n                ClusterName:\r\n                  Ref: clusterName\r\n                ServiceName:\r\n                  Ref: serviceName\r\n              RunOrder: 1\r\n  pipelineEventsRule:\r\n    Type: AWS::Events::Rule\r\n    Properties:\r\n      # Name:\r\n      #   Fn::Sub: inv-${environment}-${area}-rule-${sysName}-appimagepipeline\r\n      EventPattern:\r\n        source:\r\n          - aws.codecommit\r\n        detail-type:\r\n          - CodeCommit Repository State Change\r\n        resources:\r\n          - Ref: appImageCodeCommitArn\r\n          # - Fn::GetAtt: [codecommit, Arn]\r\n        detail:\r\n          event:\r\n            - referenceCreated\r\n            - referenceUpdated\r\n            - referenceDeleted\r\n          referenceType:\r\n            - branch\r\n          referenceName:\r\n            - master\r\n      State: ENABLED\r\n      Targets:\r\n        - Arn:\r\n            Fn::Sub: arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${codepipeline}\r\n          Id:\r\n            Fn::Sub: inv-${environment}-${area}-target-${sysName}CdpExec\r\n          RoleArn:\r\n            Ref: cloudwatchEventIamRoleArn\r\n  pipelineEventsRuleEcr:\r\n    Type: AWS::Events::Rule\r\n    Properties:\r\n      # Name:\r\n      #   Fn::Sub: inv-${environment}-${area}-rule-${sysName}-appimagepipeline-ecr\r\n      EventPattern:\r\n        source:\r\n          - aws.ecr\r\n        # detail-type:\r\n        #   - AWS API Call via CloudTrail\r\n        detail:\r\n          # eventSource:\r\n          #   - ecr.amazonaws.com\r\n          eventName:\r\n            - PutImage\r\n          requestParameters:\r\n            repositoryName:\r\n              - Ref: baseImageEcrName\r\n            imageTag:\r\n              - latest\r\n        # resources:\r\n        #   - Fn::Sub: arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${repositoryName}\r\n      State: ENABLED\r\n      Targets:\r\n        - Arn:\r\n            Fn::Sub: arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${codepipeline}\r\n          Id:\r\n            Fn::Sub: inv-${environment}-${area}-target-${sysName}CdpExec\r\n          RoleArn:\r\n            Ref: cloudwatchEventIamRoleArn\r\n# Outputs:\r\n# repositoryName:\r\n#   Description: ECR Name\r\n#   Value:\r\n#     Ref: ecr\r\n"
}
appPipelineMain-ecsPipeline-1UHMQY4HB0IGO-referenceVehicleLocation-ecsAppImagePipeline-4E7QUAWTA2IJ
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: \"2010-09-09\"\r\nDescription: ecsAppImagePipeline template\r\nParameters:\r\n  environment:\r\n    Type: String\r\n  area:\r\n    Type: String\r\n  artifactBucketName:\r\n    Type: String\r\n  pipelineIamRoleArn:\r\n    Type: String\r\n  cloudwatchEventIamRoleArn:\r\n    Type: String\r\n  sysName:\r\n    Type: String\r\n  # subnetIds:\r\n  #   Type: List<AWS::EC2::Subnet::Id>\r\n  subnetPri1Id:\r\n    Type: String\r\n  subnetPri2Id:\r\n    Type: String\r\n  vpcId:\r\n    Type: AWS::EC2::VPC::Id\r\n  templateBucketName:\r\n    Type: String\r\n  baseImageEcrName:\r\n    Type: String\r\n  appImageEcrName:\r\n    Type: String\r\n  clusterName:\r\n    Type: String\r\n  serviceName:\r\n    Type: String\r\n  appImageCodeCommitCloneUrlHttp:\r\n    Type: String\r\n  appImageCodeCommitName:\r\n    Type: String\r\n  appImageCodeCommitArn:\r\n    Type: String\r\n  desiredCountSsmParam:\r\n    Type: String\r\nResources:\r\n  # codecommit:\r\n  #   Type: AWS::CodeCommit::Repository\r\n  #   DeletionPolicy: Delete\r\n  #   Properties:\r\n  #     RepositoryName:\r\n  #       Fn::Sub: inv-${environment}-${area}-cdc-${sysName}\r\n  # ecr:\r\n  #   Type: AWS::ECR::Repository\r\n  #   Properties:\r\n  #     # LifecyclePolicy:\r\n  #     #   LifecyclePolicy\r\n  #     RepositoryName:\r\n  #       Fn::Sub: inv-${environment}-${area}-ecr-appimage-${sysName}\r\n  #     # RepositoryPolicyText: JSON object\r\n  codebuild:\r\n    Type: AWS::CodeBuild::Project\r\n    Properties:\r\n      Artifacts:\r\n        EncryptionDisabled: true\r\n        Location:\r\n          Ref: artifactBucketName\r\n        Type: S3\r\n      Environment:\r\n        ComputeType: BUILD_GENERAL1_SMALL\r\n        EnvironmentVariables:\r\n          - Name: environment\r\n            Type: PLAINTEXT\r\n            Value:\r\n              Ref: environment\r\n          - Name: area\r\n            Type: PLAINTEXT\r\n            Value:\r\n              Ref: area\r\n          - Name: templateBucketName\r\n            Type: PLAINTEXT\r\n            Value:\r\n              Ref: templateBucketName\r\n          - Name: vpcId\r\n            Type: PLAINTEXT\r\n            Value:\r\n              Ref: vpcId\r\n          - Name: sysName\r\n            Type: PLAINTEXT\r\n            Value:\r\n              Ref: sysName\r\n          - Name: subnetIds\r\n            Type: PLAINTEXT\r\n            Value:\r\n              Fn::Join:\r\n                - \",\"\r\n                - - Ref: subnetPri1Id\r\n                  - Ref: subnetPri2Id\r\n          - Name: baseImageRepositoryUri\r\n            Type: PLAINTEXT\r\n            Value:\r\n              Fn::Sub: ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${baseImageEcrName}\r\n          - Name: appImageRepositoryUri\r\n            Type: PLAINTEXT\r\n            Value:\r\n              Fn::Sub: ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${appImageEcrName}\r\n          - Name: region\r\n            Type: PLAINTEXT\r\n            Value:\r\n              Ref: AWS::Region\r\n          - Name: desiredCountSsmParam\r\n            Type: PLAINTEXT\r\n            Value:\r\n              Ref: desiredCountSsmParam\r\n        Image: aws/codebuild/docker:18.09.0\r\n        PrivilegedMode: true\r\n        Type: LINUX_CONTAINER\r\n      Name:\r\n        Fn::Sub: inv-${environment}-${area}-cdb-appimage-${sysName}\r\n      ServiceRole:\r\n        Ref: pipelineIamRoleArn\r\n      Source:\r\n        BuildSpec: buildspec.yml\r\n        GitCloneDepth: 1\r\n        Location:\r\n          Ref: appImageCodeCommitCloneUrlHttp\r\n          # Fn::GetAtt: [codecommit, CloneUrlHttp]\r\n        Type: CODECOMMIT\r\n  codepipeline:\r\n    Type: AWS::CodePipeline::Pipeline\r\n    Properties:\r\n      Name:\r\n        Fn::Sub: inv-${environment}-${area}-cdp-appimage-${sysName}\r\n      RoleArn:\r\n        Ref: pipelineIamRoleArn\r\n      ArtifactStore:\r\n        Location:\r\n          Ref: artifactBucketName\r\n        Type: S3\r\n      Stages:\r\n        - Name: Source\r\n          Actions:\r\n            - Name: ImageSource\r\n              ActionTypeId:\r\n                Category: Source\r\n                Owner: AWS\r\n                Provider: ECR\r\n                Version: \"1\"\r\n              OutputArtifacts:\r\n                - Name: Image\r\n              Configuration:\r\n                RepositoryName:\r\n                  Ref: baseImageEcrName\r\n                ImageTag: latest\r\n              RunOrder: 1\r\n            - Name: AppSource\r\n              ActionTypeId:\r\n                Category: Source\r\n                Owner: AWS\r\n                Provider: CodeCommit\r\n                Version: \"1\"\r\n              OutputArtifacts:\r\n                - Name: App\r\n              Configuration:\r\n                PollForSourceChanges: false\r\n                RepositoryName:\r\n                  Ref: appImageCodeCommitName\r\n                  # Fn::GetAtt: [codecommit, Name]\r\n                BranchName: master\r\n              RunOrder: 1\r\n        - Name: Build\r\n          Actions:\r\n            - Name: Build\r\n              ActionTypeId:\r\n                Category: Build\r\n                Owner: AWS\r\n                Provider: CodeBuild\r\n                Version: \"1\"\r\n              InputArtifacts:\r\n                - Name: Image\r\n                - Name: App\r\n              OutputArtifacts:\r\n                - Name: Unuse\r\n              Configuration:\r\n                ProjectName:\r\n                  Ref: codebuild\r\n                PrimarySource: App\r\n              RunOrder: 1\r\n        - Name: Deploy\r\n          Actions:\r\n            - Name: Deploy\r\n              ActionTypeId:\r\n                Category: Deploy\r\n                Owner: AWS\r\n                Provider: ECS\r\n                Version: \"1\"\r\n              InputArtifacts:\r\n                - Name: Unuse\r\n              Configuration:\r\n                ClusterName:\r\n                  Ref: clusterName\r\n                ServiceName:\r\n                  Ref: serviceName\r\n              RunOrder: 1\r\n  pipelineEventsRule:\r\n    Type: AWS::Events::Rule\r\n    Properties:\r\n      # Name:\r\n      #   Fn::Sub: inv-${environment}-${area}-rule-${sysName}-appimagepipeline\r\n      EventPattern:\r\n        source:\r\n          - aws.codecommit\r\n        detail-type:\r\n          - CodeCommit Repository State Change\r\n        resources:\r\n          - Ref: appImageCodeCommitArn\r\n          # - Fn::GetAtt: [codecommit, Arn]\r\n        detail:\r\n          event:\r\n            - referenceCreated\r\n            - referenceUpdated\r\n            - referenceDeleted\r\n          referenceType:\r\n            - branch\r\n          referenceName:\r\n            - master\r\n      State: ENABLED\r\n      Targets:\r\n        - Arn:\r\n            Fn::Sub: arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${codepipeline}\r\n          Id:\r\n            Fn::Sub: inv-${environment}-${area}-target-${sysName}CdpExec\r\n          RoleArn:\r\n            Ref: cloudwatchEventIamRoleArn\r\n  pipelineEventsRuleEcr:\r\n    Type: AWS::Events::Rule\r\n    Properties:\r\n      # Name:\r\n      #   Fn::Sub: inv-${environment}-${area}-rule-${sysName}-appimagepipeline-ecr\r\n      EventPattern:\r\n        source:\r\n          - aws.ecr\r\n        # detail-type:\r\n        #   - AWS API Call via CloudTrail\r\n        detail:\r\n          # eventSource:\r\n          #   - ecr.amazonaws.com\r\n          eventName:\r\n            - PutImage\r\n          requestParameters:\r\n            repositoryName:\r\n              - Ref: baseImageEcrName\r\n            imageTag:\r\n              - latest\r\n        # resources:\r\n        #   - Fn::Sub: arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${repositoryName}\r\n      State: ENABLED\r\n      Targets:\r\n        - Arn:\r\n            Fn::Sub: arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${codepipeline}\r\n          Id:\r\n            Fn::Sub: inv-${environment}-${area}-target-${sysName}CdpExec\r\n          RoleArn:\r\n            Ref: cloudwatchEventIamRoleArn\r\n# Outputs:\r\n# repositoryName:\r\n#   Description: ECR Name\r\n#   Value:\r\n#     Ref: ecr\r\n"
}
appPipelineMain-ecsPipeline-1UHMQY4HB0IGO-referenceSecurityAlertHistoryPipeline-1C-ecs-1QHX5RJBNARRQ
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: \"2010-09-09\"\nDescription: ecs template\nParameters:\n  environment:\n    Type: String\n  area:\n    Type: String\n  sysName:\n    Type: String\n  # subnetIds:\n  #   Type: List<AWS::EC2::Subnet::Id>\n  subnetPri1Id:\n    Type: String\n  subnetPri2Id:\n    Type: String\n  vpcId:\n    Type: AWS::EC2::VPC::Id\n  serviceFunctionArn:\n    Type: String\n  nlbArn:\n    Type: String\n  clusterArn:\n    Type: String\n  clusterName:\n    Type: String\n  appImageEcrName:\n    Type: String\n  listenerPort:\n    Type: Number\n  taskDefinitionCpuSsmParam:\n    Type: String\n  taskDefinitionMemorySsmParam:\n    Type: String\n  containerDefinitionMemorySsmParam:\n    Type: String\n  containerDefinitionMemoryReservationSsmParam:\n    Type: String\n  serviceMaximumPercentSsmParam:\n    Type: String\n  serviceMinimumHealthyPercentSsmParam:\n    Type: String\n  proxyProtocolv2Enabled:\n    Type: String\n  desiredCountSsmParam:\n    Type: AWS::SSM::Parameter::Value<String>\n  containerPort:\n    Type: Number\n  awslogsGroupName:\n    Type: String\nResources:\n  logGroup:\n    Type: AWS::Logs::LogGroup\n    Properties:\n      LogGroupName:\n        Ref: awslogsGroupName\n      # RetentionInDays: Integer\n  # ecr:\n  #   Type: AWS::ECR::Repository\n  #   Properties:\n  #     # LifecyclePolicy:\n  #     #   LifecyclePolicy\n  #     RepositoryName:\n  #       Fn::Sub: inv-${environment}-${area}-ecr-appimage-${sysName}\n  #     # RepositoryPolicyText: JSON object\n  iamRole:\n    Type: AWS::IAM::Role\n    Properties:\n      RoleName:\n        Fn::Sub: inv-${environment}-${area}-rl-taskdefinition-${sysName}\n      AssumeRolePolicyDocument:\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service: ecs-tasks.amazonaws.com\n            Action: \"sts:AssumeRole\"\n      ManagedPolicyArns:\n        - \"arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role\"\n        - \"arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole\"\n        - \"arn:aws:iam::aws:policy/AmazonSSMFullAccess\"\n        - \"arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess\"\n        - \"arn:aws:iam::aws:policy/AmazonS3FullAccess\"\n        - \"arn:aws:iam::aws:policy/AWSLambdaFullAccess\"\n      Path: /\n  # iamRole2:\n  #   Type: AWS::IAM::Role\n  #   Properties:\n  #     RoleName:\n  #       Fn::Sub: inv-${environment}-${area}-rl-service-${sysName}\n  #     AssumeRolePolicyDocument:\n  #       Statement:\n  #         - Effect: Allow\n  #           Principal:\n  #             Service: ecs.amazonaws.com\n  #           Action: \"sts:AssumeRole\"\n  #     ManagedPolicyArns:\n  #       - \"arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole\"\n  #     Path: /\n  serviceSg:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupDescription: Security Group for ECS Service\n      VpcId:\n        Ref: vpcId\n      SecurityGroupIngress:\n        - CidrIp: \"0.0.0.0/0\"\n          # CidrIpv6: String\n          # Description: String\n          FromPort: 0\n          ToPort: 65535\n          IpProtocol: tcp\n          # SourceSecurityGroupId: String\n          # SourceSecurityGroupName: String\n          # SourceSecurityGroupOwnerId: String\n      Tags:\n        - Key: Name\n          Value:\n            Fn::Sub: inv-${environment}-${area}-sg-ecs-service-${sysName}\n  targetGroup:\n    Type: AWS::ElasticLoadBalancingV2::TargetGroup\n    Properties:\n      HealthCheckIntervalSeconds: 30\n      HealthCheckPath: /\n      HealthCheckPort: traffic-port\n      HealthCheckProtocol: HTTP\n      HealthCheckTimeoutSeconds: 6\n      HealthyThresholdCount: 5\n      UnhealthyThresholdCount: 5\n      # Matcher:\n      #   HttpCode: \"200\"\n      # Name:\n      #   Fn::Sub: inv-${environment}-${area}-tg-${sysName}\n      Port:\n        Ref: containerPort\n      Protocol: TCP\n      # Tags:\n      #   - Resource Tag\n      TargetGroupAttributes:\n        - Key: deregistration_delay.timeout_seconds\n          Value: \"30\"\n        - Key: proxy_protocol_v2.enabled\n          Value:\n            Ref: proxyProtocolv2Enabled\n          #https://dev.classmethod.jp/cloud/aws/nlb-meets-proxy-protocol-v2/\n      # Targets:\n      #   - TargetDescription\n      TargetType: ip\n      VpcId:\n        Ref: vpcId\n  listener:\n    Type: AWS::ElasticLoadBalancingV2::Listener\n    Properties:\n      # Certificates:\n      #   - Certificate\n      DefaultActions:\n        - TargetGroupArn:\n            Ref: targetGroup\n          Type: forward\n      LoadBalancerArn:\n        Ref: nlbArn\n      Port:\n        Ref: listenerPort\n      Protocol: TCP\n      # SslPolicy: String\n  taskDefinition:\n    Type: AWS::ECS::TaskDefinition\n    Properties:\n      # Volumes:\n      #   - Volume Definition\n      Cpu:\n        Ref: taskDefinitionCpuSsmParam\n      ExecutionRoleArn:\n        Fn::GetAtt: iamRole.Arn\n      Family:\n        Fn::Sub: inv-${environment}-${area}-ecs-taskDefinition-${sysName}\n      Memory:\n        Ref: taskDefinitionMemorySsmParam\n      NetworkMode: awsvpc\n      # PlacementConstraints:\n      #   - TaskDefinitionPlacementConstraint\n      RequiresCompatibilities:\n        - \"FARGATE\"\n      TaskRoleArn:\n        Fn::GetAtt: iamRole.Arn\n      ContainerDefinitions:\n        - Image:\n            Fn::Sub: ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${appImageEcrName}\n          # Command:\n          #   - String\n          # Cpu: Integer\n          # DisableNetworking: Boolean\n          # DnsSearchDomains:\n          #   - String\n          # DnsServers:\n          #   - String\n          # DockerLabels:\n          #   String: String\n          # DockerSecurityOptions:\n          #   - String\n          # EntryPoint:\n          #   - String\n          # Environment:\n          #   - KeyValuePair\n          # Essential: Boolean\n          # ExtraHosts:\n          #   - HostEntry\n          # HealthCheck: HealthCheck\n          # Hostname: String\n          # Links:\n          #   - String\n          # LinuxParameters: LinuxParameters\n          LogConfiguration:\n            LogDriver: awslogs\n            Options:\n              awslogs-group:\n                Ref: awslogsGroupName\n              awslogs-region:\n                Ref: AWS::Region\n              awslogs-stream-prefix: awslogs\n          Memory:\n            Ref: containerDefinitionMemorySsmParam\n          MemoryReservation:\n            Ref: containerDefinitionMemoryReservationSsmParam\n          # MountPoints:\n          #   - MountPoint\n          Name:\n            Fn::Sub: inv-${environment}-${area}-ecs-container-${sysName}\n          PortMappings:\n            - ContainerPort:\n                Ref: containerPort\n              Protocol: tcp\n          # Privileged: Boolean\n          # ReadonlyRootFilesystem: Boolean\n          # Ulimits:\n          #   - Ulimit\n          # User: String\n          # VolumesFrom:\n          #   - VolumeFrom\n          # WorkingDirectory: String\n  service:\n    Type: AWS::ECS::Service\n    #Type: Custom::CustomResource\n    Properties:\n      #ServiceToken:\n      #  Ref: serviceFunctionArn\n      Cluster:\n        Ref: clusterArn\n      DeploymentConfiguration:\n        MaximumPercent:\n          Ref: serviceMaximumPercentSsmParam\n        MinimumHealthyPercent:\n          Ref: serviceMinimumHealthyPercentSsmParam\n      DesiredCount:\n        Ref: desiredCountSsmParam\n      HealthCheckGracePeriodSeconds: 60\n      LaunchType: \"FARGATE\"\n      LoadBalancers:\n        - ContainerName:\n            Fn::Sub: inv-${environment}-${area}-ecs-container-${sysName}\n          ContainerPort:\n            Ref: containerPort\n          # LoadBalancerName:\n          #   Ref: nlbArn\n          TargetGroupArn:\n            Ref: targetGroup\n      NetworkConfiguration:\n        AwsvpcConfiguration:\n          AssignPublicIp: DISABLED\n          SecurityGroups:\n            - Ref: serviceSg\n          Subnets:\n            - Ref: subnetPri1Id\n            - Ref: subnetPri2Id\n      # PlacementConstraints:\n      # - PlacementConstraints, ...\n      # PlacementStrategies:\n      # - PlacementStrategies, ...\n      # PlatformVersion: String\n      # Role: AWSServiceRoleForECS\n      ServiceName:\n        Fn::Sub: inv-${environment}-${area}-ecs-service-${sysName}\n      # ServiceRegistries:\n      # - ServiceRegistry\n      TaskDefinition:\n        Ref: taskDefinition\n  ServiceScalingTarget:\n    DependsOn: service\n    Type: AWS::ApplicationAutoScaling::ScalableTarget\n    Properties:\n      MaxCapacity:\n        5\n        # Ref: maxCapacity\n      MinCapacity:\n        1\n        # Ref: minCapacity\n      ResourceId:\n        Fn::Sub: service/${clusterName}/inv-${environment}-${area}-ecs-service-${sysName}\n      RoleARN:\n        Fn::GetAtt: [AutoscalingRole, Arn]\n      ScalableDimension: ecs:service:DesiredCount\n      ServiceNamespace: ecs\n  ServiceScalOutPolicy:\n    Type: AWS::ApplicationAutoScaling::ScalingPolicy\n    Properties:\n      PolicyName: OutPolicy\n      PolicyType: StepScaling\n      ScalingTargetId:\n        Ref: ServiceScalingTarget\n      StepScalingPolicyConfiguration:\n        AdjustmentType: ChangeInCapacity\n        Cooldown: 60\n        MetricAggregationType: Average\n        StepAdjustments:\n          - MetricIntervalLowerBound: 0\n            ScalingAdjustment: 1\n  AlarmScaleOut:\n    Type: AWS::CloudWatch::Alarm\n    Properties:\n      MetricName: CPUUtilization\n      Namespace: AWS/ECS\n      Statistic: Average\n      Period: 60\n      Threshold: 50\n      ComparisonOperator: GreaterThanThreshold\n      Dimensions:\n        - Name: ClusterName\n          Value:\n            Ref: clusterName\n        - Name: ServiceName\n          Value:\n            Fn::Sub: inv-${environment}-${area}-ecs-service-${sysName}\n      EvaluationPeriods: 1\n      AlarmActions:\n        - Ref: ServiceScalOutPolicy\n  ServiceScalInPolicy:\n    Type: AWS::ApplicationAutoScaling::ScalingPolicy\n    Properties:\n      PolicyName: InPolicy\n      PolicyType: StepScaling\n      ScalingTargetId:\n        Ref: ServiceScalingTarget\n      StepScalingPolicyConfiguration:\n        AdjustmentType: ChangeInCapacity\n        Cooldown: 60\n        MetricAggregationType: Average\n        StepAdjustments:\n          - MetricIntervalUpperBound: 0\n            ScalingAdjustment: -1\n  AlarmScaleIn:\n    Type: AWS::CloudWatch::Alarm\n    Properties:\n      MetricName: CPUUtilization\n      Namespace: AWS/ECS\n      Statistic: Average\n      Period: 60\n      Threshold: 10\n      ComparisonOperator: LessThanThreshold\n      Dimensions:\n        - Name: ClusterName\n          Value:\n            Ref: clusterName\n        - Name: ServiceName\n          Value:\n            Fn::Sub: inv-${environment}-${area}-ecs-service-${sysName}\n      EvaluationPeriods: 1\n      AlarmActions:\n        - Ref: ServiceScalInPolicy\n  AutoscalingRole:\n    Type: AWS::IAM::Role\n    Properties:\n      RoleName:\n        Fn::Sub: inv-${environment}-${area}-rl-autoscaling-${sysName}\n      AssumeRolePolicyDocument:\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service: [application-autoscaling.amazonaws.com]\n            Action: [\"sts:AssumeRole\"]\n      Path: /\n      Policies:\n        - PolicyName: AutoscalingPolicy\n          PolicyDocument:\n            Statement:\n              - Effect: Allow\n                Action:\n                  [\n                    \"application-autoscaling:*\",\n                    \"cloudwatch:DescribeAlarms\",\n                    \"cloudwatch:PutMetricAlarm\",\n                    \"ecs:DescribeServices\",\n                    \"ecs:UpdateService\",\n                  ]\n                Resource: \"*\"\nOutputs:\n  serviceName:\n    Description: Service Name\n    Value:\n      Fn::GetAtt: [service, Name]\n  # appImageEcrName:\n  #   Description: ECR Name\n  #   Value:\n  #     Ref: ecr\n"
}
appPipelineMain-ecsPipeline-1UHMQY4HB0IGO-referenceVehicleLocationInformationPipel-ecs-16OI6PKPYD2TC
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: \"2010-09-09\"\nDescription: ecs template\nParameters:\n  environment:\n    Type: String\n  area:\n    Type: String\n  sysName:\n    Type: String\n  # subnetIds:\n  #   Type: List<AWS::EC2::Subnet::Id>\n  subnetPri1Id:\n    Type: String\n  subnetPri2Id:\n    Type: String\n  vpcId:\n    Type: AWS::EC2::VPC::Id\n  serviceFunctionArn:\n    Type: String\n  nlbArn:\n    Type: String\n  clusterArn:\n    Type: String\n  clusterName:\n    Type: String\n  appImageEcrName:\n    Type: String\n  listenerPort:\n    Type: Number\n  taskDefinitionCpuSsmParam:\n    Type: String\n  taskDefinitionMemorySsmParam:\n    Type: String\n  containerDefinitionMemorySsmParam:\n    Type: String\n  containerDefinitionMemoryReservationSsmParam:\n    Type: String\n  serviceMaximumPercentSsmParam:\n    Type: String\n  serviceMinimumHealthyPercentSsmParam:\n    Type: String\n  proxyProtocolv2Enabled:\n    Type: String\n  desiredCountSsmParam:\n    Type: AWS::SSM::Parameter::Value<String>\n  containerPort:\n    Type: Number\n  awslogsGroupName:\n    Type: String\nResources:\n  logGroup:\n    Type: AWS::Logs::LogGroup\n    Properties:\n      LogGroupName:\n        Ref: awslogsGroupName\n      # RetentionInDays: Integer\n  # ecr:\n  #   Type: AWS::ECR::Repository\n  #   Properties:\n  #     # LifecyclePolicy:\n  #     #   LifecyclePolicy\n  #     RepositoryName:\n  #       Fn::Sub: inv-${environment}-${area}-ecr-appimage-${sysName}\n  #     # RepositoryPolicyText: JSON object\n  iamRole:\n    Type: AWS::IAM::Role\n    Properties:\n      RoleName:\n        Fn::Sub: inv-${environment}-${area}-rl-taskdefinition-${sysName}\n      AssumeRolePolicyDocument:\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service: ecs-tasks.amazonaws.com\n            Action: \"sts:AssumeRole\"\n      ManagedPolicyArns:\n        - \"arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role\"\n        - \"arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole\"\n        - \"arn:aws:iam::aws:policy/AmazonSSMFullAccess\"\n        - \"arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess\"\n        - \"arn:aws:iam::aws:policy/AmazonS3FullAccess\"\n        - \"arn:aws:iam::aws:policy/AWSLambdaFullAccess\"\n      Path: /\n  # iamRole2:\n  #   Type: AWS::IAM::Role\n  #   Properties:\n  #     RoleName:\n  #       Fn::Sub: inv-${environment}-${area}-rl-service-${sysName}\n  #     AssumeRolePolicyDocument:\n  #       Statement:\n  #         - Effect: Allow\n  #           Principal:\n  #             Service: ecs.amazonaws.com\n  #           Action: \"sts:AssumeRole\"\n  #     ManagedPolicyArns:\n  #       - \"arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole\"\n  #     Path: /\n  serviceSg:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupDescription: Security Group for ECS Service\n      VpcId:\n        Ref: vpcId\n      SecurityGroupIngress:\n        - CidrIp: \"0.0.0.0/0\"\n          # CidrIpv6: String\n          # Description: String\n          FromPort: 0\n          ToPort: 65535\n          IpProtocol: tcp\n          # SourceSecurityGroupId: String\n          # SourceSecurityGroupName: String\n          # SourceSecurityGroupOwnerId: String\n      Tags:\n        - Key: Name\n          Value:\n            Fn::Sub: inv-${environment}-${area}-sg-ecs-service-${sysName}\n  targetGroup:\n    Type: AWS::ElasticLoadBalancingV2::TargetGroup\n    Properties:\n      HealthCheckIntervalSeconds: 30\n      HealthCheckPath: /\n      HealthCheckPort: traffic-port\n      HealthCheckProtocol: HTTP\n      HealthCheckTimeoutSeconds: 6\n      HealthyThresholdCount: 5\n      UnhealthyThresholdCount: 5\n      # Matcher:\n      #   HttpCode: \"200\"\n      # Name:\n      #   Fn::Sub: inv-${environment}-${area}-tg-${sysName}\n      Port:\n        Ref: containerPort\n      Protocol: TCP\n      # Tags:\n      #   - Resource Tag\n      TargetGroupAttributes:\n        - Key: deregistration_delay.timeout_seconds\n          Value: \"30\"\n        - Key: proxy_protocol_v2.enabled\n          Value:\n            Ref: proxyProtocolv2Enabled\n          #https://dev.classmethod.jp/cloud/aws/nlb-meets-proxy-protocol-v2/\n      # Targets:\n      #   - TargetDescription\n      TargetType: ip\n      VpcId:\n        Ref: vpcId\n  listener:\n    Type: AWS::ElasticLoadBalancingV2::Listener\n    Properties:\n      # Certificates:\n      #   - Certificate\n      DefaultActions:\n        - TargetGroupArn:\n            Ref: targetGroup\n          Type: forward\n      LoadBalancerArn:\n        Ref: nlbArn\n      Port:\n        Ref: listenerPort\n      Protocol: TCP\n      # SslPolicy: String\n  taskDefinition:\n    Type: AWS::ECS::TaskDefinition\n    Properties:\n      # Volumes:\n      #   - Volume Definition\n      Cpu:\n        Ref: taskDefinitionCpuSsmParam\n      ExecutionRoleArn:\n        Fn::GetAtt: iamRole.Arn\n      Family:\n        Fn::Sub: inv-${environment}-${area}-ecs-taskDefinition-${sysName}\n      Memory:\n        Ref: taskDefinitionMemorySsmParam\n      NetworkMode: awsvpc\n      # PlacementConstraints:\n      #   - TaskDefinitionPlacementConstraint\n      RequiresCompatibilities:\n        - \"FARGATE\"\n      TaskRoleArn:\n        Fn::GetAtt: iamRole.Arn\n      ContainerDefinitions:\n        - Image:\n            Fn::Sub: ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${appImageEcrName}\n          # Command:\n          #   - String\n          # Cpu: Integer\n          # DisableNetworking: Boolean\n          # DnsSearchDomains:\n          #   - String\n          # DnsServers:\n          #   - String\n          # DockerLabels:\n          #   String: String\n          # DockerSecurityOptions:\n          #   - String\n          # EntryPoint:\n          #   - String\n          # Environment:\n          #   - KeyValuePair\n          # Essential: Boolean\n          # ExtraHosts:\n          #   - HostEntry\n          # HealthCheck: HealthCheck\n          # Hostname: String\n          # Links:\n          #   - String\n          # LinuxParameters: LinuxParameters\n          LogConfiguration:\n            LogDriver: awslogs\n            Options:\n              awslogs-group:\n                Ref: awslogsGroupName\n              awslogs-region:\n                Ref: AWS::Region\n              awslogs-stream-prefix: awslogs\n          Memory:\n            Ref: containerDefinitionMemorySsmParam\n          MemoryReservation:\n            Ref: containerDefinitionMemoryReservationSsmParam\n          # MountPoints:\n          #   - MountPoint\n          Name:\n            Fn::Sub: inv-${environment}-${area}-ecs-container-${sysName}\n          PortMappings:\n            - ContainerPort:\n                Ref: containerPort\n              Protocol: tcp\n          # Privileged: Boolean\n          # ReadonlyRootFilesystem: Boolean\n          # Ulimits:\n          #   - Ulimit\n          # User: String\n          # VolumesFrom:\n          #   - VolumeFrom\n          # WorkingDirectory: String\n  service:\n    Type: AWS::ECS::Service\n    #Type: Custom::CustomResource\n    Properties:\n      #ServiceToken:\n      #  Ref: serviceFunctionArn\n      Cluster:\n        Ref: clusterArn\n      DeploymentConfiguration:\n        MaximumPercent:\n          Ref: serviceMaximumPercentSsmParam\n        MinimumHealthyPercent:\n          Ref: serviceMinimumHealthyPercentSsmParam\n      DesiredCount:\n        Ref: desiredCountSsmParam\n      HealthCheckGracePeriodSeconds: 60\n      LaunchType: \"FARGATE\"\n      LoadBalancers:\n        - ContainerName:\n            Fn::Sub: inv-${environment}-${area}-ecs-container-${sysName}\n          ContainerPort:\n            Ref: containerPort\n          # LoadBalancerName:\n          #   Ref: nlbArn\n          TargetGroupArn:\n            Ref: targetGroup\n      NetworkConfiguration:\n        AwsvpcConfiguration:\n          AssignPublicIp: DISABLED\n          SecurityGroups:\n            - Ref: serviceSg\n          Subnets:\n            - Ref: subnetPri1Id\n            - Ref: subnetPri2Id\n      # PlacementConstraints:\n      # - PlacementConstraints, ...\n      # PlacementStrategies:\n      # - PlacementStrategies, ...\n      # PlatformVersion: String\n      # Role: AWSServiceRoleForECS\n      ServiceName:\n        Fn::Sub: inv-${environment}-${area}-ecs-service-${sysName}\n      # ServiceRegistries:\n      # - ServiceRegistry\n      TaskDefinition:\n        Ref: taskDefinition\n  ServiceScalingTarget:\n    DependsOn: service\n    Type: AWS::ApplicationAutoScaling::ScalableTarget\n    Properties:\n      MaxCapacity:\n        5\n        # Ref: maxCapacity\n      MinCapacity:\n        1\n        # Ref: minCapacity\n      ResourceId:\n        Fn::Sub: service/${clusterName}/inv-${environment}-${area}-ecs-service-${sysName}\n      RoleARN:\n        Fn::GetAtt: [AutoscalingRole, Arn]\n      ScalableDimension: ecs:service:DesiredCount\n      ServiceNamespace: ecs\n  ServiceScalOutPolicy:\n    Type: AWS::ApplicationAutoScaling::ScalingPolicy\n    Properties:\n      PolicyName: OutPolicy\n      PolicyType: StepScaling\n      ScalingTargetId:\n        Ref: ServiceScalingTarget\n      StepScalingPolicyConfiguration:\n        AdjustmentType: ChangeInCapacity\n        Cooldown: 60\n        MetricAggregationType: Average\n        StepAdjustments:\n          - MetricIntervalLowerBound: 0\n            ScalingAdjustment: 1\n  AlarmScaleOut:\n    Type: AWS::CloudWatch::Alarm\n    Properties:\n      MetricName: CPUUtilization\n      Namespace: AWS/ECS\n      Statistic: Average\n      Period: 60\n      Threshold: 50\n      ComparisonOperator: GreaterThanThreshold\n      Dimensions:\n        - Name: ClusterName\n          Value:\n            Ref: clusterName\n        - Name: ServiceName\n          Value:\n            Fn::Sub: inv-${environment}-${area}-ecs-service-${sysName}\n      EvaluationPeriods: 1\n      AlarmActions:\n        - Ref: ServiceScalOutPolicy\n  ServiceScalInPolicy:\n    Type: AWS::ApplicationAutoScaling::ScalingPolicy\n    Properties:\n      PolicyName: InPolicy\n      PolicyType: StepScaling\n      ScalingTargetId:\n        Ref: ServiceScalingTarget\n      StepScalingPolicyConfiguration:\n        AdjustmentType: ChangeInCapacity\n        Cooldown: 60\n        MetricAggregationType: Average\n        StepAdjustments:\n          - MetricIntervalUpperBound: 0\n            ScalingAdjustment: -1\n  AlarmScaleIn:\n    Type: AWS::CloudWatch::Alarm\n    Properties:\n      MetricName: CPUUtilization\n      Namespace: AWS/ECS\n      Statistic: Average\n      Period: 60\n      Threshold: 10\n      ComparisonOperator: LessThanThreshold\n      Dimensions:\n        - Name: ClusterName\n          Value:\n            Ref: clusterName\n        - Name: ServiceName\n          Value:\n            Fn::Sub: inv-${environment}-${area}-ecs-service-${sysName}\n      EvaluationPeriods: 1\n      AlarmActions:\n        - Ref: ServiceScalInPolicy\n  AutoscalingRole:\n    Type: AWS::IAM::Role\n    Properties:\n      RoleName:\n        Fn::Sub: inv-${environment}-${area}-rl-autoscaling-${sysName}\n      AssumeRolePolicyDocument:\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service: [application-autoscaling.amazonaws.com]\n            Action: [\"sts:AssumeRole\"]\n      Path: /\n      Policies:\n        - PolicyName: AutoscalingPolicy\n          PolicyDocument:\n            Statement:\n              - Effect: Allow\n                Action:\n                  [\n                    \"application-autoscaling:*\",\n                    \"cloudwatch:DescribeAlarms\",\n                    \"cloudwatch:PutMetricAlarm\",\n                    \"ecs:DescribeServices\",\n                    \"ecs:UpdateService\",\n                  ]\n                Resource: \"*\"\nOutputs:\n  serviceName:\n    Description: Service Name\n    Value:\n      Fn::GetAtt: [service, Name]\n  # appImageEcrName:\n  #   Description: ECR Name\n  #   Value:\n  #     Ref: ecr\n"
}
appPipelineMain-ecsPipeline-1UHMQY4HB0IGO-authorizationGatewayPipeline-1BUJ9Q0IWD4-ecs-1UUSGX70P9TS6
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: \"2010-09-09\"\nDescription: ecs template\nParameters:\n  environment:\n    Type: String\n  area:\n    Type: String\n  sysName:\n    Type: String\n  # subnetIds:\n  #   Type: List<AWS::EC2::Subnet::Id>\n  subnetPri1Id:\n    Type: String\n  subnetPri2Id:\n    Type: String\n  vpcId:\n    Type: AWS::EC2::VPC::Id\n  serviceFunctionArn:\n    Type: String\n  nlbArn:\n    Type: String\n  clusterArn:\n    Type: String\n  clusterName:\n    Type: String\n  appImageEcrName:\n    Type: String\n  listenerPort:\n    Type: Number\n  taskDefinitionCpuSsmParam:\n    Type: String\n  taskDefinitionMemorySsmParam:\n    Type: String\n  containerDefinitionMemorySsmParam:\n    Type: String\n  containerDefinitionMemoryReservationSsmParam:\n    Type: String\n  serviceMaximumPercentSsmParam:\n    Type: String\n  serviceMinimumHealthyPercentSsmParam:\n    Type: String\n  proxyProtocolv2Enabled:\n    Type: String\n  desiredCountSsmParam:\n    Type: AWS::SSM::Parameter::Value<String>\n  containerPort:\n    Type: Number\n  awslogsGroupName:\n    Type: String\nResources:\n  logGroup:\n    Type: AWS::Logs::LogGroup\n    Properties:\n      LogGroupName:\n        Ref: awslogsGroupName\n      # RetentionInDays: Integer\n  # ecr:\n  #   Type: AWS::ECR::Repository\n  #   Properties:\n  #     # LifecyclePolicy:\n  #     #   LifecyclePolicy\n  #     RepositoryName:\n  #       Fn::Sub: inv-${environment}-${area}-ecr-appimage-${sysName}\n  #     # RepositoryPolicyText: JSON object\n  iamRole:\n    Type: AWS::IAM::Role\n    Properties:\n      RoleName:\n        Fn::Sub: inv-${environment}-${area}-rl-taskdefinition-${sysName}\n      AssumeRolePolicyDocument:\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service: ecs-tasks.amazonaws.com\n            Action: \"sts:AssumeRole\"\n      ManagedPolicyArns:\n        - \"arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role\"\n        - \"arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole\"\n        - \"arn:aws:iam::aws:policy/AmazonSSMFullAccess\"\n        - \"arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess\"\n        - \"arn:aws:iam::aws:policy/AmazonS3FullAccess\"\n        - \"arn:aws:iam::aws:policy/AWSLambdaFullAccess\"\n      Path: /\n  # iamRole2:\n  #   Type: AWS::IAM::Role\n  #   Properties:\n  #     RoleName:\n  #       Fn::Sub: inv-${environment}-${area}-rl-service-${sysName}\n  #     AssumeRolePolicyDocument:\n  #       Statement:\n  #         - Effect: Allow\n  #           Principal:\n  #             Service: ecs.amazonaws.com\n  #           Action: \"sts:AssumeRole\"\n  #     ManagedPolicyArns:\n  #       - \"arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole\"\n  #     Path: /\n  serviceSg:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupDescription: Security Group for ECS Service\n      VpcId:\n        Ref: vpcId\n      SecurityGroupIngress:\n        - CidrIp: \"0.0.0.0/0\"\n          # CidrIpv6: String\n          # Description: String\n          FromPort: 0\n          ToPort: 65535\n          IpProtocol: tcp\n          # SourceSecurityGroupId: String\n          # SourceSecurityGroupName: String\n          # SourceSecurityGroupOwnerId: String\n      Tags:\n        - Key: Name\n          Value:\n            Fn::Sub: inv-${environment}-${area}-sg-ecs-service-${sysName}\n  targetGroup:\n    Type: AWS::ElasticLoadBalancingV2::TargetGroup\n    Properties:\n      HealthCheckIntervalSeconds: 30\n      HealthCheckPath: /\n      HealthCheckPort: traffic-port\n      HealthCheckProtocol: HTTP\n      HealthCheckTimeoutSeconds: 6\n      HealthyThresholdCount: 5\n      UnhealthyThresholdCount: 5\n      # Matcher:\n      #   HttpCode: \"200\"\n      # Name:\n      #   Fn::Sub: inv-${environment}-${area}-tg-${sysName}\n      Port:\n        Ref: containerPort\n      Protocol: TCP\n      # Tags:\n      #   - Resource Tag\n      TargetGroupAttributes:\n        - Key: deregistration_delay.timeout_seconds\n          Value: \"30\"\n        - Key: proxy_protocol_v2.enabled\n          Value:\n            Ref: proxyProtocolv2Enabled\n          #https://dev.classmethod.jp/cloud/aws/nlb-meets-proxy-protocol-v2/\n      # Targets:\n      #   - TargetDescription\n      TargetType: ip\n      VpcId:\n        Ref: vpcId\n  listener:\n    Type: AWS::ElasticLoadBalancingV2::Listener\n    Properties:\n      # Certificates:\n      #   - Certificate\n      DefaultActions:\n        - TargetGroupArn:\n            Ref: targetGroup\n          Type: forward\n      LoadBalancerArn:\n        Ref: nlbArn\n      Port:\n        Ref: listenerPort\n      Protocol: TCP\n      # SslPolicy: String\n  taskDefinition:\n    Type: AWS::ECS::TaskDefinition\n    Properties:\n      # Volumes:\n      #   - Volume Definition\n      Cpu:\n        Ref: taskDefinitionCpuSsmParam\n      ExecutionRoleArn:\n        Fn::GetAtt: iamRole.Arn\n      Family:\n        Fn::Sub: inv-${environment}-${area}-ecs-taskDefinition-${sysName}\n      Memory:\n        Ref: taskDefinitionMemorySsmParam\n      NetworkMode: awsvpc\n      # PlacementConstraints:\n      #   - TaskDefinitionPlacementConstraint\n      RequiresCompatibilities:\n        - \"FARGATE\"\n      TaskRoleArn:\n        Fn::GetAtt: iamRole.Arn\n      ContainerDefinitions:\n        - Image:\n            Fn::Sub: ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${appImageEcrName}\n          # Command:\n          #   - String\n          # Cpu: Integer\n          # DisableNetworking: Boolean\n          # DnsSearchDomains:\n          #   - String\n          # DnsServers:\n          #   - String\n          # DockerLabels:\n          #   String: String\n          # DockerSecurityOptions:\n          #   - String\n          # EntryPoint:\n          #   - String\n          # Environment:\n          #   - KeyValuePair\n          # Essential: Boolean\n          # ExtraHosts:\n          #   - HostEntry\n          # HealthCheck: HealthCheck\n          # Hostname: String\n          # Links:\n          #   - String\n          # LinuxParameters: LinuxParameters\n          LogConfiguration:\n            LogDriver: awslogs\n            Options:\n              awslogs-group:\n                Ref: awslogsGroupName\n              awslogs-region:\n                Ref: AWS::Region\n              awslogs-stream-prefix: awslogs\n          Memory:\n            Ref: containerDefinitionMemorySsmParam\n          MemoryReservation:\n            Ref: containerDefinitionMemoryReservationSsmParam\n          # MountPoints:\n          #   - MountPoint\n          Name:\n            Fn::Sub: inv-${environment}-${area}-ecs-container-${sysName}\n          PortMappings:\n            - ContainerPort:\n                Ref: containerPort\n              Protocol: tcp\n          # Privileged: Boolean\n          # ReadonlyRootFilesystem: Boolean\n          # Ulimits:\n          #   - Ulimit\n          # User: String\n          # VolumesFrom:\n          #   - VolumeFrom\n          # WorkingDirectory: String\n  service:\n    Type: AWS::ECS::Service\n    #Type: Custom::CustomResource\n    Properties:\n      #ServiceToken:\n      #  Ref: serviceFunctionArn\n      Cluster:\n        Ref: clusterArn\n      DeploymentConfiguration:\n        MaximumPercent:\n          Ref: serviceMaximumPercentSsmParam\n        MinimumHealthyPercent:\n          Ref: serviceMinimumHealthyPercentSsmParam\n      DesiredCount:\n        Ref: desiredCountSsmParam\n      HealthCheckGracePeriodSeconds: 60\n      LaunchType: \"FARGATE\"\n      LoadBalancers:\n        - ContainerName:\n            Fn::Sub: inv-${environment}-${area}-ecs-container-${sysName}\n          ContainerPort:\n            Ref: containerPort\n          # LoadBalancerName:\n          #   Ref: nlbArn\n          TargetGroupArn:\n            Ref: targetGroup\n      NetworkConfiguration:\n        AwsvpcConfiguration:\n          AssignPublicIp: DISABLED\n          SecurityGroups:\n            - Ref: serviceSg\n          Subnets:\n            - Ref: subnetPri1Id\n            - Ref: subnetPri2Id\n      # PlacementConstraints:\n      # - PlacementConstraints, ...\n      # PlacementStrategies:\n      # - PlacementStrategies, ...\n      # PlatformVersion: String\n      # Role: AWSServiceRoleForECS\n      ServiceName:\n        Fn::Sub: inv-${environment}-${area}-ecs-service-${sysName}\n      # ServiceRegistries:\n      # - ServiceRegistry\n      TaskDefinition:\n        Ref: taskDefinition\n  ServiceScalingTarget:\n    DependsOn: service\n    Type: AWS::ApplicationAutoScaling::ScalableTarget\n    Properties:\n      MaxCapacity:\n        5\n        # Ref: maxCapacity\n      MinCapacity:\n        1\n        # Ref: minCapacity\n      ResourceId:\n        Fn::Sub: service/${clusterName}/inv-${environment}-${area}-ecs-service-${sysName}\n      RoleARN:\n        Fn::GetAtt: [AutoscalingRole, Arn]\n      ScalableDimension: ecs:service:DesiredCount\n      ServiceNamespace: ecs\n  ServiceScalOutPolicy:\n    Type: AWS::ApplicationAutoScaling::ScalingPolicy\n    Properties:\n      PolicyName: OutPolicy\n      PolicyType: StepScaling\n      ScalingTargetId:\n        Ref: ServiceScalingTarget\n      StepScalingPolicyConfiguration:\n        AdjustmentType: ChangeInCapacity\n        Cooldown: 60\n        MetricAggregationType: Average\n        StepAdjustments:\n          - MetricIntervalLowerBound: 0\n            ScalingAdjustment: 1\n  AlarmScaleOut:\n    Type: AWS::CloudWatch::Alarm\n    Properties:\n      MetricName: CPUUtilization\n      Namespace: AWS/ECS\n      Statistic: Average\n      Period: 60\n      Threshold: 50\n      ComparisonOperator: GreaterThanThreshold\n      Dimensions:\n        - Name: ClusterName\n          Value:\n            Ref: clusterName\n        - Name: ServiceName\n          Value:\n            Fn::Sub: inv-${environment}-${area}-ecs-service-${sysName}\n      EvaluationPeriods: 1\n      AlarmActions:\n        - Ref: ServiceScalOutPolicy\n  ServiceScalInPolicy:\n    Type: AWS::ApplicationAutoScaling::ScalingPolicy\n    Properties:\n      PolicyName: InPolicy\n      PolicyType: StepScaling\n      ScalingTargetId:\n        Ref: ServiceScalingTarget\n      StepScalingPolicyConfiguration:\n        AdjustmentType: ChangeInCapacity\n        Cooldown: 60\n        MetricAggregationType: Average\n        StepAdjustments:\n          - MetricIntervalUpperBound: 0\n            ScalingAdjustment: -1\n  AlarmScaleIn:\n    Type: AWS::CloudWatch::Alarm\n    Properties:\n      MetricName: CPUUtilization\n      Namespace: AWS/ECS\n      Statistic: Average\n      Period: 60\n      Threshold: 10\n      ComparisonOperator: LessThanThreshold\n      Dimensions:\n        - Name: ClusterName\n          Value:\n            Ref: clusterName\n        - Name: ServiceName\n          Value:\n            Fn::Sub: inv-${environment}-${area}-ecs-service-${sysName}\n      EvaluationPeriods: 1\n      AlarmActions:\n        - Ref: ServiceScalInPolicy\n  AutoscalingRole:\n    Type: AWS::IAM::Role\n    Properties:\n      RoleName:\n        Fn::Sub: inv-${environment}-${area}-rl-autoscaling-${sysName}\n      AssumeRolePolicyDocument:\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service: [application-autoscaling.amazonaws.com]\n            Action: [\"sts:AssumeRole\"]\n      Path: /\n      Policies:\n        - PolicyName: AutoscalingPolicy\n          PolicyDocument:\n            Statement:\n              - Effect: Allow\n                Action:\n                  [\n                    \"application-autoscaling:*\",\n                    \"cloudwatch:DescribeAlarms\",\n                    \"cloudwatch:PutMetricAlarm\",\n                    \"ecs:DescribeServices\",\n                    \"ecs:UpdateService\",\n                  ]\n                Resource: \"*\"\nOutputs:\n  serviceName:\n    Description: Service Name\n    Value:\n      Fn::GetAtt: [service, Name]\n  # appImageEcrName:\n  #   Description: ECR Name\n  #   Value:\n  #     Ref: ecr\n"
}
appPipelineMain-ecsPipeline-1UHMQY4HB0IGO-referenceVehicleLocatio-ecsBaseImagePipeline-O6UUBUVCOKX4
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: \"2010-09-09\"\r\nDescription: ecsBaseImagePipeline template\r\nParameters:\r\n  environment:\r\n    Type: String\r\n  area:\r\n    Type: String\r\n  artifactBucketName:\r\n    Type: String\r\n  pipelineIamRoleArn:\r\n    Type: String\r\n  cloudwatchEventIamRoleArn:\r\n    Type: String\r\n  sysName:\r\n    Type: String\r\n  # subnetIds:\r\n  #   Type: List<AWS::EC2::Subnet::Id>\r\n  # vpcId:\r\n  #   Type: AWS::EC2::VPC::Id\r\n  templateBucketName:\r\n    Type: String\r\n  # baseRepositoryName:\r\n  #   Type: String\r\n  subnetPri1Id:\r\n    Type: String\r\n  subnetPri2Id:\r\n    Type: String\r\n  # subnetIds:\r\n  #   Ref: subnetIds\r\n  vpcId:\r\n    Type: String\r\n  baseImageEcrName:\r\n    Type: String\r\n  # appImageEcrName:\r\n  #   Type: String\r\n  # clusterName:\r\n  #   Type: String\r\n  # serviceName:\r\n  #   Type: String\r\n  baseImageCodeCommitCloneUrlHttp:\r\n    Type: String\r\n  baseImageCodeCommitName:\r\n    Type: String\r\n  baseImageCodeCommitArn:\r\n    Type: String\r\nResources:\r\n  # codecommit:\r\n  #   Type: AWS::CodeCommit::Repository\r\n  #   DeletionPolicy: Delete\r\n  #   Properties:\r\n  #     RepositoryName:\r\n  #       Fn::Sub: inv-${environment}-${area}-cdc-baseimage-${sysName}\r\n  # ecr:\r\n  #   Type: AWS::ECR::Repository\r\n  #   Properties:\r\n  #     # LifecyclePolicy:\r\n  #     #   LifecyclePolicy\r\n  #     RepositoryName:\r\n  #       Fn::Sub: inv-${environment}-${area}-ecr-baseimage-${sysName}\r\n  #     # RepositoryPolicyText: JSON object\r\n  codebuild:\r\n    Type: AWS::CodeBuild::Project\r\n    Properties:\r\n      Artifacts:\r\n        EncryptionDisabled: true\r\n        Location:\r\n          Ref: artifactBucketName\r\n        Type: S3\r\n      Environment:\r\n        ComputeType: BUILD_GENERAL1_SMALL\r\n        EnvironmentVariables:\r\n          - Name: environment\r\n            Type: PLAINTEXT\r\n            Value:\r\n              Ref: environment\r\n          - Name: area\r\n            Type: PLAINTEXT\r\n            Value:\r\n              Ref: area\r\n          - Name: templateBucketName\r\n            Type: PLAINTEXT\r\n            Value:\r\n              Ref: templateBucketName\r\n          - Name: vpcId\r\n            Type: PLAINTEXT\r\n            Value:\r\n              Ref: vpcId\r\n          - Name: sysName\r\n            Type: PLAINTEXT\r\n            Value:\r\n              Ref: sysName\r\n          - Name: subnetIds\r\n            Type: PLAINTEXT\r\n            Value:\r\n              Fn::Join:\r\n                - \",\"\r\n                - - Ref: subnetPri1Id\r\n                  - Ref: subnetPri2Id\r\n          - Name: repositoryUri\r\n            Type: PLAINTEXT\r\n            Value:\r\n              Fn::Sub: ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${baseImageEcrName}\r\n          - Name: region\r\n            Type: PLAINTEXT\r\n            Value:\r\n              Ref: AWS::Region\r\n        Image: aws/codebuild/docker:18.09.0\r\n        PrivilegedMode: true\r\n        Type: LINUX_CONTAINER\r\n      Name:\r\n        Fn::Sub: inv-${environment}-${area}-cdb-baseimage-${sysName}\r\n      ServiceRole:\r\n        Ref: pipelineIamRoleArn\r\n      Source:\r\n        BuildSpec: buildspec.yml\r\n        GitCloneDepth: 1\r\n        Location:\r\n          Ref: baseImageCodeCommitCloneUrlHttp\r\n          # Fn::GetAtt: [codecommit, CloneUrlHttp]\r\n        Type: CODECOMMIT\r\n  codepipeline:\r\n    Type: AWS::CodePipeline::Pipeline\r\n    Properties:\r\n      Name:\r\n        Fn::Sub: inv-${environment}-${area}-cdp-baseimage-${sysName}\r\n      RoleArn:\r\n        Ref: pipelineIamRoleArn\r\n      ArtifactStore:\r\n        Location:\r\n          Ref: artifactBucketName\r\n        Type: S3\r\n      Stages:\r\n        - Name: Source\r\n          Actions:\r\n            - Name: Source\r\n              ActionTypeId:\r\n                Category: Source\r\n                Owner: AWS\r\n                Provider: CodeCommit\r\n                Version: \"1\"\r\n              OutputArtifacts:\r\n                - Name: MyApp\r\n              Configuration:\r\n                PollForSourceChanges: false\r\n                RepositoryName:\r\n                  Ref: baseImageCodeCommitName\r\n                  # Fn::GetAtt: [codecommit, Name]\r\n                BranchName: master\r\n              RunOrder: 1\r\n        - Name: Build\r\n          Actions:\r\n            - Name: Build\r\n              ActionTypeId:\r\n                Category: Build\r\n                Owner: AWS\r\n                Provider: CodeBuild\r\n                Version: \"1\"\r\n              InputArtifacts:\r\n                - Name: MyApp\r\n              OutputArtifacts:\r\n                - Name: Unuse\r\n              Configuration:\r\n                ProjectName:\r\n                  Ref: codebuild\r\n              RunOrder: 1\r\n  pipelineEventsRule:\r\n    Type: AWS::Events::Rule\r\n    Properties:\r\n      # Name:\r\n      #   Fn::Sub: inv-${environment}-${area}-rule-${sysName}-baseimagepipeline\r\n      EventPattern:\r\n        source:\r\n          - aws.codecommit\r\n        detail-type:\r\n          - CodeCommit Repository State Change\r\n        resources:\r\n          - Ref: baseImageCodeCommitArn\r\n          # - Fn::GetAtt: [codecommit, Arn]\r\n        detail:\r\n          event:\r\n            - referenceCreated\r\n            - referenceUpdated\r\n            - referenceDeleted\r\n          referenceType:\r\n            - branch\r\n          referenceName:\r\n            - master\r\n      State: ENABLED\r\n      Targets:\r\n        - Arn:\r\n            Fn::Sub: arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${codepipeline}\r\n          Id:\r\n            Fn::Sub: inv-${environment}-${area}-target-${sysName}CdpExec\r\n          RoleArn:\r\n            Ref: cloudwatchEventIamRoleArn\r\n# Outputs:\r\n#   baseImageEcrName:\r\n#     Description: ECR Name\r\n#     Value:\r\n#       Ref: ecr\r\n"
}
appPipelineMain-ecsPipeline-1UHMQY4HB0IGO-referenceSecurityAlertH-ecsBaseImagePipeline-AI1LPJX4M63H
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: \"2010-09-09\"\r\nDescription: ecsBaseImagePipeline template\r\nParameters:\r\n  environment:\r\n    Type: String\r\n  area:\r\n    Type: String\r\n  artifactBucketName:\r\n    Type: String\r\n  pipelineIamRoleArn:\r\n    Type: String\r\n  cloudwatchEventIamRoleArn:\r\n    Type: String\r\n  sysName:\r\n    Type: String\r\n  # subnetIds:\r\n  #   Type: List<AWS::EC2::Subnet::Id>\r\n  # vpcId:\r\n  #   Type: AWS::EC2::VPC::Id\r\n  templateBucketName:\r\n    Type: String\r\n  # baseRepositoryName:\r\n  #   Type: String\r\n  subnetPri1Id:\r\n    Type: String\r\n  subnetPri2Id:\r\n    Type: String\r\n  # subnetIds:\r\n  #   Ref: subnetIds\r\n  vpcId:\r\n    Type: String\r\n  baseImageEcrName:\r\n    Type: String\r\n  # appImageEcrName:\r\n  #   Type: String\r\n  # clusterName:\r\n  #   Type: String\r\n  # serviceName:\r\n  #   Type: String\r\n  baseImageCodeCommitCloneUrlHttp:\r\n    Type: String\r\n  baseImageCodeCommitName:\r\n    Type: String\r\n  baseImageCodeCommitArn:\r\n    Type: String\r\nResources:\r\n  # codecommit:\r\n  #   Type: AWS::CodeCommit::Repository\r\n  #   DeletionPolicy: Delete\r\n  #   Properties:\r\n  #     RepositoryName:\r\n  #       Fn::Sub: inv-${environment}-${area}-cdc-baseimage-${sysName}\r\n  # ecr:\r\n  #   Type: AWS::ECR::Repository\r\n  #   Properties:\r\n  #     # LifecyclePolicy:\r\n  #     #   LifecyclePolicy\r\n  #     RepositoryName:\r\n  #       Fn::Sub: inv-${environment}-${area}-ecr-baseimage-${sysName}\r\n  #     # RepositoryPolicyText: JSON object\r\n  codebuild:\r\n    Type: AWS::CodeBuild::Project\r\n    Properties:\r\n      Artifacts:\r\n        EncryptionDisabled: true\r\n        Location:\r\n          Ref: artifactBucketName\r\n        Type: S3\r\n      Environment:\r\n        ComputeType: BUILD_GENERAL1_SMALL\r\n        EnvironmentVariables:\r\n          - Name: environment\r\n            Type: PLAINTEXT\r\n            Value:\r\n              Ref: environment\r\n          - Name: area\r\n            Type: PLAINTEXT\r\n            Value:\r\n              Ref: area\r\n          - Name: templateBucketName\r\n            Type: PLAINTEXT\r\n            Value:\r\n              Ref: templateBucketName\r\n          - Name: vpcId\r\n            Type: PLAINTEXT\r\n            Value:\r\n              Ref: vpcId\r\n          - Name: sysName\r\n            Type: PLAINTEXT\r\n            Value:\r\n              Ref: sysName\r\n          - Name: subnetIds\r\n            Type: PLAINTEXT\r\n            Value:\r\n              Fn::Join:\r\n                - \",\"\r\n                - - Ref: subnetPri1Id\r\n                  - Ref: subnetPri2Id\r\n          - Name: repositoryUri\r\n            Type: PLAINTEXT\r\n            Value:\r\n              Fn::Sub: ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${baseImageEcrName}\r\n          - Name: region\r\n            Type: PLAINTEXT\r\n            Value:\r\n              Ref: AWS::Region\r\n        Image: aws/codebuild/docker:18.09.0\r\n        PrivilegedMode: true\r\n        Type: LINUX_CONTAINER\r\n      Name:\r\n        Fn::Sub: inv-${environment}-${area}-cdb-baseimage-${sysName}\r\n      ServiceRole:\r\n        Ref: pipelineIamRoleArn\r\n      Source:\r\n        BuildSpec: buildspec.yml\r\n        GitCloneDepth: 1\r\n        Location:\r\n          Ref: baseImageCodeCommitCloneUrlHttp\r\n          # Fn::GetAtt: [codecommit, CloneUrlHttp]\r\n        Type: CODECOMMIT\r\n  codepipeline:\r\n    Type: AWS::CodePipeline::Pipeline\r\n    Properties:\r\n      Name:\r\n        Fn::Sub: inv-${environment}-${area}-cdp-baseimage-${sysName}\r\n      RoleArn:\r\n        Ref: pipelineIamRoleArn\r\n      ArtifactStore:\r\n        Location:\r\n          Ref: artifactBucketName\r\n        Type: S3\r\n      Stages:\r\n        - Name: Source\r\n          Actions:\r\n            - Name: Source\r\n              ActionTypeId:\r\n                Category: Source\r\n                Owner: AWS\r\n                Provider: CodeCommit\r\n                Version: \"1\"\r\n              OutputArtifacts:\r\n                - Name: MyApp\r\n              Configuration:\r\n                PollForSourceChanges: false\r\n                RepositoryName:\r\n                  Ref: baseImageCodeCommitName\r\n                  # Fn::GetAtt: [codecommit, Name]\r\n                BranchName: master\r\n              RunOrder: 1\r\n        - Name: Build\r\n          Actions:\r\n            - Name: Build\r\n              ActionTypeId:\r\n                Category: Build\r\n                Owner: AWS\r\n                Provider: CodeBuild\r\n                Version: \"1\"\r\n              InputArtifacts:\r\n                - Name: MyApp\r\n              OutputArtifacts:\r\n                - Name: Unuse\r\n              Configuration:\r\n                ProjectName:\r\n                  Ref: codebuild\r\n              RunOrder: 1\r\n  pipelineEventsRule:\r\n    Type: AWS::Events::Rule\r\n    Properties:\r\n      # Name:\r\n      #   Fn::Sub: inv-${environment}-${area}-rule-${sysName}-baseimagepipeline\r\n      EventPattern:\r\n        source:\r\n          - aws.codecommit\r\n        detail-type:\r\n          - CodeCommit Repository State Change\r\n        resources:\r\n          - Ref: baseImageCodeCommitArn\r\n          # - Fn::GetAtt: [codecommit, Arn]\r\n        detail:\r\n          event:\r\n            - referenceCreated\r\n            - referenceUpdated\r\n            - referenceDeleted\r\n          referenceType:\r\n            - branch\r\n          referenceName:\r\n            - master\r\n      State: ENABLED\r\n      Targets:\r\n        - Arn:\r\n            Fn::Sub: arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${codepipeline}\r\n          Id:\r\n            Fn::Sub: inv-${environment}-${area}-target-${sysName}CdpExec\r\n          RoleArn:\r\n            Ref: cloudwatchEventIamRoleArn\r\n# Outputs:\r\n#   baseImageEcrName:\r\n#     Description: ECR Name\r\n#     Value:\r\n#       Ref: ecr\r\n"
}
appPipelineMain-ecsPipeline-1UHMQY4HB0IGO-authorizationGatewayPip-ecsBaseImagePipeline-G8J06D3V5Z8M
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: \"2010-09-09\"\r\nDescription: ecsBaseImagePipeline template\r\nParameters:\r\n  environment:\r\n    Type: String\r\n  area:\r\n    Type: String\r\n  artifactBucketName:\r\n    Type: String\r\n  pipelineIamRoleArn:\r\n    Type: String\r\n  cloudwatchEventIamRoleArn:\r\n    Type: String\r\n  sysName:\r\n    Type: String\r\n  # subnetIds:\r\n  #   Type: List<AWS::EC2::Subnet::Id>\r\n  # vpcId:\r\n  #   Type: AWS::EC2::VPC::Id\r\n  templateBucketName:\r\n    Type: String\r\n  # baseRepositoryName:\r\n  #   Type: String\r\n  subnetPri1Id:\r\n    Type: String\r\n  subnetPri2Id:\r\n    Type: String\r\n  # subnetIds:\r\n  #   Ref: subnetIds\r\n  vpcId:\r\n    Type: String\r\n  baseImageEcrName:\r\n    Type: String\r\n  # appImageEcrName:\r\n  #   Type: String\r\n  # clusterName:\r\n  #   Type: String\r\n  # serviceName:\r\n  #   Type: String\r\n  baseImageCodeCommitCloneUrlHttp:\r\n    Type: String\r\n  baseImageCodeCommitName:\r\n    Type: String\r\n  baseImageCodeCommitArn:\r\n    Type: String\r\nResources:\r\n  # codecommit:\r\n  #   Type: AWS::CodeCommit::Repository\r\n  #   DeletionPolicy: Delete\r\n  #   Properties:\r\n  #     RepositoryName:\r\n  #       Fn::Sub: inv-${environment}-${area}-cdc-baseimage-${sysName}\r\n  # ecr:\r\n  #   Type: AWS::ECR::Repository\r\n  #   Properties:\r\n  #     # LifecyclePolicy:\r\n  #     #   LifecyclePolicy\r\n  #     RepositoryName:\r\n  #       Fn::Sub: inv-${environment}-${area}-ecr-baseimage-${sysName}\r\n  #     # RepositoryPolicyText: JSON object\r\n  codebuild:\r\n    Type: AWS::CodeBuild::Project\r\n    Properties:\r\n      Artifacts:\r\n        EncryptionDisabled: true\r\n        Location:\r\n          Ref: artifactBucketName\r\n        Type: S3\r\n      Environment:\r\n        ComputeType: BUILD_GENERAL1_SMALL\r\n        EnvironmentVariables:\r\n          - Name: environment\r\n            Type: PLAINTEXT\r\n            Value:\r\n              Ref: environment\r\n          - Name: area\r\n            Type: PLAINTEXT\r\n            Value:\r\n              Ref: area\r\n          - Name: templateBucketName\r\n            Type: PLAINTEXT\r\n            Value:\r\n              Ref: templateBucketName\r\n          - Name: vpcId\r\n            Type: PLAINTEXT\r\n            Value:\r\n              Ref: vpcId\r\n          - Name: sysName\r\n            Type: PLAINTEXT\r\n            Value:\r\n              Ref: sysName\r\n          - Name: subnetIds\r\n            Type: PLAINTEXT\r\n            Value:\r\n              Fn::Join:\r\n                - \",\"\r\n                - - Ref: subnetPri1Id\r\n                  - Ref: subnetPri2Id\r\n          - Name: repositoryUri\r\n            Type: PLAINTEXT\r\n            Value:\r\n              Fn::Sub: ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${baseImageEcrName}\r\n          - Name: region\r\n            Type: PLAINTEXT\r\n            Value:\r\n              Ref: AWS::Region\r\n        Image: aws/codebuild/docker:18.09.0\r\n        PrivilegedMode: true\r\n        Type: LINUX_CONTAINER\r\n      Name:\r\n        Fn::Sub: inv-${environment}-${area}-cdb-baseimage-${sysName}\r\n      ServiceRole:\r\n        Ref: pipelineIamRoleArn\r\n      Source:\r\n        BuildSpec: buildspec.yml\r\n        GitCloneDepth: 1\r\n        Location:\r\n          Ref: baseImageCodeCommitCloneUrlHttp\r\n          # Fn::GetAtt: [codecommit, CloneUrlHttp]\r\n        Type: CODECOMMIT\r\n  codepipeline:\r\n    Type: AWS::CodePipeline::Pipeline\r\n    Properties:\r\n      Name:\r\n        Fn::Sub: inv-${environment}-${area}-cdp-baseimage-${sysName}\r\n      RoleArn:\r\n        Ref: pipelineIamRoleArn\r\n      ArtifactStore:\r\n        Location:\r\n          Ref: artifactBucketName\r\n        Type: S3\r\n      Stages:\r\n        - Name: Source\r\n          Actions:\r\n            - Name: Source\r\n              ActionTypeId:\r\n                Category: Source\r\n                Owner: AWS\r\n                Provider: CodeCommit\r\n                Version: \"1\"\r\n              OutputArtifacts:\r\n                - Name: MyApp\r\n              Configuration:\r\n                PollForSourceChanges: false\r\n                RepositoryName:\r\n                  Ref: baseImageCodeCommitName\r\n                  # Fn::GetAtt: [codecommit, Name]\r\n                BranchName: master\r\n              RunOrder: 1\r\n        - Name: Build\r\n          Actions:\r\n            - Name: Build\r\n              ActionTypeId:\r\n                Category: Build\r\n                Owner: AWS\r\n                Provider: CodeBuild\r\n                Version: \"1\"\r\n              InputArtifacts:\r\n                - Name: MyApp\r\n              OutputArtifacts:\r\n                - Name: Unuse\r\n              Configuration:\r\n                ProjectName:\r\n                  Ref: codebuild\r\n              RunOrder: 1\r\n  pipelineEventsRule:\r\n    Type: AWS::Events::Rule\r\n    Properties:\r\n      # Name:\r\n      #   Fn::Sub: inv-${environment}-${area}-rule-${sysName}-baseimagepipeline\r\n      EventPattern:\r\n        source:\r\n          - aws.codecommit\r\n        detail-type:\r\n          - CodeCommit Repository State Change\r\n        resources:\r\n          - Ref: baseImageCodeCommitArn\r\n          # - Fn::GetAtt: [codecommit, Arn]\r\n        detail:\r\n          event:\r\n            - referenceCreated\r\n            - referenceUpdated\r\n            - referenceDeleted\r\n          referenceType:\r\n            - branch\r\n          referenceName:\r\n            - master\r\n      State: ENABLED\r\n      Targets:\r\n        - Arn:\r\n            Fn::Sub: arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${codepipeline}\r\n          Id:\r\n            Fn::Sub: inv-${environment}-${area}-target-${sysName}CdpExec\r\n          RoleArn:\r\n            Ref: cloudwatchEventIamRoleArn\r\n# Outputs:\r\n#   baseImageEcrName:\r\n#     Description: ECR Name\r\n#     Value:\r\n#       Ref: ecr\r\n"
}
appPipelineMain-ecsPipeline-1UHMQY4HB0IGO-referenceSecurityAlertHistory-customResource-122M24FKMMTJ4
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: 2010-09-09\r\nDescription: customResourceForCreateService template\r\nParameters:\r\n  area:\r\n    Type: String\r\n    Description: Area\r\n  environment:\r\n    Type: String\r\n    Description: VPC Environment Code\r\n  templateBucketName:\r\n    Type: String\r\n  functionZipPrefix:\r\n    Type: String\r\n  sysName:\r\n    Type: String\r\nResources:\r\n  lambdaFunctionRole:\r\n    Type: AWS::IAM::Role\r\n    Properties:\r\n      RoleName:\r\n        Fn::Sub: inv-${environment}-${area}-rl-lm-createecs-${sysName}\r\n      AssumeRolePolicyDocument:\r\n        Statement:\r\n          - Effect: Allow\r\n            Principal:\r\n              Service: lambda.amazonaws.com\r\n            Action: \"sts:AssumeRole\"\r\n      Path: /\r\n  lambdaFunctionPolicy:\r\n    Type: AWS::IAM::Policy\r\n    Properties:\r\n      PolicyDocument:\r\n        Version: 2012-10-17\r\n        Statement:\r\n          - Effect: Allow\r\n            Action:\r\n              - \"ecs:*\"\r\n              - \"ssm:*\"\r\n              - \"logs:*\"\r\n              - \"ec2:*\"\r\n              - \"iam:PassRole\"\r\n            Resource: \"*\"\r\n      Roles:\r\n        - Ref: lambdaFunctionRole\r\n      PolicyName:\r\n        Fn::Sub: inv-${environment}-${area}-pl-lm-createecs-${sysName}\r\n  function:\r\n    Type: AWS::Lambda::Function\r\n    Properties:\r\n      Code:\r\n        S3Bucket:\r\n          Ref: templateBucketName\r\n        S3Key:\r\n          Ref: functionZipPrefix\r\n      # Description: Function\r\n      Environment:\r\n        Variables:\r\n          area:\r\n            Ref: area\r\n          environment:\r\n            Ref: environment\r\n      FunctionName:\r\n        Fn::Sub: inv-${environment}-${area}-lm-createecs-${sysName}\r\n      Handler: create_service.lambda_handler\r\n      Role:\r\n        Fn::GetAtt: [lambdaFunctionRole, Arn]\r\n      Runtime: python3.6\r\n      Timeout: 300\r\n      Description: \"modified on 201902041739\"\r\n      # zip???????template??????????Cfn?Update???????Description??????(yyyymmddhhMM)\r\nOutputs:\r\n  functionArn:\r\n    Value:\r\n      Fn::GetAtt: [function, Arn]\r\n"
}
appPipelineMain-ecsPipeline-1UHMQY4HB0IGO-referenceSecurityAlertHistoryPi-repositories-1BPVA9WMO5LK5
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: \"2010-09-09\"\r\nDescription: repositories template\r\nParameters:\r\n  environment:\r\n    Type: String\r\n  area:\r\n    Type: String\r\n  sysName:\r\n    Type: String\r\nResources:\r\n  baseImageCodecommit:\r\n    Type: AWS::CodeCommit::Repository\r\n    DeletionPolicy: Delete\r\n    Properties:\r\n      RepositoryName:\r\n        Fn::Sub: inv-${environment}-${area}-cdc-baseimage-${sysName}\r\n  appImageCodecommit:\r\n    Type: AWS::CodeCommit::Repository\r\n    DeletionPolicy: Delete\r\n    Properties:\r\n      RepositoryName:\r\n        Fn::Sub: inv-${environment}-${area}-cdc-appimage-${sysName}\r\n  baseImageEcr:\r\n    Type: AWS::ECR::Repository\r\n    Properties:\r\n      # LifecyclePolicy:\r\n      #   LifecyclePolicy\r\n      RepositoryName:\r\n        Fn::Sub: inv-${environment}-${area}-ecr-baseimage-${sysName}\r\n      # RepositoryPolicyText: JSON object\r\n  appImageEcr:\r\n    Type: AWS::ECR::Repository\r\n    Properties:\r\n      # LifecyclePolicy:\r\n      #   LifecyclePolicy\r\n      RepositoryName:\r\n        Fn::Sub: inv-${environment}-${area}-ecr-appimage-${sysName}\r\n      # RepositoryPolicyText: JSON object\r\nOutputs:\r\n  appImageEcrName:\r\n    Description: ECR Name\r\n    Value:\r\n      Ref: appImageEcr\r\n    # Export:\r\n    #   Name: appImageEcrName\r\n  appImageCodeCommitCloneUrlHttp:\r\n    Description: CodeCommit URL\r\n    Value:\r\n      Fn::GetAtt: [appImageCodecommit, CloneUrlHttp]\r\n    # Export:\r\n    #   Name: appImageCodeCommitCloneUrlHttp\r\n  appImageCodeCommitName:\r\n    Description: CodeCommit Name\r\n    Value:\r\n      Fn::GetAtt: [appImageCodecommit, Name]\r\n    # Export:\r\n    #   Name: appImageCodeCommitName\r\n  appImageCodeCommitArn:\r\n    Description: CodeCommit ARN\r\n    Value:\r\n      Fn::GetAtt: [appImageCodecommit, Arn]\r\n    # Export:\r\n    #   Name: appImageCodeCommitArn\r\n  baseImageEcrName:\r\n    Description: ECR Name\r\n    Value:\r\n      Ref: baseImageEcr\r\n    # Export:\r\n    #   Name: baseImageEcrName\r\n  baseImageCodeCommitCloneUrlHttp:\r\n    Description: CodeCommit URL\r\n    Value:\r\n      Fn::GetAtt: [baseImageCodecommit, CloneUrlHttp]\r\n    # Export:\r\n    #   Name: appImageCodeCommitCloneUrlHttp\r\n  baseImageCodeCommitName:\r\n    Description: CodeCommit Name\r\n    Value:\r\n      Fn::GetAtt: [baseImageCodecommit, Name]\r\n    # Export:\r\n    #   Name: appImageCodeCommitName\r\n  baseImageCodeCommitArn:\r\n    Description: CodeCommit ARN\r\n    Value:\r\n      Fn::GetAtt: [baseImageCodecommit, Arn]\r\n    # Export:\r\n    #   Name: appImageCodeCommitArn\r\n"
}
appPipelineMain-ecsPipeline-1UHMQY4HB0IGO-referenceVehicleLocationInfor-customResource-SF54BVJJYF7I
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: 2010-09-09\r\nDescription: customResourceForCreateService template\r\nParameters:\r\n  area:\r\n    Type: String\r\n    Description: Area\r\n  environment:\r\n    Type: String\r\n    Description: VPC Environment Code\r\n  templateBucketName:\r\n    Type: String\r\n  functionZipPrefix:\r\n    Type: String\r\n  sysName:\r\n    Type: String\r\nResources:\r\n  lambdaFunctionRole:\r\n    Type: AWS::IAM::Role\r\n    Properties:\r\n      RoleName:\r\n        Fn::Sub: inv-${environment}-${area}-rl-lm-createecs-${sysName}\r\n      AssumeRolePolicyDocument:\r\n        Statement:\r\n          - Effect: Allow\r\n            Principal:\r\n              Service: lambda.amazonaws.com\r\n            Action: \"sts:AssumeRole\"\r\n      Path: /\r\n  lambdaFunctionPolicy:\r\n    Type: AWS::IAM::Policy\r\n    Properties:\r\n      PolicyDocument:\r\n        Version: 2012-10-17\r\n        Statement:\r\n          - Effect: Allow\r\n            Action:\r\n              - \"ecs:*\"\r\n              - \"ssm:*\"\r\n              - \"logs:*\"\r\n              - \"ec2:*\"\r\n              - \"iam:PassRole\"\r\n            Resource: \"*\"\r\n      Roles:\r\n        - Ref: lambdaFunctionRole\r\n      PolicyName:\r\n        Fn::Sub: inv-${environment}-${area}-pl-lm-createecs-${sysName}\r\n  function:\r\n    Type: AWS::Lambda::Function\r\n    Properties:\r\n      Code:\r\n        S3Bucket:\r\n          Ref: templateBucketName\r\n        S3Key:\r\n          Ref: functionZipPrefix\r\n      # Description: Function\r\n      Environment:\r\n        Variables:\r\n          area:\r\n            Ref: area\r\n          environment:\r\n            Ref: environment\r\n      FunctionName:\r\n        Fn::Sub: inv-${environment}-${area}-lm-createecs-${sysName}\r\n      Handler: create_service.lambda_handler\r\n      Role:\r\n        Fn::GetAtt: [lambdaFunctionRole, Arn]\r\n      Runtime: python3.6\r\n      Timeout: 300\r\n      Description: \"modified on 201902041739\"\r\n      # zip???????template??????????Cfn?Update???????Description??????(yyyymmddhhMM)\r\nOutputs:\r\n  functionArn:\r\n    Value:\r\n      Fn::GetAtt: [function, Arn]\r\n"
}
appPipelineMain-ecsPipeline-1UHMQY4HB0IGO-referenceVehicleLocationInforma-repositories-8E92GUZTP98W
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: \"2010-09-09\"\r\nDescription: repositories template\r\nParameters:\r\n  environment:\r\n    Type: String\r\n  area:\r\n    Type: String\r\n  sysName:\r\n    Type: String\r\nResources:\r\n  baseImageCodecommit:\r\n    Type: AWS::CodeCommit::Repository\r\n    DeletionPolicy: Delete\r\n    Properties:\r\n      RepositoryName:\r\n        Fn::Sub: inv-${environment}-${area}-cdc-baseimage-${sysName}\r\n  appImageCodecommit:\r\n    Type: AWS::CodeCommit::Repository\r\n    DeletionPolicy: Delete\r\n    Properties:\r\n      RepositoryName:\r\n        Fn::Sub: inv-${environment}-${area}-cdc-appimage-${sysName}\r\n  baseImageEcr:\r\n    Type: AWS::ECR::Repository\r\n    Properties:\r\n      # LifecyclePolicy:\r\n      #   LifecyclePolicy\r\n      RepositoryName:\r\n        Fn::Sub: inv-${environment}-${area}-ecr-baseimage-${sysName}\r\n      # RepositoryPolicyText: JSON object\r\n  appImageEcr:\r\n    Type: AWS::ECR::Repository\r\n    Properties:\r\n      # LifecyclePolicy:\r\n      #   LifecyclePolicy\r\n      RepositoryName:\r\n        Fn::Sub: inv-${environment}-${area}-ecr-appimage-${sysName}\r\n      # RepositoryPolicyText: JSON object\r\nOutputs:\r\n  appImageEcrName:\r\n    Description: ECR Name\r\n    Value:\r\n      Ref: appImageEcr\r\n    # Export:\r\n    #   Name: appImageEcrName\r\n  appImageCodeCommitCloneUrlHttp:\r\n    Description: CodeCommit URL\r\n    Value:\r\n      Fn::GetAtt: [appImageCodecommit, CloneUrlHttp]\r\n    # Export:\r\n    #   Name: appImageCodeCommitCloneUrlHttp\r\n  appImageCodeCommitName:\r\n    Description: CodeCommit Name\r\n    Value:\r\n      Fn::GetAtt: [appImageCodecommit, Name]\r\n    # Export:\r\n    #   Name: appImageCodeCommitName\r\n  appImageCodeCommitArn:\r\n    Description: CodeCommit ARN\r\n    Value:\r\n      Fn::GetAtt: [appImageCodecommit, Arn]\r\n    # Export:\r\n    #   Name: appImageCodeCommitArn\r\n  baseImageEcrName:\r\n    Description: ECR Name\r\n    Value:\r\n      Ref: baseImageEcr\r\n    # Export:\r\n    #   Name: baseImageEcrName\r\n  baseImageCodeCommitCloneUrlHttp:\r\n    Description: CodeCommit URL\r\n    Value:\r\n      Fn::GetAtt: [baseImageCodecommit, CloneUrlHttp]\r\n    # Export:\r\n    #   Name: appImageCodeCommitCloneUrlHttp\r\n  baseImageCodeCommitName:\r\n    Description: CodeCommit Name\r\n    Value:\r\n      Fn::GetAtt: [baseImageCodecommit, Name]\r\n    # Export:\r\n    #   Name: appImageCodeCommitName\r\n  baseImageCodeCommitArn:\r\n    Description: CodeCommit ARN\r\n    Value:\r\n      Fn::GetAtt: [baseImageCodecommit, Arn]\r\n    # Export:\r\n    #   Name: appImageCodeCommitArn\r\n"
}
appPipelineMain-ecsPipeline-1UHMQY4HB0IGO-authorizationGatewayPipeline-customResource-5EI1WH58FPB1
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: 2010-09-09\r\nDescription: customResourceForCreateService template\r\nParameters:\r\n  area:\r\n    Type: String\r\n    Description: Area\r\n  environment:\r\n    Type: String\r\n    Description: VPC Environment Code\r\n  templateBucketName:\r\n    Type: String\r\n  functionZipPrefix:\r\n    Type: String\r\n  sysName:\r\n    Type: String\r\nResources:\r\n  lambdaFunctionRole:\r\n    Type: AWS::IAM::Role\r\n    Properties:\r\n      RoleName:\r\n        Fn::Sub: inv-${environment}-${area}-rl-lm-createecs-${sysName}\r\n      AssumeRolePolicyDocument:\r\n        Statement:\r\n          - Effect: Allow\r\n            Principal:\r\n              Service: lambda.amazonaws.com\r\n            Action: \"sts:AssumeRole\"\r\n      Path: /\r\n  lambdaFunctionPolicy:\r\n    Type: AWS::IAM::Policy\r\n    Properties:\r\n      PolicyDocument:\r\n        Version: 2012-10-17\r\n        Statement:\r\n          - Effect: Allow\r\n            Action:\r\n              - \"ecs:*\"\r\n              - \"ssm:*\"\r\n              - \"logs:*\"\r\n              - \"ec2:*\"\r\n              - \"iam:PassRole\"\r\n            Resource: \"*\"\r\n      Roles:\r\n        - Ref: lambdaFunctionRole\r\n      PolicyName:\r\n        Fn::Sub: inv-${environment}-${area}-pl-lm-createecs-${sysName}\r\n  function:\r\n    Type: AWS::Lambda::Function\r\n    Properties:\r\n      Code:\r\n        S3Bucket:\r\n          Ref: templateBucketName\r\n        S3Key:\r\n          Ref: functionZipPrefix\r\n      # Description: Function\r\n      Environment:\r\n        Variables:\r\n          area:\r\n            Ref: area\r\n          environment:\r\n            Ref: environment\r\n      FunctionName:\r\n        Fn::Sub: inv-${environment}-${area}-lm-createecs-${sysName}\r\n      Handler: create_service.lambda_handler\r\n      Role:\r\n        Fn::GetAtt: [lambdaFunctionRole, Arn]\r\n      Runtime: python3.6\r\n      Timeout: 300\r\n      Description: \"modified on 201902041739\"\r\n      # zip???????template??????????Cfn?Update???????Description??????(yyyymmddhhMM)\r\nOutputs:\r\n  functionArn:\r\n    Value:\r\n      Fn::GetAtt: [function, Arn]\r\n"
}
appPipelineMain-ecsPipeline-1UHMQY4HB0IGO-authorizationGatewayPipeline-1B-repositories-1IFI33GHXNOGA
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: \"2010-09-09\"\r\nDescription: repositories template\r\nParameters:\r\n  environment:\r\n    Type: String\r\n  area:\r\n    Type: String\r\n  sysName:\r\n    Type: String\r\nResources:\r\n  baseImageCodecommit:\r\n    Type: AWS::CodeCommit::Repository\r\n    DeletionPolicy: Delete\r\n    Properties:\r\n      RepositoryName:\r\n        Fn::Sub: inv-${environment}-${area}-cdc-baseimage-${sysName}\r\n  appImageCodecommit:\r\n    Type: AWS::CodeCommit::Repository\r\n    DeletionPolicy: Delete\r\n    Properties:\r\n      RepositoryName:\r\n        Fn::Sub: inv-${environment}-${area}-cdc-appimage-${sysName}\r\n  baseImageEcr:\r\n    Type: AWS::ECR::Repository\r\n    Properties:\r\n      # LifecyclePolicy:\r\n      #   LifecyclePolicy\r\n      RepositoryName:\r\n        Fn::Sub: inv-${environment}-${area}-ecr-baseimage-${sysName}\r\n      # RepositoryPolicyText: JSON object\r\n  appImageEcr:\r\n    Type: AWS::ECR::Repository\r\n    Properties:\r\n      # LifecyclePolicy:\r\n      #   LifecyclePolicy\r\n      RepositoryName:\r\n        Fn::Sub: inv-${environment}-${area}-ecr-appimage-${sysName}\r\n      # RepositoryPolicyText: JSON object\r\nOutputs:\r\n  appImageEcrName:\r\n    Description: ECR Name\r\n    Value:\r\n      Ref: appImageEcr\r\n    # Export:\r\n    #   Name: appImageEcrName\r\n  appImageCodeCommitCloneUrlHttp:\r\n    Description: CodeCommit URL\r\n    Value:\r\n      Fn::GetAtt: [appImageCodecommit, CloneUrlHttp]\r\n    # Export:\r\n    #   Name: appImageCodeCommitCloneUrlHttp\r\n  appImageCodeCommitName:\r\n    Description: CodeCommit Name\r\n    Value:\r\n      Fn::GetAtt: [appImageCodecommit, Name]\r\n    # Export:\r\n    #   Name: appImageCodeCommitName\r\n  appImageCodeCommitArn:\r\n    Description: CodeCommit ARN\r\n    Value:\r\n      Fn::GetAtt: [appImageCodecommit, Arn]\r\n    # Export:\r\n    #   Name: appImageCodeCommitArn\r\n  baseImageEcrName:\r\n    Description: ECR Name\r\n    Value:\r\n      Ref: baseImageEcr\r\n    # Export:\r\n    #   Name: baseImageEcrName\r\n  baseImageCodeCommitCloneUrlHttp:\r\n    Description: CodeCommit URL\r\n    Value:\r\n      Fn::GetAtt: [baseImageCodecommit, CloneUrlHttp]\r\n    # Export:\r\n    #   Name: appImageCodeCommitCloneUrlHttp\r\n  baseImageCodeCommitName:\r\n    Description: CodeCommit Name\r\n    Value:\r\n      Fn::GetAtt: [baseImageCodecommit, Name]\r\n    # Export:\r\n    #   Name: appImageCodeCommitName\r\n  baseImageCodeCommitArn:\r\n    Description: CodeCommit ARN\r\n    Value:\r\n      Fn::GetAtt: [baseImageCodecommit, Arn]\r\n    # Export:\r\n    #   Name: appImageCodeCommitArn\r\n"
}
appPipelineMain-lambdaPipeline-FKOTMTNQBDPV-notificationSecurityAlertActuationPipeline-1GW8LQXATQ3LJ
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: \"2010-09-09\"\nDescription: samDeployPipeline template\nParameters:\n  environment:\n    Type: String\n  area:\n    Type: String\n  artifactBucketName:\n    Type: String\n  pipelineIamRoleArn:\n    Type: String\n  cloudwatchEventIamRoleArn:\n    Type: String\n  sysName:\n    Type: String\n  subnetPri1Id:\n    Type: String\n  subnetPri2Id:\n    Type: String\n  vpcId:\n    Type: AWS::EC2::VPC::Id\n  templateBucketName:\n    Type: String\nResources:\n  codecommit:\n    Type: AWS::CodeCommit::Repository\n    DeletionPolicy: Delete\n    Properties:\n      RepositoryName:\n        Fn::Sub: inv-${environment}-${area}-cdc-${sysName}\n  codebuild:\n    Type: AWS::CodeBuild::Project\n    Properties:\n      Artifacts:\n        EncryptionDisabled: true\n        Location:\n          Ref: artifactBucketName\n        Type: S3\n      Environment:\n        ComputeType: BUILD_GENERAL1_SMALL\n        EnvironmentVariables:\n          - Name: environment\n            Type: PLAINTEXT\n            Value:\n              Ref: environment\n          - Name: area\n            Type: PLAINTEXT\n            Value:\n              Ref: area\n          - Name: templateBucketName\n            Type: PLAINTEXT\n            Value:\n              Ref: templateBucketName\n          - Name: vpcId\n            Type: PLAINTEXT\n            Value:\n              Ref: vpcId\n          - Name: sysName\n            Type: PLAINTEXT\n            Value:\n              Ref: sysName\n          - Name: subnetIds\n            Type: PLAINTEXT\n            Value:\n              Fn::Join:\n                - \",\"\n                - - Ref: subnetPri1Id\n                  - Ref: subnetPri2Id\n        Image: aws/codebuild/python:3.6.5\n        PrivilegedMode: false\n        Type: LINUX_CONTAINER\n      Name:\n        Fn::Sub: inv-${environment}-${area}-cdb-${sysName}\n      ServiceRole:\n        Ref: pipelineIamRoleArn\n      Source:\n        BuildSpec: buildspec.yml\n        GitCloneDepth: 1\n        Location:\n          Fn::GetAtt: [codecommit, CloneUrlHttp]\n        Type: CODECOMMIT\n  codepipeline:\n    Type: AWS::CodePipeline::Pipeline\n    Properties:\n      Name:\n        Fn::Sub: inv-${environment}-${area}-cdp-${sysName}\n      RoleArn:\n        Ref: pipelineIamRoleArn\n      ArtifactStore:\n        Location:\n          Ref: artifactBucketName\n        Type: S3\n      Stages:\n        - Name: Source\n          Actions:\n            - Name: Source\n              ActionTypeId:\n                Category: Source\n                Owner: AWS\n                Provider: CodeCommit\n                Version: \"1\"\n              OutputArtifacts:\n                - Name: MyApp\n              Configuration:\n                PollForSourceChanges: false\n                RepositoryName:\n                  Fn::GetAtt: [codecommit, Name]\n                BranchName: master\n              RunOrder: 1\n        - Name: Build\n          Actions:\n            - Name: Build\n              ActionTypeId:\n                Category: Build\n                Owner: AWS\n                Provider: CodeBuild\n                Version: \"1\"\n              InputArtifacts:\n                - Name: MyApp\n              OutputArtifacts:\n                - Name: Unuse\n              Configuration:\n                ProjectName:\n                  Ref: codebuild\n              RunOrder: 1\n  pipelineEventsRule:\n    Type: AWS::Events::Rule\n    Properties:\n      # Name:\n      #   Fn::Sub: inv-${environment}-${area}-rule-${sysName}\n      EventPattern:\n        source:\n          - aws.codecommit\n        detail-type:\n          - CodeCommit Repository State Change\n        resources:\n          - Fn::GetAtt: [codecommit, Arn]\n        detail:\n          event:\n            - referenceCreated\n            - referenceUpdated\n            - referenceDeleted\n          referenceType:\n            - branch\n          referenceName:\n            - master\n      State: ENABLED\n      Targets:\n        - Arn:\n            Fn::Sub: arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${codepipeline}\n          Id:\n            Fn::Sub: inv-${environment}-${area}-target-${sysName}CdpExec\n          RoleArn:\n            Ref: cloudwatchEventIamRoleArn\n"
}
appPipelineMain-lambdaPipeline-FKOTMTNQBDPV-getIdInformationCachePipeline-1WX4WA1EGD6MV
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: \"2010-09-09\"\nDescription: samDeployPipeline template\nParameters:\n  environment:\n    Type: String\n  area:\n    Type: String\n  artifactBucketName:\n    Type: String\n  pipelineIamRoleArn:\n    Type: String\n  cloudwatchEventIamRoleArn:\n    Type: String\n  sysName:\n    Type: String\n  subnetPri1Id:\n    Type: String\n  subnetPri2Id:\n    Type: String\n  vpcId:\n    Type: AWS::EC2::VPC::Id\n  templateBucketName:\n    Type: String\nResources:\n  codecommit:\n    Type: AWS::CodeCommit::Repository\n    DeletionPolicy: Delete\n    Properties:\n      RepositoryName:\n        Fn::Sub: inv-${environment}-${area}-cdc-${sysName}\n  codebuild:\n    Type: AWS::CodeBuild::Project\n    Properties:\n      Artifacts:\n        EncryptionDisabled: true\n        Location:\n          Ref: artifactBucketName\n        Type: S3\n      Environment:\n        ComputeType: BUILD_GENERAL1_SMALL\n        EnvironmentVariables:\n          - Name: environment\n            Type: PLAINTEXT\n            Value:\n              Ref: environment\n          - Name: area\n            Type: PLAINTEXT\n            Value:\n              Ref: area\n          - Name: templateBucketName\n            Type: PLAINTEXT\n            Value:\n              Ref: templateBucketName\n          - Name: vpcId\n            Type: PLAINTEXT\n            Value:\n              Ref: vpcId\n          - Name: sysName\n            Type: PLAINTEXT\n            Value:\n              Ref: sysName\n          - Name: subnetIds\n            Type: PLAINTEXT\n            Value:\n              Fn::Join:\n                - \",\"\n                - - Ref: subnetPri1Id\n                  - Ref: subnetPri2Id\n        Image: aws/codebuild/python:3.6.5\n        PrivilegedMode: false\n        Type: LINUX_CONTAINER\n      Name:\n        Fn::Sub: inv-${environment}-${area}-cdb-${sysName}\n      ServiceRole:\n        Ref: pipelineIamRoleArn\n      Source:\n        BuildSpec: buildspec.yml\n        GitCloneDepth: 1\n        Location:\n          Fn::GetAtt: [codecommit, CloneUrlHttp]\n        Type: CODECOMMIT\n  codepipeline:\n    Type: AWS::CodePipeline::Pipeline\n    Properties:\n      Name:\n        Fn::Sub: inv-${environment}-${area}-cdp-${sysName}\n      RoleArn:\n        Ref: pipelineIamRoleArn\n      ArtifactStore:\n        Location:\n          Ref: artifactBucketName\n        Type: S3\n      Stages:\n        - Name: Source\n          Actions:\n            - Name: Source\n              ActionTypeId:\n                Category: Source\n                Owner: AWS\n                Provider: CodeCommit\n                Version: \"1\"\n              OutputArtifacts:\n                - Name: MyApp\n              Configuration:\n                PollForSourceChanges: false\n                RepositoryName:\n                  Fn::GetAtt: [codecommit, Name]\n                BranchName: master\n              RunOrder: 1\n        - Name: Build\n          Actions:\n            - Name: Build\n              ActionTypeId:\n                Category: Build\n                Owner: AWS\n                Provider: CodeBuild\n                Version: \"1\"\n              InputArtifacts:\n                - Name: MyApp\n              OutputArtifacts:\n                - Name: Unuse\n              Configuration:\n                ProjectName:\n                  Ref: codebuild\n              RunOrder: 1\n  pipelineEventsRule:\n    Type: AWS::Events::Rule\n    Properties:\n      # Name:\n      #   Fn::Sub: inv-${environment}-${area}-rule-${sysName}\n      EventPattern:\n        source:\n          - aws.codecommit\n        detail-type:\n          - CodeCommit Repository State Change\n        resources:\n          - Fn::GetAtt: [codecommit, Arn]\n        detail:\n          event:\n            - referenceCreated\n            - referenceUpdated\n            - referenceDeleted\n          referenceType:\n            - branch\n          referenceName:\n            - master\n      State: ENABLED\n      Targets:\n        - Arn:\n            Fn::Sub: arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${codepipeline}\n          Id:\n            Fn::Sub: inv-${environment}-${area}-target-${sysName}CdpExec\n          RoleArn:\n            Ref: cloudwatchEventIamRoleArn\n"
}
appPipelineMain-lambdaPipeline-FKOTMTNQBDPV-notificationOrderCompletePipeline-1GV1NO0BEWAYQ
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: \"2010-09-09\"\nDescription: samDeployPipeline template\nParameters:\n  environment:\n    Type: String\n  area:\n    Type: String\n  artifactBucketName:\n    Type: String\n  pipelineIamRoleArn:\n    Type: String\n  cloudwatchEventIamRoleArn:\n    Type: String\n  sysName:\n    Type: String\n  subnetPri1Id:\n    Type: String\n  subnetPri2Id:\n    Type: String\n  vpcId:\n    Type: AWS::EC2::VPC::Id\n  templateBucketName:\n    Type: String\nResources:\n  codecommit:\n    Type: AWS::CodeCommit::Repository\n    DeletionPolicy: Delete\n    Properties:\n      RepositoryName:\n        Fn::Sub: inv-${environment}-${area}-cdc-${sysName}\n  codebuild:\n    Type: AWS::CodeBuild::Project\n    Properties:\n      Artifacts:\n        EncryptionDisabled: true\n        Location:\n          Ref: artifactBucketName\n        Type: S3\n      Environment:\n        ComputeType: BUILD_GENERAL1_SMALL\n        EnvironmentVariables:\n          - Name: environment\n            Type: PLAINTEXT\n            Value:\n              Ref: environment\n          - Name: area\n            Type: PLAINTEXT\n            Value:\n              Ref: area\n          - Name: templateBucketName\n            Type: PLAINTEXT\n            Value:\n              Ref: templateBucketName\n          - Name: vpcId\n            Type: PLAINTEXT\n            Value:\n              Ref: vpcId\n          - Name: sysName\n            Type: PLAINTEXT\n            Value:\n              Ref: sysName\n          - Name: subnetIds\n            Type: PLAINTEXT\n            Value:\n              Fn::Join:\n                - \",\"\n                - - Ref: subnetPri1Id\n                  - Ref: subnetPri2Id\n        Image: aws/codebuild/python:3.6.5\n        PrivilegedMode: false\n        Type: LINUX_CONTAINER\n      Name:\n        Fn::Sub: inv-${environment}-${area}-cdb-${sysName}\n      ServiceRole:\n        Ref: pipelineIamRoleArn\n      Source:\n        BuildSpec: buildspec.yml\n        GitCloneDepth: 1\n        Location:\n          Fn::GetAtt: [codecommit, CloneUrlHttp]\n        Type: CODECOMMIT\n  codepipeline:\n    Type: AWS::CodePipeline::Pipeline\n    Properties:\n      Name:\n        Fn::Sub: inv-${environment}-${area}-cdp-${sysName}\n      RoleArn:\n        Ref: pipelineIamRoleArn\n      ArtifactStore:\n        Location:\n          Ref: artifactBucketName\n        Type: S3\n      Stages:\n        - Name: Source\n          Actions:\n            - Name: Source\n              ActionTypeId:\n                Category: Source\n                Owner: AWS\n                Provider: CodeCommit\n                Version: \"1\"\n              OutputArtifacts:\n                - Name: MyApp\n              Configuration:\n                PollForSourceChanges: false\n                RepositoryName:\n                  Fn::GetAtt: [codecommit, Name]\n                BranchName: master\n              RunOrder: 1\n        - Name: Build\n          Actions:\n            - Name: Build\n              ActionTypeId:\n                Category: Build\n                Owner: AWS\n                Provider: CodeBuild\n                Version: \"1\"\n              InputArtifacts:\n                - Name: MyApp\n              OutputArtifacts:\n                - Name: Unuse\n              Configuration:\n                ProjectName:\n                  Ref: codebuild\n              RunOrder: 1\n  pipelineEventsRule:\n    Type: AWS::Events::Rule\n    Properties:\n      # Name:\n      #   Fn::Sub: inv-${environment}-${area}-rule-${sysName}\n      EventPattern:\n        source:\n          - aws.codecommit\n        detail-type:\n          - CodeCommit Repository State Change\n        resources:\n          - Fn::GetAtt: [codecommit, Arn]\n        detail:\n          event:\n            - referenceCreated\n            - referenceUpdated\n            - referenceDeleted\n          referenceType:\n            - branch\n          referenceName:\n            - master\n      State: ENABLED\n      Targets:\n        - Arn:\n            Fn::Sub: arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${codepipeline}\n          Id:\n            Fn::Sub: inv-${environment}-${area}-target-${sysName}CdpExec\n          RoleArn:\n            Ref: cloudwatchEventIamRoleArn\n"
}
appPipelineMain-lambdaPipeline-FKOTMTNQBDPV-getVehicleLocationInformationPipeline-OQHZQDMGDLXL
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: \"2010-09-09\"\nDescription: samDeployPipeline template\nParameters:\n  environment:\n    Type: String\n  area:\n    Type: String\n  artifactBucketName:\n    Type: String\n  pipelineIamRoleArn:\n    Type: String\n  cloudwatchEventIamRoleArn:\n    Type: String\n  sysName:\n    Type: String\n  subnetPri1Id:\n    Type: String\n  subnetPri2Id:\n    Type: String\n  vpcId:\n    Type: AWS::EC2::VPC::Id\n  templateBucketName:\n    Type: String\nResources:\n  codecommit:\n    Type: AWS::CodeCommit::Repository\n    DeletionPolicy: Delete\n    Properties:\n      RepositoryName:\n        Fn::Sub: inv-${environment}-${area}-cdc-${sysName}\n  codebuild:\n    Type: AWS::CodeBuild::Project\n    Properties:\n      Artifacts:\n        EncryptionDisabled: true\n        Location:\n          Ref: artifactBucketName\n        Type: S3\n      Environment:\n        ComputeType: BUILD_GENERAL1_SMALL\n        EnvironmentVariables:\n          - Name: environment\n            Type: PLAINTEXT\n            Value:\n              Ref: environment\n          - Name: area\n            Type: PLAINTEXT\n            Value:\n              Ref: area\n          - Name: templateBucketName\n            Type: PLAINTEXT\n            Value:\n              Ref: templateBucketName\n          - Name: vpcId\n            Type: PLAINTEXT\n            Value:\n              Ref: vpcId\n          - Name: sysName\n            Type: PLAINTEXT\n            Value:\n              Ref: sysName\n          - Name: subnetIds\n            Type: PLAINTEXT\n            Value:\n              Fn::Join:\n                - \",\"\n                - - Ref: subnetPri1Id\n                  - Ref: subnetPri2Id\n        Image: aws/codebuild/python:3.6.5\n        PrivilegedMode: false\n        Type: LINUX_CONTAINER\n      Name:\n        Fn::Sub: inv-${environment}-${area}-cdb-${sysName}\n      ServiceRole:\n        Ref: pipelineIamRoleArn\n      Source:\n        BuildSpec: buildspec.yml\n        GitCloneDepth: 1\n        Location:\n          Fn::GetAtt: [codecommit, CloneUrlHttp]\n        Type: CODECOMMIT\n  codepipeline:\n    Type: AWS::CodePipeline::Pipeline\n    Properties:\n      Name:\n        Fn::Sub: inv-${environment}-${area}-cdp-${sysName}\n      RoleArn:\n        Ref: pipelineIamRoleArn\n      ArtifactStore:\n        Location:\n          Ref: artifactBucketName\n        Type: S3\n      Stages:\n        - Name: Source\n          Actions:\n            - Name: Source\n              ActionTypeId:\n                Category: Source\n                Owner: AWS\n                Provider: CodeCommit\n                Version: \"1\"\n              OutputArtifacts:\n                - Name: MyApp\n              Configuration:\n                PollForSourceChanges: false\n                RepositoryName:\n                  Fn::GetAtt: [codecommit, Name]\n                BranchName: master\n              RunOrder: 1\n        - Name: Build\n          Actions:\n            - Name: Build\n              ActionTypeId:\n                Category: Build\n                Owner: AWS\n                Provider: CodeBuild\n                Version: \"1\"\n              InputArtifacts:\n                - Name: MyApp\n              OutputArtifacts:\n                - Name: Unuse\n              Configuration:\n                ProjectName:\n                  Ref: codebuild\n              RunOrder: 1\n  pipelineEventsRule:\n    Type: AWS::Events::Rule\n    Properties:\n      # Name:\n      #   Fn::Sub: inv-${environment}-${area}-rule-${sysName}\n      EventPattern:\n        source:\n          - aws.codecommit\n        detail-type:\n          - CodeCommit Repository State Change\n        resources:\n          - Fn::GetAtt: [codecommit, Arn]\n        detail:\n          event:\n            - referenceCreated\n            - referenceUpdated\n            - referenceDeleted\n          referenceType:\n            - branch\n          referenceName:\n            - master\n      State: ENABLED\n      Targets:\n        - Arn:\n            Fn::Sub: arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${codepipeline}\n          Id:\n            Fn::Sub: inv-${environment}-${area}-target-${sysName}CdpExec\n          RoleArn:\n            Ref: cloudwatchEventIamRoleArn\n"
}
appPipelineMain-ecsPipeline-1UHMQY4HB0IGO-referenceVehicleLocationInformationPipeline-C0YJ2LWVYTY5
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: \"2010-09-09\"\r\nDescription: ecsPipelineCICD template\r\nParameters:\r\n  environment:\r\n    Type: String\r\n  area:\r\n    Type: String\r\n  artifactBucketName:\r\n    Type: String\r\n  pipelineIamRoleArn:\r\n    Type: String\r\n  cloudwatchEventIamRoleArn:\r\n    Type: String\r\n  subnetPri1Id:\r\n    Type: String\r\n  subnetPri2Id:\r\n    Type: String\r\n  vpcId:\r\n    Type: String\r\n  templateBucketName:\r\n    Type: String\r\n  templateKeyPrefix:\r\n    Type: String\r\n  sysName:\r\n    Type: String\r\n  nlbArn:\r\n    Type: String\r\n  clusterArn:\r\n    Type: String\r\n  clusterName:\r\n    Type: String\r\n  # baseImageEcrName:\r\n  #   Type: String\r\n  listenerPort:\r\n    Type: Number\r\n  desiredCountSsmParam:\r\n    Type: String\r\n  taskDefinitionCpuSsmParam:\r\n    Type: AWS::SSM::Parameter::Value<String>\r\n  taskDefinitionMemorySsmParam:\r\n    Type: AWS::SSM::Parameter::Value<String>\r\n  containerDefinitionMemorySsmParam:\r\n    Type: AWS::SSM::Parameter::Value<String>\r\n  containerDefinitionMemoryReservationSsmParam:\r\n    Type: AWS::SSM::Parameter::Value<String>\r\n  serviceMaximumPercentSsmParam:\r\n    Type: AWS::SSM::Parameter::Value<String>\r\n  serviceMinimumHealthyPercentSsmParam:\r\n    Type: AWS::SSM::Parameter::Value<String>\r\n  proxyProtocolv2Enabled:\r\n    Type: String\r\n  containerPort:\r\n    Type: Number\r\n  awslogsGroupName:\r\n    Type: String\r\nResources:\r\n  repositories:\r\n    Type: AWS::CloudFormation::Stack\r\n    Properties:\r\n      TemplateURL:\r\n        Fn::Sub: https://s3.amazonaws.com/${templateBucketName}/${templateKeyPrefix}/ecs/repositories.yml\r\n      Parameters:\r\n        environment:\r\n          Ref: environment\r\n        area:\r\n          Ref: area\r\n        sysName:\r\n          Ref: sysName\r\n  customResource:\r\n    Type: AWS::CloudFormation::Stack\r\n    Properties:\r\n      TemplateURL:\r\n        Fn::Sub: https://s3.amazonaws.com/${templateBucketName}/${templateKeyPrefix}/ecs/customResource/customResourceForCreateService.yml\r\n      Parameters:\r\n        environment:\r\n          Ref: environment\r\n        area:\r\n          Ref: area\r\n        templateBucketName:\r\n          Ref: templateBucketName\r\n        functionZipPrefix:\r\n          Fn::Sub: ${templateKeyPrefix}/ecs/customResource/py/create_service.zip\r\n        sysName:\r\n          Ref: sysName\r\n  ecsBaseImagePipeline:\r\n    Type: AWS::CloudFormation::Stack\r\n    Properties:\r\n      TemplateURL:\r\n        Fn::Sub: https://s3.amazonaws.com/${templateBucketName}/${templateKeyPrefix}/ecs/ecsBaseImagePipeline.yml\r\n      Parameters:\r\n        environment:\r\n          Ref: environment\r\n        area:\r\n          Ref: area\r\n        artifactBucketName:\r\n          Ref: artifactBucketName\r\n        pipelineIamRoleArn:\r\n          Ref: pipelineIamRoleArn\r\n        cloudwatchEventIamRoleArn:\r\n          Ref: cloudwatchEventIamRoleArn\r\n        sysName:\r\n          Ref: sysName\r\n        subnetPri1Id:\r\n          Ref: subnetPri1Id\r\n        subnetPri2Id:\r\n          Ref: subnetPri2Id\r\n        # subnetIds:\r\n        #   Ref: subnetIds\r\n        vpcId:\r\n          Ref: vpcId\r\n        templateBucketName:\r\n          Ref: templateBucketName\r\n        baseImageEcrName:\r\n          Fn::GetAtt: [repositories, Outputs.baseImageEcrName]\r\n        baseImageCodeCommitCloneUrlHttp:\r\n          Fn::GetAtt: [repositories, Outputs.baseImageCodeCommitCloneUrlHttp]\r\n        baseImageCodeCommitName:\r\n          Fn::GetAtt: [repositories, Outputs.baseImageCodeCommitName]\r\n        baseImageCodeCommitArn:\r\n          Fn::GetAtt: [repositories, Outputs.baseImageCodeCommitArn]\r\n  ecsAppImagePipeline:\r\n    Type: AWS::CloudFormation::Stack\r\n    Properties:\r\n      TemplateURL:\r\n        Fn::Sub: https://s3.amazonaws.com/${templateBucketName}/${templateKeyPrefix}/ecs/ecsAppImagePipeline.yml\r\n      Parameters:\r\n        environment:\r\n          Ref: environment\r\n        area:\r\n          Ref: area\r\n        artifactBucketName:\r\n          Ref: artifactBucketName\r\n        pipelineIamRoleArn:\r\n          Ref: pipelineIamRoleArn\r\n        cloudwatchEventIamRoleArn:\r\n          Ref: cloudwatchEventIamRoleArn\r\n        sysName:\r\n          Ref: sysName\r\n        subnetPri1Id:\r\n          Ref: subnetPri1Id\r\n        subnetPri2Id:\r\n          Ref: subnetPri2Id\r\n        # subnetIds:\r\n        #   Ref: subnetIds\r\n        vpcId:\r\n          Ref: vpcId\r\n        templateBucketName:\r\n          Ref: templateBucketName\r\n        clusterName:\r\n          Ref: clusterName\r\n        serviceName:\r\n          #Fn::GetAtt: [ecs, Outputs.serviceName]\r\n          Fn::Sub: inv-${environment}-${area}-ecs-service-${sysName}\r\n        baseImageEcrName:\r\n          Fn::GetAtt: [repositories, Outputs.baseImageEcrName]\r\n        appImageEcrName:\r\n          Fn::GetAtt: [repositories, Outputs.appImageEcrName]\r\n        appImageCodeCommitCloneUrlHttp:\r\n          Fn::GetAtt: [repositories, Outputs.appImageCodeCommitCloneUrlHttp]\r\n        appImageCodeCommitName:\r\n          Fn::GetAtt: [repositories, Outputs.appImageCodeCommitName]\r\n        appImageCodeCommitArn:\r\n          Fn::GetAtt: [repositories, Outputs.appImageCodeCommitArn]\r\n        desiredCountSsmParam:\r\n          Ref: desiredCountSsmParam\r\n  ecs:\r\n    Type: AWS::CloudFormation::Stack\r\n    Properties:\r\n      TemplateURL:\r\n        Fn::Sub: https://s3.amazonaws.com/${templateBucketName}/${templateKeyPrefix}/ecs/ecs.yml\r\n      Parameters:\r\n        environment:\r\n          Ref: environment\r\n        area:\r\n          Ref: area\r\n        # artifactBucketName:\r\n        #   Ref: artifactBucketName\r\n        # pipelineIamRoleArn:\r\n        #   Ref: pipelineIamRoleArn\r\n        # cloudwatchEventIamRoleArn:\r\n        #   Ref: cloudwatchEventIamRoleArn\r\n        sysName:\r\n          Ref: sysName\r\n        subnetPri1Id:\r\n          Ref: subnetPri1Id\r\n        subnetPri2Id:\r\n          Ref: subnetPri2Id\r\n        # subnetIds:\r\n        #   Ref: subnetIds\r\n        vpcId:\r\n          Ref: vpcId\r\n        # templateBucketName:\r\n        #   Ref: templateBucketName\r\n        # subnetIds:\r\n        #   Fn::Join:\r\n        #     - \",\"\r\n        #     - - Ref: subnetPri1Id\r\n        #       - Ref: subnetPri2Id\r\n        serviceFunctionArn:\r\n          Fn::GetAtt: [customResource, Outputs.functionArn]\r\n        nlbArn:\r\n          Ref: nlbArn\r\n        clusterArn:\r\n          Ref: clusterArn\r\n        clusterName:\r\n          Ref: clusterName\r\n        appImageEcrName:\r\n          Fn::GetAtt: [repositories, Outputs.appImageEcrName]\r\n        listenerPort:\r\n          Ref: listenerPort\r\n        taskDefinitionCpuSsmParam:\r\n          Ref: taskDefinitionCpuSsmParam\r\n        taskDefinitionMemorySsmParam:\r\n          Ref: taskDefinitionMemorySsmParam\r\n        containerDefinitionMemorySsmParam:\r\n          Ref: containerDefinitionMemorySsmParam\r\n        containerDefinitionMemoryReservationSsmParam:\r\n          Ref: containerDefinitionMemoryReservationSsmParam\r\n        serviceMaximumPercentSsmParam:\r\n          Ref: serviceMaximumPercentSsmParam\r\n        serviceMinimumHealthyPercentSsmParam:\r\n          Ref: serviceMinimumHealthyPercentSsmParam\r\n        proxyProtocolv2Enabled:\r\n          Ref: proxyProtocolv2Enabled\r\n        desiredCountSsmParam:\r\n          Ref: desiredCountSsmParam\r\n        containerPort:\r\n          Ref: containerPort\r\n        awslogsGroupName:\r\n          Ref: awslogsGroupName\r\n"
}
appPipelineMain-lambdaPipeline-FKOTMTNQBDPV-hcpMessageRegisterPipeline-1OUCWKUHP74VT
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: \"2010-09-09\"\nDescription: samDeployPipeline template\nParameters:\n  environment:\n    Type: String\n  area:\n    Type: String\n  artifactBucketName:\n    Type: String\n  pipelineIamRoleArn:\n    Type: String\n  cloudwatchEventIamRoleArn:\n    Type: String\n  sysName:\n    Type: String\n  subnetPri1Id:\n    Type: String\n  subnetPri2Id:\n    Type: String\n  vpcId:\n    Type: AWS::EC2::VPC::Id\n  templateBucketName:\n    Type: String\nResources:\n  codecommit:\n    Type: AWS::CodeCommit::Repository\n    DeletionPolicy: Delete\n    Properties:\n      RepositoryName:\n        Fn::Sub: inv-${environment}-${area}-cdc-${sysName}\n  codebuild:\n    Type: AWS::CodeBuild::Project\n    Properties:\n      Artifacts:\n        EncryptionDisabled: true\n        Location:\n          Ref: artifactBucketName\n        Type: S3\n      Environment:\n        ComputeType: BUILD_GENERAL1_SMALL\n        EnvironmentVariables:\n          - Name: environment\n            Type: PLAINTEXT\n            Value:\n              Ref: environment\n          - Name: area\n            Type: PLAINTEXT\n            Value:\n              Ref: area\n          - Name: templateBucketName\n            Type: PLAINTEXT\n            Value:\n              Ref: templateBucketName\n          - Name: vpcId\n            Type: PLAINTEXT\n            Value:\n              Ref: vpcId\n          - Name: sysName\n            Type: PLAINTEXT\n            Value:\n              Ref: sysName\n          - Name: subnetIds\n            Type: PLAINTEXT\n            Value:\n              Fn::Join:\n                - \",\"\n                - - Ref: subnetPri1Id\n                  - Ref: subnetPri2Id\n        Image: aws/codebuild/python:3.6.5\n        PrivilegedMode: false\n        Type: LINUX_CONTAINER\n      Name:\n        Fn::Sub: inv-${environment}-${area}-cdb-${sysName}\n      ServiceRole:\n        Ref: pipelineIamRoleArn\n      Source:\n        BuildSpec: buildspec.yml\n        GitCloneDepth: 1\n        Location:\n          Fn::GetAtt: [codecommit, CloneUrlHttp]\n        Type: CODECOMMIT\n  codepipeline:\n    Type: AWS::CodePipeline::Pipeline\n    Properties:\n      Name:\n        Fn::Sub: inv-${environment}-${area}-cdp-${sysName}\n      RoleArn:\n        Ref: pipelineIamRoleArn\n      ArtifactStore:\n        Location:\n          Ref: artifactBucketName\n        Type: S3\n      Stages:\n        - Name: Source\n          Actions:\n            - Name: Source\n              ActionTypeId:\n                Category: Source\n                Owner: AWS\n                Provider: CodeCommit\n                Version: \"1\"\n              OutputArtifacts:\n                - Name: MyApp\n              Configuration:\n                PollForSourceChanges: false\n                RepositoryName:\n                  Fn::GetAtt: [codecommit, Name]\n                BranchName: master\n              RunOrder: 1\n        - Name: Build\n          Actions:\n            - Name: Build\n              ActionTypeId:\n                Category: Build\n                Owner: AWS\n                Provider: CodeBuild\n                Version: \"1\"\n              InputArtifacts:\n                - Name: MyApp\n              OutputArtifacts:\n                - Name: Unuse\n              Configuration:\n                ProjectName:\n                  Ref: codebuild\n              RunOrder: 1\n  pipelineEventsRule:\n    Type: AWS::Events::Rule\n    Properties:\n      # Name:\n      #   Fn::Sub: inv-${environment}-${area}-rule-${sysName}\n      EventPattern:\n        source:\n          - aws.codecommit\n        detail-type:\n          - CodeCommit Repository State Change\n        resources:\n          - Fn::GetAtt: [codecommit, Arn]\n        detail:\n          event:\n            - referenceCreated\n            - referenceUpdated\n            - referenceDeleted\n          referenceType:\n            - branch\n          referenceName:\n            - master\n      State: ENABLED\n      Targets:\n        - Arn:\n            Fn::Sub: arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${codepipeline}\n          Id:\n            Fn::Sub: inv-${environment}-${area}-target-${sysName}CdpExec\n          RoleArn:\n            Ref: cloudwatchEventIamRoleArn\n"
}
appPipelineMain-ecsPipeline-1UHMQY4HB0IGO-referenceSecurityAlertHistoryPipeline-1CWUA142WAJLF
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: \"2010-09-09\"\r\nDescription: ecsPipelineCICD template\r\nParameters:\r\n  environment:\r\n    Type: String\r\n  area:\r\n    Type: String\r\n  artifactBucketName:\r\n    Type: String\r\n  pipelineIamRoleArn:\r\n    Type: String\r\n  cloudwatchEventIamRoleArn:\r\n    Type: String\r\n  subnetPri1Id:\r\n    Type: String\r\n  subnetPri2Id:\r\n    Type: String\r\n  vpcId:\r\n    Type: String\r\n  templateBucketName:\r\n    Type: String\r\n  templateKeyPrefix:\r\n    Type: String\r\n  sysName:\r\n    Type: String\r\n  nlbArn:\r\n    Type: String\r\n  clusterArn:\r\n    Type: String\r\n  clusterName:\r\n    Type: String\r\n  # baseImageEcrName:\r\n  #   Type: String\r\n  listenerPort:\r\n    Type: Number\r\n  desiredCountSsmParam:\r\n    Type: String\r\n  taskDefinitionCpuSsmParam:\r\n    Type: AWS::SSM::Parameter::Value<String>\r\n  taskDefinitionMemorySsmParam:\r\n    Type: AWS::SSM::Parameter::Value<String>\r\n  containerDefinitionMemorySsmParam:\r\n    Type: AWS::SSM::Parameter::Value<String>\r\n  containerDefinitionMemoryReservationSsmParam:\r\n    Type: AWS::SSM::Parameter::Value<String>\r\n  serviceMaximumPercentSsmParam:\r\n    Type: AWS::SSM::Parameter::Value<String>\r\n  serviceMinimumHealthyPercentSsmParam:\r\n    Type: AWS::SSM::Parameter::Value<String>\r\n  proxyProtocolv2Enabled:\r\n    Type: String\r\n  containerPort:\r\n    Type: Number\r\n  awslogsGroupName:\r\n    Type: String\r\nResources:\r\n  repositories:\r\n    Type: AWS::CloudFormation::Stack\r\n    Properties:\r\n      TemplateURL:\r\n        Fn::Sub: https://s3.amazonaws.com/${templateBucketName}/${templateKeyPrefix}/ecs/repositories.yml\r\n      Parameters:\r\n        environment:\r\n          Ref: environment\r\n        area:\r\n          Ref: area\r\n        sysName:\r\n          Ref: sysName\r\n  customResource:\r\n    Type: AWS::CloudFormation::Stack\r\n    Properties:\r\n      TemplateURL:\r\n        Fn::Sub: https://s3.amazonaws.com/${templateBucketName}/${templateKeyPrefix}/ecs/customResource/customResourceForCreateService.yml\r\n      Parameters:\r\n        environment:\r\n          Ref: environment\r\n        area:\r\n          Ref: area\r\n        templateBucketName:\r\n          Ref: templateBucketName\r\n        functionZipPrefix:\r\n          Fn::Sub: ${templateKeyPrefix}/ecs/customResource/py/create_service.zip\r\n        sysName:\r\n          Ref: sysName\r\n  ecsBaseImagePipeline:\r\n    Type: AWS::CloudFormation::Stack\r\n    Properties:\r\n      TemplateURL:\r\n        Fn::Sub: https://s3.amazonaws.com/${templateBucketName}/${templateKeyPrefix}/ecs/ecsBaseImagePipeline.yml\r\n      Parameters:\r\n        environment:\r\n          Ref: environment\r\n        area:\r\n          Ref: area\r\n        artifactBucketName:\r\n          Ref: artifactBucketName\r\n        pipelineIamRoleArn:\r\n          Ref: pipelineIamRoleArn\r\n        cloudwatchEventIamRoleArn:\r\n          Ref: cloudwatchEventIamRoleArn\r\n        sysName:\r\n          Ref: sysName\r\n        subnetPri1Id:\r\n          Ref: subnetPri1Id\r\n        subnetPri2Id:\r\n          Ref: subnetPri2Id\r\n        # subnetIds:\r\n        #   Ref: subnetIds\r\n        vpcId:\r\n          Ref: vpcId\r\n        templateBucketName:\r\n          Ref: templateBucketName\r\n        baseImageEcrName:\r\n          Fn::GetAtt: [repositories, Outputs.baseImageEcrName]\r\n        baseImageCodeCommitCloneUrlHttp:\r\n          Fn::GetAtt: [repositories, Outputs.baseImageCodeCommitCloneUrlHttp]\r\n        baseImageCodeCommitName:\r\n          Fn::GetAtt: [repositories, Outputs.baseImageCodeCommitName]\r\n        baseImageCodeCommitArn:\r\n          Fn::GetAtt: [repositories, Outputs.baseImageCodeCommitArn]\r\n  ecsAppImagePipeline:\r\n    Type: AWS::CloudFormation::Stack\r\n    Properties:\r\n      TemplateURL:\r\n        Fn::Sub: https://s3.amazonaws.com/${templateBucketName}/${templateKeyPrefix}/ecs/ecsAppImagePipeline.yml\r\n      Parameters:\r\n        environment:\r\n          Ref: environment\r\n        area:\r\n          Ref: area\r\n        artifactBucketName:\r\n          Ref: artifactBucketName\r\n        pipelineIamRoleArn:\r\n          Ref: pipelineIamRoleArn\r\n        cloudwatchEventIamRoleArn:\r\n          Ref: cloudwatchEventIamRoleArn\r\n        sysName:\r\n          Ref: sysName\r\n        subnetPri1Id:\r\n          Ref: subnetPri1Id\r\n        subnetPri2Id:\r\n          Ref: subnetPri2Id\r\n        # subnetIds:\r\n        #   Ref: subnetIds\r\n        vpcId:\r\n          Ref: vpcId\r\n        templateBucketName:\r\n          Ref: templateBucketName\r\n        clusterName:\r\n          Ref: clusterName\r\n        serviceName:\r\n          #Fn::GetAtt: [ecs, Outputs.serviceName]\r\n          Fn::Sub: inv-${environment}-${area}-ecs-service-${sysName}\r\n        baseImageEcrName:\r\n          Fn::GetAtt: [repositories, Outputs.baseImageEcrName]\r\n        appImageEcrName:\r\n          Fn::GetAtt: [repositories, Outputs.appImageEcrName]\r\n        appImageCodeCommitCloneUrlHttp:\r\n          Fn::GetAtt: [repositories, Outputs.appImageCodeCommitCloneUrlHttp]\r\n        appImageCodeCommitName:\r\n          Fn::GetAtt: [repositories, Outputs.appImageCodeCommitName]\r\n        appImageCodeCommitArn:\r\n          Fn::GetAtt: [repositories, Outputs.appImageCodeCommitArn]\r\n        desiredCountSsmParam:\r\n          Ref: desiredCountSsmParam\r\n  ecs:\r\n    Type: AWS::CloudFormation::Stack\r\n    Properties:\r\n      TemplateURL:\r\n        Fn::Sub: https://s3.amazonaws.com/${templateBucketName}/${templateKeyPrefix}/ecs/ecs.yml\r\n      Parameters:\r\n        environment:\r\n          Ref: environment\r\n        area:\r\n          Ref: area\r\n        # artifactBucketName:\r\n        #   Ref: artifactBucketName\r\n        # pipelineIamRoleArn:\r\n        #   Ref: pipelineIamRoleArn\r\n        # cloudwatchEventIamRoleArn:\r\n        #   Ref: cloudwatchEventIamRoleArn\r\n        sysName:\r\n          Ref: sysName\r\n        subnetPri1Id:\r\n          Ref: subnetPri1Id\r\n        subnetPri2Id:\r\n          Ref: subnetPri2Id\r\n        # subnetIds:\r\n        #   Ref: subnetIds\r\n        vpcId:\r\n          Ref: vpcId\r\n        # templateBucketName:\r\n        #   Ref: templateBucketName\r\n        # subnetIds:\r\n        #   Fn::Join:\r\n        #     - \",\"\r\n        #     - - Ref: subnetPri1Id\r\n        #       - Ref: subnetPri2Id\r\n        serviceFunctionArn:\r\n          Fn::GetAtt: [customResource, Outputs.functionArn]\r\n        nlbArn:\r\n          Ref: nlbArn\r\n        clusterArn:\r\n          Ref: clusterArn\r\n        clusterName:\r\n          Ref: clusterName\r\n        appImageEcrName:\r\n          Fn::GetAtt: [repositories, Outputs.appImageEcrName]\r\n        listenerPort:\r\n          Ref: listenerPort\r\n        taskDefinitionCpuSsmParam:\r\n          Ref: taskDefinitionCpuSsmParam\r\n        taskDefinitionMemorySsmParam:\r\n          Ref: taskDefinitionMemorySsmParam\r\n        containerDefinitionMemorySsmParam:\r\n          Ref: containerDefinitionMemorySsmParam\r\n        containerDefinitionMemoryReservationSsmParam:\r\n          Ref: containerDefinitionMemoryReservationSsmParam\r\n        serviceMaximumPercentSsmParam:\r\n          Ref: serviceMaximumPercentSsmParam\r\n        serviceMinimumHealthyPercentSsmParam:\r\n          Ref: serviceMinimumHealthyPercentSsmParam\r\n        proxyProtocolv2Enabled:\r\n          Ref: proxyProtocolv2Enabled\r\n        desiredCountSsmParam:\r\n          Ref: desiredCountSsmParam\r\n        containerPort:\r\n          Ref: containerPort\r\n        awslogsGroupName:\r\n          Ref: awslogsGroupName\r\n"
}
appPipelineMain-lambdaPipeline-FKOTMTNQBDPV-notificationRoadServiceEventPipeline-9N1VV1LIJHIP
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: \"2010-09-09\"\nDescription: samDeployPipeline template\nParameters:\n  environment:\n    Type: String\n  area:\n    Type: String\n  artifactBucketName:\n    Type: String\n  pipelineIamRoleArn:\n    Type: String\n  cloudwatchEventIamRoleArn:\n    Type: String\n  sysName:\n    Type: String\n  subnetPri1Id:\n    Type: String\n  subnetPri2Id:\n    Type: String\n  vpcId:\n    Type: AWS::EC2::VPC::Id\n  templateBucketName:\n    Type: String\nResources:\n  codecommit:\n    Type: AWS::CodeCommit::Repository\n    DeletionPolicy: Delete\n    Properties:\n      RepositoryName:\n        Fn::Sub: inv-${environment}-${area}-cdc-${sysName}\n  codebuild:\n    Type: AWS::CodeBuild::Project\n    Properties:\n      Artifacts:\n        EncryptionDisabled: true\n        Location:\n          Ref: artifactBucketName\n        Type: S3\n      Environment:\n        ComputeType: BUILD_GENERAL1_SMALL\n        EnvironmentVariables:\n          - Name: environment\n            Type: PLAINTEXT\n            Value:\n              Ref: environment\n          - Name: area\n            Type: PLAINTEXT\n            Value:\n              Ref: area\n          - Name: templateBucketName\n            Type: PLAINTEXT\n            Value:\n              Ref: templateBucketName\n          - Name: vpcId\n            Type: PLAINTEXT\n            Value:\n              Ref: vpcId\n          - Name: sysName\n            Type: PLAINTEXT\n            Value:\n              Ref: sysName\n          - Name: subnetIds\n            Type: PLAINTEXT\n            Value:\n              Fn::Join:\n                - \",\"\n                - - Ref: subnetPri1Id\n                  - Ref: subnetPri2Id\n        Image: aws/codebuild/python:3.6.5\n        PrivilegedMode: false\n        Type: LINUX_CONTAINER\n      Name:\n        Fn::Sub: inv-${environment}-${area}-cdb-${sysName}\n      ServiceRole:\n        Ref: pipelineIamRoleArn\n      Source:\n        BuildSpec: buildspec.yml\n        GitCloneDepth: 1\n        Location:\n          Fn::GetAtt: [codecommit, CloneUrlHttp]\n        Type: CODECOMMIT\n  codepipeline:\n    Type: AWS::CodePipeline::Pipeline\n    Properties:\n      Name:\n        Fn::Sub: inv-${environment}-${area}-cdp-${sysName}\n      RoleArn:\n        Ref: pipelineIamRoleArn\n      ArtifactStore:\n        Location:\n          Ref: artifactBucketName\n        Type: S3\n      Stages:\n        - Name: Source\n          Actions:\n            - Name: Source\n              ActionTypeId:\n                Category: Source\n                Owner: AWS\n                Provider: CodeCommit\n                Version: \"1\"\n              OutputArtifacts:\n                - Name: MyApp\n              Configuration:\n                PollForSourceChanges: false\n                RepositoryName:\n                  Fn::GetAtt: [codecommit, Name]\n                BranchName: master\n              RunOrder: 1\n        - Name: Build\n          Actions:\n            - Name: Build\n              ActionTypeId:\n                Category: Build\n                Owner: AWS\n                Provider: CodeBuild\n                Version: \"1\"\n              InputArtifacts:\n                - Name: MyApp\n              OutputArtifacts:\n                - Name: Unuse\n              Configuration:\n                ProjectName:\n                  Ref: codebuild\n              RunOrder: 1\n  pipelineEventsRule:\n    Type: AWS::Events::Rule\n    Properties:\n      # Name:\n      #   Fn::Sub: inv-${environment}-${area}-rule-${sysName}\n      EventPattern:\n        source:\n          - aws.codecommit\n        detail-type:\n          - CodeCommit Repository State Change\n        resources:\n          - Fn::GetAtt: [codecommit, Arn]\n        detail:\n          event:\n            - referenceCreated\n            - referenceUpdated\n            - referenceDeleted\n          referenceType:\n            - branch\n          referenceName:\n            - master\n      State: ENABLED\n      Targets:\n        - Arn:\n            Fn::Sub: arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${codepipeline}\n          Id:\n            Fn::Sub: inv-${environment}-${area}-target-${sysName}CdpExec\n          RoleArn:\n            Ref: cloudwatchEventIamRoleArn\n"
}
appPipelineMain-apiGatewayPipeline-MJE93I7O56AA-gtcApiGatewayPipeline-O45EEJBFP04N
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: \"2010-09-09\"\nDescription: apiGateway CICD template\nParameters:\n  environment:\n    Type: String\n  area:\n    Type: String\n  artifactBucketName:\n    Type: String\n  pipelineIamRoleArn:\n    Type: String\n  cloudwatchEventIamRoleArn:\n    Type: String\n  sysName:\n    Type: String\n  templateBucketName:\n    Type: String\nResources:\n  codecommit:\n    Type: AWS::CodeCommit::Repository\n    DeletionPolicy: Delete\n    Properties:\n      RepositoryName:\n        Fn::Sub: inv-${environment}-${area}-cdc-${sysName}\n  codebuild:\n    Type: AWS::CodeBuild::Project\n    Properties:\n      Artifacts:\n        EncryptionDisabled: true\n        Location:\n          Ref: artifactBucketName\n        Type: S3\n      Environment:\n        ComputeType: BUILD_GENERAL1_SMALL\n        EnvironmentVariables:\n          - Name: environment\n            Type: PLAINTEXT\n            Value:\n              Ref: environment\n          - Name: area\n            Type: PLAINTEXT\n            Value:\n              Ref: area\n          - Name: templateBucketName\n            Type: PLAINTEXT\n            Value:\n              Ref: templateBucketName\n          - Name: sysName\n            Type: PLAINTEXT\n            Value:\n              Ref: sysName\n        Image: aws/codebuild/python:3.6.5\n        PrivilegedMode: false\n        Type: LINUX_CONTAINER\n      Name:\n        Fn::Sub: inv-${environment}-${area}-cdb-${sysName}\n      ServiceRole:\n        Ref: pipelineIamRoleArn\n      Source:\n        BuildSpec: buildspec.yml\n        GitCloneDepth: 1\n        Location:\n          Fn::GetAtt: [codecommit, CloneUrlHttp]\n        Type: CODECOMMIT\n  codepipeline:\n    Type: AWS::CodePipeline::Pipeline\n    Properties:\n      Name:\n        Fn::Sub: inv-${environment}-${area}-cdp-${sysName}\n      RoleArn:\n        Ref: pipelineIamRoleArn\n      ArtifactStore:\n        Location:\n          Ref: artifactBucketName\n        Type: S3\n      Stages:\n        - Name: Source\n          Actions:\n            - Name: Source\n              ActionTypeId:\n                Category: Source\n                Owner: AWS\n                Provider: CodeCommit\n                Version: \"1\"\n              OutputArtifacts:\n                - Name: MyApp\n              Configuration:\n                PollForSourceChanges: false\n                RepositoryName:\n                  Fn::GetAtt: [codecommit, Name]\n                BranchName: master\n              RunOrder: 1\n        - Name: Build\n          Actions:\n            - Name: Build\n              ActionTypeId:\n                Category: Build\n                Owner: AWS\n                Provider: CodeBuild\n                Version: \"1\"\n              InputArtifacts:\n                - Name: MyApp\n              OutputArtifacts:\n                - Name: Unuse\n              Configuration:\n                ProjectName:\n                  Ref: codebuild\n              RunOrder: 1\n  pipelineEventsRule:\n    Type: AWS::Events::Rule\n    Properties:\n      # Name:\n      #   Fn::Sub: inv-${environment}-${area}-rule-${sysName}\n      EventPattern:\n        source:\n          - aws.codecommit\n        detail-type:\n          - CodeCommit Repository State Change\n        resources:\n          - Fn::GetAtt: [codecommit, Arn]\n        detail:\n          event:\n            - referenceCreated\n            - referenceUpdated\n            - referenceDeleted\n          referenceType:\n            - branch\n          referenceName:\n            - master\n      State: ENABLED\n      Targets:\n        - Arn:\n            Fn::Sub: arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${codepipeline}\n          Id:\n            Fn::Sub: inv-${environment}-${area}-target-${sysName}CdpExec\n          RoleArn:\n            Ref: cloudwatchEventIamRoleArn\n"
}
appPipelineMain-ecsPipeline-1UHMQY4HB0IGO-authorizationGatewayPipeline-1BUJ9Q0IWD4RD
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: \"2010-09-09\"\r\nDescription: ecsPipelineCICD template\r\nParameters:\r\n  environment:\r\n    Type: String\r\n  area:\r\n    Type: String\r\n  artifactBucketName:\r\n    Type: String\r\n  pipelineIamRoleArn:\r\n    Type: String\r\n  cloudwatchEventIamRoleArn:\r\n    Type: String\r\n  subnetPri1Id:\r\n    Type: String\r\n  subnetPri2Id:\r\n    Type: String\r\n  vpcId:\r\n    Type: String\r\n  templateBucketName:\r\n    Type: String\r\n  templateKeyPrefix:\r\n    Type: String\r\n  sysName:\r\n    Type: String\r\n  nlbArn:\r\n    Type: String\r\n  clusterArn:\r\n    Type: String\r\n  clusterName:\r\n    Type: String\r\n  # baseImageEcrName:\r\n  #   Type: String\r\n  listenerPort:\r\n    Type: Number\r\n  desiredCountSsmParam:\r\n    Type: String\r\n  taskDefinitionCpuSsmParam:\r\n    Type: AWS::SSM::Parameter::Value<String>\r\n  taskDefinitionMemorySsmParam:\r\n    Type: AWS::SSM::Parameter::Value<String>\r\n  containerDefinitionMemorySsmParam:\r\n    Type: AWS::SSM::Parameter::Value<String>\r\n  containerDefinitionMemoryReservationSsmParam:\r\n    Type: AWS::SSM::Parameter::Value<String>\r\n  serviceMaximumPercentSsmParam:\r\n    Type: AWS::SSM::Parameter::Value<String>\r\n  serviceMinimumHealthyPercentSsmParam:\r\n    Type: AWS::SSM::Parameter::Value<String>\r\n  proxyProtocolv2Enabled:\r\n    Type: String\r\n  containerPort:\r\n    Type: Number\r\n  awslogsGroupName:\r\n    Type: String\r\nResources:\r\n  repositories:\r\n    Type: AWS::CloudFormation::Stack\r\n    Properties:\r\n      TemplateURL:\r\n        Fn::Sub: https://s3.amazonaws.com/${templateBucketName}/${templateKeyPrefix}/ecs/repositories.yml\r\n      Parameters:\r\n        environment:\r\n          Ref: environment\r\n        area:\r\n          Ref: area\r\n        sysName:\r\n          Ref: sysName\r\n  customResource:\r\n    Type: AWS::CloudFormation::Stack\r\n    Properties:\r\n      TemplateURL:\r\n        Fn::Sub: https://s3.amazonaws.com/${templateBucketName}/${templateKeyPrefix}/ecs/customResource/customResourceForCreateService.yml\r\n      Parameters:\r\n        environment:\r\n          Ref: environment\r\n        area:\r\n          Ref: area\r\n        templateBucketName:\r\n          Ref: templateBucketName\r\n        functionZipPrefix:\r\n          Fn::Sub: ${templateKeyPrefix}/ecs/customResource/py/create_service.zip\r\n        sysName:\r\n          Ref: sysName\r\n  ecsBaseImagePipeline:\r\n    Type: AWS::CloudFormation::Stack\r\n    Properties:\r\n      TemplateURL:\r\n        Fn::Sub: https://s3.amazonaws.com/${templateBucketName}/${templateKeyPrefix}/ecs/ecsBaseImagePipeline.yml\r\n      Parameters:\r\n        environment:\r\n          Ref: environment\r\n        area:\r\n          Ref: area\r\n        artifactBucketName:\r\n          Ref: artifactBucketName\r\n        pipelineIamRoleArn:\r\n          Ref: pipelineIamRoleArn\r\n        cloudwatchEventIamRoleArn:\r\n          Ref: cloudwatchEventIamRoleArn\r\n        sysName:\r\n          Ref: sysName\r\n        subnetPri1Id:\r\n          Ref: subnetPri1Id\r\n        subnetPri2Id:\r\n          Ref: subnetPri2Id\r\n        # subnetIds:\r\n        #   Ref: subnetIds\r\n        vpcId:\r\n          Ref: vpcId\r\n        templateBucketName:\r\n          Ref: templateBucketName\r\n        baseImageEcrName:\r\n          Fn::GetAtt: [repositories, Outputs.baseImageEcrName]\r\n        baseImageCodeCommitCloneUrlHttp:\r\n          Fn::GetAtt: [repositories, Outputs.baseImageCodeCommitCloneUrlHttp]\r\n        baseImageCodeCommitName:\r\n          Fn::GetAtt: [repositories, Outputs.baseImageCodeCommitName]\r\n        baseImageCodeCommitArn:\r\n          Fn::GetAtt: [repositories, Outputs.baseImageCodeCommitArn]\r\n  ecsAppImagePipeline:\r\n    Type: AWS::CloudFormation::Stack\r\n    Properties:\r\n      TemplateURL:\r\n        Fn::Sub: https://s3.amazonaws.com/${templateBucketName}/${templateKeyPrefix}/ecs/ecsAppImagePipeline.yml\r\n      Parameters:\r\n        environment:\r\n          Ref: environment\r\n        area:\r\n          Ref: area\r\n        artifactBucketName:\r\n          Ref: artifactBucketName\r\n        pipelineIamRoleArn:\r\n          Ref: pipelineIamRoleArn\r\n        cloudwatchEventIamRoleArn:\r\n          Ref: cloudwatchEventIamRoleArn\r\n        sysName:\r\n          Ref: sysName\r\n        subnetPri1Id:\r\n          Ref: subnetPri1Id\r\n        subnetPri2Id:\r\n          Ref: subnetPri2Id\r\n        # subnetIds:\r\n        #   Ref: subnetIds\r\n        vpcId:\r\n          Ref: vpcId\r\n        templateBucketName:\r\n          Ref: templateBucketName\r\n        clusterName:\r\n          Ref: clusterName\r\n        serviceName:\r\n          #Fn::GetAtt: [ecs, Outputs.serviceName]\r\n          Fn::Sub: inv-${environment}-${area}-ecs-service-${sysName}\r\n        baseImageEcrName:\r\n          Fn::GetAtt: [repositories, Outputs.baseImageEcrName]\r\n        appImageEcrName:\r\n          Fn::GetAtt: [repositories, Outputs.appImageEcrName]\r\n        appImageCodeCommitCloneUrlHttp:\r\n          Fn::GetAtt: [repositories, Outputs.appImageCodeCommitCloneUrlHttp]\r\n        appImageCodeCommitName:\r\n          Fn::GetAtt: [repositories, Outputs.appImageCodeCommitName]\r\n        appImageCodeCommitArn:\r\n          Fn::GetAtt: [repositories, Outputs.appImageCodeCommitArn]\r\n        desiredCountSsmParam:\r\n          Ref: desiredCountSsmParam\r\n  ecs:\r\n    Type: AWS::CloudFormation::Stack\r\n    Properties:\r\n      TemplateURL:\r\n        Fn::Sub: https://s3.amazonaws.com/${templateBucketName}/${templateKeyPrefix}/ecs/ecs.yml\r\n      Parameters:\r\n        environment:\r\n          Ref: environment\r\n        area:\r\n          Ref: area\r\n        # artifactBucketName:\r\n        #   Ref: artifactBucketName\r\n        # pipelineIamRoleArn:\r\n        #   Ref: pipelineIamRoleArn\r\n        # cloudwatchEventIamRoleArn:\r\n        #   Ref: cloudwatchEventIamRoleArn\r\n        sysName:\r\n          Ref: sysName\r\n        subnetPri1Id:\r\n          Ref: subnetPri1Id\r\n        subnetPri2Id:\r\n          Ref: subnetPri2Id\r\n        # subnetIds:\r\n        #   Ref: subnetIds\r\n        vpcId:\r\n          Ref: vpcId\r\n        # templateBucketName:\r\n        #   Ref: templateBucketName\r\n        # subnetIds:\r\n        #   Fn::Join:\r\n        #     - \",\"\r\n        #     - - Ref: subnetPri1Id\r\n        #       - Ref: subnetPri2Id\r\n        serviceFunctionArn:\r\n          Fn::GetAtt: [customResource, Outputs.functionArn]\r\n        nlbArn:\r\n          Ref: nlbArn\r\n        clusterArn:\r\n          Ref: clusterArn\r\n        clusterName:\r\n          Ref: clusterName\r\n        appImageEcrName:\r\n          Fn::GetAtt: [repositories, Outputs.appImageEcrName]\r\n        listenerPort:\r\n          Ref: listenerPort\r\n        taskDefinitionCpuSsmParam:\r\n          Ref: taskDefinitionCpuSsmParam\r\n        taskDefinitionMemorySsmParam:\r\n          Ref: taskDefinitionMemorySsmParam\r\n        containerDefinitionMemorySsmParam:\r\n          Ref: containerDefinitionMemorySsmParam\r\n        containerDefinitionMemoryReservationSsmParam:\r\n          Ref: containerDefinitionMemoryReservationSsmParam\r\n        serviceMaximumPercentSsmParam:\r\n          Ref: serviceMaximumPercentSsmParam\r\n        serviceMinimumHealthyPercentSsmParam:\r\n          Ref: serviceMinimumHealthyPercentSsmParam\r\n        proxyProtocolv2Enabled:\r\n          Ref: proxyProtocolv2Enabled\r\n        desiredCountSsmParam:\r\n          Ref: desiredCountSsmParam\r\n        containerPort:\r\n          Ref: containerPort\r\n        awslogsGroupName:\r\n          Ref: awslogsGroupName\r\n"
}
appPipelineMain-apiGatewayPipeline-MJE93I7O56AA-tspApiGatewayPipeline-1WW9YE80MT2K8
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: \"2010-09-09\"\nDescription: apiGateway CICD template\nParameters:\n  environment:\n    Type: String\n  area:\n    Type: String\n  artifactBucketName:\n    Type: String\n  pipelineIamRoleArn:\n    Type: String\n  cloudwatchEventIamRoleArn:\n    Type: String\n  sysName:\n    Type: String\n  templateBucketName:\n    Type: String\nResources:\n  codecommit:\n    Type: AWS::CodeCommit::Repository\n    DeletionPolicy: Delete\n    Properties:\n      RepositoryName:\n        Fn::Sub: inv-${environment}-${area}-cdc-${sysName}\n  codebuild:\n    Type: AWS::CodeBuild::Project\n    Properties:\n      Artifacts:\n        EncryptionDisabled: true\n        Location:\n          Ref: artifactBucketName\n        Type: S3\n      Environment:\n        ComputeType: BUILD_GENERAL1_SMALL\n        EnvironmentVariables:\n          - Name: environment\n            Type: PLAINTEXT\n            Value:\n              Ref: environment\n          - Name: area\n            Type: PLAINTEXT\n            Value:\n              Ref: area\n          - Name: templateBucketName\n            Type: PLAINTEXT\n            Value:\n              Ref: templateBucketName\n          - Name: sysName\n            Type: PLAINTEXT\n            Value:\n              Ref: sysName\n        Image: aws/codebuild/python:3.6.5\n        PrivilegedMode: false\n        Type: LINUX_CONTAINER\n      Name:\n        Fn::Sub: inv-${environment}-${area}-cdb-${sysName}\n      ServiceRole:\n        Ref: pipelineIamRoleArn\n      Source:\n        BuildSpec: buildspec.yml\n        GitCloneDepth: 1\n        Location:\n          Fn::GetAtt: [codecommit, CloneUrlHttp]\n        Type: CODECOMMIT\n  codepipeline:\n    Type: AWS::CodePipeline::Pipeline\n    Properties:\n      Name:\n        Fn::Sub: inv-${environment}-${area}-cdp-${sysName}\n      RoleArn:\n        Ref: pipelineIamRoleArn\n      ArtifactStore:\n        Location:\n          Ref: artifactBucketName\n        Type: S3\n      Stages:\n        - Name: Source\n          Actions:\n            - Name: Source\n              ActionTypeId:\n                Category: Source\n                Owner: AWS\n                Provider: CodeCommit\n                Version: \"1\"\n              OutputArtifacts:\n                - Name: MyApp\n              Configuration:\n                PollForSourceChanges: false\n                RepositoryName:\n                  Fn::GetAtt: [codecommit, Name]\n                BranchName: master\n              RunOrder: 1\n        - Name: Build\n          Actions:\n            - Name: Build\n              ActionTypeId:\n                Category: Build\n                Owner: AWS\n                Provider: CodeBuild\n                Version: \"1\"\n              InputArtifacts:\n                - Name: MyApp\n              OutputArtifacts:\n                - Name: Unuse\n              Configuration:\n                ProjectName:\n                  Ref: codebuild\n              RunOrder: 1\n  pipelineEventsRule:\n    Type: AWS::Events::Rule\n    Properties:\n      # Name:\n      #   Fn::Sub: inv-${environment}-${area}-rule-${sysName}\n      EventPattern:\n        source:\n          - aws.codecommit\n        detail-type:\n          - CodeCommit Repository State Change\n        resources:\n          - Fn::GetAtt: [codecommit, Arn]\n        detail:\n          event:\n            - referenceCreated\n            - referenceUpdated\n            - referenceDeleted\n          referenceType:\n            - branch\n          referenceName:\n            - master\n      State: ENABLED\n      Targets:\n        - Arn:\n            Fn::Sub: arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${codepipeline}\n          Id:\n            Fn::Sub: inv-${environment}-${area}-target-${sysName}CdpExec\n          RoleArn:\n            Ref: cloudwatchEventIamRoleArn\n"
}
appPipelineMain-ecsPipeline-1UHMQY4HB0IGO
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: \"2010-09-09\"\r\nDescription: ecsPipeline template\r\nParameters:\r\n  environment:\r\n    Type: String\r\n  area:\r\n    Type: String\r\n  artifactBucketName:\r\n    Type: String\r\n  pipelineIamRoleArn:\r\n    Type: String\r\n  cloudwatchEventIamRoleArn:\r\n    Type: String\r\n  subnetPri1Id:\r\n    Type: String\r\n  subnetPri2Id:\r\n    Type: String\r\n  vpcId:\r\n    Type: String\r\n  templateBucketName:\r\n    Type: String\r\n  templateKeyPrefix:\r\n    Type: String\r\n  nlbArn:\r\n    Type: String\r\n  nlbInternalArn:\r\n    Type: String\r\n  clusterArn:\r\n    Type: String\r\n  clusterName:\r\n    Type: String\r\nResources:\r\n  authorizationGatewayPipeline:\r\n    Type: AWS::CloudFormation::Stack\r\n    Properties:\r\n      TemplateURL:\r\n        Fn::Sub: https://s3.amazonaws.com/${templateBucketName}/${templateKeyPrefix}/ecs/ecsPipeline.yml\r\n      Parameters:\r\n        environment:\r\n          Ref: environment\r\n        area:\r\n          Ref: area\r\n        artifactBucketName:\r\n          Ref: artifactBucketName\r\n        pipelineIamRoleArn:\r\n          Ref: pipelineIamRoleArn\r\n        cloudwatchEventIamRoleArn:\r\n          Ref: cloudwatchEventIamRoleArn\r\n        subnetPri1Id:\r\n          Ref: subnetPri1Id\r\n        subnetPri2Id:\r\n          Ref: subnetPri2Id\r\n        # subnetIds:\r\n        #   Ref: subnetIds\r\n        vpcId:\r\n          Ref: vpcId\r\n        templateBucketName:\r\n          Ref: templateBucketName\r\n        templateKeyPrefix:\r\n          Ref: templateKeyPrefix\r\n        sysName: authorizationgateway\r\n        nlbArn:\r\n          Ref: nlbArn\r\n        clusterArn:\r\n          Ref: clusterArn\r\n        clusterName:\r\n          Ref: clusterName\r\n        # baseImageEcrName:\r\n        #   Fn::GetAtt: [ecsBaseImagePipeline, Outputs.baseImageEcrName]\r\n        listenerPort: \"80\"\r\n        desiredCountSsmParam:\r\n          Fn::Sub: /ecs/service/DesiredCount/${environment}\r\n        taskDefinitionCpuSsmParam:\r\n          Fn::Sub: /ecs/TaskDefinition/Cpu/${environment}\r\n        taskDefinitionMemorySsmParam:\r\n          Fn::Sub: /ecs/TaskDefinition/Memory/${environment}\r\n        containerDefinitionMemorySsmParam:\r\n          Fn::Sub: /ecs/TaskDefinition/ContainerDefinitions/Memory/${environment}\r\n        containerDefinitionMemoryReservationSsmParam:\r\n          Fn::Sub: /ecs/TaskDefinition/ContainerDefinitions/MemoryReservation/${environment}\r\n        serviceMaximumPercentSsmParam:\r\n          Fn::Sub: /ecs/service/DeploymentConfiguration/MaximumPercent/${environment}\r\n        serviceMinimumHealthyPercentSsmParam:\r\n          Fn::Sub: /ecs/service/DeploymentConfiguration/MinimumHealthyPercent/${environment}\r\n        proxyProtocolv2Enabled: \"true\"\r\n        containerPort: \"80\"\r\n        awslogsGroupName:\r\n          Fn::Sub: /aws/ecs/inv-${environment}-jp-ecs-authorizationGateway\r\n  referenceSecurityAlertHistoryPipeline:\r\n    Type: AWS::CloudFormation::Stack\r\n    Properties:\r\n      TemplateURL:\r\n        Fn::Sub: https://s3.amazonaws.com/${templateBucketName}/${templateKeyPrefix}/ecs/ecsPipeline.yml\r\n      Parameters:\r\n        environment:\r\n          Ref: environment\r\n        area:\r\n          Ref: area\r\n        artifactBucketName:\r\n          Ref: artifactBucketName\r\n        pipelineIamRoleArn:\r\n          Ref: pipelineIamRoleArn\r\n        cloudwatchEventIamRoleArn:\r\n          Ref: cloudwatchEventIamRoleArn\r\n        subnetPri1Id:\r\n          Ref: subnetPri1Id\r\n        subnetPri2Id:\r\n          Ref: subnetPri2Id\r\n        # subnetIds:\r\n        #   Ref: subnetIds\r\n        vpcId:\r\n          Ref: vpcId\r\n        templateBucketName:\r\n          Ref: templateBucketName\r\n        templateKeyPrefix:\r\n          Ref: templateKeyPrefix\r\n        sysName: referencesecurityalerthistory\r\n        nlbArn:\r\n          Ref: nlbInternalArn\r\n        clusterArn:\r\n          Ref: clusterArn\r\n        clusterName:\r\n          Ref: clusterName\r\n        # baseImageEcrName:\r\n        #   Fn::GetAtt: [ecsBaseImagePipeline, Outputs.baseImageEcrName]\r\n        listenerPort: \"80\"\r\n        desiredCountSsmParam:\r\n          Fn::Sub: /ecs/service/DesiredCount/${environment}\r\n        taskDefinitionCpuSsmParam:\r\n          Fn::Sub: /ecs/TaskDefinition/Cpu/${environment}\r\n        taskDefinitionMemorySsmParam:\r\n          Fn::Sub: /ecs/TaskDefinition/Memory/${environment}\r\n        containerDefinitionMemorySsmParam:\r\n          Fn::Sub: /ecs/TaskDefinition/ContainerDefinitions/Memory/${environment}\r\n        containerDefinitionMemoryReservationSsmParam:\r\n          Fn::Sub: /ecs/TaskDefinition/ContainerDefinitions/MemoryReservation/${environment}\r\n        serviceMaximumPercentSsmParam:\r\n          Fn::Sub: /ecs/service/DeploymentConfiguration/MaximumPercent/${environment}\r\n        serviceMinimumHealthyPercentSsmParam:\r\n          Fn::Sub: /ecs/service/DeploymentConfiguration/MinimumHealthyPercent/${environment}\r\n        proxyProtocolv2Enabled: \"false\"\r\n        containerPort: \"8080\"\r\n        awslogsGroupName:\r\n          Fn::Sub: /aws/ecs/inv-${environment}-jp-ecs-referenceSecurityAlertHistory\r\n  referenceVehicleLocationInformationPipeline:\r\n    Type: AWS::CloudFormation::Stack\r\n    Properties:\r\n      TemplateURL:\r\n        Fn::Sub: https://s3.amazonaws.com/${templateBucketName}/${templateKeyPrefix}/ecs/ecsPipeline.yml\r\n      Parameters:\r\n        environment:\r\n          Ref: environment\r\n        area:\r\n          Ref: area\r\n        artifactBucketName:\r\n          Ref: artifactBucketName\r\n        pipelineIamRoleArn:\r\n          Ref: pipelineIamRoleArn\r\n        cloudwatchEventIamRoleArn:\r\n          Ref: cloudwatchEventIamRoleArn\r\n        subnetPri1Id:\r\n          Ref: subnetPri1Id\r\n        subnetPri2Id:\r\n          Ref: subnetPri2Id\r\n        # subnetIds:\r\n        #   Ref: subnetIds\r\n        vpcId:\r\n          Ref: vpcId\r\n        templateBucketName:\r\n          Ref: templateBucketName\r\n        templateKeyPrefix:\r\n          Ref: templateKeyPrefix\r\n        sysName: referencevehiclelocationinformation\r\n        nlbArn:\r\n          Ref: nlbInternalArn\r\n        clusterArn:\r\n          Ref: clusterArn\r\n        clusterName:\r\n          Ref: clusterName\r\n        # baseImageEcrName:\r\n        #   Fn::GetAtt: [ecsBaseImagePipeline, Outputs.baseImageEcrName]\r\n        listenerPort: \"81\"\r\n        desiredCountSsmParam:\r\n          Fn::Sub: /ecs/service/DesiredCount/${environment}\r\n        taskDefinitionCpuSsmParam:\r\n          Fn::Sub: /ecs/TaskDefinition/Cpu/${environment}\r\n        taskDefinitionMemorySsmParam:\r\n          Fn::Sub: /ecs/TaskDefinition/Memory/${environment}\r\n        containerDefinitionMemorySsmParam:\r\n          Fn::Sub: /ecs/TaskDefinition/ContainerDefinitions/Memory/${environment}\r\n        containerDefinitionMemoryReservationSsmParam:\r\n          Fn::Sub: /ecs/TaskDefinition/ContainerDefinitions/MemoryReservation/${environment}\r\n        serviceMaximumPercentSsmParam:\r\n          Fn::Sub: /ecs/service/DeploymentConfiguration/MaximumPercent/${environment}\r\n        serviceMinimumHealthyPercentSsmParam:\r\n          Fn::Sub: /ecs/service/DeploymentConfiguration/MinimumHealthyPercent/${environment}\r\n        proxyProtocolv2Enabled: \"false\"\r\n        containerPort: \"8080\"\r\n        awslogsGroupName:\r\n          Fn::Sub: /aws/ecs/inv-${environment}-jp-ecs-referenceVehicleLocationInformation\r\n"
}
appPipelineMain-apiGatewayPipeline-MJE93I7O56AA
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: \"2010-09-09\"\r\nDescription: apiGatewayPipeline template\r\nParameters:\r\n  environment:\r\n    Type: String\r\n  area:\r\n    Type: String\r\n  artifactBucketName:\r\n    Type: String\r\n  pipelineIamRoleArn:\r\n    Type: String\r\n  cloudwatchEventIamRoleArn:\r\n    Type: String\r\n  templateBucketName:\r\n    Type: String\r\n  templateKeyPrefix:\r\n    Type: String\r\nResources:\r\n  gtcApiGatewayPipeline:\r\n    Type: AWS::CloudFormation::Stack\r\n    Properties:\r\n      TemplateURL:\r\n        Fn::Sub: https://s3.amazonaws.com/${templateBucketName}/${templateKeyPrefix}/apiGateway/apiGatewayPipeline.yml\r\n      Parameters:\r\n        environment:\r\n          Ref: environment\r\n        area:\r\n          Ref: area\r\n        artifactBucketName:\r\n          Ref: artifactBucketName\r\n        pipelineIamRoleArn:\r\n          Ref: pipelineIamRoleArn\r\n        cloudwatchEventIamRoleArn:\r\n          Ref: cloudwatchEventIamRoleArn\r\n        sysName: apigatewaygtc\r\n        templateBucketName:\r\n          Ref: templateBucketName\r\n  tspApiGatewayPipeline:\r\n    Type: AWS::CloudFormation::Stack\r\n    Properties:\r\n      TemplateURL:\r\n        Fn::Sub: https://s3.amazonaws.com/${templateBucketName}/${templateKeyPrefix}/apiGateway/apiGatewayPipeline.yml\r\n      Parameters:\r\n        environment:\r\n          Ref: environment\r\n        area:\r\n          Ref: area\r\n        artifactBucketName:\r\n          Ref: artifactBucketName\r\n        pipelineIamRoleArn:\r\n          Ref: pipelineIamRoleArn\r\n        cloudwatchEventIamRoleArn:\r\n          Ref: cloudwatchEventIamRoleArn\r\n        sysName: apigatewaytsp\r\n        templateBucketName:\r\n          Ref: templateBucketName\r\n"
}
appPipelineMain-lambdaPipeline-FKOTMTNQBDPV
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: \"2010-09-09\"\r\nDescription: lambdaPipeline template\r\nParameters:\r\n  environment:\r\n    Type: String\r\n  area:\r\n    Type: String\r\n  artifactBucketName:\r\n    Type: String\r\n  pipelineIamRoleArn:\r\n    Type: String\r\n  cloudwatchEventIamRoleArn:\r\n    Type: String\r\n  subnetPri1Id:\r\n    Type: String\r\n  subnetPri2Id:\r\n    Type: String\r\n  vpcId:\r\n    Type: String\r\n  templateBucketName:\r\n    Type: String\r\n  templateKeyPrefix:\r\n    Type: String\r\nResources:\r\n  notificationOrderCompletePipeline:\r\n    Type: AWS::CloudFormation::Stack\r\n    Properties:\r\n      TemplateURL:\r\n        Fn::Sub: https://s3.amazonaws.com/${templateBucketName}/${templateKeyPrefix}/lambda/samDeployPipeline.yml\r\n      Parameters:\r\n        environment:\r\n          Ref: environment\r\n        area:\r\n          Ref: area\r\n        artifactBucketName:\r\n          Ref: artifactBucketName\r\n        pipelineIamRoleArn:\r\n          Ref: pipelineIamRoleArn\r\n        cloudwatchEventIamRoleArn:\r\n          Ref: cloudwatchEventIamRoleArn\r\n        sysName: notificationordercomplete\r\n        subnetPri1Id:\r\n          Ref: subnetPri1Id\r\n        subnetPri2Id:\r\n          Ref: subnetPri2Id\r\n        # subnetIds:\r\n        #   Ref: subnetIds\r\n        vpcId:\r\n          Ref: vpcId\r\n        templateBucketName:\r\n          Ref: templateBucketName\r\n  notificationRoadServiceEventPipeline:\r\n    Type: AWS::CloudFormation::Stack\r\n    Properties:\r\n      TemplateURL:\r\n        Fn::Sub: https://s3.amazonaws.com/${templateBucketName}/${templateKeyPrefix}/lambda/samDeployPipeline.yml\r\n      Parameters:\r\n        environment:\r\n          Ref: environment\r\n        area:\r\n          Ref: area\r\n        artifactBucketName:\r\n          Ref: artifactBucketName\r\n        pipelineIamRoleArn:\r\n          Ref: pipelineIamRoleArn\r\n        cloudwatchEventIamRoleArn:\r\n          Ref: cloudwatchEventIamRoleArn\r\n        sysName: notificationroadserviceevent\r\n        subnetPri1Id:\r\n          Ref: subnetPri1Id\r\n        subnetPri2Id:\r\n          Ref: subnetPri2Id\r\n        # subnetIds:\r\n        #   Ref: subnetIds\r\n        vpcId:\r\n          Ref: vpcId\r\n        templateBucketName:\r\n          Ref: templateBucketName\r\n  notificationSecurityAlertActuationPipeline:\r\n    Type: AWS::CloudFormation::Stack\r\n    Properties:\r\n      TemplateURL:\r\n        Fn::Sub: https://s3.amazonaws.com/${templateBucketName}/${templateKeyPrefix}/lambda/samDeployPipeline.yml\r\n      Parameters:\r\n        environment:\r\n          Ref: environment\r\n        area:\r\n          Ref: area\r\n        artifactBucketName:\r\n          Ref: artifactBucketName\r\n        pipelineIamRoleArn:\r\n          Ref: pipelineIamRoleArn\r\n        cloudwatchEventIamRoleArn:\r\n          Ref: cloudwatchEventIamRoleArn\r\n        sysName: notificationsecurityalertactuation\r\n        subnetPri1Id:\r\n          Ref: subnetPri1Id\r\n        subnetPri2Id:\r\n          Ref: subnetPri2Id\r\n        # subnetIds:\r\n        #   Ref: subnetIds\r\n        vpcId:\r\n          Ref: vpcId\r\n        templateBucketName:\r\n          Ref: templateBucketName\r\n  getVehicleLocationInformationPipeline:\r\n    Type: AWS::CloudFormation::Stack\r\n    Properties:\r\n      TemplateURL:\r\n        Fn::Sub: https://s3.amazonaws.com/${templateBucketName}/${templateKeyPrefix}/lambda/samDeployPipeline.yml\r\n      Parameters:\r\n        environment:\r\n          Ref: environment\r\n        area:\r\n          Ref: area\r\n        artifactBucketName:\r\n          Ref: artifactBucketName\r\n        pipelineIamRoleArn:\r\n          Ref: pipelineIamRoleArn\r\n        cloudwatchEventIamRoleArn:\r\n          Ref: cloudwatchEventIamRoleArn\r\n        sysName: getvehiclelocationinformation\r\n        subnetPri1Id:\r\n          Ref: subnetPri1Id\r\n        subnetPri2Id:\r\n          Ref: subnetPri2Id\r\n        # subnetIds:\r\n        #   Ref: subnetIds\r\n        vpcId:\r\n          Ref: vpcId\r\n        templateBucketName:\r\n          Ref: templateBucketName\r\n  hcpMessageRegisterPipeline:\r\n    Type: AWS::CloudFormation::Stack\r\n    Properties:\r\n      TemplateURL:\r\n        Fn::Sub: https://s3.amazonaws.com/${templateBucketName}/${templateKeyPrefix}/lambda/samDeployPipeline.yml\r\n      Parameters:\r\n        environment:\r\n          Ref: environment\r\n        area:\r\n          Ref: area\r\n        artifactBucketName:\r\n          Ref: artifactBucketName\r\n        pipelineIamRoleArn:\r\n          Ref: pipelineIamRoleArn\r\n        cloudwatchEventIamRoleArn:\r\n          Ref: cloudwatchEventIamRoleArn\r\n        sysName: hcpmessageregister\r\n        subnetPri1Id:\r\n          Ref: subnetPri1Id\r\n        subnetPri2Id:\r\n          Ref: subnetPri2Id\r\n        # subnetIds:\r\n        #   Ref: subnetIds\r\n        vpcId:\r\n          Ref: vpcId\r\n        templateBucketName:\r\n          Ref: templateBucketName\r\n  # lambdaLayerPipeline:\r\n  #   Type: AWS::CloudFormation::Stack\r\n  #   Properties:\r\n  #     TemplateURL:\r\n  #       Fn::Sub: https://s3.amazonaws.com/${templateBucketName}/${templateKeyPrefix}/lambda/samDeployPipeline.yml\r\n  #     Parameters:\r\n  #       environment:\r\n  #         Ref: environment\r\n  #       area:\r\n  #         Ref: area\r\n  #       artifactBucketName:\r\n  #         Ref: artifactBucketName\r\n  #       pipelineIamRoleArn:\r\n  #         Ref: pipelineIamRoleArn\r\n  #       cloudwatchEventIamRoleArn:\r\n  #         Ref: cloudwatchEventIamRoleArn\r\n  #       sysName: lambdalayer\r\n  #       subnetPri1Id:\r\n  #         Ref: subnetPri1Id\r\n  #       subnetPri2Id:\r\n  #         Ref: subnetPri2Id\r\n  #       # subnetIds:\r\n  #       #   Ref: subnetIds\r\n  #       vpcId:\r\n  #         Ref: vpcId\r\n  #       templateBucketName:\r\n  #         Ref: templateBucketName\r\n  getIdInformationCachePipeline:\r\n    Type: AWS::CloudFormation::Stack\r\n    Properties:\r\n      TemplateURL:\r\n        Fn::Sub: https://s3.amazonaws.com/${templateBucketName}/${templateKeyPrefix}/lambda/samDeployPipeline.yml\r\n      Parameters:\r\n        environment:\r\n          Ref: environment\r\n        area:\r\n          Ref: area\r\n        artifactBucketName:\r\n          Ref: artifactBucketName\r\n        pipelineIamRoleArn:\r\n          Ref: pipelineIamRoleArn\r\n        cloudwatchEventIamRoleArn:\r\n          Ref: cloudwatchEventIamRoleArn\r\n        sysName: getidinformationcache\r\n        subnetPri1Id:\r\n          Ref: subnetPri1Id\r\n        subnetPri2Id:\r\n          Ref: subnetPri2Id\r\n        # subnetIds:\r\n        #   Ref: subnetIds\r\n        vpcId:\r\n          Ref: vpcId\r\n        templateBucketName:\r\n          Ref: templateBucketName\r\n"
}
appPipelineMain
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: \"2010-09-09\"\r\nDescription: main template\r\nParameters:\r\n  templateBucketName:\r\n    Type: String\r\n  templateKeyPrefix:\r\n    Type: String\r\n  environment:\r\n    Type: String\r\n    AllowedValues:\r\n      - dev\r\n      - ver\r\n      - prd\r\n  area:\r\n    Type: String\r\n    AllowedValues:\r\n      - jp\r\n  artifactBucketName:\r\n    Type: String\r\n  pipelineIamRoleArnSsmParam:\r\n    Type: AWS::SSM::Parameter::Value<String>\r\n  cloudwatchEventIamRoleArnSsmParam:\r\n    Type: AWS::SSM::Parameter::Value<String>\r\n  # subnetPri1IdExportName:\r\n  #   Type: String\r\n  # subnetPri2IdExportName:\r\n  #   Type: String\r\n  # subnetPub1IdExportName:\r\n  #   Type: String\r\n  # subnetPub2IdExportName:\r\n  #   Type: String\r\n  # vpcIdExportName:\r\n  #   Type: String\r\n  # nlbNameExportName:\r\n  #   Type: String\r\n  # nlbInternalNameExportName:\r\n  #   Type: String\r\n  nlbArnSsmParam:\r\n    Type: AWS::SSM::Parameter::Value<String>\r\n  nlbInternalArnSsmParam:\r\n    Type: AWS::SSM::Parameter::Value<String>\r\n  clusterArnExportName:\r\n    Type: String\r\n  clusterNameExportName:\r\n    Type: String\r\nResources:\r\n  lambdaPipeline:\r\n    Type: AWS::CloudFormation::Stack\r\n    Properties:\r\n      TemplateURL:\r\n        Fn::Sub: https://s3.amazonaws.com/${templateBucketName}/${templateKeyPrefix}/lambda/mainLambda.yml\r\n      Parameters:\r\n        environment:\r\n          Ref: environment\r\n        area:\r\n          Ref: area\r\n        artifactBucketName:\r\n          Ref: artifactBucketName\r\n        pipelineIamRoleArn:\r\n          Ref: pipelineIamRoleArnSsmParam\r\n        cloudwatchEventIamRoleArn:\r\n          Ref: cloudwatchEventIamRoleArnSsmParam\r\n        subnetPri1Id:\r\n          Fn::ImportValue:\r\n            PrivateSubnet1a\r\n            # Ref: subnetPri1IdExportName\r\n        subnetPri2Id:\r\n          Fn::ImportValue:\r\n            PrivateSubnet1c\r\n            # Ref: subnetPri2IdExportName\r\n        # subnetIds:\r\n        #   Ref: subnetIds\r\n        vpcId:\r\n          Fn::ImportValue:\r\n            VPC\r\n            # Ref: vpcIdExportName\r\n        templateBucketName:\r\n          Ref: templateBucketName\r\n        templateKeyPrefix:\r\n          Ref: templateKeyPrefix\r\n  apiGatewayPipeline:\r\n    Type: AWS::CloudFormation::Stack\r\n    Properties:\r\n      TemplateURL:\r\n        Fn::Sub: https://s3.amazonaws.com/${templateBucketName}/${templateKeyPrefix}/apiGateway/mainApiGateway.yml\r\n      Parameters:\r\n        environment:\r\n          Ref: environment\r\n        area:\r\n          Ref: area\r\n        artifactBucketName:\r\n          Ref: artifactBucketName\r\n        pipelineIamRoleArn:\r\n          Ref: pipelineIamRoleArnSsmParam\r\n        cloudwatchEventIamRoleArn:\r\n          Ref: cloudwatchEventIamRoleArnSsmParam\r\n        templateBucketName:\r\n          Ref: templateBucketName\r\n        templateKeyPrefix:\r\n          Ref: templateKeyPrefix\r\n  ecsPipeline:\r\n    Type: AWS::CloudFormation::Stack\r\n    Properties:\r\n      TemplateURL:\r\n        Fn::Sub: https://s3.amazonaws.com/${templateBucketName}/${templateKeyPrefix}/ecs/mainEcs.yml\r\n      Parameters:\r\n        environment:\r\n          Ref: environment\r\n        area:\r\n          Ref: area\r\n        artifactBucketName:\r\n          Ref: artifactBucketName\r\n        pipelineIamRoleArn:\r\n          Ref: pipelineIamRoleArnSsmParam\r\n        cloudwatchEventIamRoleArn:\r\n          Ref: cloudwatchEventIamRoleArnSsmParam\r\n        subnetPri1Id:\r\n          Fn::ImportValue:\r\n            PrivateSubnet1a\r\n            # Ref: subnetPri1IdExportName\r\n        subnetPri2Id:\r\n          Fn::ImportValue:\r\n            PrivateSubnet1c\r\n            # Ref: subnetPri2IdExportName\r\n        # subnetPub1Id:\r\n        #   Fn::ImportValue:\r\n        #     PublicSubnet1a\r\n        #     # Ref: subnetPub1IdExportName\r\n        # subnetPub2Id:\r\n        #   Fn::ImportValue:\r\n        #     PublicSubnet1c\r\n        #     # Ref: subnetPub2IdExportName\r\n        # subnetIds:\r\n        #   Ref: subnetIds\r\n        vpcId:\r\n          Fn::ImportValue:\r\n            VPC\r\n            # Ref: vpcIdExportName\r\n        templateBucketName:\r\n          Ref: templateBucketName\r\n        templateKeyPrefix:\r\n          Ref: templateKeyPrefix\r\n        nlbArn:\r\n          Ref: nlbArnSsmParam\r\n        nlbInternalArn:\r\n          Ref: nlbInternalArnSsmParam\r\n        clusterArn:\r\n          Fn::ImportValue:\r\n            Ref: clusterArnExportName\r\n        clusterName:\r\n          Fn::ImportValue:\r\n            Ref: clusterNameExportName\r\n"
}
infraMain-dynamoDb-MI2L0Y0EYUSD
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: \"2010-09-09\"\nDescription: dynamoDb template\nResources:\n  dynamoTable1:\n    Type: AWS::DynamoDB::Table\n    Properties:\n      AttributeDefinitions:\n        - AttributeName: RECID\n          AttributeType: N\n        - AttributeName: FRAME_NUMBER\n          AttributeType: S\n      KeySchema:\n        - AttributeName: RECID\n          KeyType: HASH\n        - AttributeName: FRAME_NUMBER\n          KeyType: RANGE\n      BillingMode: PAY_PER_REQUEST\n      TableName: VEHICLE_LAST_LOCATION\n      TimeToLiveSpecification:\n        AttributeName: TTL\n        Enabled: True\n  dynamoTable2:\n    Type: AWS::DynamoDB::Table\n    Properties:\n      AttributeDefinitions:\n        - AttributeName: RECID\n          AttributeType: N\n        - AttributeName: EVENTID\n          AttributeType: N\n      KeySchema:\n        - AttributeName: RECID\n          KeyType: HASH\n        - AttributeName: EVENTID\n          KeyType: RANGE\n      BillingMode: PAY_PER_REQUEST\n      TableName: BCALL_HISTORY\n      TimeToLiveSpecification:\n        AttributeName: TTL\n        Enabled: True\n  dynamoTable3:\n    Type: AWS::DynamoDB::Table\n    Properties:\n      AttributeDefinitions:\n        - AttributeName: RECID\n          AttributeType: N\n        - AttributeName: EVENTID\n          AttributeType: N\n        - AttributeName: EVENTTIME\n          AttributeType: S\n        - AttributeName: PUSH_RESULT\n          AttributeType: S\n      KeySchema:\n        - AttributeName: RECID\n          KeyType: HASH\n        - AttributeName: EVENTID\n          KeyType: RANGE\n      LocalSecondaryIndexes:\n        - IndexName: localSecondaryIndex1\n          KeySchema:\n            - AttributeName: RECID\n              KeyType: HASH\n            - AttributeName: EVENTTIME\n              KeyType: RANGE\n          Projection:\n            # NonKeyAttributes:\n            #   - EVENTID\n            ProjectionType: ALL #KEY_ONLY or INCLUDE or ALL\n        - IndexName: localSecondaryIndex2\n          KeySchema:\n            - AttributeName: RECID\n              KeyType: HASH\n            - AttributeName: PUSH_RESULT\n              KeyType: RANGE\n          Projection:\n            # NonKeyAttributes:\n            #   - EVENTID\n            ProjectionType: ALL #KEY_ONLY or INCLUDE or ALL\n      BillingMode: PAY_PER_REQUEST\n      TableName: SECURITY_ALERT_HISTORY\n      TimeToLiveSpecification:\n        AttributeName: TTL\n        Enabled: True\n  dynamoTable4:\n    Type: AWS::DynamoDB::Table\n    Properties:\n      AttributeDefinitions:\n        - AttributeName: FRAME_NUMBER\n          AttributeType: S\n      KeySchema:\n        - AttributeName: FRAME_NUMBER\n          KeyType: HASH\n      BillingMode: PAY_PER_REQUEST\n      TableName: VEHICLE_INFORMATION_CACHE\n      TimeToLiveSpecification:\n        AttributeName: TTL\n        Enabled: True\n"
}
infraMain-sqs-7SWRG9DLNZ14
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: \"2010-09-09\"\nDescription: sqs template\nParameters:\n  environment:\n    Type: String\n  area:\n    Type: String\nResources:\n  hcpMessageRegisterQueue:\n    Type: AWS::SQS::Queue\n    Properties:\n      DelaySeconds: 0\n      # FifoQueue: false\n      MaximumMessageSize: 261244\n      MessageRetentionPeriod: 345600\n      QueueName:\n        Fn::Sub: inv-${environment}-${area}-sqs-hcpMessageRegister\n      ReceiveMessageWaitTimeSeconds: 0\n      VisibilityTimeout: 30\n      # ContentBasedDeduplication: Boolean\n      # KmsMasterKeyId: String\n      # KmsDataKeyReusePeriodSeconds: Integer\n      # RedrivePolicy:\n      #   deadLetterTargetArn: String\n      #   maxReceiveCount: Integer\n  hcpMessageQueueArnParam:\n    Type: AWS::SSM::Parameter\n    Properties:\n      Type: String\n      Name:\n        Fn::Sub: /sqs/hcpMessageRegisterQueue/arn/${environment}\n      Value:\n        Fn::GetAtt: [hcpMessageRegisterQueue, Arn]\n      Description: HCP Message Register Queue ARN\n"
}
infraMain-s3-6O000A429TXI
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: \"2010-09-09\"\nDescription: s3 template\nParameters:\n  environment:\n    Type: String\n  area:\n    Type: String\nResources:\n  configFileBucket:\n    Type: AWS::S3::Bucket\n    DeletionPolicy: Delete\n    Properties:\n      # AccessControl: String\n      # AccelerateConfiguration:\n      #   AccelerateConfiguration\n      # AnalyticsConfigurations:\n      #   - AnalyticsConfiguration\n      BucketEncryption:\n        ServerSideEncryptionConfiguration:\n          - ServerSideEncryptionByDefault:\n              # KMSMasterKeyID: aws/s3\n              SSEAlgorithm: aws:kms\n      BucketName:\n        Fn::Sub: inv-${environment}-${area}-s3-configfile\n      # CorsConfiguration:\n      #   CorsConfiguration\n      # InventoryConfigurations:\n      #   - InventoryConfiguration\n      # LifecycleConfiguration:\n      #   LifecycleConfiguration\n      LoggingConfiguration:\n        DestinationBucketName:\n          Ref: accessLoggingBucket\n        LogFilePrefix:\n          Fn::Sub: inv-${environment}-${area}-s3-configfile/\n\n      # MetricsConfigurations:\n      #   - MetricsConfiguration\n      # NotificationConfiguration:\n      #   NotificationConfiguration\n      # PublicAccessBlockConfiguration:\n      #   PublicAccessBlockConfiguration\n      # ReplicationConfiguration:\n      #   ReplicationConfiguration\n      # Tags:\n      #   - Resource Tag\n      # VersioningConfiguration:\n      #   VersioningConfiguration\n      # WebsiteConfiguration:\n      #   WebsiteConfiguration\n  artifactBucket:\n    Type: AWS::S3::Bucket\n    DeletionPolicy: Delete\n    Properties:\n      BucketName:\n        Fn::Sub: inv-${environment}-${area}-s3-artifact\n  dynamoDbBackUpBucket:\n    Type: AWS::S3::Bucket\n    DeletionPolicy: Delete\n    Properties:\n      BucketName:\n        Fn::Sub: inv-${environment}-${area}-s3-dynamodbbackup\n      LifecycleConfiguration:\n        Rules:\n          - Id: GlacierRule\n            Prefix: glacier\n            Status: Enabled\n            ExpirationInDays: 365 #SSM PARAM????\n            Transitions:\n              - TransitionInDays: 1 #SSM PARAM????\n                StorageClass: Glacier\n      LoggingConfiguration:\n        DestinationBucketName:\n          Ref: accessLoggingBucket\n        LogFilePrefix:\n          Fn::Sub: inv-${environment}-${area}-s3-dynamodbbackup/\n  accessLoggingBucket:\n    Type: \"AWS::S3::Bucket\"\n    Properties:\n      BucketName:\n        Fn::Sub: inv-${environment}-${area}-s3-accesslogging\n      AccessControl: LogDeliveryWrite\nOutputs:\n  configFileBucketName:\n    Description: ConfigFile for Lambda\n    Value:\n      Ref: configFileBucket\n  artifactBucketName:\n    Description: artifact Bucket\n    Value:\n      Ref: artifactBucket\n  dynamoDbBackUpName:\n    Description: Dynamo DB Back UP Bucket\n    Value:\n      Ref: dynamoDbBackUpBucket\n"
}
infraMain-nlb-7706C46UZRVF
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: \"2010-09-09\"\r\nDescription: nlb template\r\nParameters:\r\n  environment:\r\n    Type: String\r\n  area:\r\n    Type: String\r\n  # subnetIds:\r\n  #   Type: List<AWS::EC2::Subnet::Id>\r\n  subnetPri1Id:\r\n    Type: AWS::EC2::Subnet::Id\r\n  subnetPri2Id:\r\n    Type: AWS::EC2::Subnet::Id\r\n  internalHostedZoneId:\r\n    Type: String\r\n  nlbDomainName:\r\n    Type: String\r\n  nlbInternalDomainName:\r\n    Type: String\r\nMappings:\r\n  AllowedPrincipalsMap:\r\n    AllowedPrincipals:\r\n      dev: arn:aws:iam::412930723758:root,arn:aws:iam::465423648270:root\r\n      ver: arn:aws:iam::412930723758:root,arn:aws:iam::465423648270:root\r\n      prod: arn:aws:iam::412930723758:root,arn:aws:iam::465423648270:root\r\nResources:\r\n  nlb:\r\n    Type: AWS::ElasticLoadBalancingV2::LoadBalancer\r\n    Properties:\r\n      Name:\r\n        Fn::Sub: inv-${environment}-${area}-nlb-pub\r\n      Scheme: internal\r\n      Subnets:\r\n        - Ref: subnetPri1Id\r\n        - Ref: subnetPri2Id\r\n        # Ref: subnetIds\r\n      Type: network\r\n      IpAddressType: ipv4\r\n      LoadBalancerAttributes:\r\n        - Key: load_balancing.cross_zone.enabled\r\n          Value: \"true\"\r\n  nlbRecordSet:\r\n    Type: AWS::Route53::RecordSet\r\n    Properties:\r\n      AliasTarget:\r\n        DNSName:\r\n          Fn::GetAtt: [nlb, DNSName]\r\n        HostedZoneId: Z31USIVHYNEOWT #https://docs.aws.amazon.com/general/latest/gr/rande.html#elb_region\r\n      HostedZoneId:\r\n        Ref: internalHostedZoneId\r\n      Name:\r\n        Ref: nlbDomainName\r\n      Type: A\r\n  vpcEndpointService:\r\n    Type: AWS::EC2::VPCEndpointService\r\n    Properties:\r\n      NetworkLoadBalancerArns:\r\n        - Ref: nlb\r\n      AcceptanceRequired: False\r\n  vpcEndpointServicePermissions:\r\n    Type: \"AWS::EC2::VPCEndpointServicePermissions\"\r\n    Properties:\r\n      AllowedPrincipals:\r\n        Fn::Split:\r\n          [\r\n            \",\",\r\n            !FindInMap [\r\n              AllowedPrincipalsMap,\r\n              AllowedPrincipals,\r\n              Ref: environment\r\n            ]\r\n          ]\r\n          # - arn:aws:iam::412930723758:root #?????\r\n          # - arn:aws:iam::465423648270:root #YSD???????\r\n      ServiceId:\r\n        Ref: vpcEndpointService\r\n  nlbInternal:\r\n    Type: AWS::ElasticLoadBalancingV2::LoadBalancer\r\n    Properties:\r\n      Name:\r\n        Fn::Sub: inv-${environment}-${area}-nlb-internal\r\n      Scheme: internal\r\n      Subnets:\r\n        - Ref: subnetPri1Id\r\n        - Ref: subnetPri2Id\r\n        # Ref: subnetIds\r\n      Type: network\r\n      IpAddressType: ipv4\r\n      LoadBalancerAttributes:\r\n        - Key: load_balancing.cross_zone.enabled\r\n          Value: \"true\"\r\n  nlbInternalRecordSet:\r\n    Type: AWS::Route53::RecordSet\r\n    Properties:\r\n      AliasTarget:\r\n        DNSName:\r\n          Fn::GetAtt: [nlbInternal, DNSName]\r\n        HostedZoneId: Z31USIVHYNEOWT\r\n      HostedZoneId:\r\n        Ref: internalHostedZoneId\r\n      Name:\r\n        Ref: nlbInternalDomainName\r\n      Type: A\r\n  nlbNameParam:\r\n    Type: AWS::SSM::Parameter\r\n    Properties:\r\n      Type: String\r\n      Name: /nlb/public/name\r\n      Value:\r\n        Fn::GetAtt: [nlb, LoadBalancerName]\r\n      Description: NLB Name\r\n  nlbInternalNameParam:\r\n    Type: AWS::SSM::Parameter\r\n    Properties:\r\n      Type: String\r\n      Name: /nlb/internal/name\r\n      Value:\r\n        Fn::GetAtt: [nlbInternal, LoadBalancerName]\r\n      Description: NLB Internal Name\r\n  nlbArnParam:\r\n    Type: AWS::SSM::Parameter\r\n    Properties:\r\n      Type: String\r\n      Name: /nlb/public/arn\r\n      Value:\r\n        Ref: nlb\r\n      Description: NLB ARN\r\n  nlbInternalArnParam:\r\n    Type: AWS::SSM::Parameter\r\n    Properties:\r\n      Type: String\r\n      Name: /nlb/internal/arn\r\n      Value:\r\n        Ref: nlbInternal\r\n      Description: NLB Internal ARN\r\n  nlbDomainNameParam:\r\n    Type: AWS::SSM::Parameter\r\n    Properties:\r\n      Type: String\r\n      Name: /nlb/public/domainName\r\n      Value:\r\n        Ref: nlbRecordSet\r\n      Description: NLB Domain Name\r\n  nlbInternalDomainNameParam:\r\n    Type: AWS::SSM::Parameter\r\n    Properties:\r\n      Type: String\r\n      Name: /nlb/internal/domainName\r\n      Value:\r\n        Ref: nlbInternalRecordSet\r\n      Description: NLB Internal Domain Name\r\n  vpcEndpointServiceIdParam:\r\n    Type: AWS::SSM::Parameter\r\n    Properties:\r\n      Type: String\r\n      Name: /vpc/endpointservice/nlb/id\r\n      Value:\r\n        Ref: vpcEndpointService\r\n      Description: VPC Endpoint Service NLB\r\nOutputs:\r\n  nlbName:\r\n    Description: NLB Name\r\n    Value:\r\n      Fn::GetAtt: [nlb, LoadBalancerName]\r\n    # Export:\r\n    #   Name: nlbName\r\n  nlbArn:\r\n    Description: NLB ARN\r\n    Value:\r\n      Ref: nlb\r\n    # Export:\r\n    #   Name: nlbArn\r\n  nlbInternalName:\r\n    Description: NLB Internal Name\r\n    Value:\r\n      Fn::GetAtt: [nlbInternal, LoadBalancerName]\r\n    # Export:\r\n    #   Name: nlbInternalName\r\n  nlbInternalArn:\r\n    Description: NLB Internal ARN\r\n    Value:\r\n      Ref: nlbInternal\r\n    # Export:\r\n    #   Name: nlbInternalAr\r\n  nlbDomainName:\r\n    Description: NLB Domain Name\r\n    Value:\r\n      Ref: nlbRecordSet\r\n    # Export:\r\n    #   Name: nlbDomainName\r\n  nlbInternalDomainName:\r\n    Description: NLB Internal Domain Name\r\n    Value:\r\n      Ref: nlbInternalRecordSet\r\n    # Export:\r\n    #   Name: nlbInternalDomainName\r\n  vpcEndpointServiceId:\r\n    Description: VPC Endpoint Service ID\r\n    Value:\r\n      Ref: vpcEndpointService\r\n    # Export:\r\n    #   Name: vpcEndpointServiceId\r\n"
}
infraMain-iam-FFA02UGF3QIO
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: \"2010-09-09\"\nDescription: iam template\nParameters:\n  environment:\n    Type: String\n  area:\n    Type: String\nResources:\n  pipelineIamRole:\n    Type: AWS::IAM::Role\n    Properties:\n      RoleName:\n        Fn::Sub: inv-${environment}-${area}-rl-pipeline\n      AssumeRolePolicyDocument:\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service: codebuild.amazonaws.com\n            Action: \"sts:AssumeRole\"\n          - Effect: Allow\n            Principal:\n              Service: codepipeline.amazonaws.com\n            Action: \"sts:AssumeRole\"\n      ManagedPolicyArns:\n        - \"arn:aws:iam::aws:policy/AWSCodeCommitFullAccess\"\n        - \"arn:aws:iam::aws:policy/AWSCodePipelineFullAccess\"\n        - \"arn:aws:iam::aws:policy/AWSCodeBuildDeveloperAccess\"\n        - \"arn:aws:iam::aws:policy/IAMFullAccess\"\n        - \"arn:aws:iam::aws:policy/AmazonSSMFullAccess\"\n      Path: /\n  pipelineIamPolicy:\n    Type: AWS::IAM::Policy\n    Properties:\n      PolicyName:\n        Fn::Sub: inv-${environment}-${area}-pl-pipeline\n      PolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Action:\n              - \"*\"\n            Resource: \"*\"\n      Roles:\n        - Ref: pipelineIamRole\n  cloudwatchEventIamRole:\n    Type: AWS::IAM::Role\n    Properties:\n      RoleName:\n        Fn::Sub: inv-${environment}-${area}-rl-cloudwatchEvent\n      AssumeRolePolicyDocument:\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service: events.amazonaws.com\n            Action: \"sts:AssumeRole\"\n      Path: /\n  cloudwatchEventIamPolicy:\n    Type: AWS::IAM::Policy\n    Properties:\n      PolicyName:\n        Fn::Sub: inv-${environment}-${area}-pl-cloudwatchEvent\n      PolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Action:\n              - \"codepipeline:StartPipelineExecution\"\n            Resource: \"arn:aws:codepipeline:*\"\n      Roles:\n        - Ref: cloudwatchEventIamRole\n  pipelineIamRoleArnParam:\n    Type: AWS::SSM::Parameter\n    Properties:\n      Type: String\n      Name: /iam/role/pipelineIamRole/arn\n      Value:\n        Fn::GetAtt: [pipelineIamRole, Arn]\n      Description: IAM Role ARN\n  cloudwatchEventIamRoleArnParam:\n    Type: AWS::SSM::Parameter\n    Properties:\n      Type: String\n      Name: /iam/role/cloudwatchEventIamRole/arn\n      Value:\n        Fn::GetAtt: [cloudwatchEventIamRole, Arn]\n      Description: IAM Role ARN\nOutputs:\n  pipelineIamRoleName:\n    Description: pipelineIamRole Name\n    Value:\n      Ref: pipelineIamRole\n  pipelineIamRoleArn:\n    Description: pipelineIamRole Name\n    Value:\n      Fn::GetAtt: [pipelineIamRole, Arn]\n    # Export:\n    #   Name: pipelineIamRoleArn\n  cloudwatchEventIamRoleName:\n    Description: cloudwatchEventIamRole Name\n    Value:\n      Ref: cloudwatchEventIamRole\n  cloudwatchEventIamRoleArn:\n    Description: cloudwatchEventIamRole Name\n    Value:\n      Fn::GetAtt: [cloudwatchEventIamRole, Arn]\n    # Export:\n    #   Name: cloudwatchEventIamRoleArn\n"
}
infraMain-customDomain-1LND9MQYXTAHC
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: \"2010-09-09\"\nDescription: customDomain template\nParameters:\n  acmArn:\n    Type: String\n  # publicHostedZoneId:\n  #   Type: String\n  domainName:\n    Type: String\nResources:\n  customDomain:\n    Type: AWS::ApiGateway::DomainName\n    Properties:\n      DomainName:\n        Ref: domainName\n      EndpointConfiguration:\n        Types:\n          - REGIONAL\n      RegionalCertificateArn:\n        Ref: acmArn\n  # recordSet:\n  #   Type: AWS::Route53::RecordSet\n  #   Properties:\n  #     AliasTarget:\n  #       DNSName:\n  #         Fn::GetAtt: [customDomain, RegionalDomainName]\n  #       HostedZoneId:\n  #         Fn::GetAtt: [customDomain, RegionalHostedZoneId]\n  #     HostedZoneId:\n  #       Ref: publicHostedZoneId\n  #     Name:\n  #       Ref: domainName\n  #     Type: A\nOutputs:\n  customDomainName:\n    Description: customDomain Name\n    Value:\n      Ref: customDomain\n    Export:\n      Name: customDomainName\n"
}
infraMain-ecsCluster-V5C6HCKK2144
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: \"2010-09-09\"\r\nDescription: ecsCluster template\r\nParameters:\r\n  environment:\r\n    Type: String\r\n  area:\r\n    Type: String\r\nResources:\r\n  cluster:\r\n    Type: AWS::ECS::Cluster\r\n    Properties:\r\n      ClusterName:\r\n        Fn::Sub: inv-${environment}-${area}-ecs-cluster\r\nOutputs:\r\n  clusterArn:\r\n    Description: Cluster ARN\r\n    Value:\r\n      Fn::GetAtt: [cluster, Arn]\r\n    Export:\r\n      Name: clusterArn\r\n  clusterName:\r\n    Description: Cluster Name\r\n    Value:\r\n      Ref: cluster\r\n    Export:\r\n      Name: clusterName\r\n"
}
infraMain
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: \"2010-09-09\"\r\nDescription: main template\r\nParameters:\r\n  templateBucketName:\r\n    Type: String\r\n  templateKeyPrefix:\r\n    Type: String\r\n  environment:\r\n    Type: String\r\n    AllowedValues:\r\n      - dev\r\n      - ver\r\n      - prd\r\n  area:\r\n    Type: String\r\n    AllowedValues:\r\n      - jp\r\n  internalHostedZoneId:\r\n    Type: String\r\n  # publicHostedZoneId:\r\n  #   Type: String\r\n  acmArn:\r\n    Type: String\r\nResources:\r\n  # VPC?VPCEndpoint?ClassMethod????\r\n  # vpc:\r\n  #   Type: AWS::CloudFormation::Stack\r\n  #   Properties:\r\n  #     TemplateURL:\r\n  #       Fn::Sub: https://s3.amazonaws.com/${templateBucketName}/${templateKeyPrefix}/vpc.yml\r\n  #     Parameters:\r\n  #       environment:\r\n  #         Ref: environment\r\n  #       area:\r\n  #         Ref: area\r\n  # vpcEndpoint:\r\n  #   Type: AWS::CloudFormation::Stack\r\n  #   Properties:\r\n  #     TemplateURL:\r\n  #       Fn::Sub: https://s3.amazonaws.com/${templateBucketName}/${templateKeyPrefix}/vpcEndpoint.yml\r\n  #     Parameters:\r\n  #       vpcId:\r\n  #         Fn::ImportValue: VPC\r\n  #         # Fn::GetAtt: [vpc, Outputs.vpcId]\r\n  #       routeTableIds:\r\n  #         Fn::Join:\r\n  #           - \",\"\r\n  #           - - Fn::ImportValue: PublicRouteTable\r\n  #           # - - Fn::GetAtt: [vpc, Outputs.routeTableId]\r\n  sqs:\r\n    Type: AWS::CloudFormation::Stack\r\n    Properties:\r\n      TemplateURL:\r\n        Fn::Sub: https://s3.amazonaws.com/${templateBucketName}/${templateKeyPrefix}/sqs.yml\r\n      Parameters:\r\n        environment:\r\n          Ref: environment\r\n        area:\r\n          Ref: area\r\n  dynamoDb:\r\n    Type: AWS::CloudFormation::Stack\r\n    Properties:\r\n      TemplateURL:\r\n        Fn::Sub: https://s3.amazonaws.com/${templateBucketName}/${templateKeyPrefix}/dynamoDb.yml\r\n  s3:\r\n    Type: AWS::CloudFormation::Stack\r\n    Properties:\r\n      TemplateURL:\r\n        Fn::Sub: https://s3.amazonaws.com/${templateBucketName}/${templateKeyPrefix}/s3.yml\r\n      Parameters:\r\n        environment:\r\n          Ref: environment\r\n        area:\r\n          Ref: area\r\n  iam:\r\n    Type: AWS::CloudFormation::Stack\r\n    Properties:\r\n      TemplateURL:\r\n        Fn::Sub: https://s3.amazonaws.com/${templateBucketName}/${templateKeyPrefix}/iam.yml\r\n      Parameters:\r\n        environment:\r\n          Ref: environment\r\n        area:\r\n          Ref: area\r\n  ecsCluster:\r\n    Type: AWS::CloudFormation::Stack\r\n    Properties:\r\n      TemplateURL:\r\n        Fn::Sub: https://s3.amazonaws.com/${templateBucketName}/${templateKeyPrefix}/ecsCluster.yml\r\n      Parameters:\r\n        environment:\r\n          Ref: environment\r\n        area:\r\n          Ref: area\r\n  nlb:\r\n    Type: AWS::CloudFormation::Stack\r\n    Properties:\r\n      TemplateURL:\r\n        Fn::Sub: https://s3.amazonaws.com/${templateBucketName}/${templateKeyPrefix}/nlb.yml\r\n      Parameters:\r\n        environment:\r\n          Ref: environment\r\n        area:\r\n          Ref: area\r\n        subnetPri1Id:\r\n          Fn::ImportValue: PrivateSubnet1a\r\n        subnetPri2Id:\r\n          Fn::ImportValue: PrivateSubnet1c\r\n        # subnetIds:\r\n        #   Fn::Join:\r\n        #     - \",\"\r\n        #     - - Fn::ImportValue: PrivateSubnet1a\r\n        #       - Fn::ImportValue: PrivateSubnet1c\r\n        # - - Fn::GetAtt: [vpc, Outputs.subnetPub1Id]\r\n        #   - Fn::GetAtt: [vpc, Outputs.subnetPub2Id]\r\n        internalHostedZoneId:\r\n          Ref: internalHostedZoneId\r\n        nlbDomainName:\r\n          Fn::Sub: ${environment}-esp.internal-internavi\r\n        nlbInternalDomainName:\r\n          Fn::Sub: back-nlb.${environment}-esp.internal-internavi\r\n  customDomain:\r\n    Type: AWS::CloudFormation::Stack\r\n    Properties:\r\n      TemplateURL:\r\n        Fn::Sub: https://s3.amazonaws.com/${templateBucketName}/${templateKeyPrefix}/customDomain.yml\r\n      Parameters:\r\n        acmArn:\r\n          Ref: acmArn\r\n          # Fn::GetAtt: [acm, Outputs.certificateArn]\r\n        # acmArnSsmParam:\r\n        #   /acm/certificate/arn\r\n        # Fn::ImportValue: certificateArn\r\n        # publicHostedZoneId:\r\n        #   Ref: publicHostedZoneId\r\n        domainName:\r\n          Fn::Sub: ap1.${environment}-esp.cloud.internavi.ne.jp\r\n  apiGateway:\r\n    Type: AWS::CloudFormation::Stack\r\n    Properties:\r\n      TemplateURL:\r\n        Fn::Sub: https://s3.amazonaws.com/${templateBucketName}/${templateKeyPrefix}/apigateway.yml\r\n      Parameters:\r\n        environment:\r\n          Ref: environment\r\n        area:\r\n          Ref: area"
}
infraSpec-InfraSSMStack-1WI2EVVV6FDDE
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: 2010-09-09\r\nParameters:\r\n  environment:\r\n    Type: String\r\n    Description: Environment Code\r\n  specLevel:\r\n    Type: String\r\n    Description: Spec Level\r\nConditions:\r\n  isSmall:\r\n    Fn::Equals: [Ref: specLevel, \"Small\"]\r\n  isMiddle:\r\n    Fn::Equals: [Ref: specLevel, \"Middle\"]\r\n  isLarge:\r\n    Fn::Equals: [Ref: specLevel, \"Large\"]\r\n  isDev:\r\n    Fn::Equals: [Ref: environment, \"dev\"]\r\n  isVer:\r\n    Fn::Equals: [Ref: environment, \"ver\"]\r\n  isPrd:\r\n    Fn::Equals: [Ref: environment, \"prd\"]\r\nResources:\r\n  ecsserviceDeploymentConfigurationMaximumPercent:\r\n    Type: \"AWS::SSM::Parameter\"\r\n    Properties:\r\n      Name:\r\n        Fn::Sub: /ecs/service/DeploymentConfiguration/MaximumPercent/${environment}\r\n      # Description:\r\n      Type: String\r\n      Value:\r\n        Fn::Join:\r\n          - \"\"\r\n          - - Fn::If: [isSmall, \"100\", \"\"]\r\n            - Fn::If: [isMiddle, \"100\", \"\"]\r\n            - Fn::If: [isLarge, \"100\", \"\"]\r\n  ecsserviceDeploymentConfigurationMinimumHealthyPercent:\r\n    Type: \"AWS::SSM::Parameter\"\r\n    Properties:\r\n      Name:\r\n        Fn::Sub: /ecs/service/DeploymentConfiguration/MinimumHealthyPercent/${environment}\r\n      # Description:\r\n      Type: String\r\n      Value:\r\n        Fn::Join:\r\n          - \"\"\r\n          - - Fn::If: [isSmall, \"0\", \"\"]\r\n            - Fn::If: [isMiddle, \"0\", \"\"]\r\n            - Fn::If: [isLarge, \"0\", \"\"]\r\n  ecsserviceDesiredCount:\r\n    Type: \"AWS::SSM::Parameter\"\r\n    Properties:\r\n      Name:\r\n        Fn::Sub: /ecs/service/DesiredCount/${environment}\r\n      # Description:\r\n      Type: String\r\n      Value:\r\n        Fn::Join:\r\n          - \"\"\r\n          - - Fn::If: [isSmall, \"1\", \"\"]\r\n            - Fn::If: [isMiddle, \"4\", \"\"]\r\n            - Fn::If: [isLarge, \"6\", \"\"]\r\n  ecsTaskDefinitionCpu:\r\n    Type: \"AWS::SSM::Parameter\"\r\n    Properties:\r\n      Name:\r\n        Fn::Sub: /ecs/TaskDefinition/Cpu/${environment}\r\n      # Description:\r\n      Type: String\r\n      Value:\r\n        Fn::Join:\r\n          - \"\"\r\n          - - Fn::If: [isSmall, \"256\", \"\"]\r\n            - Fn::If: [isMiddle, \"256\", \"\"]\r\n            - Fn::If: [isLarge, \"512\", \"\"]\r\n  ecsTaskDefinitionMemory:\r\n    Type: \"AWS::SSM::Parameter\"\r\n    Properties:\r\n      Name:\r\n        Fn::Sub: /ecs/TaskDefinition/Memory/${environment}\r\n      # Description:\r\n      Type: String\r\n      Value:\r\n        Fn::Join:\r\n          - \"\"\r\n          - - Fn::If: [isSmall, \"1024\", \"\"]\r\n            - Fn::If: [isMiddle, \"1024\", \"\"]\r\n            - Fn::If: [isLarge, \"2048\", \"\"]\r\n  ecsTaskDefinitionContainerDefinitionsMemory:\r\n    Type: \"AWS::SSM::Parameter\"\r\n    Properties:\r\n      Name:\r\n        Fn::Sub: /ecs/TaskDefinition/ContainerDefinitions/Memory/${environment}\r\n      # Description:\r\n      Type: String\r\n      Value:\r\n        Fn::Join:\r\n          - \"\"\r\n          - - Fn::If: [isSmall, \"1024\", \"\"]\r\n            - Fn::If: [isMiddle, \"1024\", \"\"]\r\n            - Fn::If: [isLarge, \"2048\", \"\"]\r\n  ecsTaskDefinitionContainerDefinitionsMemoryReservation:\r\n    Type: \"AWS::SSM::Parameter\"\r\n    Properties:\r\n      Name:\r\n        Fn::Sub: /ecs/TaskDefinition/ContainerDefinitions/MemoryReservation/${environment}\r\n      # Description:\r\n      Type: String\r\n      Value:\r\n        Fn::Join:\r\n          - \"\"\r\n          - - Fn::If: [isSmall, \"1024\", \"\"]\r\n            - Fn::If: [isMiddle, \"1024\", \"\"]\r\n            - Fn::If: [isLarge, \"2048\", \"\"]\r\n  lambdaMemorySize:\r\n    Type: \"AWS::SSM::Parameter\"\r\n    Properties:\r\n      Name:\r\n        Fn::Sub: /lambda/MemorySize/${environment}\r\n      # Description:\r\n      Type: String\r\n      Value:\r\n        Fn::Join:\r\n          - \"\"\r\n          - - Fn::If: [isSmall, \"128\", \"\"]\r\n            - Fn::If: [isMiddle, \"128\", \"\"]\r\n            - Fn::If: [isLarge, \"128\", \"\"]\r\n  acceptDomainList:\r\n    Type: \"AWS::SSM::Parameter\"\r\n    Properties:\r\n      Name:\r\n        Fn::Sub: /ecs/outer/domainName\r\n      # Description:\r\n      Type: String\r\n      Value:\r\n        Fn::Join: \r\n          - \"\" \r\n          - - Fn::If: \r\n                [ \r\n                  isDev, \r\n                  \"dev-esp.internal.internavi.ne.jp inv-dev-jp-nlb-pub-5d87253ad407b496.elb.ap-northeast-1.amazonaws.com vpce-089d28a30c9493a44-7fojwa31.vpce-svc-0557209ba711d1d3b.ap-northeast-1.vpce.amazonaws.com vpce-0595dc8261143d791-bswbmnr1.vpce-svc-0557209ba711d1d3b.ap-northeast-1.vpce.amazonaws.com\", \r\n                  \"\", \r\n                ] \r\n            - Fn::If:\r\n                [\r\n                  isVer,\r\n                  \"ver-esp.internal.internavi.ne.jp inv-dev-jp-nlb-pub-5d87253ad407b496.elb.ap-northeast-1.amazonaws.com vpce-089d28a30c9493a44-7fojwa31.vpce-svc-0557209ba711d1d3b.ap-northeast-1.vpce.amazonaws.com vpce-0595dc8261143d791-bswbmnr1.vpce-svc-0557209ba711d1d3b.ap-northeast-1.vpce.amazonaws.com\",\r\n                  \"\",\r\n                ]\r\n            - Fn::If:\r\n                [\r\n                  isPrd,\r\n                  \"prd-esp.internal.internavi.ne.jp inv-dev-jp-nlb-pub-5d87253ad407b496.elb.ap-northeast-1.amazonaws.com vpce-089d28a30c9493a44-7fojwa31.vpce-svc-0557209ba711d1d3b.ap-northeast-1.vpce.amazonaws.com vpce-0595dc8261143d791-bswbmnr1.vpce-svc-0557209ba711d1d3b.ap-northeast-1.vpce.amazonaws.com\",\r\n                  \"\",\r\n                ]\r\n"
}
infraSpec-AppSSMStack-1SE2HYZ3VMOTW
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: 2010-09-09\r\nParameters:\r\n  environment:\r\n    Type: String\r\n    Description: Environment Code\r\nConditions:\r\n  isDev:\r\n    Fn::Equals: [Ref: environment, \"dev\"]\r\n  isVer:\r\n    Fn::Equals: [Ref: environment, \"ver\"]\r\n  isPrd:\r\n    Fn::Equals: [Ref: environment, \"prd\"]\r\nResources:\r\n  apiInfomationLogLevel:\r\n    Type: \"AWS::SSM::Parameter\"\r\n    Properties:\r\n      Name:\r\n        Fn::Sub: /api/information/log_level\r\n      # Description:\r\n      Type: String\r\n      Value:\r\n        Fn::Join:\r\n          - \"\"\r\n          - - Fn::If: [isDev, \"10\", \"\"]\r\n            - Fn::If: [isVer, \"10\", \"\"]\r\n            - Fn::If: [isPrd, \"20\", \"\"]\r\n  apiInfomationEnvironment:\r\n    Type: \"AWS::SSM::Parameter\"\r\n    Properties:\r\n      Name:\r\n        Fn::Sub: /api/information/environment\r\n      # Description:\r\n      Type: String\r\n      Value:\r\n        Fn::Join:\r\n          - \"\"\r\n          - - Fn::If: [isDev, \"DEV\", \"\"]\r\n            - Fn::If: [isVer, \"VER\", \"\"]\r\n            - Fn::If: [isPrd, \"PRD\", \"\"]\r\n  s3Config:\r\n    Type: \"AWS::SSM::Parameter\"\r\n    Properties:\r\n      Name:\r\n        Fn::Sub: /api/aws_service/s3_config\r\n      # Description:\r\n      Type: String\r\n      Value:\r\n        Fn::Join:\r\n          - \"\"\r\n          - - Fn::If: [isDev, \"configfile\", \"\"]\r\n            - Fn::If: [isVer, \"configfile\", \"\"]\r\n            - Fn::If: [isPrd, \"configfile\", \"\"]\r\n  s3Backup:\r\n    Type: \"AWS::SSM::Parameter\"\r\n    Properties:\r\n      Name:\r\n        Fn::Sub: /api/aws_service/s3_backup\r\n      # Description:\r\n      Type: String\r\n      Value:\r\n        Fn::Join:\r\n          - \"\"\r\n          - - Fn::If: [isDev, \"dynamodbbackup\", \"\"]\r\n            - Fn::If: [isVer, \"dynamodbbackup\", \"\"]\r\n            - Fn::If: [isPrd, \"dynamodbbackup\", \"\"]\r\n  filename:\r\n    Type: \"AWS::SSM::Parameter\"\r\n    Properties:\r\n      Name:\r\n        Fn::Sub: /api/config/filename\r\n      # Description:\r\n      Type: String\r\n      Value:\r\n        Fn::Join:\r\n          - \"\"\r\n          - - Fn::If: [isDev, \"esp_config.yml\", \"\"]\r\n            - Fn::If: [isVer, \"esp_config.yml\", \"\"]\r\n            - Fn::If: [isPrd, \"esp_config.yml\", \"\"]\r\n  sqsName:\r\n    Type: \"AWS::SSM::Parameter\"\r\n    Properties:\r\n      Name:\r\n        Fn::Sub: /api/aws_service/sqs_name\r\n      # Description:\r\n      Type: String\r\n      Value:\r\n        Fn::Join:\r\n          - \"\"\r\n          - - Fn::If: [isDev, \"hcpMessageRegister\", \"\"]\r\n            - Fn::If: [isVer, \"hcpMessageRegister\", \"\"]\r\n            - Fn::If: [isPrd, \"hcpMessageRegister\", \"\"]\r\n  domainList:\r\n    Type: \"AWS::SSM::Parameter\"\r\n    Properties:\r\n      Name:\r\n        Fn::Sub: /api/url/domain_list\r\n      # Description:\r\n      Type: String\r\n      Value:\r\n        Fn::Join:\r\n          - \"\"\r\n          - - Fn::If:\r\n                [\r\n                  isDev,\r\n                  \"http://vehicle-api.ver-ysd.internal-internavi,http://ap1.dev-ysd.internal-internavi,http://api.dev-sub.internal-internavi,https://pri-q1-jp.gtc20.com,https://push-jp.st.hcp.hondalink.jp\",\r\n                  \"\",\r\n                ]\r\n            - Fn::If:\r\n                [\r\n                  isVer,\r\n                  \"http://vehicle-api.ver-ysd.internal-internavi,http://ap1.ver-ysd.internal-internavi,http://api.ver-sub.internal-internavi,https://pri-q1-jp.gtc20.com,https://message-jp.st.hcp.hondalink.jp,https://push-jp.st.hcp.hondalink.jp\",\r\n                  \"\",\r\n                ]\r\n            - Fn::If:\r\n                [\r\n                  isPrd,\r\n                  \"http://vehicle-api.prd-ysd.internal-internavi,http://ap1.prd-ysd.internal-internavi,http://api.prd-sub.internal-internavi,https://pri-p-jp.gtc20.com,https://message-jp.p.hcp.hondalink.jp,https://push-jp.p.hcp.hondalink.jp\",\r\n                  \"\",\r\n                ]\r\n  vehicleLastLocation:\r\n    Type: \"AWS::SSM::Parameter\"\r\n    Properties:\r\n      Name:\r\n        Fn::Sub: /api/ttl_config/vehicle_last_location\r\n      # Description:\r\n      Type: String\r\n      Value:\r\n        Fn::Join:\r\n          - \"\"\r\n          - - Fn::If: [isDev, \"604800\", \"\"]\r\n            - Fn::If: [isVer, \"604800\", \"\"]\r\n            - Fn::If: [isPrd, \"604800\", \"\"]\r\n  securityAlertHistory:\r\n    Type: \"AWS::SSM::Parameter\"\r\n    Properties:\r\n      Name:\r\n        Fn::Sub: /api/ttl_config/security_alert_history\r\n      # Description:\r\n      Type: String\r\n      Value:\r\n        Fn::Join:\r\n          - \"\"\r\n          - - Fn::If: [isDev, \"604800\", \"\"]\r\n            - Fn::If: [isVer, \"604800\", \"\"]\r\n            - Fn::If: [isPrd, \"604800\", \"\"]\r\n  bcallHistory:\r\n    Type: \"AWS::SSM::Parameter\"\r\n    Properties:\r\n      Name:\r\n        Fn::Sub: /api/ttl_config/bcall_history\r\n      # Description:\r\n      Type: String\r\n      Value:\r\n        Fn::Join:\r\n          - \"\"\r\n          - - Fn::If: [isDev, \"604800\", \"\"]\r\n            - Fn::If: [isVer, \"604800\", \"\"]\r\n            - Fn::If: [isPrd, \"604800\", \"\"]\r\n  vehicleInformationCache:\r\n    Type: \"AWS::SSM::Parameter\"\r\n    Properties:\r\n      Name:\r\n        Fn::Sub: /api/ttl_config/vehicle_information_cache\r\n      # Description:\r\n      Type: String\r\n      Value:\r\n        Fn::Join:\r\n          - \"\"\r\n          - - Fn::If: [isDev, \"21600\", \"\"]\r\n            - Fn::If: [isVer, \"21600\", \"\"]\r\n            - Fn::If: [isPrd, \"21600\", \"\"]\r\n"
}
infraSpec
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: 2010-09-09\nParameters:\n  templateBucketName:\n    Type: String\n  templateKeyPrefix:\n    Type: String\n  environment:\n    Type: String\n    Description: Environment Code\n  specLevel:\n    Type: String\n    AllowedValues:\n      - Small\n      - Middle\n      - Large\nResources:\n  InfraSSMStack:\n    Type: \"AWS::CloudFormation::Stack\"\n    Properties:\n      TemplateURL:\n        Fn::Sub: https://s3.amazonaws.com/${templateBucketName}/${templateKeyPrefix}/infraSpec.yml\n      Parameters:\n        environment:\n          Ref: environment\n        specLevel:\n          Ref: specLevel\n  AppSSMStack:\n    Type: \"AWS::CloudFormation::Stack\"\n    Properties:\n      TemplateURL:\n        Fn::Sub: https://s3.amazonaws.com/${templateBucketName}/${templateKeyPrefix}/appParam.yml\n      Parameters:\n        environment:\n          Ref: environment\n"
}
StackSet-cfn-exec-ec2-a96fe0f0-0445-4ddd-a465-bc7b7294b8db
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: 2010-09-09\nDescription: CloudFormation Execute EC2\nParameters:\n  amiId:\n    Type: String\n    Default: ami-0d7ed3ddb85b521a6\n  SshCidr1:\n    Type: String\n    Default: 121.2.65.36/32\n  SshCidr2:\n    Type: String\n    Default: 39.110.201.10/32\n  SshCidr3:\n    Type: String\n    Default: 222.11.38.119/32\n  SshCidr4:\n    Type: String\n    Default: 1.21.118.25/32\n  SshCidr5:\n    Type: String\n    Default: 153.163.63.48/32\n  SshCidr6:\n    Type: String\n    Default: 13.231.11.115/32\nResources:\n  EC2Role:\n    Type: \"AWS::IAM::Role\"\n    Properties:\n      RoleName: cfn-exec-ec2-role\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/AdministratorAccess\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement:\n          -\n            Effect: \"Allow\"\n            Principal:\n              Service:\n                - \"ec2.amazonaws.com\"\n            Action:\n              - \"sts:AssumeRole\"\n      Path: \"/\"\n  Profile:\n    Type: AWS::IAM::InstanceProfile\n    Properties:\n      Roles:\n        - !Ref EC2Role\n  SSHSecurityGroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupName: cfn-exec-sg\n      GroupDescription: cfn-exec-sg\n      SecurityGroupIngress:\n      - IpProtocol: tcp\n        FromPort: '22'\n        ToPort: '22'\n        CidrIp: !Ref SshCidr1\n        Description: Classmethod\n      - IpProtocol: tcp\n        FromPort: '22'\n        ToPort: '22'\n        CidrIp: !Ref SshCidr2\n        Description: Classmethod\n      - IpProtocol: tcp\n        FromPort: '22'\n        ToPort: '22'\n        CidrIp: !Ref SshCidr3\n        Description: Classmethod\n      - IpProtocol: tcp\n        FromPort: '22'\n        ToPort: '22'\n        CidrIp: !Ref SshCidr4\n        Description: Classmethod\n      - IpProtocol: tcp\n        FromPort: '22'\n        ToPort: '22'\n        CidrIp: !Ref SshCidr5\n        Description: Classmethod\n      - IpProtocol: tcp\n        FromPort: '22'\n        ToPort: '22'\n        CidrIp: !Ref SshCidr6\n        Description: Classmethod\n      Tags:\n        - Key: Name\n          Value: cfn-exec-sg\n  EC2:\n    Type: AWS::EC2::Instance\n    Properties:\n      ImageId: !Ref amiId\n      InstanceType: t3.micro\n      KeyName: cfn-exec-key\n      IamInstanceProfile: !Ref Profile\n      NetworkInterfaces:\n        - AssociatePublicIpAddress: true\n          DeviceIndex: 0\n          GroupSet:\n            - !GetAtt SSHSecurityGroup.GroupId\n      UserData:\n        Fn::Base64: !Sub |\n          #!/bin/bash\n          yum -y update\n          yum -y install git\n      Tags:\n        - Key: Name\n          Value: cfn-exec\n  EIP:\n    Type: AWS::EC2::EIP\n    Properties:\n      Domain: vpc\n  AssociateEIP:\n    Type: AWS::EC2::EIPAssociation\n    Properties:\n      EIP: !Ref EIP\n      InstanceId: !Ref EC2\nOutputs:\n  EC2:\n    Value: !Ref EC2\n    Export:\n      Name: cfn-exex-ec2\n  EIP:\n    Value: !Ref EIP\n    Export:\n      Name: cfn-exex-IP\n"
}
INV-ver-esp01-web-ver-sub01
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: Create Service Endpoint\n\nParameters:\n  serviceAlliasLowerCase:\n    Type: String\n  serviceName:\n    Type: String\n  cidr:\n    Type: String\n\nResources:\n\n  endpointSecuritygroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupName: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      GroupDescription: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      Tags:\n        - Key: Name\n          Value: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      VpcId: !ImportValue VPC\n      SecurityGroupIngress:\n        - IpProtocol: tcp\n          FromPort: 80\n          ToPort: 80\n          CidrIp: !Ref cidr\n  endpoint:\n    Type: AWS::EC2::VPCEndpoint\n    Properties:\n      VpcEndpointType: Interface\n      VpcId: !ImportValue VPC\n      SubnetIds:\n        - !ImportValue PrivateSubnet1a\n        - !ImportValue PrivateSubnet1c\n      SecurityGroupIds:\n        - !Ref endpointSecuritygroup\n      ServiceName: !Ref serviceName\n      PrivateDnsEnabled: false\n"
}
INV-ver-esp01-vehicle-api-ver-ysd
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: Create Service Endpoint\n\nParameters:\n  serviceAlliasLowerCase:\n    Type: String\n  serviceName:\n    Type: String\n  cidr:\n    Type: String\n\nResources:\n\n  endpointSecuritygroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupName: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      GroupDescription: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      Tags:\n        - Key: Name\n          Value: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      VpcId: !ImportValue VPC\n      SecurityGroupIngress:\n        - IpProtocol: tcp\n          FromPort: 80\n          ToPort: 80\n          CidrIp: !Ref cidr\n  endpoint:\n    Type: AWS::EC2::VPCEndpoint\n    Properties:\n      VpcEndpointType: Interface\n      VpcId: !ImportValue VPC\n      SubnetIds:\n        - !ImportValue PrivateSubnet1a\n        - !ImportValue PrivateSubnet1c\n      SecurityGroupIds:\n        - !Ref endpointSecuritygroup\n      ServiceName: !Ref serviceName\n      PrivateDnsEnabled: false\n"
}
INV-ver-esp01-ap1-ver-ysd
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: Create Service Endpoint\n\nParameters:\n  serviceAlliasLowerCase:\n    Type: String\n  serviceName:\n    Type: String\n  cidr:\n    Type: String\n\nResources:\n\n  endpointSecuritygroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupName: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      GroupDescription: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      Tags:\n        - Key: Name\n          Value: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      VpcId: !ImportValue VPC\n      SecurityGroupIngress:\n        - IpProtocol: tcp\n          FromPort: 80\n          ToPort: 80\n          CidrIp: !Ref cidr\n  endpoint:\n    Type: AWS::EC2::VPCEndpoint\n    Properties:\n      VpcEndpointType: Interface\n      VpcId: !ImportValue VPC\n      SubnetIds:\n        - !ImportValue PrivateSubnet1a\n        - !ImportValue PrivateSubnet1c\n      SecurityGroupIds:\n        - !Ref endpointSecuritygroup\n      ServiceName: !Ref serviceName\n      PrivateDnsEnabled: false\n"
}
StackSet-ver-esp01-createIamRole-a6704b0b-6e93-4b09-917f-76733edf9f06
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "{\n  \"AWSTemplateFormatVersion\" : \"2010-09-09\",\n  \"Description\" : \"Template for Creating IAM Role to Switch from Internavi Login AWS Account\",\n  \"Parameters\" : {\n    \"TrustedAWSAccountId\" : {\n      \"AllowedPattern\" : \"^[0-9]*$\",\n      \"Type\" : \"String\",\n      \"Default\" : \"975196479634\",\n      \"Description\" : \"Trusted AWS Account ID\"\n    },\n    \"IAMRoleName\": {\n      \"Type\": \"String\",\n      \"Default\": \"SolDeveloper\",\n      \"Description\": \"IAM Role Name\"\n    },\n    \"IAMPolicyType\": {\n      \"Type\": \"String\",\n      \"Default\": \"SolUser\",\n      \"Description\": \"IAM Policy Type\",\n      \"AllowedValues\": [ \"SolUser\", \"Admin\" ]\n    }\n  },\n  \"Conditions\" : {\n    \"user\"        : { \"Fn::Equals\" : [{\"Ref\" : \"IAMPolicyType\"}, \"SolUser\" ]},\n    \"admin\"        : { \"Fn::Equals\" : [{\"Ref\" : \"IAMPolicyType\"}, \"Admin\" ]}\n  },\n  \"Resources\" : {\n    \"IAMRoleForAdmin\": {\n      \"Type\": \"AWS::IAM::Role\",\n      \"Condition\" : \"admin\",\n      \"Properties\": {\n        \"AssumeRolePolicyDocument\": {\n          \"Version\": \"2012-10-17\",\n          \"Statement\": [\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010003\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010004\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010010\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010011\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010012\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            }\n          ]\n        },\n        \"ManagedPolicyArns\": [\n          \"arn:aws:iam::aws:policy/AdministratorAccess\"\n        ],\n        \"Path\": \"/\",\n        \"RoleName\": { \"Ref\" : \"IAMRoleName\" }\n      }\n    },\n    \"IAMRoleForUser\": {\n      \"Type\": \"AWS::IAM::Role\",\n      \"Condition\" : \"user\",\n      \"Properties\": {\n        \"AssumeRolePolicyDocument\": {\n          \"Version\": \"2012-10-17\",\n          \"Statement\": [\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010003\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010004\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010010\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010011\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010012\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            }\n          ]\n        },\n        \"ManagedPolicyArns\": [\n          \"arn:aws:iam::aws:policy/ReadOnlyAccess\",\n          \"arn:aws:iam::aws:policy/AWSCodeCommitPowerUser\"\n        ],\n        \"Path\": \"/\",\n        \"RoleName\": { \"Ref\" : \"IAMRoleName\" }\n      }\n    }\n  },\n  \"Outputs\" : {\n    \"IAMRoleAdminArn\": {\n      \"Value\": { \"Fn::GetAtt\" : [ \"IAMRoleForAdmin\", \"Arn\" ] },\n      \"Condition\" : \"admin\"\n    },\n    \"IAMRoleUserArn\": {\n      \"Value\": { \"Fn::GetAtt\" : [ \"IAMRoleForUser\", \"Arn\" ] },\n      \"Condition\" : \"user\"\n    },\n    \"LinkForSwitchRole\": {\n      \"Value\": { \"Fn::Join\": [ \"\", [ \"https://signin.aws.amazon.com/switchrole?roleName=\", { \"Ref\" : \"IAMRoleName\" }, \"&account=\", { \"Ref\" : \"AWS::AccountId\" } ] ] }\n    }\n  }\n}\n"
}
INV-ver-esp01-vpc-base
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "---\nAWSTemplateFormatVersion: '2010-09-09'\nDescription: VPC Network Template\nParameters:\n  SolName:\n    Type: String\n    Default: base01\n    Description: Solution Name.\n  SubSolName:\n    Type: String\n    Default: base\n    Description: Solution Name.\n  EnvName:\n    Type: String\n    Default: dev\n    Description: Env Name.\n  VPCCIDR:\n    Description: First and Second Octet of VPC, For example xxx.xxx\n    Type: String\n    Default: '10.0'\n    AllowedPattern: \"^(10\\\\.([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])|172\\\\.(1[6-9]|2[0-9]|3[0-1])|192\\\\.168)$\"\n    ConstraintDescription: xxx.xxx\nMappings:\n  StackConfig:\n    VPC:\n      CIDR: \".0.0/16\"\n    PublicSubnet1:\n      CIDR: \".0.0/24\"\n    PublicSubnet2:\n      CIDR: \".1.0/24\"\n    PrivateSubnet1:\n      CIDR: \".10.0/24\"\n    PrivateSubnet2:\n      CIDR: \".11.0/24\"\n\nResources:\n  VPC:\n    Type: AWS::EC2::VPC\n    Properties:\n      CidrBlock: !Sub\n        - ${VPCCIDR}${SubCIDR}\n        - SubCIDR: {\"Fn::FindInMap\": [ StackConfig, VPC, CIDR ]}\n      EnableDnsSupport: 'true'\n      EnableDnsHostnames: 'true'\n      InstanceTenancy: default\n      Tags:\n      - Key: Name\n        Value: !Sub INV-${EnvName}-${SolName}\n  InternetGateway:\n    Type: AWS::EC2::InternetGateway\n    Properties:\n      Tags:\n      - Key: Name\n        Value: !Sub INV-${EnvName}-${SolName}\n  AttachGateway:\n    Type: AWS::EC2::VPCGatewayAttachment\n    Properties:\n      VpcId: !Ref VPC\n      InternetGatewayId: !Ref InternetGateway\n\n  PublicSubnet1a:\n    Type: AWS::EC2::Subnet\n    DependsOn: AttachGateway\n    Properties:\n      AvailabilityZone: !Select [ 0, \"Fn::GetAZs\": {Ref: \"AWS::Region\"}]\n      CidrBlock: !Sub\n        - ${VPCCIDR}${SubCIDR}\n        - SubCIDR: {\"Fn::FindInMap\": [ StackConfig, PublicSubnet1, CIDR ]}\n      MapPublicIpOnLaunch: 'true'\n      Tags:\n      - Key: Name\n        Value: !Sub INV-${EnvName}-${SolName}-PublicSubnet1a\n      VpcId: !Ref VPC\n  PublicSubnet1c:\n    Type: AWS::EC2::Subnet\n    DependsOn: AttachGateway\n    Properties:\n      AvailabilityZone: !Select [ 1, \"Fn::GetAZs\": {Ref: \"AWS::Region\"}]\n      CidrBlock: !Sub\n        - ${VPCCIDR}${SubCIDR}\n        - SubCIDR: {\"Fn::FindInMap\": [ StackConfig, PublicSubnet2, CIDR ]}\n      MapPublicIpOnLaunch: 'true'\n      Tags:\n      - Key: Name\n        Value: !Sub INV-${EnvName}-${SolName}-PublicSubnet1c\n      VpcId: !Ref VPC\n  PrivateSubnet1a:\n    Type: AWS::EC2::Subnet\n    DependsOn: AttachGateway\n    Properties:\n      AvailabilityZone: !Select [ 0, \"Fn::GetAZs\": {Ref: \"AWS::Region\"}]\n      CidrBlock: !Sub\n        - ${VPCCIDR}${SubCIDR}\n        - SubCIDR: {\"Fn::FindInMap\": [ StackConfig, PrivateSubnet1, CIDR ]}\n      MapPublicIpOnLaunch: 'true'\n      Tags:\n      - Key: Name\n        Value: !Sub INV-${EnvName}-${SolName}-PrivateSubnet1a\n      VpcId: !Ref VPC\n  PrivateSubnet1c:\n    Type: AWS::EC2::Subnet\n    DependsOn: AttachGateway\n    Properties:\n      AvailabilityZone: !Select [ 1, \"Fn::GetAZs\": {Ref: \"AWS::Region\"}]\n      CidrBlock: !Sub\n        - ${VPCCIDR}${SubCIDR}\n        - SubCIDR: {\"Fn::FindInMap\": [ StackConfig, PrivateSubnet2, CIDR ]}\n      MapPublicIpOnLaunch: 'true'\n      Tags:\n      - Key: Name\n        Value: !Sub INV-${EnvName}-${SolName}-PrivateSubnet1c\n      VpcId: !Ref VPC\n\n  EIP1a:\n    Type: AWS::EC2::EIP\n    Properties:\n      Domain: vpc\n  NAT1a:\n    Type: AWS::EC2::NatGateway\n    Properties:\n      AllocationId:\n        Fn::GetAtt:\n          - EIP1a\n          - AllocationId\n      SubnetId: !Ref PublicSubnet1a\n      Tags:\n        - Key: Name\n          Value: !Sub INV-${EnvName}-${SolName}-NGW1a\n\n  EIP1c:\n    Type: AWS::EC2::EIP\n    Properties:\n      Domain: vpc\n  NAT1c:\n    Type: AWS::EC2::NatGateway\n    Properties:\n      AllocationId:\n        Fn::GetAtt:\n          - EIP1c\n          - AllocationId\n      SubnetId: !Ref PublicSubnet1c\n      Tags:\n        - Key: Name\n          Value: !Sub INV-${EnvName}-${SolName}-NGW1c\n\n  PublicRouteTable:\n    Type: AWS::EC2::RouteTable\n    DependsOn: AttachGateway\n    Properties:\n      VpcId: !Ref VPC\n      Tags:\n      - Key: Name\n        Value: !Sub INV-${EnvName}-${SolName}-PublicRoute\n  PublicRoute:\n    Type: AWS::EC2::Route\n    DependsOn: AttachGateway\n    Properties:\n      RouteTableId: !Ref PublicRouteTable\n      DestinationCidrBlock: 0.0.0.0/0\n      GatewayId: !Ref InternetGateway\n  PrivateRouteTable1a:\n    Type: AWS::EC2::RouteTable\n    DependsOn: NAT1a\n    Properties:\n      VpcId: !Ref VPC\n      Tags:\n      - Key: Name\n        Value: !Sub INV-${EnvName}-${SolName}-PrivateRoute1a\n  PrivateRoute1a:\n    Type: AWS::EC2::Route\n    DependsOn: NAT1a\n    Properties:\n      RouteTableId: !Ref PrivateRouteTable1a\n      DestinationCidrBlock: 0.0.0.0/0\n      NatGatewayId: !Ref NAT1a\n  PrivateRouteTable1c:\n    Type: AWS::EC2::RouteTable\n    DependsOn: NAT1c\n    Properties:\n      VpcId: !Ref VPC\n      Tags:\n      - Key: Name\n        Value: !Sub INV-${EnvName}-${SolName}-PrivateRoute1c\n  PrivateRoute1c:\n    Type: AWS::EC2::Route\n    DependsOn: NAT1c\n    Properties:\n      RouteTableId: !Ref PrivateRouteTable1c\n      DestinationCidrBlock: 0.0.0.0/0\n      NatGatewayId: !Ref NAT1c\n\n  PublicSubnet1aRouteTableAssociation:\n    Type: AWS::EC2::SubnetRouteTableAssociation\n    Properties:\n      SubnetId: !Ref PublicSubnet1a\n      RouteTableId: !Ref PublicRouteTable\n  PublicSubnet1cRouteTableAssociation:\n    Type: AWS::EC2::SubnetRouteTableAssociation\n    Properties:\n      SubnetId: !Ref PublicSubnet1c\n      RouteTableId: !Ref PublicRouteTable\n  PrivateSubnet1aRouteTableAssociation:\n    Type: AWS::EC2::SubnetRouteTableAssociation\n    Properties:\n      SubnetId: !Ref PrivateSubnet1a\n      RouteTableId: !Ref PrivateRouteTable1a\n  PrivateSubnet1cRouteTableAssociation:\n    Type: AWS::EC2::SubnetRouteTableAssociation\n    Properties:\n      SubnetId: !Ref PrivateSubnet1c\n      RouteTableId: !Ref PrivateRouteTable1c\n\n  DNS1:\n    Type: \"AWS::Route53::HostedZone\"\n    Properties:\n      HostedZoneConfig:\n        Comment: INV-LocalDomain\n      Name: internal-internavi\n      VPCs:\n        -\n          VPCId: !Ref VPC\n          VPCRegion: !Ref AWS::Region\n      HostedZoneTags:\n        -\n          Key: \"Name\"\n          Value: !Sub INV-${EnvName}-${SolName}\n\n  FlowLogBucket:\n    Type: AWS::S3::Bucket\n    Properties:\n        BucketName: !Join\n          - \"-\"\n          -\n            - inv\n            - !Ref EnvName\n            - !Ref SolName\n            - !Ref VPC\n  FlowLogBucketPolicy:\n    Type: AWS::S3::BucketPolicy\n    DependsOn: NAT1c\n    Properties:\n      Bucket: !Ref FlowLogBucket\n      PolicyDocument:\n        Statement:\n          -\n            Action:\n              - \"s3:PutObject\"\n            Effect: \"Allow\"\n            Resource:\n              Fn::Join:\n                - \"\"\n                -\n                  - \"arn:aws:s3:::\"\n                  - !Ref FlowLogBucket\n                  - \"/*\"\n            Principal:\n              Service: \"delivery.logs.amazonaws.com\"\n            Condition:\n              StringEquals:\n                s3:x-amz-acl: bucket-owner-full-control\n          -\n            Action:\n              - \"s3:GetBucketAcl\"\n            Effect: \"Allow\"\n            Resource:\n              Fn::Join:\n                - \"\"\n                -\n                  - \"arn:aws:s3:::\"\n                  - !Ref FlowLogBucket\n            Principal:\n              Service: \"delivery.logs.amazonaws.com\"\n  FlowLog:\n    Type: AWS::EC2::FlowLog\n    DependsOn: FlowLogBucketPolicy\n    Properties:\n      LogDestinationType : \"s3\"\n      LogDestination : !Join\n        - \"\"\n        -\n          - \"arn:aws:s3:::\"\n          - !Ref FlowLogBucket\n          - /FlowLogs/\n      ResourceType : VPC\n      ResourceId : !Ref VPC\n      TrafficType : ALL\n\n  S3Endpoint:\n    Type: AWS::EC2::VPCEndpoint\n    Properties:\n      RouteTableIds:\n        - !Ref PublicRouteTable\n        - !Ref PrivateRouteTable1a\n        - !Ref PrivateRouteTable1c\n      ServiceName: !Join\n        - ''\n        - - com.amazonaws.\n          - !Ref 'AWS::Region'\n          - .s3\n      VpcId: !Ref VPC\n  DynamoEndpoint:\n    Type: AWS::EC2::VPCEndpoint\n    Properties:\n      RouteTableIds:\n        - !Ref PublicRouteTable\n        - !Ref PrivateRouteTable1a\n        - !Ref PrivateRouteTable1c\n      ServiceName: !Join\n        - ''\n        - - com.amazonaws.\n          - !Ref 'AWS::Region'\n          - .dynamodb\n      VpcId: !Ref VPC\n  Certificate:\n    Type: AWS::CertificateManager::Certificate\n    Properties:\n      DomainName: !Sub '*.${EnvName}-${SubSolName}.cloud.internavi.ne.jp'\n      SubjectAlternativeNames:\n        - '*.cloud.internavi.ne.jp'\n      ValidationMethod: DNS\n\nOutputs:\n  VPC:\n    Value: !Ref VPC\n    Export:\n      Name: VPC\n  PublicSubnet1a:\n    Value: !Ref PublicSubnet1a\n    Export:\n      Name: PublicSubnet1a\n  PublicSubnet1c:\n    Value: !Ref PublicSubnet1c\n    Export:\n      Name: PublicSubnet1c\n  PrivateSubnet1a:\n    Value: !Ref PrivateSubnet1a\n    Export:\n      Name: PrivateSubnet1a\n  PrivateSubnet1c:\n    Value: !Ref PrivateSubnet1c\n    Export:\n      Name: PrivateSubnet1c\n  PublicRouteTable:\n    Value: !Ref PublicRouteTable\n    Export:\n      Name: PublicRouteTable\n  PrivateRouteTable1a:\n    Value: !Ref PrivateRouteTable1a\n    Export:\n      Name: PrivateRouteTable1a\n  PrivateRouteTable1c:\n    Value: !Ref PrivateRouteTable1c\n    Export:\n      Name: PrivateRouteTable1c\n  DNS1:\n    Value: !Ref DNS1\n    Export:\n      Name: DNS1\n"
}
INV-ver-esp01-codecommit-ecr
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: codecommit and ecr\n\nParameters:\n  accountAllias:\n    Type: String\n  accountAlliasLowerCase:\n    Type: String\n\n\nResources:\n  codecommit:\n    Type: AWS::CodeCommit::Repository\n    Properties:\n      RepositoryName: !Sub ${accountAllias}-codecommit\n      RepositoryDescription: !Sub ${accountAllias}-codecommit\n  codecommitcfn:\n    Type: AWS::CodeCommit::Repository\n    Properties:\n      RepositoryName: !Sub ${accountAllias}-cfn\n      RepositoryDescription: !Sub ${accountAllias}-cfn\n  ecr:\n    Type: AWS::ECR::Repository\n    Properties: \n      RepositoryName: !Sub ${accountAlliasLowerCase}-ecr\n\nOutputs:\n  codecommit:\n    Value: !Ref codecommit\n    Export:\n      Name: codecommit\n  codecommitcfn:\n    Value: !Ref codecommitcfn\n    Export:\n      Name: codecommitcfn\n  ecr:\n    Value: !GetAtt ecr.Arn\n    Export:\n      Name: ecr\n\n"
}
StackSet-HmAdmin-createIamRole-8a2b9f76-0724-476d-bec5-8d0c13d752b6
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "{\n  \"AWSTemplateFormatVersion\" : \"2010-09-09\",\n  \"Description\" : \"Template for Creating IAM Role to Switch from Internavi Login AWS Account\",\n  \"Parameters\" : {\n    \"TrustedAWSAccountId\" : {\n      \"AllowedPattern\" : \"^[0-9]*$\",\n      \"Type\" : \"String\",\n      \"Default\" : \"975196479634\",\n      \"Description\" : \"Trusted AWS Account ID\"\n    },\n    \"IAMRoleName\": {\n      \"Type\": \"String\",\n      \"Default\": \"HmAdmin\",\n      \"Description\": \"IAM Role Name\"\n    }\n  },\n  \"Resources\" : {\n    \"IAMRoleForEngineer\": {\n      \"Type\": \"AWS::IAM::Role\",\n      \"Properties\": {\n        \"AssumeRolePolicyDocument\": {\n          \"Version\": \"2012-10-17\",\n          \"Statement\": [\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"J0322720\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"J0116063\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JP300063\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JP310643\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JP311734\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            }\n          ]\n        },\n        \"ManagedPolicyArns\": [\n          \"arn:aws:iam::aws:policy/AdministratorAccess\"\n        ],\n        \"Path\": \"/\",\n        \"RoleName\": { \"Ref\" : \"IAMRoleName\" }\n      }\n    }\n  },\n  \"Outputs\" : {\n    \"IAMRoleArn\": {\n      \"Value\": { \"Fn::GetAtt\" : [ \"IAMRoleForEngineer\", \"Arn\" ] }\n    },\n    \"LinkForSwitchRole\": {\n      \"Value\": { \"Fn::Join\": [ \"\", [ \"https://signin.aws.amazon.com/switchrole?roleName=\", { \"Ref\" : \"IAMRoleName\" }, \"&account=\", { \"Ref\" : \"AWS::AccountId\" } ] ] }\n    }\n  }\n}\n"
}
StackSet-cm-cm-hamada-koji-iamRole-e3f74667-ad6f-4fa1-8ce6-3dc49c997837
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": {
        "AWSTemplateFormatVersion": "2010-09-09", 
        "Description": "Template for Creating IAM Role to Switch from Classmethod AWS Account", 
        "Parameters": {
            "TrustedAWSAccountId": {
                "AllowedPattern": "^[0-9]*$", 
                "Type": "String", 
                "Default": "", 
                "Description": "Trusted AWS Account ID"
            }, 
            "IAMUserName": {
                "AllowedPattern": "^cm-[a-z.]*$", 
                "Type": "String", 
                "Default": "cm-xxx.xxx", 
                "Description": "IAM Role Name"
            }
        }, 
        "Resources": {
            "IAMRoleForCmEngineer": {
                "Type": "AWS::IAM::Role", 
                "Properties": {
                    "AssumeRolePolicyDocument": {
                        "Version": "2012-10-17", 
                        "Statement": [
                            {
                                "Effect": "Allow", 
                                "Principal": {
                                    "AWS": {
                                        "Fn::Join": [
                                            "", 
                                            [
                                                "arn:aws:iam::", 
                                                {
                                                    "Ref": "TrustedAWSAccountId"
                                                }, 
                                                ":user/", 
                                                {
                                                    "Ref": "IAMUserName"
                                                }
                                            ]
                                        ]
                                    }
                                }, 
                                "Action": [
                                    "sts:AssumeRole"
                                ], 
                                "Condition": {
                                    "Bool": {
                                        "aws:MultiFactorAuthPresent": "true"
                                    }
                                }
                            }
                        ]
                    }, 
                    "ManagedPolicyArns": [
                        "arn:aws:iam::aws:policy/AdministratorAccess"
                    ], 
                    "Path": "/", 
                    "RoleName": {
                        "Ref": "IAMUserName"
                    }
                }
            }
        }, 
        "Outputs": {
            "IAMRoleArn": {
                "Value": {
                    "Fn::GetAtt": [
                        "IAMRoleForCmEngineer", 
                        "Arn"
                    ]
                }
            }, 
            "LinkForSwitchRole": {
                "Value": {
                    "Fn::Join": [
                        "", 
                        [
                            "https://signin.aws.amazon.com/switchrole?roleName=", 
                            {
                                "Ref": "IAMUserName"
                            }, 
                            "&account=", 
                            {
                                "Ref": "AWS::AccountId"
                            }
                        ]
                    ]
                }
            }
        }
    }
}
StackSetsExecutionRole
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: 2010-09-09\nDescription: Configure the AWSCloudFormationStackSetExecutionRole to support AWS CloudFormation StackSets in a managed account.\n\nParameters:\n  MasterAccountId:\n    Type: String\n    Description: AWS Account Id of the master account (the account in which StackSets will be created).\n    MaxLength: 12\n    MinLength: 12\n\nResources:\n  ExecutionRole:\n    Type: AWS::IAM::Role\n    Properties:\n      RoleName: AWSCloudFormationStackSetExecutionRole\n      AssumeRolePolicyDocument: \n        Version: 2012-10-17\n        Statement: \n          - Effect: Allow\n            Principal: \n              AWS:\n                - !Ref MasterAccountId\n            Action: \n              - sts:AssumeRole\n      Path: /\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/AdministratorAccess\n"
}
cm-kikuchi-shuji-iamRole
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": {
        "AWSTemplateFormatVersion": "2010-09-09", 
        "Description": "Template for Creating IAM Role to Switch from Classmethod AWS Account", 
        "Parameters": {
            "TrustedAWSAccountId": {
                "AllowedPattern": "^[0-9]*$", 
                "Type": "String", 
                "Default": "", 
                "Description": "Trusted AWS Account ID"
            }, 
            "IAMUserName": {
                "AllowedPattern": "^cm-[a-z.]*$", 
                "Type": "String", 
                "Default": "cm-xxx.xxx", 
                "Description": "IAM Role Name"
            }
        }, 
        "Resources": {
            "IAMRoleForCmEngineer": {
                "Type": "AWS::IAM::Role", 
                "Properties": {
                    "AssumeRolePolicyDocument": {
                        "Version": "2012-10-17", 
                        "Statement": [
                            {
                                "Effect": "Allow", 
                                "Principal": {
                                    "AWS": {
                                        "Fn::Join": [
                                            "", 
                                            [
                                                "arn:aws:iam::", 
                                                {
                                                    "Ref": "TrustedAWSAccountId"
                                                }, 
                                                ":user/", 
                                                {
                                                    "Ref": "IAMUserName"
                                                }
                                            ]
                                        ]
                                    }
                                }, 
                                "Action": [
                                    "sts:AssumeRole"
                                ], 
                                "Condition": {
                                    "Bool": {
                                        "aws:MultiFactorAuthPresent": "true"
                                    }
                                }
                            }
                        ]
                    }, 
                    "ManagedPolicyArns": [
                        "arn:aws:iam::aws:policy/AdministratorAccess"
                    ], 
                    "Path": "/", 
                    "RoleName": {
                        "Ref": "IAMUserName"
                    }
                }
            }
        }, 
        "Outputs": {
            "IAMRoleArn": {
                "Value": {
                    "Fn::GetAtt": [
                        "IAMRoleForCmEngineer", 
                        "Arn"
                    ]
                }
            }, 
            "LinkForSwitchRole": {
                "Value": {
                    "Fn::Join": [
                        "", 
                        [
                            "https://signin.aws.amazon.com/switchrole?roleName=", 
                            {
                                "Ref": "IAMUserName"
                            }, 
                            "&account=", 
                            {
                                "Ref": "AWS::AccountId"
                            }
                        ]
                    ]
                }
            }
        }
    }
}
]
スクリプトを終了します
  1- INV-ver-htc01:arn:aws:iam::686753218709:role/OpeAdminRole
  2- INV-ver-sub01:arn:aws:iam::495152581087:role/OpeAdminRole
  3- INV-ver-cer01:arn:aws:iam::339311866652:role/OpeAdminRole
  4- INV-ver-des01:arn:aws:iam::302986797475:role/OpeAdminRole
  5- INV-ver-agw01:arn:aws:iam::859823971378:role/OpeAdminRole
  6- INV-ver-vdm01:arn:aws:iam::497617980196:role/OpeAdminRole
  7- INV-ver-wfi01:arn:aws:iam::932204081418:role/OpeAdminRole
  8- INV-ver-esp01:arn:aws:iam::131000633826:role/OpeAdminRole
  9- INV-ver-rmt01:arn:aws:iam::604584103104:role/OpeAdminRole
 10- INV-ver-esw01:arn:aws:iam::170541451228:role/OpeAdminRole
 11- INV-ver-tcu01:arn:aws:iam::951453431396:role/OpeAdminRole
 12- INV-ver-vky01:arn:aws:iam::207429400733:role/OpeAdminRole
     all- All Environments:select all environments
スクリプトを実行します。
aws cloudformation describe-stacks --query Stacks[*].StackName
{
    "Account": "975196479634", 
    "UserId": "AIDA6GDR5MCJLYN4JQRFZ", 
    "Arn": "arn:aws:iam::975196479634:user/JV010028"
}
{
    "Account": "604584103104", 
    "UserId": "AROAYZRAFJTAGOORUOTYS:inv-20190702041013", 
    "Arn": "arn:aws:sts::604584103104:assumed-role/OpeAdminRole/inv-20190702041013"
}
[
inv-ver-rmt01-monitoring-lambda
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: \"2010-09-09\"\r\nDescription: \"monitoring-lambda.yml\"\r\nParameters: \r\n  EnvironmentName: \r\n    Default: ver\r\n    Description: \"Environment Name\"\r\n    Type: String\r\n  MicroServiceName: \r\n    Default: cer01\r\n    Description: \"MicroService Name\"\r\n    Type: String\r\n  S3Buckets: \r\n    Default: \"inv-ver-cer01-cfn\"\r\n    Description: \"source s3 backet name\"\r\n    Type: String\r\n  S3Prefix:\r\n    Default: \"monitor-config/\"\r\n    Description: \"source s3 backet file prefix\"\r\n    Type: String\r\n  iniFileName: \r\n    Default: \"monitor.json\"\r\n    Description: \"scenario file name\"\r\n    Type: String\r\n  scenarioSourceLogGroup:\r\n    Description: \"Scenario CWL log group name\"\r\n    Type: \"String\"\r\n  scenarioFilterPattern:\r\n    Default: \"\"\r\n    Description: \"Scenario Monitor CWL log FilterPattern\"\r\n    Type: \"String\"\r\n  programSourceLogGroup:\r\n    Description: \"program CWL log group name\"\r\n    Type: \"String\"\r\n  programFilterPattern:\r\n    Default: ?\"ERROR\" ?\"FATAL\" ?\"WARN\"\r\n    Description: \"program Monitor CWL log FilterPattern\"\r\n    Type: \"String\"\r\nResources:\r\n  IAMRole:\r\n    Type: \"AWS::IAM::Role\"\r\n    Properties: \r\n      AssumeRolePolicyDocument: \r\n        Version: \"2012-10-17\"\r\n        Statement: \r\n          - Effect: Allow\r\n            Principal: \r\n              Service: \"lambda.amazonaws.com\"\r\n            Action: \"sts:AssumeRole\"\r\n      ManagedPolicyArns: \r\n        - \"arn:aws:iam::aws:policy/AmazonSNSFullAccess\"\r\n      Path: \"/\"\r\n      Policies:\r\n        - PolicyName: monitor_lambda_policy\r\n          PolicyDocument:\r\n            Version: '2012-10-17'\r\n            Statement:\r\n              - Effect: Allow\r\n                Action:\r\n                  - cloudwatch:*\r\n                  - logs:*\r\n                  - s3:Get*\r\n                  - s3:List*\r\n                Resource: \"*\"\r\n      RoleName: !Sub inv-${EnvironmentName}-${MicroServiceName}-monitoring-lambda-role\r\n  LambdaLayer:\r\n    Type: \"AWS::Lambda::LayerVersion\"\r\n    Properties:\r\n      CompatibleRuntimes: \r\n        - python3.6\r\n      Content: \r\n        S3Bucket:\r\n          Ref: S3Buckets\r\n        S3Key: CloudwatchAlarm/metrics_mod.zip\r\n      Description: \"monitor_lambda_modules\"\r\n      LayerName: monitor_module\r\n  LambdaFunction: \r\n    DependsOn: \r\n      - IAMRole\r\n    Type: \"AWS::Lambda::Function\"\r\n    Properties: \r\n      Code: \r\n        S3Bucket: \r\n          Ref: S3Buckets\r\n        S3Key: CloudwatchAlarm/monitoring_common_lambda_src.zip           \r\n      FunctionName: !Sub inv-${EnvironmentName}-${MicroServiceName}-monitoring_common_lambda\r\n      Handler: lambda_function.lambda_handler\r\n      Environment: \r\n        Variables: \r\n          ENV: \r\n            Ref: EnvironmentName\r\n          STG: \r\n            Ref: MicroServiceName\r\n          fileName:\r\n            Ref: iniFileName\r\n          s3Bucket:\r\n            Ref: S3Buckets\r\n          s3keyPrefix:\r\n            Ref: S3Prefix\r\n      Role: \r\n        \"Fn::GetAtt\": \r\n          - IAMRole\r\n          - Arn\r\n      Runtime: \"python3.6\"\r\n      MemorySize: 512\r\n      Timeout: 300\r\n      Layers:\r\n        - !Ref LambdaLayer\r\n  LambdaPermission: \r\n    Type: \"AWS::Lambda::Permission\"\r\n    Properties: \r\n      Action: \"lambda:InvokeFunction\"\r\n      FunctionName: \r\n        \"Fn::GetAtt\": \r\n          - LambdaFunction\r\n          - Arn\r\n      Principal: !Sub \"sns.amazonaws.com\"\r\n      SourceArn: !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:inv-${EnvironmentName}-${MicroServiceName}\r\n  ScenarioSubscriptionFilter:\r\n    DependsOn:\r\n      - ScenarioLambdaInvokePermission\r\n    Type: \"AWS::Logs::SubscriptionFilter\"\r\n    Properties:\r\n      LogGroupName: !Ref scenarioSourceLogGroup\r\n      FilterPattern: !Ref scenarioFilterPattern\r\n      DestinationArn: !Join\r\n        - ''\r\n        - - !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:'\r\n          - !Sub inv-${EnvironmentName}-${MicroServiceName}-monitoring_common_lambda\r\n  ScenarioLambdaInvokePermission:\r\n    Type: 'AWS::Lambda::Permission'\r\n    Properties:\r\n      FunctionName:\r\n        \"Fn::GetAtt\": \r\n          - LambdaFunction\r\n          - Arn\r\n      Action: \"lambda:InvokeFunction\"\r\n      Principal: !Sub \"logs.amazonaws.com\"\r\n      SourceAccount: !Ref AWS::AccountId\r\n      SourceArn: !Sub \"arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${scenarioSourceLogGroup}:*\"\r\n  ProgramSubscriptionFilter:\r\n    DependsOn:\r\n      - ProgramLambdaInvokePermission\r\n    Type: \"AWS::Logs::SubscriptionFilter\"\r\n    Properties:\r\n      LogGroupName: !Ref programSourceLogGroup\r\n      FilterPattern: !Ref programFilterPattern\r\n      DestinationArn: !Join\r\n        - ''\r\n        - - !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:'\r\n          - !Sub inv-${EnvironmentName}-${MicroServiceName}-monitoring_common_lambda\r\n  ProgramLambdaInvokePermission:\r\n    Type: 'AWS::Lambda::Permission'\r\n    Properties:\r\n      FunctionName:\r\n        \"Fn::GetAtt\": \r\n          - LambdaFunction\r\n          - Arn\r\n      Action: \"lambda:InvokeFunction\"\r\n      Principal: !Sub \"logs.amazonaws.com\"\r\n      SourceAccount: !Ref AWS::AccountId\r\n      SourceArn: !Sub \"arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${programSourceLogGroup}:*\"\r\nOutputs: \r\n  IAMRole: \r\n    Description: \"IAM Role Name\"\r\n    Value: \r\n      Ref: IAMRole\r\n  SNSTopic: \r\n    Description: \"SNS Topic Name\"\r\n    Value: \r\n      !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:inv-${EnvironmentName}-${MicroServiceName}\r\n  LambdaFunction: \r\n    Description: \"Lambda Function Name\"\r\n    Value: \r\n      Ref: LambdaFunction"
}
enable-guardduty
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: 2010-09-09\nDescription:\n  \"enable guardduty\"\nResources:\n  GDD:\n    Type: \"AWS::GuardDuty::Detector\"\n    Properties:\n      Enable: true"
}
INV-ver-rmt01-manage-metrics-alarm
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: \"2010-09-09\"\r\nDescription: \"create_metrics_alarm.yaml\"\r\nParameters:\r\n  EnvironmentName:\r\n    Default: \"ver\"\r\n    Description: \"EnvironmentName\"\r\n    Type: String\r\n  MicroServiceName: \r\n    Default: \"cer01\"\r\n    Description: \"MicroServiceName\"\r\n    Type: String\r\n  s3keyprefix: \r\n    Default: \"_manage_metrics_alarm.xlsx\"\r\n    Description: \"excel s3 keys prefix\"\r\n    Type: String\r\n  S3Buckets: \r\n    Default: \"inv-ver-cer01-cfn\"\r\n    Description: \"source s3 backet name\"\r\n    Type: String\r\nResources: \r\n  IAMRole: \r\n    Type: \"AWS::IAM::Role\"\r\n    Properties: \r\n      AssumeRolePolicyDocument: \r\n        Version: \"2012-10-17\"\r\n        Statement: \r\n          - Effect: Allow\r\n            Principal: \r\n              Service: \"lambda.amazonaws.com\"\r\n            Action: \"sts:AssumeRole\"\r\n      ManagedPolicyArns: \r\n        - \"arn:aws:iam::aws:policy/AmazonS3FullAccess\"\r\n      Path: \"/\"\r\n      Policies:\r\n        - PolicyName: manage_metrics_alarm_lambda_policy\r\n          PolicyDocument:\r\n            Version: '2012-10-17'\r\n            Statement:\r\n              - Effect: Allow\r\n                Action:\r\n                  - cloudwatch:*\r\n                  - logs:*\r\n                Resource: \"*\"\r\n      RoleName: !Sub inv-${EnvironmentName}-${MicroServiceName}-manage-metrics-alarm-lambda-role\r\n  LambdaLayer:\r\n    Type: \"AWS::Lambda::LayerVersion\"\r\n    Properties:\r\n      CompatibleRuntimes: \r\n        - python3.6\r\n      Content: \r\n        S3Bucket:\r\n          Ref: S3Buckets\r\n        S3Key: CloudwatchAlarm/metrics_mod.zip\r\n      Description: \"manage_cloudwatch metrics alarm modules\"\r\n      LayerName: metrics_module\r\n  LambdaFunction: \r\n    DependsOn: \r\n      - IAMRole\r\n    Type: \"AWS::Lambda::Function\"\r\n    Properties: \r\n      Code: \r\n        S3Bucket: \r\n          Ref: S3Buckets\r\n        S3Key: CloudwatchAlarm/manage_metrics_alarm_src.zip\r\n      FunctionName: !Sub inv-${EnvironmentName}-${MicroServiceName}-manage-metrics-alarm-lambda\r\n      Handler: lambda_function.lambda_handler\r\n      Environment: \r\n        Variables: \r\n          fileprefix: \r\n            Ref: s3keyprefix\r\n          s3Bucket: !Sub inv-${EnvironmentName}-${MicroServiceName}-manage-metrics-alarm\r\n      Role: \r\n        \"Fn::GetAtt\": \r\n          - IAMRole\r\n          - Arn\r\n      Runtime: \"python3.6\"\r\n      MemorySize: 512\r\n      Timeout: 300\r\n      Layers:\r\n        - !Ref LambdaLayer\r\n  LambdaPermission: \r\n    Type: \"AWS::Lambda::Permission\"\r\n    Properties: \r\n      Action: \"lambda:InvokeFunction\"\r\n      FunctionName: \r\n        \"Fn::GetAtt\": \r\n          - LambdaFunction\r\n          - Arn\r\n      Principal: s3.amazonaws.com\r\n      SourceAccount: !Ref 'AWS::AccountId'\r\n      SourceArn: !Join\r\n        - ''\r\n        - - 'arn:aws:s3:::'\r\n          - !Sub inv-${EnvironmentName}-${MicroServiceName}-manage-metrics-alarm\r\n  S3Bucket:\r\n    Type: \"AWS::S3::Bucket\"\r\n    DependsOn: \r\n      - LambdaPermission\r\n    Properties:\r\n      BucketName: !Sub inv-${EnvironmentName}-${MicroServiceName}-manage-metrics-alarm\r\n      AccessControl: Private\r\n      PublicAccessBlockConfiguration:\r\n        BlockPublicAcls: True\r\n        BlockPublicPolicy: True\r\n        IgnorePublicAcls: True\r\n        RestrictPublicBuckets: True\r\n      NotificationConfiguration:\r\n        LambdaConfigurations:\r\n          - Event: \"s3:ObjectCreated:*\"\r\n            Filter:\r\n              S3Key:\r\n                Rules:\r\n                  - Name: suffix\r\n                    Value: xlsx\r\n            Function: !GetAtt\r\n              - LambdaFunction\r\n              - Arn\r\n  S3BucketPolicy:\r\n    Type: AWS::S3::BucketPolicy\r\n    Properties: \r\n      Bucket: \r\n        Ref: \"S3Bucket\"\r\n      PolicyDocument: \r\n        Version: \"2012-10-17\"\r\n        Statement: \r\n          - \r\n            Action: \r\n              - \"s3:GetObject\"\r\n            Effect: \"Allow\"\r\n            Resource: \r\n              Fn::Join: \r\n                - \"\"\r\n                - \r\n                  - \"arn:aws:s3:::\"\r\n                  - \r\n                    Ref: \"S3Bucket\"\r\n                  - \"/*\"\r\n            Principal: \r\n              AWS:\r\n                Fn::Join:\r\n                  - \"\"\r\n                  - \r\n                    - \"arn:aws:iam::\"\r\n                    - Ref: \"AWS::AccountId\"\r\n                    - \":root\"\r\nOutputs: \r\n  IAMRole: \r\n    Description: \"IAM Role Name\"\r\n    Value: \r\n      Ref: IAMRole\r\n  S3BucketName:\r\n    Value:\r\n      Ref S3BucketName\r\n  LambdaFunction: \r\n    Description: \"Lambda Function Name\"\r\n    Value: \r\n      Ref: LambdaFunction"
}
INV-ver-rmt01-web-codepipeline-ver
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: codepipeline\n\n# ------------------------------------------------------------#\n#  Parameters\n# ------------------------------------------------------------#\nParameters:\n  accountAllias:\n    Type: String\n  accountAlliasLowerCase:\n    Type: String\n  appName:\n    Type: String\n\nResources:\n# ------------------------------------------------------------#\n#  Role\n# ------------------------------------------------------------#\n  webCodeBuildRoleVer:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement:\n          - Effect: \"Allow\"\n            Principal:\n              Service:\n                - \"codebuild.amazonaws.com\"\n            Action:\n              - \"sts:AssumeRole\"\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess\n        - arn:aws:iam::aws:policy/AmazonS3FullAccess\n        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess\n  webCodePipelineRoleVer:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement:\n          - Effect: \"Allow\"\n            Principal:\n              Service:\n                - \"codepipeline.amazonaws.com\"\n            Action:\n              - \"sts:AssumeRole\"\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess\n        - arn:aws:iam::aws:policy/AWSCodeCommitFullAccess\n        - arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess\n        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess\n        - arn:aws:iam::aws:policy/AmazonS3FullAccess\n        - arn:aws:iam::aws:policy/CloudWatchFullAccess\n        - arn:aws:iam::aws:policy/AmazonEC2ContainerServiceFullAccess\n\n# ------------------------------------------------------------#\n#  CodeBuild\n# ------------------------------------------------------------#\n  webCodeBuildProjectVer:\n    Type: AWS::CodeBuild::Project\n    Properties:\n      Name: !Sub ${accountAlliasLowerCase}-${appName}-build-project-ver\n      Artifacts:\n        Type: CODEPIPELINE\n      Description: !Sub Building stage for ${accountAlliasLowerCase}-ver\n      Environment:\n        ComputeType: BUILD_GENERAL1_SMALL\n        EnvironmentVariables:\n          - Name: AWS_ACCOUNT_ID\n            Value: !Ref AWS::AccountId\n          - Name: IMAGE_NAME_nginx\n            Value: !Sub ${accountAlliasLowerCase}-${appName}-nginx-ecr\n          - Name: CONTAINER_NAME_nginx\n            Value: !Sub ${accountAlliasLowerCase}-${appName}-nginx-container\n          - Name: IMAGE_NAME_php\n            Value: !Sub ${accountAlliasLowerCase}-${appName}-php-ecr\n          - Name: CONTAINER_NAME_php\n            Value: !Sub ${accountAlliasLowerCase}-${appName}-php-container\n        Image: aws/codebuild/docker:18.09.0\n        Type: LINUX_CONTAINER\n        PrivilegedMode: True\n      ServiceRole: !Ref webCodeBuildRoleVer\n      Source:\n        Type: CODEPIPELINE\n        BuildSpec: |\n          version: 0.2\n          phases:\n            build:\n              commands:\n                - REPOSITORY_URI_NGINX=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_NAME_nginx}\n                - REPOSITORY_URI_PHP=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_NAME_php}\n                - IMAGE_TAG=latest\n                - echo \"[{\\\"name\\\":\\\"${CONTAINER_NAME_nginx}\\\",\\\"imageUri\\\":\\\"${REPOSITORY_URI_NGINX}:${IMAGE_TAG}\\\"}, {\\\"name\\\":\\\"${CONTAINER_NAME_php}\\\",\\\"imageUri\\\":\\\"${REPOSITORY_URI_PHP}:${IMAGE_TAG}\\\"}]\"\n                - echo \"[{\\\"name\\\":\\\"${CONTAINER_NAME_nginx}\\\",\\\"imageUri\\\":\\\"${REPOSITORY_URI_NGINX}:${IMAGE_TAG}\\\"}, {\\\"name\\\":\\\"${CONTAINER_NAME_php}\\\",\\\"imageUri\\\":\\\"${REPOSITORY_URI_PHP}:${IMAGE_TAG}\\\"}]\" > imagedefinitions.json\n          artifacts:\n              files:\n                - imagedefinitions.json\n      TimeoutInMinutes: 30\n# ------------------------------------------------------------#\n#  S3\n# ------------------------------------------------------------#\n  webS3bucketforcodepipelineVer:\n    Type: AWS::S3::Bucket\n    Properties:\n      BucketName: !Sub ${accountAlliasLowerCase}-${appName}-codepipeline-ver\n# ------------------------------------------------------------#\n#  CodePipeline\n# ------------------------------------------------------------#\n  webCodePipelineVer:\n    Type: AWS::CodePipeline::Pipeline\n    DependsOn: webS3bucketforcodepipelineVer\n    Properties:\n      ArtifactStore:\n        Location: !Ref webS3bucketforcodepipelineVer\n        Type: S3\n      Name: !Sub ${accountAlliasLowerCase}-${appName}-codepipeline-ver\n      RestartExecutionOnUpdate: false\n      RoleArn: !GetAtt webCodePipelineRoleVer.Arn\n      Stages:\n        - Name: Source\n          Actions:\n            - Name: SourceAction\n              ActionTypeId:\n                Category: Source\n                Owner: AWS\n                Provider: ECR\n                Version: 1\n              OutputArtifacts:\n                - Name: SourceArtifact\n              Configuration:\n                RepositoryName: !Sub ${accountAlliasLowerCase}-${appName}-php-ecr\n              RunOrder: 1\n        - Name: Build\n          Actions:\n            - Name: CodeBuild\n              InputArtifacts:\n                - Name: SourceArtifact\n              ActionTypeId:\n                Category: Build\n                Owner: AWS\n                Provider: CodeBuild\n                Version: 1\n              Configuration:\n                ProjectName: !Ref webCodeBuildProjectVer\n              OutputArtifacts:\n                - Name: CodebuildOutput\n              RunOrder: 1\n        - Name: Staging\n          Actions:\n            - Name: Deploy2ApiService\n              InputArtifacts:\n                - Name: CodebuildOutput\n              ActionTypeId:\n                Category: Deploy\n                Owner: AWS\n                Provider: ECS\n                Version: 1\n              Configuration:\n                ClusterName: !ImportValue cluster\n                FileName: imagedefinitions.json\n                ServiceName: !ImportValue WebService\n              OutputArtifacts: []\n              RunOrder: 1\n# ------------------------------------------------------------#\n#  CloudWatch Event\n# ------------------------------------------------------------#\n  webCloudWatchEventRoleVer:\n    Type: 'AWS::IAM::Role'\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service:\n                - events.amazonaws.com\n            Action: 'sts:AssumeRole'\n      Path: /\n      Policies:\n        - PolicyName: cwe-pipeline-execution\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Effect: Allow\n                Action: 'codepipeline:StartPipelineExecution'\n                Resource: !Join\n                  - ''\n                  - - 'arn:aws:codepipeline:'\n                    - !Ref 'AWS::Region'\n                    - ':'\n                    - !Ref 'AWS::AccountId'\n                    - ':'\n                    - !Ref webCodePipelineVer\n  webCloudwatchEventsRuleVer:\n    Type: AWS::Events::Rule\n    Properties:\n      EventPattern:\n        source:\n          - aws.ecr\n        detail:\n          eventName:\n            - PutImage\n          requestParameters:\n            repositoryName:\n              - !Sub ${accountAlliasLowerCase}-${appName}-nginx-ecr\n            imageTag:\n              - latest\n      Targets:\n        - Arn:  !Join\n          - ''\n          - - 'arn:aws:codepipeline:'\n            - !Ref 'AWS::Region'\n            - ':'\n            - !Ref 'AWS::AccountId'\n            - ':'\n            - !Ref webCodePipelineVer\n          Id: !Sub ${accountAlliasLowerCase}-${appName}-codepipeline-ver\n          RoleArn: !GetAtt webCloudWatchEventRoleVer.Arn\n\n# ------------------------------------------------------------#\n#  Outputs\n# ------------------------------------------------------------#\nOutputs:\n  webCodeBuildRoleVer:\n    Value: !Ref webCodeBuildRoleVer\n    Export:\n      Name: webCodeBuildRoleVer\n  webCodePipelineRoleVer:\n    Value: !Ref webCodePipelineRoleVer\n    Export:\n      Name: webCodePipelineRoleVer\n  webCodeBuildProjectVer:\n    Value: !Ref webCodeBuildProjectVer\n    Export:\n      Name: webCodeBuildProjectVer\n  webS3bucketforcodepipelineVer:\n    Value: !Ref webS3bucketforcodepipelineVer\n    Export:\n      Name: webS3bucketforcodepipelineVer\n  webCodePipelineVer:\n    Value: !Ref webCodePipelineVer\n    Export:\n      Name: webCodePipelineVer\n  webCloudWatchEventRoleVer:\n    Value: !Ref webCloudWatchEventRoleVer\n    Export:\n      Name: webCloudWatchEventRoleVer\n  webCloudwatchEventsRuleVer:\n    Value: !Ref webCloudwatchEventsRuleVer\n    Export:\n      Name: webCloudwatchEventsRuleVer\n"
}
INV-ver-rmt01-pub-api-codepipeline-ver
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: codepipeline\n\n# ------------------------------------------------------------#\n#  Parameters\n# ------------------------------------------------------------#\nParameters:\n  accountAllias:\n    Type: String\n  accountAlliasLowerCase:\n    Type: String\n  appName:\n    Type: String\n\nResources:\n# ------------------------------------------------------------#\n#  Role\n# ------------------------------------------------------------#\n  pubApiCodeBuildRoleVer:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement:\n          - Effect: \"Allow\"\n            Principal:\n              Service:\n                - \"codebuild.amazonaws.com\"\n            Action:\n              - \"sts:AssumeRole\"\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess\n        - arn:aws:iam::aws:policy/AmazonS3FullAccess\n        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess\n  pubApiCodePipelineRoleVer:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement:\n          - Effect: \"Allow\"\n            Principal:\n              Service:\n                - \"codepipeline.amazonaws.com\"\n            Action:\n              - \"sts:AssumeRole\"\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess\n        - arn:aws:iam::aws:policy/AWSCodeCommitFullAccess\n        - arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess\n        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess\n        - arn:aws:iam::aws:policy/AmazonS3FullAccess\n        - arn:aws:iam::aws:policy/CloudWatchFullAccess\n        - arn:aws:iam::aws:policy/AmazonEC2ContainerServiceFullAccess\n\n# ------------------------------------------------------------#\n#  CodeBuild\n# ------------------------------------------------------------#\n  pubApiCodeBuildProjectVer:\n    Type: AWS::CodeBuild::Project\n    Properties:\n      Name: !Sub ${accountAlliasLowerCase}-${appName}-build-project-ver\n      Artifacts:\n        Type: CODEPIPELINE\n      Description: !Sub Building stage for ${accountAlliasLowerCase}-ver\n      Environment:\n        ComputeType: BUILD_GENERAL1_SMALL\n        EnvironmentVariables:\n          - Name: AWS_ACCOUNT_ID\n            Value: !Ref AWS::AccountId\n          - Name: IMAGE_NAME_nginx\n            Value: !Sub ${accountAlliasLowerCase}-${appName}-nginx-ecr\n          - Name: CONTAINER_NAME_nginx\n            Value: !Sub ${accountAlliasLowerCase}-${appName}-nginx-container\n          - Name: IMAGE_NAME_php\n            Value: !Sub ${accountAlliasLowerCase}-${appName}-php-ecr\n          - Name: CONTAINER_NAME_php\n            Value: !Sub ${accountAlliasLowerCase}-${appName}-php-container\n        Image: aws/codebuild/docker:18.09.0\n        Type: LINUX_CONTAINER\n        PrivilegedMode: True\n      ServiceRole: !Ref pubApiCodeBuildRoleVer\n      Source:\n        Type: CODEPIPELINE\n        BuildSpec: |\n          version: 0.2\n          phases:\n            build:\n              commands:\n                - REPOSITORY_URI_NGINX=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_NAME_nginx}\n                - REPOSITORY_URI_PHP=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_NAME_php}\n                - IMAGE_TAG=latest\n                - echo \"[{\\\"name\\\":\\\"${CONTAINER_NAME_nginx}\\\",\\\"imageUri\\\":\\\"${REPOSITORY_URI_NGINX}:${IMAGE_TAG}\\\"}, {\\\"name\\\":\\\"${CONTAINER_NAME_php}\\\",\\\"imageUri\\\":\\\"${REPOSITORY_URI_PHP}:${IMAGE_TAG}\\\"}]\"\n                - echo \"[{\\\"name\\\":\\\"${CONTAINER_NAME_nginx}\\\",\\\"imageUri\\\":\\\"${REPOSITORY_URI_NGINX}:${IMAGE_TAG}\\\"}, {\\\"name\\\":\\\"${CONTAINER_NAME_php}\\\",\\\"imageUri\\\":\\\"${REPOSITORY_URI_PHP}:${IMAGE_TAG}\\\"}]\" > imagedefinitions.json\n          artifacts:\n              files:\n                - imagedefinitions.json\n      TimeoutInMinutes: 30\n# ------------------------------------------------------------#\n#  S3\n# ------------------------------------------------------------#\n  pubApiS3bucketforcodepipelineVer:\n    Type: AWS::S3::Bucket\n    Properties:\n      BucketName: !Sub ${accountAlliasLowerCase}-${appName}-codepipeline-ver\n# ------------------------------------------------------------#\n#  CodePipeline\n# ------------------------------------------------------------#\n  pubApiCodePipelineVer:\n    Type: AWS::CodePipeline::Pipeline\n    DependsOn: pubApiS3bucketforcodepipelineVer\n    Properties:\n      ArtifactStore:\n        Location: !Ref pubApiS3bucketforcodepipelineVer\n        Type: S3\n      Name: !Sub ${accountAlliasLowerCase}-${appName}-codepipeline-ver\n      RestartExecutionOnUpdate: false\n      RoleArn: !GetAtt pubApiCodePipelineRoleVer.Arn\n      Stages:\n        - Name: Source\n          Actions:\n            - Name: SourceAction\n              ActionTypeId:\n                Category: Source\n                Owner: AWS\n                Provider: ECR\n                Version: 1\n              OutputArtifacts:\n                - Name: SourceArtifact\n              Configuration:\n                RepositoryName: !Sub ${accountAlliasLowerCase}-${appName}-php-ecr\n              RunOrder: 1\n        - Name: Build\n          Actions:\n            - Name: CodeBuild\n              InputArtifacts:\n                - Name: SourceArtifact\n              ActionTypeId:\n                Category: Build\n                Owner: AWS\n                Provider: CodeBuild\n                Version: 1\n              Configuration:\n                ProjectName: !Ref pubApiCodeBuildProjectVer\n              OutputArtifacts:\n                - Name: CodebuildOutput\n              RunOrder: 1\n        - Name: Staging\n          Actions:\n            - Name: Deploy2ApiService\n              InputArtifacts:\n                - Name: CodebuildOutput\n              ActionTypeId:\n                Category: Deploy\n                Owner: AWS\n                Provider: ECS\n                Version: 1\n              Configuration:\n                ClusterName: !ImportValue cluster\n                FileName: imagedefinitions.json\n                ServiceName: !ImportValue PubApiService\n              OutputArtifacts: []\n              RunOrder: 1\n# ------------------------------------------------------------#\n#  CloudWatch Event\n# ------------------------------------------------------------#\n  pubApiCloudWatchEventRoleVer:\n    Type: 'AWS::IAM::Role'\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service:\n                - events.amazonaws.com\n            Action: 'sts:AssumeRole'\n      Path: /\n      Policies:\n        - PolicyName: cwe-pipeline-execution\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Effect: Allow\n                Action: 'codepipeline:StartPipelineExecution'\n                Resource: !Join\n                  - ''\n                  - - 'arn:aws:codepipeline:'\n                    - !Ref 'AWS::Region'\n                    - ':'\n                    - !Ref 'AWS::AccountId'\n                    - ':'\n                    - !Ref pubApiCodePipelineVer\n  pubApiCloudwatchEventsRuleVer:\n    Type: AWS::Events::Rule\n    Properties:\n      EventPattern:\n        source:\n          - aws.ecr\n        detail:\n          eventName:\n            - PutImage\n          requestParameters:\n            repositoryName:\n              - !Sub ${accountAlliasLowerCase}-${appName}-nginx-ecr\n            imageTag:\n              - latest\n      Targets:\n        - Arn:  !Join\n          - ''\n          - - 'arn:aws:codepipeline:'\n            - !Ref 'AWS::Region'\n            - ':'\n            - !Ref 'AWS::AccountId'\n            - ':'\n            - !Ref pubApiCodePipelineVer\n          Id: !Sub ${accountAlliasLowerCase}-${appName}-codepipeline-ver\n          RoleArn: !GetAtt pubApiCloudWatchEventRoleVer.Arn\n\n# ------------------------------------------------------------#\n#  Outputs\n# ------------------------------------------------------------#\nOutputs:\n  pubApiCodeBuildRoleVer:\n    Value: !Ref pubApiCodeBuildRoleVer\n    Export:\n      Name: pubApiCodeBuildRoleVer\n  pubApiCodePipelineRoleVer:\n    Value: !Ref pubApiCodePipelineRoleVer\n    Export:\n      Name: pubApiCodePipelineRoleVer\n  pubApiCodeBuildProjectVer:\n    Value: !Ref pubApiCodeBuildProjectVer\n    Export:\n      Name: pubApiCodeBuildProjectVer\n  pubApiS3bucketforcodepipelineVer:\n    Value: !Ref pubApiS3bucketforcodepipelineVer\n    Export:\n      Name: pubApiS3bucketforcodepipelineVer\n  pubApiCodePipelineVer:\n    Value: !Ref pubApiCodePipelineVer\n    Export:\n      Name: pubApiCodePipelineVer\n  pubApiCloudWatchEventRoleVer:\n    Value: !Ref pubApiCloudWatchEventRoleVer\n    Export:\n      Name: pubApiCloudWatchEventRoleVer\n  pubApiCloudwatchEventsRuleVer:\n    Value: !Ref pubApiCloudwatchEventsRuleVer\n    Export:\n      Name: pubApiCloudwatchEventsRuleVer\n"
}
inv-ver-rmt01-web-service
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: internal ecs service\n\nParameters:\n  accountAlias:\n    Type: String\n  accountAliasLowerCase:\n    Type: String\n  desiredCount:\n    Type: Number\n  taskDefinition:\n    Type: String\n  appName:\n    Type: String\n  appNamePascalCase:\n    Type: String\n  targetGroup:\n    Type: String\n  securityGroup:\n    Type: String\n\nResources:\n  service:\n    Type: AWS::ECS::Service\n    Properties:\n      Cluster: !ImportValue cluster\n      DeploymentConfiguration:\n        MaximumPercent: 200\n        MinimumHealthyPercent: 50\n      DesiredCount: !Ref desiredCount\n      LaunchType: FARGATE\n      LoadBalancers:\n        - ContainerName: !Sub ${accountAliasLowerCase}-${appName}-nginx-container\n          ContainerPort: 80\n          TargetGroupArn:\n            Fn::ImportValue: !Sub ${targetGroup}\n      NetworkConfiguration:\n        AwsvpcConfiguration:\n          AssignPublicIp: DISABLED\n          SecurityGroups:\n            - Fn::ImportValue: !Sub ${securityGroup}\n          Subnets:\n            - !ImportValue PrivateSubnet1a\n            - !ImportValue PrivateSubnet1c\n      ServiceName: !Sub ${accountAliasLowerCase}-${appName}-service\n      TaskDefinition: !Sub ${taskDefinition}\n\nOutputs:\n  service:\n    Value: !Ref service\n    Export:\n      Name: !Sub ${appNamePascalCase}Service\n"
}
inv-ver-rmt01-web-securitygroup
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: securitygroup\n\nParameters:\n  accountAlias:\n    Type: String\n  appName:\n    Type: String\n  accountAliasLowerCase:\n    Type: String\n  internalSecurityGroupCidr:\n    Type: String\n  appNamePascalCase:\n    Type: String\n  rdsSgId:\n    Type: String\n\nResources:\n  internalApplicationSecuritygroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupName: !Sub ${accountAliasLowerCase}-internal-${appName}-sg\n      GroupDescription: !Sub ${accountAliasLowerCase}-internal-${appName}-sg\n      Tags:\n        - Key: Name\n          Value: !Sub ${accountAliasLowerCase}-internal-${appName}-sg\n      VpcId: !ImportValue VPC\n      SecurityGroupIngress:\n      - IpProtocol: tcp\n        FromPort: '80'\n        ToPort: '80'\n        CidrIp: !Ref internalSecurityGroupCidr\n  internalApplicationSgAuroraDbAccessIngress:\n    Type: 'AWS::EC2::SecurityGroupIngress'\n    Properties:\n      IpProtocol: tcp\n      FromPort: '3306'\n      ToPort: '3306'\n      SourceSecurityGroupId: !Ref internalApplicationSecuritygroup\n      GroupId: !Sub ${rdsSgId}\nOutputs:\n  internalApplicationSecuritygroup:\n    Value: !Ref internalApplicationSecuritygroup\n    Export:\n      Name: !Sub internal${appNamePascalCase}Securitygroup\n"
}
inv-ver-rmt01-web-task-role
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: ecs task definition role\n\nParameters:\n  accountAlias:\n    Type: String\n  appNamePascalCase:\n    Type: String\n  appName:\n    Type: String\n\nResources:\n  ecsTaskExecutionRole:\n    Type: AWS::IAM::Role\n    Properties:\n      RoleName : !Sub ${accountAlias}-${appName}-ecsTaskExecutionRole\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement:\n          - Effect: \"Allow\"\n            Principal:\n              Service:\n                - \"ecs-tasks.amazonaws.com\"\n            Action:\n              - \"sts:AssumeRole\"\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy\n        - arn:aws:iam::aws:policy/AmazonS3FullAccess\n        - arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess\nOutputs:\n  ecsTaskExecutionRole:\n    Value: !Ref ecsTaskExecutionRole\n    Export:\n      Name: !Sub ecsTaskExecutionRole${appNamePascalCase}"
}
inv-ver-rmt01-web-ecs-loggroup
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: ecs and loggroup\n\nParameters:\n  accountAlias:\n    Type: String\n  accountAliasLowerCase:\n    Type: String\n  logGroupName:\n    Type: String\n  appNamePascalCase:\n    Type: String\n\nResources:\n  logGroup:\n    Type: AWS::Logs::LogGroup\n    Properties:\n      LogGroupName: !Ref logGroupName\n\nOutputs:\n  logGroup:\n    Value: !Ref logGroup\n    Export:\n      Name: !Sub logGroup${appNamePascalCase}"
}
inv-ver-rmt01-web-ecr
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: codecommit and ecr\n\nParameters:\n  accountAlias:\n    Type: String\n  accountAliasLowerCase:\n    Type: String\n  appName:\n    Type: String\n  appNamePascalCase:\n    Type: String\n\n\nResources:\n  ecrNginx:\n    Type: AWS::ECR::Repository\n    Properties:\n      RepositoryName: !Sub ${accountAliasLowerCase}-${appName}-nginx-ecr\n  ecrPhp:\n    Type: AWS::ECR::Repository\n    Properties:\n      RepositoryName: !Sub ${accountAliasLowerCase}-${appName}-php-ecr\n\nOutputs:\n  ecrNginx:\n    Value: !GetAtt ecrNginx.Arn\n    Export:\n      Name: !Sub ecr${appNamePascalCase}Nginx\n  ecrPhp:\n    Value: !GetAtt ecrPhp.Arn\n    Export:\n      Name: !Sub ecr${appNamePascalCase}Php\n"
}
inv-ver-rmt01-pub-api-service
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: internal ecs service\n\nParameters:\n  accountAlias:\n    Type: String\n  accountAliasLowerCase:\n    Type: String\n  desiredCount:\n    Type: Number\n  taskDefinition:\n    Type: String\n  appName:\n    Type: String\n  appNamePascalCase:\n    Type: String\n  targetGroup:\n    Type: String\n  securityGroup:\n    Type: String\n\nResources:\n  service:\n    Type: AWS::ECS::Service\n    Properties:\n      Cluster: !ImportValue cluster\n      DeploymentConfiguration:\n        MaximumPercent: 200\n        MinimumHealthyPercent: 50\n      DesiredCount: !Ref desiredCount\n      LaunchType: FARGATE\n      LoadBalancers:\n        - ContainerName: !Sub ${accountAliasLowerCase}-${appName}-nginx-container\n          ContainerPort: 80\n          TargetGroupArn:\n            Fn::ImportValue: !Sub ${targetGroup}\n      NetworkConfiguration:\n        AwsvpcConfiguration:\n          AssignPublicIp: DISABLED\n          SecurityGroups:\n            - Fn::ImportValue: !Sub ${securityGroup}\n          Subnets:\n            - !ImportValue PrivateSubnet1a\n            - !ImportValue PrivateSubnet1c\n      ServiceName: !Sub ${accountAliasLowerCase}-${appName}-service\n      TaskDefinition: !Sub ${taskDefinition}\n\nOutputs:\n  service:\n    Value: !Ref service\n    Export:\n      Name: !Sub ${appNamePascalCase}Service\n"
}
inv-ver-rmt01-pub-api-securitygroup
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: securitygroup\n\nParameters:\n  accountAlias:\n    Type: String\n  appName:\n    Type: String\n  accountAliasLowerCase:\n    Type: String\n  internalSecurityGroupCidr:\n    Type: String\n  appNamePascalCase:\n    Type: String\n  rdsSgId:\n    Type: String\n\nResources:\n  internalApplicationSecuritygroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupName: !Sub ${accountAliasLowerCase}-internal-${appName}-sg\n      GroupDescription: !Sub ${accountAliasLowerCase}-internal-${appName}-sg\n      Tags:\n        - Key: Name\n          Value: !Sub ${accountAliasLowerCase}-internal-${appName}-sg\n      VpcId: !ImportValue VPC\n      SecurityGroupIngress:\n      - IpProtocol: tcp\n        FromPort: '80'\n        ToPort: '80'\n        CidrIp: !Ref internalSecurityGroupCidr\n  internalApplicationSgAuroraDbAccessIngress:\n    Type: 'AWS::EC2::SecurityGroupIngress'\n    Properties:\n      IpProtocol: tcp\n      FromPort: '3306'\n      ToPort: '3306'\n      SourceSecurityGroupId: !Ref internalApplicationSecuritygroup\n      GroupId: !Sub ${rdsSgId}\nOutputs:\n  internalApplicationSecuritygroup:\n    Value: !Ref internalApplicationSecuritygroup\n    Export:\n      Name: !Sub internal${appNamePascalCase}Securitygroup\n"
}
inv-ver-rmt01-pub-api-task-role
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: ecs task definition role\n\nParameters:\n  accountAlias:\n    Type: String\n  appNamePascalCase:\n    Type: String\n  appName:\n    Type: String\n\nResources:\n  ecsTaskExecutionRole:\n    Type: AWS::IAM::Role\n    Properties:\n      RoleName : !Sub ${accountAlias}-${appName}-ecsTaskExecutionRole\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement:\n          - Effect: \"Allow\"\n            Principal:\n              Service:\n                - \"ecs-tasks.amazonaws.com\"\n            Action:\n              - \"sts:AssumeRole\"\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy\n        - arn:aws:iam::aws:policy/AmazonS3FullAccess\n        - arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess\nOutputs:\n  ecsTaskExecutionRole:\n    Value: !Ref ecsTaskExecutionRole\n    Export:\n      Name: !Sub ecsTaskExecutionRole${appNamePascalCase}"
}
inv-ver-rmt01-pub-api-ecs-loggroup
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: ecs and loggroup\n\nParameters:\n  accountAlias:\n    Type: String\n  accountAliasLowerCase:\n    Type: String\n  logGroupName:\n    Type: String\n  appNamePascalCase:\n    Type: String\n\nResources:\n  logGroup:\n    Type: AWS::Logs::LogGroup\n    Properties:\n      LogGroupName: !Ref logGroupName\n\nOutputs:\n  logGroup:\n    Value: !Ref logGroup\n    Export:\n      Name: !Sub logGroup${appNamePascalCase}"
}
inv-ver-rmt01-pub-api-ecr
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: codecommit and ecr\n\nParameters:\n  accountAlias:\n    Type: String\n  accountAliasLowerCase:\n    Type: String\n  appName:\n    Type: String\n  appNamePascalCase:\n    Type: String\n\n\nResources:\n  ecrNginx:\n    Type: AWS::ECR::Repository\n    Properties:\n      RepositoryName: !Sub ${accountAliasLowerCase}-${appName}-nginx-ecr\n  ecrPhp:\n    Type: AWS::ECR::Repository\n    Properties:\n      RepositoryName: !Sub ${accountAliasLowerCase}-${appName}-php-ecr\n\nOutputs:\n  ecrNginx:\n    Value: !GetAtt ecrNginx.Arn\n    Export:\n      Name: !Sub ecr${appNamePascalCase}Nginx\n  ecrPhp:\n    Value: !GetAtt ecrPhp.Arn\n    Export:\n      Name: !Sub ecr${appNamePascalCase}Php\n"
}
INV-ver-rmt01-aurora-codepipeline-ver
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: codepipeline\n\n# ------------------------------------------------------------#\n#  Parameters\n# ------------------------------------------------------------#\nParameters:\n  accountAllias:\n    Type: String\n  accountAlliasLowerCase:\n    Type: String\n  appName:\n    Type: String\n\nResources:\n# ------------------------------------------------------------#\n#  Role\n# ------------------------------------------------------------#\n  auroraCodeBuildRoleVer:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement:\n          - Effect: \"Allow\"\n            Principal:\n              Service:\n                - \"codebuild.amazonaws.com\"\n            Action:\n              - \"sts:AssumeRole\"\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess\n        - arn:aws:iam::aws:policy/AmazonS3FullAccess\n        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess\n  auroraCodePipelineRoleVer:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement:\n          - Effect: \"Allow\"\n            Principal:\n              Service:\n                - \"codepipeline.amazonaws.com\"\n            Action:\n              - \"sts:AssumeRole\"\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess\n        - arn:aws:iam::aws:policy/AWSCodeCommitFullAccess\n        - arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess\n        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess\n        - arn:aws:iam::aws:policy/AmazonS3FullAccess\n        - arn:aws:iam::aws:policy/CloudWatchFullAccess\n        - arn:aws:iam::aws:policy/AmazonEC2ContainerServiceFullAccess\n\n# ------------------------------------------------------------#\n#  CodeBuild\n# ------------------------------------------------------------#\n  auroraCodeBuildProjectVer:\n    Type: AWS::CodeBuild::Project\n    Properties:\n      Name: !Sub ${accountAlliasLowerCase}-${appName}-build-project-ver\n      Artifacts:\n        Type: CODEPIPELINE\n      Description: !Sub Building stage for ${accountAlliasLowerCase}-ver\n      Environment:\n        ComputeType: BUILD_GENERAL1_SMALL\n        EnvironmentVariables:\n          - Name: AWS_ACCOUNT_ID\n            Value: !Ref AWS::AccountId\n          - Name: IMAGE_NAME_php\n            Value: !Sub ${accountAlliasLowerCase}-${appName}-php-ecr\n          - Name: CONTAINER_NAME_php\n            Value: !Sub ${accountAlliasLowerCase}-${appName}-php-container\n        Image: aws/codebuild/docker:18.09.0\n        Type: LINUX_CONTAINER\n        PrivilegedMode: True\n      ServiceRole: !Ref auroraCodeBuildRoleVer\n      Source:\n        Type: CODEPIPELINE\n        BuildSpec: |\n          version: 0.2\n          phases:\n            build:\n              commands:\n                - REPOSITORY_URI_PHP=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_NAME_php}\n                - IMAGE_TAG=latest\n                - echo \"[{\\\"name\\\":\\\"${CONTAINER_NAME_php}\\\",\\\"imageUri\\\":\\\"${REPOSITORY_URI_PHP}:${IMAGE_TAG}\\\"}]\"\n                - echo \"[{\\\"name\\\":\\\"${CONTAINER_NAME_php}\\\",\\\"imageUri\\\":\\\"${REPOSITORY_URI_PHP}:${IMAGE_TAG}\\\"}]\" > imagedefinitions.json\n          artifacts:\n              files:\n                - imagedefinitions.json\n      TimeoutInMinutes: 30\n# ------------------------------------------------------------#\n#  S3\n# ------------------------------------------------------------#\n  auroraS3bucketforcodepipelineVer:\n    Type: AWS::S3::Bucket\n    Properties:\n      BucketName: !Sub ${accountAlliasLowerCase}-${appName}-codepipeline-ver\n# ------------------------------------------------------------#\n#  CodePipeline\n# ------------------------------------------------------------#\n  auroraCodePipelineVer:\n    Type: AWS::CodePipeline::Pipeline\n    DependsOn: auroraS3bucketforcodepipelineVer\n    Properties:\n      ArtifactStore:\n        Location: !Ref auroraS3bucketforcodepipelineVer\n        Type: S3\n      Name: !Sub ${accountAlliasLowerCase}-${appName}-codepipeline-ver\n      RestartExecutionOnUpdate: false\n      RoleArn: !GetAtt auroraCodePipelineRoleVer.Arn\n      Stages:\n        - Name: Source\n          Actions:\n            - Name: SourceAction\n              ActionTypeId:\n                Category: Source\n                Owner: AWS\n                Provider: ECR\n                Version: 1\n              OutputArtifacts:\n                - Name: SourceArtifact\n              Configuration:\n                RepositoryName: !Sub ${accountAlliasLowerCase}-${appName}-php-ecr\n              RunOrder: 1\n        - Name: Build\n          Actions:\n            - Name: CodeBuild\n              InputArtifacts:\n                - Name: SourceArtifact\n              ActionTypeId:\n                Category: Build\n                Owner: AWS\n                Provider: CodeBuild\n                Version: 1\n              Configuration:\n                ProjectName: !Ref auroraCodeBuildProjectVer\n              OutputArtifacts:\n                - Name: CodebuildOutput\n              RunOrder: 1\n        - Name: Staging\n          Actions:\n            - Name: Deploy2AuroraService\n              InputArtifacts:\n                - Name: CodebuildOutput\n              ActionTypeId:\n                Category: Deploy\n                Owner: AWS\n                Provider: ECS\n                Version: 1\n              Configuration:\n                ClusterName: !ImportValue cluster\n                FileName: imagedefinitions.json\n                ServiceName: !ImportValue auroraEcsService\n              OutputArtifacts: []\n              RunOrder: 1\n# ------------------------------------------------------------#\n#  CloudWatch Event\n# ------------------------------------------------------------#\n  auroraCloudWatchEventRoleVer:\n    Type: 'AWS::IAM::Role'\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service:\n                - events.amazonaws.com\n            Action: 'sts:AssumeRole'\n      Path: /\n      Policies:\n        - PolicyName: cwe-pipeline-execution\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Effect: Allow\n                Action: 'codepipeline:StartPipelineExecution'\n                Resource: !Join\n                  - ''\n                  - - 'arn:aws:codepipeline:'\n                    - !Ref 'AWS::Region'\n                    - ':'\n                    - !Ref 'AWS::AccountId'\n                    - ':'\n                    - !Ref auroraCodePipelineVer\n  auroraCloudwatchEventsRuleVer:\n    Type: AWS::Events::Rule\n    Properties:\n      EventPattern:\n        source:\n          - aws.ecr\n        detail:\n          eventName:\n            - PutImage\n          requestParameters:\n            repositoryName:\n              - !Sub ${accountAlliasLowerCase}-${appName}-php-ecr\n            imageTag:\n              - latest\n      Targets:\n        - Arn:  !Join\n          - ''\n          - - 'arn:aws:codepipeline:'\n            - !Ref 'AWS::Region'\n            - ':'\n            - !Ref 'AWS::AccountId'\n            - ':'\n            - !Ref auroraCodePipelineVer\n          Id: !Sub ${accountAlliasLowerCase}-${appName}-codepipeline-ver\n          RoleArn: !GetAtt auroraCloudWatchEventRoleVer.Arn\n\n# ------------------------------------------------------------#\n#  Outputs\n# ------------------------------------------------------------#\nOutputs:\n  auroraCodeBuildRoleVer:\n    Value: !Ref auroraCodeBuildRoleVer\n    Export:\n      Name: auroraCodeBuildRoleVer\n  auroraCodePipelineRoleVer:\n    Value: !Ref auroraCodePipelineRoleVer\n    Export:\n      Name: auroraCodePipelineRoleVer\n  auroraCodeBuildProjectVer:\n    Value: !Ref auroraCodeBuildProjectVer\n    Export:\n      Name: auroraCodeBuildProjectVer\n  auroraS3bucketforcodepipelineVer:\n    Value: !Ref auroraS3bucketforcodepipelineVer\n    Export:\n      Name: auroraS3bucketforcodepipelineVer\n  auroraCodePipelineVer:\n    Value: !Ref auroraCodePipelineVer\n    Export:\n      Name: auroraCodePipelineVer\n  auroraCloudWatchEventRoleVer:\n    Value: !Ref auroraCloudWatchEventRoleVer\n    Export:\n      Name: auroraCloudWatchEventRoleVer\n  auroraCloudwatchEventsRuleVer:\n    Value: !Ref auroraCloudwatchEventsRuleVer\n    Export:\n      Name: auroraCloudwatchEventsRuleVer\n"
}
INV-ver-rmt01-aurora-service
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: ecs service\n\nParameters:\n  accountAllias:\n    Type: String\n  accountAlliasLowerCase:\n    Type: String\n  apName:\n    Type: String\n  taskdefinition:\n    Type: String\n  desiredCount:\n    Type: Number\n\nResources:\n  ApiService:\n    Type: AWS::ECS::Service\n    Properties:\n      Cluster: !ImportValue cluster\n      DeploymentConfiguration:\n        MaximumPercent: 200\n        MinimumHealthyPercent: 50\n      DesiredCount: !Ref desiredCount\n      LaunchType: FARGATE\n      NetworkConfiguration:\n        AwsvpcConfiguration:\n          AssignPublicIp: DISABLED\n          SecurityGroups:\n            - !ImportValue auroraSecuritygroup\n          Subnets:\n            - !ImportValue PrivateSubnet1a\n            - !ImportValue PrivateSubnet1c\n      ServiceName: !Sub ${accountAlliasLowerCase}-${apName}-service\n      TaskDefinition: !Ref taskdefinition\n\nOutputs:\n  Service:\n    Value: !Ref ApiService\n    Export:\n      Name: !Sub ${apName}EcsService\n"
}
INV-ver-rmt01-aurora-securitygroup
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: securitygroup\n\nParameters:\n  accountAlias:\n    Type: String\n  appName:\n    Type: String\n  accountAliasLowerCase:\n    Type: String\n  securityGroupCidr:\n    Type: String\n  appNamePascalCase:\n    Type: String\n  rdsSgId:\n    Type: String\n\nResources:\n  ApplicationSecuritygroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupName: !Sub ${accountAliasLowerCase}-${appName}-sg\n      GroupDescription: !Sub ${accountAliasLowerCase}-${appName}-sg\n      Tags:\n        - Key: Name\n          Value: !Sub ${accountAliasLowerCase}-${appName}-sg\n      VpcId: !ImportValue VPC\n      SecurityGroupIngress:\n      - IpProtocol: tcp\n        FromPort: '80'\n        ToPort: '80'\n        CidrIp: !Ref securityGroupCidr\n  ApplicationSgAuroraDbAccessIngress:\n    Type: 'AWS::EC2::SecurityGroupIngress'\n    Properties:\n      IpProtocol: tcp\n      FromPort: '3306'\n      ToPort: '3306'\n      SourceSecurityGroupId: !Ref ApplicationSecuritygroup\n      GroupId: !Sub ${rdsSgId}\nOutputs:\n  ApplicationSecuritygroup:\n    Value: !Ref ApplicationSecuritygroup\n    Export:\n      Name: !Sub ${appNamePascalCase}Securitygroup\n"
}
INV-ver-rmt01-aurora-role
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: ecs task exec role\n\nParameters:\n  accountAllias:\n    Type: String\n  accountAlliasLowerCase:\n    Type: String\n\nResources:\n  ecsTaskExecutionRoleAuroraPhp:\n    Type: AWS::IAM::Role\n    Properties:\n      RoleName: !Sub \"${accountAllias}-aurora-task-ecsTaskExecutionRole\"\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement:\n          - Effect: \"Allow\"\n            Principal:\n              Service:\n                - \"ecs-tasks.amazonaws.com\"\n            Action:\n              - \"sts:AssumeRole\"\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy\n        - arn:aws:iam::aws:policy/AmazonRDSDataFullAccess\n      Policies:\n        -\n          PolicyName: read_params\n          PolicyDocument:\n            Version: \"2012-10-17\"\n            Statement:\n              -\n                Effect: Allow\n                Action:\n                  - \"ssm:GetParameters\"\n                Resource:\n                  - \"*\"\n\nOutputs:\n  auroraPhpTaskRole:\n    Value: !Ref ecsTaskExecutionRoleAuroraPhp\n    Export:\n      Name: auroraPhpTaskRole\n"
}
INV-ver-rmt01-aurora-ecs-loggroup
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: ecs and loggroup\n\nParameters:\n  accountAllias:\n    Type: String\n  accountAllias:\n    Type: String\n  logGroupName:\n    Type: String\n\nResources:\n  logGroup:\n    Type: AWS::Logs::LogGroup\n    Properties:\n      LogGroupName: !Ref logGroupName\n\nOutputs:\n  logGroup:\n    Value: !Ref logGroup\n    Export:\n      Name: logGroupAuroraPhp\n"
}
INV-ver-rmt01-aurora-ecr
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: codecommit and ecr\n\nParameters:\n  accountAllias:\n    Type: String\n  accountAlliasLowerCase:\n    Type: String\n\n\nResources:\n  ecrAuroraPhp:\n    Type: AWS::ECR::Repository\n    Properties:\n      RepositoryName: !Sub ${accountAlliasLowerCase}-aurora-php-ecr\n\nOutputs:\n  ecrAuroraPhp:\n    Value: !Ref ecrAuroraPhp\n    Export:\n      Name: ecrAuroraPhp\n  ecrAuroraPhpArn:\n    Value: !GetAtt ecrAuroraPhp.Arn\n    Export:\n      Name: ecrAuroraPhpArn\n"
}
INV-ver-rmt01-remote-app-api-codepipeline-ver
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: codepipeline\n\n# ------------------------------------------------------------#\n#  Parameters\n# ------------------------------------------------------------#\nParameters:\n  accountAllias:\n    Type: String\n  accountAlliasLowerCase:\n    Type: String\n  appName:\n    Type: String\n\nResources:\n# ------------------------------------------------------------#\n#  Role\n# ------------------------------------------------------------#\n  remoteappApiCodeBuildRoleVer:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement:\n          - Effect: \"Allow\"\n            Principal:\n              Service:\n                - \"codebuild.amazonaws.com\"\n            Action:\n              - \"sts:AssumeRole\"\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess\n        - arn:aws:iam::aws:policy/AmazonS3FullAccess\n        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess\n  remoteappApiCodePipelineRoleVer:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement:\n          - Effect: \"Allow\"\n            Principal:\n              Service:\n                - \"codepipeline.amazonaws.com\"\n            Action:\n              - \"sts:AssumeRole\"\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess\n        - arn:aws:iam::aws:policy/AWSCodeCommitFullAccess\n        - arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess\n        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess\n        - arn:aws:iam::aws:policy/AmazonS3FullAccess\n        - arn:aws:iam::aws:policy/CloudWatchFullAccess\n        - arn:aws:iam::aws:policy/AmazonEC2ContainerServiceFullAccess\n\n# ------------------------------------------------------------#\n#  CodeBuild\n# ------------------------------------------------------------#\n  remoteappApiCodeBuildProjectVer:\n    Type: AWS::CodeBuild::Project\n    Properties:\n      Name: !Sub ${accountAlliasLowerCase}-${appName}-build-project-ver\n      Artifacts:\n        Type: CODEPIPELINE\n      Description: !Sub Building stage for ${accountAlliasLowerCase}-ver\n      Environment:\n        ComputeType: BUILD_GENERAL1_SMALL\n        EnvironmentVariables:\n          - Name: AWS_ACCOUNT_ID\n            Value: !Ref AWS::AccountId\n          - Name: IMAGE_NAME_nginx\n            Value: !Sub ${accountAlliasLowerCase}-${appName}-nginx-ecr\n          - Name: CONTAINER_NAME_nginx\n            Value: !Sub ${accountAlliasLowerCase}-${appName}-nginx-container\n          - Name: IMAGE_NAME_php\n            Value: !Sub ${accountAlliasLowerCase}-${appName}-php-ecr\n          - Name: CONTAINER_NAME_php\n            Value: !Sub ${accountAlliasLowerCase}-${appName}-php-container\n        Image: aws/codebuild/docker:18.09.0\n        Type: LINUX_CONTAINER\n        PrivilegedMode: True\n      ServiceRole: !Ref remoteappApiCodeBuildRoleVer\n      Source:\n        Type: CODEPIPELINE\n        BuildSpec: |\n          version: 0.2\n          phases:\n            build:\n              commands:\n                - REPOSITORY_URI_NGINX=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_NAME_nginx}\n                - REPOSITORY_URI_PHP=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_NAME_php}\n                - IMAGE_TAG=latest\n                - echo \"[{\\\"name\\\":\\\"${CONTAINER_NAME_nginx}\\\",\\\"imageUri\\\":\\\"${REPOSITORY_URI_NGINX}:${IMAGE_TAG}\\\"}, {\\\"name\\\":\\\"${CONTAINER_NAME_php}\\\",\\\"imageUri\\\":\\\"${REPOSITORY_URI_PHP}:${IMAGE_TAG}\\\"}]\"\n                - echo \"[{\\\"name\\\":\\\"${CONTAINER_NAME_nginx}\\\",\\\"imageUri\\\":\\\"${REPOSITORY_URI_NGINX}:${IMAGE_TAG}\\\"}, {\\\"name\\\":\\\"${CONTAINER_NAME_php}\\\",\\\"imageUri\\\":\\\"${REPOSITORY_URI_PHP}:${IMAGE_TAG}\\\"}]\" > imagedefinitions.json\n          artifacts:\n              files:\n                - imagedefinitions.json\n      TimeoutInMinutes: 30\n# ------------------------------------------------------------#\n#  S3\n# ------------------------------------------------------------#\n  remoteappApiS3bucketforcodepipelineVer:\n    Type: AWS::S3::Bucket\n    Properties:\n      BucketName: !Sub ${accountAlliasLowerCase}-${appName}-codepipeline-ver\n# ------------------------------------------------------------#\n#  CodePipeline\n# ------------------------------------------------------------#\n  remoteappApiCodePipelineVer:\n    Type: AWS::CodePipeline::Pipeline\n    DependsOn: remoteappApiS3bucketforcodepipelineVer\n    Properties:\n      ArtifactStore:\n        Location: !Ref remoteappApiS3bucketforcodepipelineVer\n        Type: S3\n      Name: !Sub ${accountAlliasLowerCase}-${appName}-codepipeline-ver\n      RestartExecutionOnUpdate: false\n      RoleArn: !GetAtt remoteappApiCodePipelineRoleVer.Arn\n      Stages:\n        - Name: Source\n          Actions:\n            - Name: SourceAction\n              ActionTypeId:\n                Category: Source\n                Owner: AWS\n                Provider: ECR\n                Version: 1\n              OutputArtifacts:\n                - Name: SourceArtifact\n              Configuration:\n                RepositoryName: !Sub ${accountAlliasLowerCase}-${appName}-php-ecr\n              RunOrder: 1\n        - Name: Build\n          Actions:\n            - Name: CodeBuild\n              InputArtifacts:\n                - Name: SourceArtifact\n              ActionTypeId:\n                Category: Build\n                Owner: AWS\n                Provider: CodeBuild\n                Version: 1\n              Configuration:\n                ProjectName: !Ref remoteappApiCodeBuildProjectVer\n              OutputArtifacts:\n                - Name: CodebuildOutput\n              RunOrder: 1\n        - Name: Staging\n          Actions:\n            - Name: Deploy2ApiService\n              InputArtifacts:\n                - Name: CodebuildOutput\n              ActionTypeId:\n                Category: Deploy\n                Owner: AWS\n                Provider: ECS\n                Version: 1\n              Configuration:\n                ClusterName: !ImportValue cluster\n                FileName: imagedefinitions.json\n                ServiceName: !ImportValue apiEcsService\n              OutputArtifacts: []\n              RunOrder: 1\n            - Name: Deploy2gtcApiService\n              InputArtifacts:\n                - Name: CodebuildOutput\n              ActionTypeId:\n                Category: Deploy\n                Owner: AWS\n                Provider: ECS\n                Version: 1\n              Configuration:\n                ClusterName: !ImportValue cluster\n                FileName: imagedefinitions.json\n                ServiceName: !ImportValue gtc-apiEcsService\n              OutputArtifacts: []\n              RunOrder: 1\n            - Name: Deploy2internalApiService\n              InputArtifacts:\n                - Name: CodebuildOutput\n              ActionTypeId:\n                Category: Deploy\n                Owner: AWS\n                Provider: ECS\n                Version: 1\n              Configuration:\n                ClusterName: !ImportValue cluster\n                FileName: imagedefinitions.json\n                ServiceName: !ImportValue internal-apiEcsService\n              OutputArtifacts: []\n              RunOrder: 1\n# ------------------------------------------------------------#\n#  CloudWatch Event\n# ------------------------------------------------------------#\n  remoteappApiCloudWatchEventRoleVer:\n    Type: 'AWS::IAM::Role'\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service:\n                - events.amazonaws.com\n            Action: 'sts:AssumeRole'\n      Path: /\n      Policies:\n        - PolicyName: cwe-pipeline-execution\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Effect: Allow\n                Action: 'codepipeline:StartPipelineExecution'\n                Resource: !Join\n                  - ''\n                  - - 'arn:aws:codepipeline:'\n                    - !Ref 'AWS::Region'\n                    - ':'\n                    - !Ref 'AWS::AccountId'\n                    - ':'\n                    - !Ref remoteappApiCodePipelineVer\n  remoteappApiCloudwatchEventsRuleVer:\n    Type: AWS::Events::Rule\n    Properties:\n      EventPattern:\n        source:\n          - aws.ecr\n        detail:\n          eventName:\n            - PutImage\n          requestParameters:\n            repositoryName:\n              - !Sub ${accountAlliasLowerCase}-${appName}-nginx-ecr\n            imageTag:\n              - latest\n      Targets:\n        - Arn:  !Join\n          - ''\n          - - 'arn:aws:codepipeline:'\n            - !Ref 'AWS::Region'\n            - ':'\n            - !Ref 'AWS::AccountId'\n            - ':'\n            - !Ref remoteappApiCodePipelineVer\n          Id: !Sub ${accountAlliasLowerCase}-${appName}-codepipeline-ver\n          RoleArn: !GetAtt remoteappApiCloudWatchEventRoleVer.Arn\n\n# ------------------------------------------------------------#\n#  Outputs\n# ------------------------------------------------------------#\nOutputs:\n  remoteappApiCodeBuildRoleVer:\n    Value: !Ref remoteappApiCodeBuildRoleVer\n    Export:\n      Name: remoteappApiCodeBuildRoleVer\n  remoteappApiCodePipelineRoleVer:\n    Value: !Ref remoteappApiCodePipelineRoleVer\n    Export:\n      Name: remoteappApiCodePipelineRoleVer\n  remoteappApiCodeBuildProjectVer:\n    Value: !Ref remoteappApiCodeBuildProjectVer\n    Export:\n      Name: remoteappApiCodeBuildProjectVer\n  remoteappApiS3bucketforcodepipelineVer:\n    Value: !Ref remoteappApiS3bucketforcodepipelineVer\n    Export:\n      Name: remoteappApiS3bucketforcodepipelineVer\n  remoteappApiCodePipelineVer:\n    Value: !Ref remoteappApiCodePipelineVer\n    Export:\n      Name: remoteappApiCodePipelineVer\n  remoteappApiCloudWatchEventRoleVer:\n    Value: !Ref remoteappApiCloudWatchEventRoleVer\n    Export:\n      Name: remoteappApiCloudWatchEventRoleVer\n  remoteappApiCloudwatchEventsRuleVer:\n    Value: !Ref remoteappApiCloudwatchEventsRuleVer\n    Export:\n      Name: remoteappApiCloudwatchEventsRuleVer\n"
}
INV-ver-rmt01-internal-api-service
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: ecs service\n\nParameters:\n  accountAllias:\n    Type: String\n  accountAlliasLowerCase:\n    Type: String\n  apName:\n    Type: String\n  taskdefinition:\n    Type: String\n  desiredCount:\n    Type: Number\n\nResources:\n  ApiService:\n    Type: AWS::ECS::Service\n    Properties:\n      Cluster: !ImportValue cluster\n      DeploymentConfiguration:\n        MaximumPercent: 200\n        MinimumHealthyPercent: 100\n      DesiredCount: !Ref desiredCount\n      LaunchType: FARGATE\n      LoadBalancers:\n        - ContainerName: !Sub ${accountAlliasLowerCase}-remote-app-api-nginx-container\n          ContainerPort: 80\n          TargetGroupArn: !ImportValue int-api-albTargetGroup\n      NetworkConfiguration:\n        AwsvpcConfiguration:\n          AssignPublicIp: DISABLED\n          SecurityGroups:\n            - !ImportValue internalApiSecuritygroup\n          Subnets:\n            - !ImportValue PrivateSubnet1a\n            - !ImportValue PrivateSubnet1c\n      ServiceName: !Sub ${accountAlliasLowerCase}-${apName}-service\n      TaskDefinition: !Ref taskdefinition\n\nOutputs:\n  Service:\n    Value: !Ref ApiService\n    Export:\n      Name: !Sub ${apName}EcsService\n"
}
INV-ver-rmt01-gtc-api-service
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: ecs service\n\nParameters:\n  accountAllias:\n    Type: String\n  accountAlliasLowerCase:\n    Type: String\n  apName:\n    Type: String\n  taskdefinition:\n    Type: String\n  desiredCount:\n    Type: Number\n\nResources:\n  ApiService:\n    Type: AWS::ECS::Service\n    Properties:\n      Cluster: !ImportValue cluster\n      DeploymentConfiguration:\n        MaximumPercent: 200\n        MinimumHealthyPercent: 100\n      DesiredCount: !Ref desiredCount\n      LaunchType: FARGATE\n      LoadBalancers:\n        - ContainerName: !Sub ${accountAlliasLowerCase}-remote-app-api-nginx-container\n          ContainerPort: 80\n          TargetGroupArn: !ImportValue gtc-api-targetGroup\n      NetworkConfiguration:\n        AwsvpcConfiguration:\n          AssignPublicIp: DISABLED\n          SecurityGroups:\n            - !ImportValue gtcApiSecuritygroup\n          Subnets:\n            - !ImportValue PrivateSubnet1a\n            - !ImportValue PrivateSubnet1c\n      ServiceName: !Sub ${accountAlliasLowerCase}-${apName}-service\n      TaskDefinition: !Ref taskdefinition\n\nOutputs:\n  Service:\n    Value: !Ref ApiService\n    Export:\n      Name: !Sub ${apName}EcsService\n"
}
INV-ver-rmt01-api-service
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: ecs service\n\nParameters:\n  accountAllias:\n    Type: String\n  accountAlliasLowerCase:\n    Type: String\n  apName:\n    Type: String\n  taskdefinition:\n    Type: String\n  desiredCount:\n    Type: Number\n\nResources:\n  ApiService:\n    Type: AWS::ECS::Service\n    Properties:\n      Cluster: !ImportValue cluster\n      DeploymentConfiguration:\n        MaximumPercent: 200\n        MinimumHealthyPercent: 100\n      DesiredCount: !Ref desiredCount\n      LaunchType: FARGATE\n      LoadBalancers:\n        - ContainerName: !Sub ${accountAlliasLowerCase}-remote-app-api-nginx-container\n          ContainerPort: 80\n          TargetGroupArn: !ImportValue api-albTargetGroup\n      NetworkConfiguration:\n        AwsvpcConfiguration:\n          AssignPublicIp: DISABLED\n          SecurityGroups:\n            - !ImportValue apiSecuritygroup\n          Subnets:\n            - !ImportValue PrivateSubnet1a\n            - !ImportValue PrivateSubnet1c\n      ServiceName: !Sub ${accountAlliasLowerCase}-${apName}-service\n      TaskDefinition: !Ref taskdefinition\n\nOutputs:\n  Service:\n    Value: !Ref ApiService\n    Export:\n      Name: !Sub ${apName}EcsService\n"
}
INV-ver-rmt01-vehicle-api-ver-ysd
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: Create Service Endpoint\n\nParameters:\n  serviceAlliasLowerCase:\n    Type: String\n  serviceName:\n    Type: String\n  cidr:\n    Type: String\n\nResources:\n\n  endpointSecuritygroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupName: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      GroupDescription: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      Tags:\n        - Key: Name\n          Value: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      VpcId: !ImportValue VPC\n      SecurityGroupIngress:\n        - IpProtocol: tcp\n          FromPort: 80\n          ToPort: 80\n          CidrIp: !Ref cidr\n  endpoint:\n    Type: AWS::EC2::VPCEndpoint\n    Properties:\n      VpcEndpointType: Interface\n      VpcId: !ImportValue VPC\n      SubnetIds:\n        - !ImportValue PrivateSubnet1a\n        - !ImportValue PrivateSubnet1c\n      SecurityGroupIds:\n        - !Ref endpointSecuritygroup\n      ServiceName: !Ref serviceName\n      PrivateDnsEnabled: false\n"
}
INV-ver-rmt01-ver-ecr-access-role
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: codepipeline\n\n# ------------------------------------------------------------#\n#  Parameters\n# ------------------------------------------------------------#\nParameters:\n  accountAllias:\n    Type: String\n  accountAlliasLowerCase:\n    Type: String\n  devAwsAccountId:\n    Type: String\n\nResources:\n# ------------------------------------------------------------#\n#  Role\n# ------------------------------------------------------------#\n  verEcrAccessRole:\n    Type: AWS::IAM::Role\n    Properties:\n      RoleName: ver-ecr-access-role\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement:\n          - Effect: \"Allow\"\n            Principal:\n              AWS:\n                - !Sub arn:aws:iam::${devAwsAccountId}:root\n            Action:\n              - \"sts:AssumeRole\"\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess\n        - arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess\n\n# ------------------------------------------------------------#\n#  Outputs\n# ------------------------------------------------------------#\nOutputs:\n  verEcrAccessRole:\n    Value: !Ref verEcrAccessRole\n    Export:\n      Name: verEcrAccessRole\n"
}
INV-ver-rmt01-internal-api-securitygroup
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: securitygroup\n\nParameters:\n  accountAlias:\n    Type: String\n  appName:\n    Type: String\n  accountAliasLowerCase:\n    Type: String\n  securityGroupCidr:\n    Type: String\n  appNamePascalCase:\n    Type: String\n  rdsSgId:\n    Type: String\n\nResources:\n  ApplicationSecuritygroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupName: !Sub ${accountAliasLowerCase}-${appName}-sg\n      GroupDescription: !Sub ${accountAliasLowerCase}-${appName}-sg\n      Tags:\n        - Key: Name\n          Value: !Sub ${accountAliasLowerCase}-${appName}-sg\n      VpcId: !ImportValue VPC\n      SecurityGroupIngress:\n      - IpProtocol: tcp\n        FromPort: '80'\n        ToPort: '80'\n        CidrIp: !Ref securityGroupCidr\n  ApplicationSgAuroraDbAccessIngress:\n    Type: 'AWS::EC2::SecurityGroupIngress'\n    Properties:\n      IpProtocol: tcp\n      FromPort: '3306'\n      ToPort: '3306'\n      SourceSecurityGroupId: !Ref ApplicationSecuritygroup\n      GroupId: !Sub ${rdsSgId}\nOutputs:\n  ApplicationSecuritygroup:\n    Value: !Ref ApplicationSecuritygroup\n    Export:\n      Name: !Sub ${appNamePascalCase}Securitygroup\n"
}
INV-ver-rmt01-gtc-api-securitygroup
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: securitygroup\n\nParameters:\n  accountAlias:\n    Type: String\n  appName:\n    Type: String\n  accountAliasLowerCase:\n    Type: String\n  securityGroupCidr:\n    Type: String\n  appNamePascalCase:\n    Type: String\n  rdsSgId:\n    Type: String\n\nResources:\n  ApplicationSecuritygroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupName: !Sub ${accountAliasLowerCase}-${appName}-sg\n      GroupDescription: !Sub ${accountAliasLowerCase}-${appName}-sg\n      Tags:\n        - Key: Name\n          Value: !Sub ${accountAliasLowerCase}-${appName}-sg\n      VpcId: !ImportValue VPC\n      SecurityGroupIngress:\n      - IpProtocol: tcp\n        FromPort: '80'\n        ToPort: '80'\n        CidrIp: !Ref securityGroupCidr\n  ApplicationSgAuroraDbAccessIngress:\n    Type: 'AWS::EC2::SecurityGroupIngress'\n    Properties:\n      IpProtocol: tcp\n      FromPort: '3306'\n      ToPort: '3306'\n      SourceSecurityGroupId: !Ref ApplicationSecuritygroup\n      GroupId: !Sub ${rdsSgId}\nOutputs:\n  ApplicationSecuritygroup:\n    Value: !Ref ApplicationSecuritygroup\n    Export:\n      Name: !Sub ${appNamePascalCase}Securitygroup\n"
}
INV-ver-rmt01-api-securitygroup
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: securitygroup\n\nParameters:\n  accountAlias:\n    Type: String\n  appName:\n    Type: String\n  accountAliasLowerCase:\n    Type: String\n  securityGroupCidr:\n    Type: String\n  appNamePascalCase:\n    Type: String\n  rdsSgId:\n    Type: String\n\nResources:\n  ApplicationSecuritygroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupName: !Sub ${accountAliasLowerCase}-${appName}-sg\n      GroupDescription: !Sub ${accountAliasLowerCase}-${appName}-sg\n      Tags:\n        - Key: Name\n          Value: !Sub ${accountAliasLowerCase}-${appName}-sg\n      VpcId: !ImportValue VPC\n      SecurityGroupIngress:\n      - IpProtocol: tcp\n        FromPort: '80'\n        ToPort: '80'\n        CidrIp: !Ref securityGroupCidr\n  ApplicationSgAuroraDbAccessIngress:\n    Type: 'AWS::EC2::SecurityGroupIngress'\n    Properties:\n      IpProtocol: tcp\n      FromPort: '3306'\n      ToPort: '3306'\n      SourceSecurityGroupId: !Ref ApplicationSecuritygroup\n      GroupId: !Sub ${rdsSgId}\nOutputs:\n  ApplicationSecuritygroup:\n    Value: !Ref ApplicationSecuritygroup\n    Export:\n      Name: !Sub ${appNamePascalCase}Securitygroup\n"
}
INV-ver-rmt01-ecs-cluster
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: ecs cluster\n\nParameters:\n  accountAllias:\n    Type: String\n  accountAlliasLowerCase:\n    Type: String\n\nResources:\n  ecs:\n    Type: AWS::ECS::Cluster\n    Properties:\n      ClusterName: !Sub ${accountAlliasLowerCase}-cluster\n\nOutputs:\n  cluster:\n    Value: !Ref ecs\n    Export:\n      Name: cluster\n"
}
INV-ver-rmt01-resource-DynamoDBStack-1I81N5XTWWH9G
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "---\nAWSTemplateFormatVersion: \"2010-09-09\"\nDescription: 7-1_dynamodb.txt\nParameters: \n ReadCapacitymin:\n  Type: String\n ReadCapacitymax:\n  Type: String\n WriteCapacitymin:\n  Type: String\n WriteCapacitymax:\n  Type: String\n ReadCapacitymin2:\n  Type: String\n ReadCapacitymax2:\n  Type: String\n WriteCapacitymin2:\n  Type: String\n WriteCapacitymax2:\n  Type: String\n DynamoDBScalingRole:\n  Type: String\nResources:\n  UserTable:\n    Type: 'AWS::DynamoDB::Table'\n    Properties:\n      TableName: tokens\n      AttributeDefinitions:\n        - AttributeName: access_token\n          AttributeType: S\n      KeySchema:\n        - AttributeName: access_token\n          KeyType: HASH\n      ProvisionedThroughput:\n        ReadCapacityUnits: !Ref ReadCapacitymin\n        WriteCapacityUnits: !Ref WriteCapacitymin\n      TimeToLiveSpecification:\n        AttributeName: ttl\n        Enabled: true\n  UserTableWriteCapacityScalableTarget: \n    Type: \"AWS::ApplicationAutoScaling::ScalableTarget\"\n    DependsOn: UserTable\n    Properties: \n       MaxCapacity: !Ref WriteCapacitymax\n       MinCapacity: !Ref WriteCapacitymin\n       ResourceId: !Sub table/tokens\n       RoleARN: !Ref DynamoDBScalingRole\n       ScalableDimension: \"dynamodb:table:WriteCapacityUnits\"\n       ServiceNamespace: dynamodb\n  UserTableReadCapacityScalableTarget: \n    Type: \"AWS::ApplicationAutoScaling::ScalableTarget\"\n    DependsOn: UserTable\n    Properties: \n       MaxCapacity: !Ref ReadCapacitymax\n       MinCapacity: !Ref ReadCapacitymin\n       ResourceId: !Sub table/tokens\n       RoleARN: !Ref DynamoDBScalingRole\n       ScalableDimension: \"dynamodb:table:ReadCapacityUnits\"\n       ServiceNamespace: dynamodb\n  UserTableWriteScalingPolicy: \n    Type: \"AWS::ApplicationAutoScaling::ScalingPolicy\"\n    DependsOn: UserTableWriteCapacityScalableTarget\n    Properties: \n       PolicyName: DynamoDBWriteAutoScalingPolicy\n       PolicyType: TargetTrackingScaling\n       ScalingTargetId: \n         Ref: UserTableWriteCapacityScalableTarget\n       TargetTrackingScalingPolicyConfiguration: \n         TargetValue: 70\n         ScaleInCooldown: 60\n         ScaleOutCooldown: 60\n         PredefinedMetricSpecification: \n           PredefinedMetricType: DynamoDBWriteCapacityUtilization\n  UserTableReadScalingPolicy: \n    Type: \"AWS::ApplicationAutoScaling::ScalingPolicy\"\n    DependsOn: UserTableReadCapacityScalableTarget\n    Properties: \n       PolicyName: DynamoDBReadAutoScalingPolicy\n       PolicyType: TargetTrackingScaling\n       ScalingTargetId: \n         Ref: UserTableReadCapacityScalableTarget\n       TargetTrackingScalingPolicyConfiguration: \n         TargetValue: 70\n         ScaleInCooldown: 60\n         ScaleOutCooldown: 60\n         PredefinedMetricSpecification: \n           PredefinedMetricType: DynamoDBReadCapacityUtilization\n\n  CacheRecidsTable:\n    Type: 'AWS::DynamoDB::Table'\n    Properties:\n      TableName: cache_recids\n      AttributeDefinitions:\n        - AttributeName: global_id\n          AttributeType: N\n        - AttributeName: product_own_id\n          AttributeType: S\n      KeySchema:\n        - AttributeName: global_id\n          KeyType: HASH\n        - AttributeName: product_own_id\n          KeyType: RANGE\n      ProvisionedThroughput:\n        ReadCapacityUnits: !Ref ReadCapacitymin2\n        WriteCapacityUnits: !Ref WriteCapacitymin2\n      TimeToLiveSpecification:\n        AttributeName: ttl\n        Enabled: true\n  CacheRecidsTableWriteCapacityScalableTarget: \n    Type: \"AWS::ApplicationAutoScaling::ScalableTarget\"\n    DependsOn: CacheRecidsTable\n    Properties: \n       MaxCapacity: !Ref WriteCapacitymax2\n       MinCapacity: !Ref WriteCapacitymin2\n       ResourceId: !Sub table/cache_recids\n       RoleARN: !Ref DynamoDBScalingRole\n       ScalableDimension: \"dynamodb:table:WriteCapacityUnits\"\n       ServiceNamespace: dynamodb\n  CacheRecidsTableReadCapacityScalableTarget: \n    Type: \"AWS::ApplicationAutoScaling::ScalableTarget\"\n    DependsOn: CacheRecidsTable\n    Properties: \n       MaxCapacity: !Ref ReadCapacitymax2\n       MinCapacity: !Ref ReadCapacitymin2\n       ResourceId: !Sub table/cache_recids\n       RoleARN: !Ref DynamoDBScalingRole\n       ScalableDimension: \"dynamodb:table:ReadCapacityUnits\"\n       ServiceNamespace: dynamodb\n  CacheRecidsTableWriteScalingPolicy: \n    Type: \"AWS::ApplicationAutoScaling::ScalingPolicy\"\n    DependsOn: CacheRecidsTableWriteCapacityScalableTarget\n    Properties: \n       PolicyName: DynamoDBWriteAutoScalingPolicy\n       PolicyType: TargetTrackingScaling\n       ScalingTargetId: \n         Ref: CacheRecidsTableWriteCapacityScalableTarget\n       TargetTrackingScalingPolicyConfiguration: \n         TargetValue: 70\n         ScaleInCooldown: 60\n         ScaleOutCooldown: 60\n         PredefinedMetricSpecification: \n           PredefinedMetricType: DynamoDBWriteCapacityUtilization\n  CacheRecidsTableReadScalingPolicy: \n    Type: \"AWS::ApplicationAutoScaling::ScalingPolicy\"\n    DependsOn: CacheRecidsTableReadCapacityScalableTarget\n    Properties: \n       PolicyName: DynamoDBReadAutoScalingPolicy\n       PolicyType: TargetTrackingScaling\n       ScalingTargetId: \n         Ref: CacheRecidsTableReadCapacityScalableTarget\n       TargetTrackingScalingPolicyConfiguration: \n         TargetValue: 70\n         ScaleInCooldown: 60\n         ScaleOutCooldown: 60\n         PredefinedMetricSpecification: \n           PredefinedMetricType: DynamoDBReadCapacityUtilization\nOutputs:\n  endpoint:\n    Value: !Sub https://dynamodb.${AWS::Region}.amazonaws.com\n  region:\n    Value: !Ref AWS::Region\n  version:\n    Value: latest"
}
INV-ver-rmt01-resource-AuroraDBStack-18CH0TNXCP3B1
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "---\nAWSTemplateFormatVersion: \"2010-09-09\"\nDescription: 4-1_rds.txt\nParameters:\n  ServiceName:\n    Type: String\n  VpcId:\n    Type: String\n  SecurityGroup:\n    Type: String\n  AuroraInstanceType:\n    Type: String\n  SubnetIDA:\n    Type: String\n  SubnetIDC:\n    Type: String\n  SystemEnvironment:\n    Type: String\nMappings:\n  DbSettings:\n    DNS:\n      Cluster: db-cluster\n      InstanceA: db-a\n      InstanceC: db-c\n    DbInitialization:\n      ScriptName: dbinit.zip\n    DbBackUpWindow:\n      Value: 14:00-14:30\n    ClusterMaintainanceWindow:\n      Value: Tue:15:00-Tue:15:30\n    DbMaintainanceWindowA:\n      Value: Mon:15:00-Mon:15:30\n    DbMaintainanceWindowC:\n      Value: Fri:15:00-Fri:15:30\nResources:\n  DbSubnetGroup:\n    Type: AWS::RDS::DBSubnetGroup\n    Properties:\n      DBSubnetGroupDescription: Enable RDS Multi-AZ access.\n      SubnetIds:\n      - !Ref SubnetIDA\n      - !Ref SubnetIDC\n  DbClusterParameterGroup:\n    Type: AWS::RDS::DBClusterParameterGroup\n    Properties:\n      Parameters:\n        character_set_client: utf8\n        character_set_connection: utf8\n        character_set_database: utf8\n        character_set_filesystem: utf8\n        character_set_results: utf8\n        character_set_server: utf8\n        time_zone: UTC\n        lower_case_table_names: \"1\"\n      Family: \"aurora-mysql5.7\"\n      Description: !Sub inv-${SystemEnvironment}-${ServiceName}-Db cluster parameter group\n  DbParameterGroup:\n    Type: AWS::RDS::DBParameterGroup\n    Properties:\n      Family: \"aurora-mysql5.7\"\n      Description: !Sub inv-${SystemEnvironment}-${ServiceName}-Db instance parameter group\n  DbCluster:\n    Type: AWS::RDS::DBCluster\n    #DeletionPolicy: Retain\n    Properties:\n      AvailabilityZones:\n      - ap-northeast-1a\n      - ap-northeast-1c\n      BackupRetentionPeriod: 30\n      MasterUsername: !Sub \"${ServiceName}system\"\n      MasterUserPassword: !Sub \"${ServiceName}#system\"\n      DatabaseName: !Sub inv${SystemEnvironment}${ServiceName}Db\n      Engine: aurora-mysql\n      StorageEncrypted: \"true\"\n      DBSubnetGroupName:\n        !Ref DbSubnetGroup\n      VpcSecurityGroupIds:\n      - !Ref SecurityGroup\n      DBClusterParameterGroupName:\n        !Ref DbClusterParameterGroup\n      PreferredBackupWindow:\n        Fn::FindInMap:\n        - DbSettings\n        - DbBackUpWindow\n        - Value\n      PreferredMaintenanceWindow:\n        Fn::FindInMap:\n        - DbSettings\n        - ClusterMaintainanceWindow\n        - Value\n  DbInstanceA:\n    Type: AWS::RDS::DBInstance\n    #DeletionPolicy: Retain\n    Properties:\n      AvailabilityZone: ap-northeast-1a\n      DBSubnetGroupName:\n        !Ref DbSubnetGroup\n      Engine: aurora-mysql\n      DBClusterIdentifier:\n        !Ref DbCluster\n      DBParameterGroupName:\n        !Ref DbParameterGroup\n      DBInstanceIdentifier: !Sub inv${SystemEnvironment}${ServiceName}DbA\n      DBInstanceClass: !Sub \"${AuroraInstanceType}\"\n      PreferredMaintenanceWindow:\n        Fn::FindInMap:\n        - DbSettings\n        - DbMaintainanceWindowA\n        - Value\n  DbInstanceC:\n    Type: AWS::RDS::DBInstance\n    #DeletionPolicy: Retain\n    Properties:\n      AvailabilityZone: ap-northeast-1c\n      DBSubnetGroupName:\n        !Ref DbSubnetGroup\n      Engine: aurora-mysql\n      DBClusterIdentifier:\n        !Ref DbCluster\n      DBParameterGroupName:\n        !Ref DbParameterGroup\n      DBInstanceIdentifier: !Sub inv${SystemEnvironment}${ServiceName}DbC\n      DBInstanceClass: !Sub \"${AuroraInstanceType}\"\n      PreferredMaintenanceWindow:\n        Fn::FindInMap:\n        - DbSettings\n        - DbMaintainanceWindowC\n        - Value\nOutputs:\n  DbInstanceA:\n    Description: InstanceId of the newly created RDS Instance\n    Value: !Ref DbInstanceA\n  DbInstanceC:\n    Description: InstanceId of the newly created RDS Instance\n    Value: !Ref DbInstanceC\n  EndpointAddress:\n    Value: !GetAtt\n        - DbCluster\n        - Endpoint.Address\n  ReadEndpointAddress:\n    Value: !GetAtt\n        - DbCluster\n        - ReadEndpoint.Address\n  EndpointPort:\n    Value: !GetAtt\n        - DbCluster\n        - Endpoint.Port\n  MasterUsername:\n    Value: !Sub \"${ServiceName}system\"\n  MasterUserPassword:\n    Value: !Sub \"${ServiceName}#system\"\n...\n"
}
INV-ver-rmt01-resource-IAMRoleStack-1FATDS41ONAVT
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "---\r\nAWSTemplateFormatVersion: \"2010-09-09\"\r\nDescription: 1-1_iam.txt\r\nParameters:\r\n  ServiceName:\r\n    Type: String\r\n  SystemEnvironment:\r\n    Type: String\r\nResources:\r\n DynamoDBScalingRole: \r\n  Type: \"AWS::IAM::Role\"\r\n  Properties: \r\n   RoleName: !Sub \"inv-${SystemEnvironment}-${ServiceName}-app-DynamoDBScalingRole\"\r\n   AssumeRolePolicyDocument: \r\n    Version: \"2012-10-17\"\r\n    Statement: \r\n     - \r\n      Effect: Allow\r\n      Principal: \r\n       Service: \r\n        - \r\n         \"application-autoscaling.amazonaws.com\"\r\n      Action: \r\n       - \r\n        \"sts:AssumeRole\"\r\n   Path: \"/\"\r\n   Policies: \r\n    - \r\n     PolicyName: !Sub \"PolicyforDynamoDB-inv-${SystemEnvironment}-${ServiceName}-appScaling\"\r\n     PolicyDocument: \r\n      Version: \"2012-10-17\"\r\n      Statement: \r\n       - \r\n        Effect: Allow\r\n        Action:          \r\n         - \"dynamodb:DescribeTable\"\r\n         - \"dynamodb:UpdateTable\"\r\n         - \"cloudwatch:PutMetricAlarm\"\r\n         - \"cloudwatch:DescribeAlarms\"\r\n         - \"cloudwatch:GetMetricStatistics\"\r\n         - \"cloudwatch:SetAlarmState\"\r\n         - \"cloudwatch:DeleteAlarms\"\r\n        Resource: \"*\"\r\nOutputs:\r\n  DynamoDBScalingRole:\r\n    Value:\r\n      Ref: DynamoDBScalingRole\r\n  DynamoDBScalingRoleArn:\r\n    Value:\r\n      !GetAtt DynamoDBScalingRole.Arn\r\n...\r\n"
}
INV-ver-rmt01-resource-SecurityGroupStack-T5LG0OUWGCY7
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "---\r\nAWSTemplateFormatVersion: 2010-09-09\r\nDescription: 3-1_securitygroup.txt\r\nParameters:\r\n  VpcId:\r\n    Type: String\r\n#  PublicAppSg:\r\n#    Type: AWS::EC2::SecurityGroup::Id\r\n#  InternalAppSg:\r\n#    Type: AWS::EC2::SecurityGroup::Id\r\nResources:\r\n          \r\n  SgAuroraDbAccess:\r\n    Type: 'AWS::EC2::SecurityGroup'\r\n    Properties:\r\n      GroupDescription: HTC Db Security Group\r\n      VpcId:\r\n        Ref: VpcId\r\n#  InternalSgAuroraDbAccessIngress:\r\n#    Type: 'AWS::EC2::SecurityGroupIngress'\r\n#    Properties:\r\n#      IpProtocol: tcp\r\n#      FromPort: '3306'\r\n#      ToPort: '3306'\r\n#      SourceSecurityGroupId: !Ref InternalAppSg\r\n#      GroupId:\r\n#        !GetAtt\r\n#          - SgAuroraDbAccess\r\n#          - GroupId\r\n#  PublicSgAuroraDbAccessIngress:\r\n#    Type: 'AWS::EC2::SecurityGroupIngress'\r\n#    Properties:\r\n#      IpProtocol: tcp\r\n#      FromPort: '3306'\r\n#      ToPort: '3306'\r\n#      SourceSecurityGroupId: !Ref PublicAppSg\r\n#      GroupId:\r\n#        !GetAtt\r\n#          - SgAuroraDbAccess\r\n#          - GroupId\r\nOutputs:\r\n  AuroraDbAccessInstance:\r\n    Value:\r\n      Ref: SgAuroraDbAccess\n...\r\n"
}
INV-ver-rmt01-resource
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "---\nAWSTemplateFormatVersion: \"2010-09-09\"\nDescription: 0-1_base.txt\nMetadata:\n  AWS::CloudFormation::Interface:\n    ParameterGroups:\n    - Label:\n        default: Configuration\n      Parameters:\n      - SystemEnvironment\n      - ServiceName\n      - VpcId\n      - SubnetIDA\n      - SubnetIDC\n#      - InternalAppSg\n#      - PublicAppSg\n#      - GtcApiAlbSg\n#      - InternalApiAlbSg\n    - Label:\n        default: Configuration for RDS\n      Parameters:\n      - AuroraInstanceType\n    - Label:\n        default: Configuration for DynamoDB\n      Parameters:\n      - ReadCapacitymin\n      - ReadCapacitymax\n      - WriteCapacitymin\n      - WriteCapacitymax\n      - ReadCapacitymin2\n      - ReadCapacitymax2\n      - WriteCapacitymin2\n      - WriteCapacitymax2\n    ParameterLabels:\n      SystemEnvironment:\n        default: Environment\n      ServiceName:\n        default: ServiceName\n      VpcId:\n        default: VpcId\n      SubnetIDA:\n        default: SubnetIDA\n      SubnetIDC:\n        default: SubnetIDC\n#      InternalAppSg:\n#        default: InternalAppSg\n#      PublicAppSg:\n#        default: PublicAppSg\n#      GtcApiAlbSg:\n#        default: GtcApiAlbSg\n#      InternalApiAlbSg:\n#        default: InternalApiAlbSg\n      AuroraInstanceType:\n        default: AuroraInstanceType\n      ReadCapacitymin:\n        default: ReadCapacitymin\n      ReadCapacitymax:\n        default: ReadCapacitymax\n      WriteCapacitymin:\n        default: WriteCapacitymin\n      WriteCapacitymax:\n        default: WriteCapacitymax\n      ReadCapacitymin2:\n        default: ReadCapacitymin2\n      ReadCapacitymax2:\n        default: ReadCapacitymax2\n      WriteCapacitymin2:\n        default: WriteCapacitymin2\n      WriteCapacitymax2:\n        default: WriteCapacitymax2\nParameters:\n  SystemEnvironment:\n    Type: String\n    Default: dev\n    AllowedValues:\n    - dev\n    - ver\n    - prd\n    Description: '*(Required)* Environment Identifier'\n  ServiceName:\n    Type: String\n    Default: rmt01\n    AllowedValues:\n    - rmt01\n    Description: '*(Required)* ServiceName'\n  VpcId:\n    Type: AWS::EC2::VPC::Id\n    Description: '*(Required)* VPC ID'\n  SubnetIDA:\n    Type: AWS::EC2::Subnet::Id\n    Description: '*(Required)* Subnet ID(ap-northeast-1a)'\n  SubnetIDC:\n    Type: AWS::EC2::Subnet::Id\n    Description: '*(Required)* Subnet ID(ap-northeast-1c)'\n#  InternalAppSg:\n#    Type: AWS::EC2::SecurityGroup::Id\n#  PublicAppSg:\n#    Type: AWS::EC2::SecurityGroup::Id\n  AuroraInstanceType:\n    Type: String\n    AllowedValues:\n    - db.t2.small\n    - db.t2.medium\n    - db.t2.large\n    - db.t2.xlarge\n    - db.t2.2xlarge\n    - db.r4.large\n    - db.r4.xlarge\n    - db.r4.2xlarge\n    - db.r4.4xlarge\n    - db.r4.8xlarge\n    - db.r4.16xlarge\n    - db.x1e.xlarge\n    - db.x1e.2xlarge\n    - db.x1e.4xlarge\n    - db.x1e.8xlarge\n    - db.x1e.16xlarge\n    - db.x1e.32xlarge\n    - db.x1.16xlarge\n    - db.x1.32xlarge\n    - db.m5.large\n    - db.m5.xlarge\n    - db.m5.2xlarge\n    - db.m5.4xlarge\n    - db.m5.12xlarge\n    - db.m5.24xlarge\n    Description: '*(Required)* Aurora Instance Type'\n  ReadCapacitymin:\n    Type: String\n  ReadCapacitymax:\n    Type: String\n  WriteCapacitymin:\n    Type: String\n  WriteCapacitymax:\n    Type: String\n  ReadCapacitymin2:\n    Type: String\n  ReadCapacitymax2:\n    Type: String\n  WriteCapacitymin2:\n    Type: String\n  WriteCapacitymax2:\n    Type: String\n#  GtcApiAlbSg:\n#    Type: AWS::EC2::SecurityGroup::Id\n#  InternalApiAlbSg:\n#    Type: AWS::EC2::SecurityGroup::Id\nResources:\n  IAMRoleStack:\n    Type: AWS::CloudFormation::Stack\n    Properties:\n      TemplateURL: !Sub \"https://s3-ap-northeast-1.amazonaws.com/inv-${SystemEnvironment}-${ServiceName}-cfn/resources/1-1_iam.txt\"\n      Parameters:\n        ServiceName: !Ref ServiceName\n        SystemEnvironment: !Ref SystemEnvironment\n      TimeoutInMinutes: \"5\"\n  SecurityGroupStack:\n    Type: AWS::CloudFormation::Stack\n    Properties:\n      TemplateURL: !Sub \"https://s3-ap-northeast-1.amazonaws.com/inv-${SystemEnvironment}-${ServiceName}-cfn/resources/3-1_securitygroup.txt\"\n      TimeoutInMinutes: \"5\"\n      Parameters:\n        VpcId: !Ref VpcId\n#        PublicAppSg: !Ref PublicAppSg\n#        InternalAppSg: !Ref InternalAppSg\n#        GtcApiAlbSg: !Ref GtcApiAlbSg\n#        InternalApiAlbSg: !Ref InternalApiAlbSg\n  AuroraDBStack:\n    Type: AWS::CloudFormation::Stack\n    DependsOn: SecurityGroupStack\n    Properties:\n      TemplateURL: !Sub \"https://s3-ap-northeast-1.amazonaws.com/inv-${SystemEnvironment}-${ServiceName}-cfn/resources/4-1_rds.txt\"\n      TimeoutInMinutes: \"30\"\n      Parameters:\n        ServiceName: !Ref ServiceName\n        VpcId: !Ref VpcId\n        SecurityGroup:\n          !GetAtt\n          - SecurityGroupStack\n          - Outputs.AuroraDbAccessInstance\n        AuroraInstanceType: !Ref AuroraInstanceType\n        SubnetIDA: !Ref SubnetIDA\n        SubnetIDC: !Ref SubnetIDC\n        SystemEnvironment: !Ref SystemEnvironment\n      TimeoutInMinutes: \"30\"\n  DynamoDBStack:\n    Type: AWS::CloudFormation::Stack\n    DependsOn: IAMRoleStack\n    Properties:\n      Parameters:\n        ReadCapacitymin:\n          !Ref ReadCapacitymin\n        ReadCapacitymax:\n          !Ref ReadCapacitymax\n        WriteCapacitymin:\n          !Ref WriteCapacitymin\n        WriteCapacitymax:\n          !Ref WriteCapacitymax\n        ReadCapacitymin2:\n          !Ref ReadCapacitymin2\n        ReadCapacitymax2:\n          !Ref ReadCapacitymax2\n        WriteCapacitymin2:\n          !Ref WriteCapacitymin2\n        WriteCapacitymax2:\n          !Ref WriteCapacitymax2\n        DynamoDBScalingRole:\n          !GetAtt\n          - IAMRoleStack\n          - Outputs.DynamoDBScalingRoleArn\n\n      TemplateURL: !Sub \"https://s3-ap-northeast-1.amazonaws.com/inv-${SystemEnvironment}-${ServiceName}-cfn/resources/7-1_dynamodb.txt\"\nOutputs:\n  ServiceNameEnvironment:\n    Value:\n      !Join\n      - '-'\n      - - !Ref ServiceName\n        - !Ref SystemEnvironment\n...\n"
}
INV-ver-rmt01-internal-api-role
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: ecs task exec role\n\nParameters:\n  accountAllias:\n    Type: String\n  accountAlliasLowerCase:\n    Type: String\n\nResources:\n  ecsTaskExecutionRoleGtcApi:\n    Type: AWS::IAM::Role\n    Properties:\n      RoleName: !Sub \"${accountAllias}-internal-api-ecsTaskExecutionRole\"\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement:\n          - Effect: \"Allow\"\n            Principal:\n              Service:\n                - \"ecs-tasks.amazonaws.com\"\n            Action:\n              - \"sts:AssumeRole\"\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy\n        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess\n      Policies:\n        -\n          PolicyName: read_params\n          PolicyDocument:\n            Version: \"2012-10-17\"\n            Statement:\n              -\n                Effect: Allow\n                Action:\n                  - \"ssm:GetParameters\"\n                Resource:\n                  - \"*\"\n\nOutputs:\n  gtcApiTaskRole:\n    Value: !Ref ecsTaskExecutionRoleGtcApi\n    Export:\n      Name: internalApiTaskRole\n"
}
INV-ver-rmt01-internal-api-ecs-loggroup
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: ecs and loggroup\n\nParameters:\n  accountAllias:\n    Type: String\n  accountAllias:\n    Type: String\n  logGroupName:\n    Type: String\n\nResources:\n  logGroup:\n    Type: AWS::Logs::LogGroup\n    Properties:\n      LogGroupName: !Ref logGroupName\n\nOutputs:\n  logGroup:\n    Value: !Ref logGroup\n    Export:\n      Name: logGroupInternalApi\n"
}
INV-ver-rmt01-gtc-api-role
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: ecs task exec role\n\nParameters:\n  accountAllias:\n    Type: String\n  accountAlliasLowerCase:\n    Type: String\n\nResources:\n  ecsTaskExecutionRoleGtcApi:\n    Type: AWS::IAM::Role\n    Properties:\n      RoleName: !Sub \"${accountAllias}-gtc-api-ecsTaskExecutionRole\"\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement:\n          - Effect: \"Allow\"\n            Principal:\n              Service:\n                - \"ecs-tasks.amazonaws.com\"\n            Action:\n              - \"sts:AssumeRole\"\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy\n        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess\n      Policies:\n        -\n          PolicyName: read_params\n          PolicyDocument:\n            Version: \"2012-10-17\"\n            Statement:\n              -\n                Effect: Allow\n                Action:\n                  - \"ssm:GetParameters\"\n                Resource:\n                  - \"*\"\n\nOutputs:\n  gtcApiTaskRole:\n    Value: !Ref ecsTaskExecutionRoleGtcApi\n    Export:\n      Name: gtcApiTaskRole\n"
}
INV-ver-rmt01-gtc-api-ecs-loggroup
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: ecs and loggroup\n\nParameters:\n  accountAllias:\n    Type: String\n  accountAllias:\n    Type: String\n  logGroupName:\n    Type: String\n\nResources:\n  logGroup:\n    Type: AWS::Logs::LogGroup\n    Properties:\n      LogGroupName: !Ref logGroupName\n\nOutputs:\n  logGroup:\n    Value: !Ref logGroup\n    Export:\n      Name: logGroupGtcApi\n"
}
INV-ver-rmt01-remote-app-api-role
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: ecs task exec role\n\nParameters:\n  accountAllias:\n    Type: String\n  accountAlliasLowerCase:\n    Type: String\n\nResources:\n  ecsTaskExecutionRoleRemoteApp:\n    Type: AWS::IAM::Role\n    Properties:\n      RoleName: !Sub \"${accountAllias}-remote-app-api-ecsTaskExecutionRole\"\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement:\n          - Effect: \"Allow\"\n            Principal:\n              Service:\n                - \"ecs-tasks.amazonaws.com\"\n            Action:\n              - \"sts:AssumeRole\"\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy\n        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess\n      Policies:\n        -\n          PolicyName: read_params\n          PolicyDocument:\n            Version: \"2012-10-17\"\n            Statement:\n              -\n                Effect: Allow\n                Action:\n                  - \"ssm:GetParameters\"\n                Resource:\n                  - \"*\"\n\nOutputs:\n  remoteAppTaskRole:\n    Value: !Ref ecsTaskExecutionRoleRemoteApp\n    Export:\n      Name: remoteAppTaskRole\n"
}
INV-ver-rmt01-remote-app-api-ecs-loggroup
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: ecs and loggroup\n\nParameters:\n  accountAllias:\n    Type: String\n  accountAllias:\n    Type: String\n  logGroupName:\n    Type: String\n\nResources:\n  logGroup:\n    Type: AWS::Logs::LogGroup\n    Properties:\n      LogGroupName: !Ref logGroupName\n\nOutputs:\n  logGroup:\n    Value: !Ref logGroup\n    Export:\n      Name: logGroupRemoteApp\n"
}
INV-ver-rmt01-remote-app-api-ecr
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: codecommit and ecr\n\nParameters:\n  accountAllias:\n    Type: String\n  accountAlliasLowerCase:\n    Type: String\n\n\nResources:\n  ecrRemoteAppNginx:\n    Type: AWS::ECR::Repository\n    Properties:\n      RepositoryName: !Sub ${accountAlliasLowerCase}-remote-app-api-nginx-ecr\n  ecrRemoteAppPhp:\n    Type: AWS::ECR::Repository\n    Properties:\n      RepositoryName: !Sub ${accountAlliasLowerCase}-remote-app-api-php-ecr\n\nOutputs:\n  ecrRemoteAppNginx:\n    Value: !Ref ecrRemoteAppNginx\n    Export:\n      Name: ecrRemoteAppNginx\n  ecrRemoteAppNginxArn:\n    Value: !GetAtt ecrRemoteAppNginx.Arn\n    Export:\n      Name: ecrRemoteAppNginxArn\n  ecrRemoteAppPhp:\n    Value: !Ref ecrRemoteAppPhp\n    Export:\n      Name: ecrRemoteAppPhp\n  ecrRemoteAppArn:\n    Value: !GetAtt ecrRemoteAppPhp.Arn\n    Export:\n      Name: ecrRemoteAppPhpArn\n"
}
INV-ver-rmt01-gtc-api-apigateway
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: apigateway\n\nParameters:\n  apiName:\n    Type: String\n  fqdn:\n    Type: String\n  certificate:\n    Type: String\n  stageName:\n    Type: String\n  authorization:\n    Type: String\n\nResources:\n  publicTargetGroup:\n    Type: AWS::ElasticLoadBalancingV2::TargetGroup\n    Properties:\n      HealthCheckIntervalSeconds: 30\n      HealthCheckPath: /healthcheck\n      HealthCheckPort: 80\n      HealthCheckProtocol: HTTP\n      HealthCheckTimeoutSeconds: 6\n      HealthyThresholdCount: 3\n      Name: !Sub ${apiName}-tg\n      Port: 80\n      Protocol: TCP\n      UnhealthyThresholdCount: 3\n      TargetType: ip\n      VpcId: !ImportValue VPC\n  publicNlb:\n    Type: AWS::ElasticLoadBalancingV2::LoadBalancer\n    Properties:\n      Name: !Sub ${apiName}-nlb\n      Scheme: internal\n      Subnets:\n        - !ImportValue PrivateSubnet1a\n        - !ImportValue PrivateSubnet1c\n      Tags:\n        - Key: Name\n          Value: !Sub ${apiName}-nlb\n      Type: network\n      LoadBalancerAttributes:\n        - Key: load_balancing.cross_zone.enabled\n          Value: true\n  publiclistnener:\n    Type: AWS::ElasticLoadBalancingV2::Listener\n    Properties:\n      DefaultActions:\n        - TargetGroupArn: !Ref publicTargetGroup\n          Type: forward\n      LoadBalancerArn: !Ref publicNlb\n      Port: 80\n      Protocol: TCP\n  vpcLink:\n    Type: AWS::ApiGateway::VpcLink\n    Properties:\n      Description: !Sub ${apiName}-vpclink\n      Name: !Sub ${apiName}-vpclink\n      TargetArns:\n        - !Ref publicNlb\n  apigateway:\n    Type: AWS::ApiGateway::RestApi\n    Properties:\n      Name: !Sub ${apiName}\n      Description: !Sub ${apiName}\n      EndpointConfiguration:\n        Types:\n          - REGIONAL\n\n  proxyresource:\n    Type: AWS::ApiGateway::Resource\n    Properties:\n      RestApiId: !Ref apigateway\n      ParentId: !GetAtt apigateway.RootResourceId\n      PathPart: '{proxy+}'\n\n  domainName:\n    Type: 'AWS::ApiGateway::DomainName'\n    Properties:\n      DomainName: !Ref fqdn\n      EndpointConfiguration:\n        Types:\n          - REGIONAL\n      RegionalCertificateArn: !Ref certificate\n  basepath:\n    Type: AWS::ApiGateway::BasePathMapping\n    DependsOn: deployApi\n    Properties:\n      DomainName: !Ref domainName\n      RestApiId: !Ref apigateway\n      Stage: !Ref stageName\n  apimethod:\n    Type: AWS::ApiGateway::Method\n    DependsOn: vpcLink\n    Properties:\n      HttpMethod: ANY\n      RestApiId: !Ref apigateway\n      ResourceId: !Ref proxyresource\n      AuthorizationType: !Ref authorization\n      RequestParameters:\n        \"method.request.path.proxy\": true\n      Integration:\n        Type: HTTP_PROXY\n        IntegrationHttpMethod: ANY\n        ConnectionType: VPC_LINK\n        ConnectionId: !Ref vpcLink\n        Uri: !Sub \"http://${fqdn}/{proxy}\"\n        IntegrationResponses:\n          - StatusCode: 200\n        RequestParameters:\n          \"integration.request.path.proxy\": \"method.request.path.proxy\"\n          \"integration.request.header.x-amzn-source-ip\": \"context.identity.sourceIp\"\n          \"integration.request.header.x-amzn-extended-request-id\": \"context.extendedRequestId\"\n          \"integration.request.header.x-amzn-request-id\": \"context.requestId\"\n          \"integration.request.header.x-amzn-request-time\": \"context.requestTime\"\n          \"integration.request.header.x-amzn-iam\": \"context.identity.userArn\"\n\n  deployApi:\n    Type: AWS::ApiGateway::Deployment\n    DependsOn: apimethod\n    Properties:\n      Description: Production Deployment\n      RestApiId: !Ref apigateway\n      StageName: !Ref stageName\n      StageDescription:\n        DataTraceEnabled: true\n        LoggingLevel: INFO\n        MetricsEnabled: true\n\nOutputs:\n  nlb:\n    Value: !Ref publicNlb\n    Export:\n      Name: !Sub ${apiName}-nlb\n  tg:\n    Value: !Ref publicTargetGroup\n    Export:\n      Name: !Sub ${apiName}-targetGroup\n  vpcLink:\n    Value: !Ref vpcLink\n    Export:\n      Name: !Sub ${apiName}-vpcLink\n  apigateway:\n    Value: !Ref apigateway\n    Export:\n      Name: !Sub ${apiName}-apigateway\n  apimethod:\n    Value: !Ref apimethod\n    Export:\n      Name: !Sub ${apiName}-apimethod\n"
}
INV-ver-rmt01-api-alb
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: public security group and alb\n\nParameters:\n  publicSecurityGroupCidr:\n    Type: String\n  apiName:\n    Type: String\n  certificate:\n    Type: String\n\nResources:\n  publicAlbSecuritygroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupName: !Sub ${apiName}-alb-sg\n      GroupDescription: !Sub ${apiName}-alb-sg\n      Tags:\n        - Key: Name\n          Value: !Sub ${apiName}-alb-sg\n      VpcId: !ImportValue VPC\n      SecurityGroupIngress:\n      - IpProtocol: tcp\n        FromPort: '443'\n        ToPort: '443'\n        CidrIp: !Ref publicSecurityGroupCidr\n      - IpProtocol: tcp\n        FromPort: '80'\n        ToPort: '80'\n        CidrIp: !Ref publicSecurityGroupCidr\n  publicAlbTargetGroup:\n    Type: AWS::ElasticLoadBalancingV2::TargetGroup\n    Properties:\n      HealthCheckIntervalSeconds: 30\n      HealthCheckPath: /healthcheck\n      HealthCheckPort: 80\n      HealthCheckProtocol: HTTP\n      HealthCheckTimeoutSeconds: 6\n      HealthyThresholdCount: 3\n      Name: !Sub ${apiName}-alb-tg\n      Port: 80\n      Protocol: HTTP\n      UnhealthyThresholdCount: 3\n      TargetType: ip\n      VpcId: !ImportValue VPC\n  publicAlb:\n    Type: AWS::ElasticLoadBalancingV2::LoadBalancer\n    Properties:\n      Name: !Sub ${apiName}-alb\n      Scheme: internet-facing\n      SecurityGroups:\n        - !Ref publicAlbSecuritygroup\n      Subnets:\n        - !ImportValue PublicSubnet1a\n        - !ImportValue PublicSubnet1c\n      Tags:\n        - Key: Name\n          Value: !Sub ${apiName}-alb\n      Type: application\n      LoadBalancerAttributes:\n        - Key: access_logs.s3.enabled\n          Value: true\n        - Key: access_logs.s3.bucket\n          Value: !ImportValue LogBucket\n        - Key: access_logs.s3.prefix\n          Value: !Ref apiName\n  publicAlblistnener:\n    Type: AWS::ElasticLoadBalancingV2::Listener\n    Properties:\n      DefaultActions:\n        - TargetGroupArn: !Ref publicAlbTargetGroup\n          Type: forward\n      Certificates:\n        - CertificateArn: !Ref certificate\n      LoadBalancerArn: !Ref publicAlb\n      Port: 443\n      Protocol: HTTPS\n\n  publicAlblistnener:\n    Type: AWS::ElasticLoadBalancingV2::Listener\n    Properties:\n      DefaultActions:\n        - Type: fixed-response\n          FixedResponseConfig:\n            StatusCode: 403\n            MessageBody: Not authorized Access.\n            ContentType: text/plain\n      Certificates:\n        - CertificateArn: !Ref certificate\n      LoadBalancerArn: !Ref publicAlb\n      Port: 443\n      Protocol: HTTPS\n#  lisnerRule1:\n#    Type: AWS::ElasticLoadBalancingV2::ListenerRule\n#    Properties:\n#      Actions:\n#      - Type: forward\n#        TargetGroupArn:\n#          !Ref publicAlbTargetGroup\n#      Conditions:\n#      - Field: path-pattern\n#        Values:\n#        - !Sub\n#          - \"/${path}/*\"\n#          - { path: !Ref path1 }\n#      ListenerArn: !Ref publicAlblistnener\n#      Priority: 10\n\nOutputs:\n  publicAlbSecuritygroup:\n    Value: !Ref publicAlbSecuritygroup\n    Export:\n      Name: !Sub ${apiName}-albSecuritygroup\n  publicAlbTargetGroup:\n    Value: !Ref publicAlbTargetGroup\n    Export:\n      Name: !Sub ${apiName}-albTargetGroup\n  publicAlb:\n    Value: !Ref publicAlb\n    Export:\n      Name: !Sub ${apiName}-alb\n  publicAlblistnener:\n    Value: !Ref publicAlblistnener\n    Export:\n      Name: !Sub ${apiName}-alblistnener\n"
}
INV-ver-rmt01-pub-api-alb
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: public security group and alb\n\nParameters:\n  publicSecurityGroupCidr:\n    Type: String\n  apiName:\n    Type: String\n  certificate:\n    Type: String\n\nResources:\n  publicAlbSecuritygroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupName: !Sub ${apiName}-alb-sg\n      GroupDescription: !Sub ${apiName}-alb-sg\n      Tags:\n        - Key: Name\n          Value: !Sub ${apiName}-alb-sg\n      VpcId: !ImportValue VPC\n      SecurityGroupIngress:\n      - IpProtocol: tcp\n        FromPort: '443'\n        ToPort: '443'\n        CidrIp: !Ref publicSecurityGroupCidr\n      - IpProtocol: tcp\n        FromPort: '80'\n        ToPort: '80'\n        CidrIp: !Ref publicSecurityGroupCidr\n  publicAlbTargetGroup:\n    Type: AWS::ElasticLoadBalancingV2::TargetGroup\n    Properties:\n      HealthCheckIntervalSeconds: 30\n      HealthCheckPath: /healthcheck\n      HealthCheckPort: 80\n      HealthCheckProtocol: HTTP\n      HealthCheckTimeoutSeconds: 6\n      HealthyThresholdCount: 3\n      Name: !Sub ${apiName}-alb-tg\n      Port: 80\n      Protocol: HTTP\n      UnhealthyThresholdCount: 3\n      TargetType: ip\n      VpcId: !ImportValue VPC\n  publicAlb:\n    Type: AWS::ElasticLoadBalancingV2::LoadBalancer\n    Properties:\n      Name: !Sub ${apiName}-alb\n      Scheme: internet-facing\n      SecurityGroups:\n        - !Ref publicAlbSecuritygroup\n      Subnets:\n        - !ImportValue PublicSubnet1a\n        - !ImportValue PublicSubnet1c\n      Tags:\n        - Key: Name\n          Value: !Sub ${apiName}-alb\n      Type: application\n      LoadBalancerAttributes:\n        - Key: access_logs.s3.enabled\n          Value: true\n        - Key: access_logs.s3.bucket\n          Value: !ImportValue LogBucket\n        - Key: access_logs.s3.prefix\n          Value: !Ref apiName\n  publicAlblistnener:\n    Type: AWS::ElasticLoadBalancingV2::Listener\n    Properties:\n      DefaultActions:\n        - TargetGroupArn: !Ref publicAlbTargetGroup\n          Type: forward\n      Certificates:\n        - CertificateArn: !Ref certificate\n      LoadBalancerArn: !Ref publicAlb\n      Port: 443\n      Protocol: HTTPS\n\n  publicAlblistnener:\n    Type: AWS::ElasticLoadBalancingV2::Listener\n    Properties:\n      DefaultActions:\n        - Type: fixed-response\n          FixedResponseConfig:\n            StatusCode: 403\n            MessageBody: Not authorized Access.\n            ContentType: text/plain\n      Certificates:\n        - CertificateArn: !Ref certificate\n      LoadBalancerArn: !Ref publicAlb\n      Port: 443\n      Protocol: HTTPS\n#  lisnerRule1:\n#    Type: AWS::ElasticLoadBalancingV2::ListenerRule\n#    Properties:\n#      Actions:\n#      - Type: forward\n#        TargetGroupArn:\n#          !Ref publicAlbTargetGroup\n#      Conditions:\n#      - Field: path-pattern\n#        Values:\n#        - !Sub\n#          - \"/${path}/*\"\n#          - { path: !Ref path1 }\n#      ListenerArn: !Ref publicAlblistnener\n#      Priority: 10\n\nOutputs:\n  publicAlbSecuritygroup:\n    Value: !Ref publicAlbSecuritygroup\n    Export:\n      Name: !Sub ${apiName}-albSecuritygroup\n  publicAlbTargetGroup:\n    Value: !Ref publicAlbTargetGroup\n    Export:\n      Name: !Sub ${apiName}-albTargetGroup\n  publicAlb:\n    Value: !Ref publicAlb\n    Export:\n      Name: !Sub ${apiName}-alb\n  publicAlblistnener:\n    Value: !Ref publicAlblistnener\n    Export:\n      Name: !Sub ${apiName}-alblistnener\n"
}
INV-ver-rmt01-apilogrole
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: API Gateway Log Role\n\nResources:\n  CloudWatchRole:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service:\n                - \"apigateway.amazonaws.com\"\n            Action: \"sts:AssumeRole\"\n      Path: \"/\"\n      ManagedPolicyArns:\n        - \"arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs\"\n  Account:\n    Type: AWS::ApiGateway::Account\n    Properties:\n      CloudWatchRoleArn:\n        \"Fn::GetAtt\":\n          - CloudWatchRole\n          - Arn\nOutputs:\n  vpcLink:\n    Value: !Ref CloudWatchRole\n    Export:\n      Name: ApiCloudWatchRole\n"
}
INV-ver-rmt01-web-alb
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: public security group and alb\n\nParameters:\n  publicSecurityGroupCidr:\n    Type: String\n  apiName:\n    Type: String\n  certificate:\n    Type: String\n\nResources:\n  publicAlbSecuritygroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupName: !Sub ${apiName}-alb-sg\n      GroupDescription: !Sub ${apiName}-alb-sg\n      Tags:\n        - Key: Name\n          Value: !Sub ${apiName}-alb-sg\n      VpcId: !ImportValue VPC\n      SecurityGroupIngress:\n      - IpProtocol: tcp\n        FromPort: '443'\n        ToPort: '443'\n        CidrIp: !Ref publicSecurityGroupCidr\n      - IpProtocol: tcp\n        FromPort: '80'\n        ToPort: '80'\n        CidrIp: !Ref publicSecurityGroupCidr\n  publicAlbTargetGroup:\n    Type: AWS::ElasticLoadBalancingV2::TargetGroup\n    Properties:\n      HealthCheckIntervalSeconds: 30\n      HealthCheckPath: /healthcheck\n      HealthCheckPort: 80\n      HealthCheckProtocol: HTTP\n      HealthCheckTimeoutSeconds: 6\n      HealthyThresholdCount: 3\n      Name: !Sub ${apiName}-alb-tg\n      Port: 80\n      Protocol: HTTP\n      UnhealthyThresholdCount: 3\n      TargetType: ip\n      VpcId: !ImportValue VPC\n  publicAlb:\n    Type: AWS::ElasticLoadBalancingV2::LoadBalancer\n    Properties:\n      Name: !Sub ${apiName}-alb\n      Scheme: internet-facing\n      SecurityGroups:\n        - !Ref publicAlbSecuritygroup\n      Subnets:\n        - !ImportValue PublicSubnet1a\n        - !ImportValue PublicSubnet1c\n      Tags:\n        - Key: Name\n          Value: !Sub ${apiName}-alb\n      Type: application\n      LoadBalancerAttributes:\n        - Key: access_logs.s3.enabled\n          Value: true\n        - Key: access_logs.s3.bucket\n          Value: !ImportValue LogBucket\n        - Key: access_logs.s3.prefix\n          Value: !Ref apiName\n  publicAlblistnener:\n    Type: AWS::ElasticLoadBalancingV2::Listener\n    Properties:\n      DefaultActions:\n        - TargetGroupArn: !Ref publicAlbTargetGroup\n          Type: forward\n      Certificates:\n        - CertificateArn: !Ref certificate\n      LoadBalancerArn: !Ref publicAlb\n      Port: 443\n      Protocol: HTTPS\n\nOutputs:\n  publicAlbSecuritygroup:\n    Value: !Ref publicAlbSecuritygroup\n    Export:\n      Name: !Sub ${apiName}-albSecuritygroup\n  publicAlbTargetGroup:\n    Value: !Ref publicAlbTargetGroup\n    Export:\n      Name: !Sub ${apiName}-albTargetGroup\n  publicAlb:\n    Value: !Ref publicAlb\n    Export:\n      Name: !Sub ${apiName}-alb\n  publicAlblistnener:\n    Value: !Ref publicAlblistnener\n    Export:\n      Name: !Sub ${apiName}-alblistnener\n"
}
INV-ver-rmt01-int-api-alb
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: public security group and alb\n\nParameters:\n  publicSecurityGroupCidr:\n    Type: String\n  apiName:\n    Type: String\n\nResources:\n  publicAlbSecuritygroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupName: !Sub ${apiName}-alb-sg\n      GroupDescription: !Sub ${apiName}-alb-sg\n      Tags:\n        - Key: Name\n          Value: !Sub ${apiName}-alb-sg\n      VpcId: !ImportValue VPC\n      SecurityGroupIngress:\n      - IpProtocol: tcp\n        FromPort: '80'\n        ToPort: '80'\n        CidrIp: !Ref publicSecurityGroupCidr\n  publicAlbTargetGroup:\n    Type: AWS::ElasticLoadBalancingV2::TargetGroup\n    Properties:\n      HealthCheckIntervalSeconds: 30\n      HealthCheckPath: /healthcheck\n      HealthCheckPort: 80\n      HealthCheckProtocol: HTTP\n      HealthCheckTimeoutSeconds: 6\n      HealthyThresholdCount: 3\n      Name: !Sub ${apiName}-alb-tg\n      Port: 80\n      Protocol: HTTP\n      UnhealthyThresholdCount: 3\n      TargetType: ip\n      VpcId: !ImportValue VPC\n  publicAlb:\n    Type: AWS::ElasticLoadBalancingV2::LoadBalancer\n    Properties:\n      Name: !Sub ${apiName}-alb\n      Scheme: internal\n      SecurityGroups:\n        - !Ref publicAlbSecuritygroup\n      Subnets:\n        - !ImportValue PrivateSubnet1a\n        - !ImportValue PrivateSubnet1c\n      Tags:\n        - Key: Name\n          Value: !Sub ${apiName}-alb\n      Type: application\n      LoadBalancerAttributes:\n        - Key: access_logs.s3.enabled\n          Value: true\n        - Key: access_logs.s3.bucket\n          Value: !ImportValue LogBucket\n        - Key: access_logs.s3.prefix\n          Value: !Ref apiName\n  publicAlblistnener:\n    Type: AWS::ElasticLoadBalancingV2::Listener\n    Properties:\n      DefaultActions:\n        - TargetGroupArn: !Ref publicAlbTargetGroup\n          Type: forward\n      LoadBalancerArn: !Ref publicAlb\n      Port: 80\n      Protocol: HTTP\n\nOutputs:\n  publicAlbSecuritygroup:\n    Value: !Ref publicAlbSecuritygroup\n    Export:\n      Name: !Sub ${apiName}-albSecuritygroup\n  publicAlbTargetGroup:\n    Value: !Ref publicAlbTargetGroup\n    Export:\n      Name: !Sub ${apiName}-albTargetGroup\n  publicAlb:\n    Value: !Ref publicAlb\n    Export:\n      Name: !Sub ${apiName}-alb\n  publicAlblistnener:\n    Value: !Ref publicAlblistnener\n    Export:\n      Name: !Sub ${apiName}-alblistnener\n"
}
StackSet-InfraAdmin-CreateIamRole-a231b32a-6cc0-4ebe-b1d7-88209e52218e
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": {
        "AWSTemplateFormatVersion": "2010-09-09", 
        "Description": "Template for Creating IAM Role to Switch from Internavi Login AWS Account", 
        "Parameters": {
            "TrustedAWSAccountId": {
                "AllowedPattern": "^[0-9]*$", 
                "Type": "String", 
                "Default": "975196479634", 
                "Description": "Trusted AWS Account ID"
            }, 
            "IAMRoleName": {
                "Type": "String", 
                "Default": "InfraAdmin", 
                "Description": "IAM Role Name"
            }
        }, 
        "Resources": {
            "IAMRoleForEngineer": {
                "Type": "AWS::IAM::Role", 
                "Properties": {
                    "AssumeRolePolicyDocument": {
                        "Version": "2012-10-17", 
                        "Statement": [
                            {
                                "Effect": "Allow", 
                                "Principal": {
                                    "AWS": {
                                        "Fn::Join": [
                                            "", 
                                            [
                                                "arn:aws:iam::", 
                                                {
                                                    "Ref": "TrustedAWSAccountId"
                                                }, 
                                                ":user/", 
                                                "JV010031"
                                            ]
                                        ]
                                    }
                                }, 
                                "Action": [
                                    "sts:AssumeRole"
                                ], 
                                "Condition": {
                                    "Bool": {
                                        "aws:MultiFactorAuthPresent": "true"
                                    }
                                }
                            }, 
                            {
                                "Effect": "Allow", 
                                "Principal": {
                                    "AWS": {
                                        "Fn::Join": [
                                            "", 
                                            [
                                                "arn:aws:iam::", 
                                                {
                                                    "Ref": "TrustedAWSAccountId"
                                                }, 
                                                ":user/", 
                                                "JV010024"
                                            ]
                                        ]
                                    }
                                }, 
                                "Action": [
                                    "sts:AssumeRole"
                                ], 
                                "Condition": {
                                    "Bool": {
                                        "aws:MultiFactorAuthPresent": "true"
                                    }
                                }
                            }
                        ]
                    }, 
                    "ManagedPolicyArns": [
                        "arn:aws:iam::aws:policy/AdministratorAccess"
                    ], 
                    "Path": "/", 
                    "RoleName": {
                        "Ref": "IAMRoleName"
                    }
                }
            }
        }, 
        "Outputs": {
            "IAMRoleArn": {
                "Value": {
                    "Fn::GetAtt": [
                        "IAMRoleForEngineer", 
                        "Arn"
                    ]
                }
            }, 
            "LinkForSwitchRole": {
                "Value": {
                    "Fn::Join": [
                        "", 
                        [
                            "https://signin.aws.amazon.com/switchrole?roleName=", 
                            {
                                "Ref": "IAMRoleName"
                            }, 
                            "&account=", 
                            {
                                "Ref": "AWS::AccountId"
                            }
                        ]
                    ]
                }
            }
        }
    }
}
StackSet-OpeAdmin-CreateIamRole-c6c3cfca-46ac-4d45-8f6a-3ccb5142ba3b
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "{\n  \"AWSTemplateFormatVersion\" : \"2010-09-09\",\n  \"Description\" : \"Template for Creating IAM Role to Switch from Internavi Login AWS Account\",\n  \"Parameters\" : {\n    \"TrustedAWSAccountId\" : {\n      \"AllowedPattern\" : \"^[0-9]*$\",\n      \"Type\" : \"String\",\n      \"Default\" : \"975196479634\",\n      \"Description\" : \"Trusted AWS Account ID\"\n    },\n    \"IAMRoleName\": {\n      \"Type\": \"String\",\n      \"Default\": \"OpeAdminRole\",\n      \"Description\": \"IAM Role Name\"\n    }\n  },\n  \"Resources\" : {\n    \"IAMRoleForEngineer\": {\n      \"Type\": \"AWS::IAM::Role\",\n      \"Properties\": {\n        \"AssumeRolePolicyDocument\": {\n          \"Version\": \"2012-10-17\",\n          \"Statement\": [\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010002\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010025\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010026\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010027\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010028\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010030\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            }\n          ]\n        },\n        \"ManagedPolicyArns\": [\n          \"arn:aws:iam::aws:policy/AdministratorAccess\"\n        ],\n        \"Path\": \"/\",\n        \"RoleName\": { \"Ref\" : \"IAMRoleName\" }\n      }\n    }\n  },\n  \"Outputs\" : {\n    \"IAMRoleArn\": {\n      \"Value\": { \"Fn::GetAtt\" : [ \"IAMRoleForEngineer\", \"Arn\" ] }\n    },\n    \"LinkForSwitchRole\": {\n      \"Value\": { \"Fn::Join\": [ \"\", [ \"https://signin.aws.amazon.com/switchrole?roleName=\", { \"Ref\" : \"IAMRoleName\" }, \"&account=\", { \"Ref\" : \"AWS::AccountId\" } ] ] }\n    }\n  }\n}\n"
}
INV-ver-rmt01-remoteapp-api-alb
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: public security group and alb\n\nParameters:\n  publicSecurityGroupCidr:\n    Type: String\n  apiName:\n    Type: String\n  certificate:\n    Type: String\nResources:\n  publicAlbSecuritygroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupName: !Sub ${apiName}-alb-sg\n      GroupDescription: !Sub ${apiName}-alb-sg\n      Tags:\n        - Key: Name\n          Value: !Sub ${apiName}-alb-sg\n      VpcId: !ImportValue VPC\n      SecurityGroupIngress:\n      - IpProtocol: tcp\n        FromPort: '443'\n        ToPort: '443'\n        CidrIp: !Ref publicSecurityGroupCidr\n      - IpProtocol: tcp\n        FromPort: '80'\n        ToPort: '80'\n        CidrIp: !Ref publicSecurityGroupCidr\n  publicAlbTargetGroup:\n    Type: AWS::ElasticLoadBalancingV2::TargetGroup\n    Properties:\n      HealthCheckIntervalSeconds: 10\n      HealthCheckPath: /healthcheck\n      HealthCheckPort: 80\n      HealthCheckProtocol: HTTP\n      HealthCheckTimeoutSeconds: 6\n      HealthyThresholdCount: 3\n      Name: !Sub ${apiName}-public-tg\n      Port: 80\n      Protocol: HTTP\n      UnhealthyThresholdCount: 3\n      TargetType: ip\n      VpcId: !ImportValue VPC\n  publicAlb:\n    Type: AWS::ElasticLoadBalancingV2::LoadBalancer\n    Properties:\n      Name: !Sub ${apiName}-alb\n      Scheme: internet-facing\n      SecurityGroups:\n        - !Ref publicAlbSecuritygroup\n      Subnets:\n        - !ImportValue PublicSubnet1a\n        - !ImportValue PublicSubnet1c\n      Tags:\n        - Key: Name\n          Value: !Sub ${apiName}-alb\n      Type: application\n      LoadBalancerAttributes:\n        - Key: access_logs.s3.enabled\n          Value: true\n        - Key: access_logs.s3.bucket\n          Value: !ImportValue LogBucket\n        - Key: access_logs.s3.prefix\n          Value: !Ref apiName\n  publicAlblistnener:\n    Type: AWS::ElasticLoadBalancingV2::Listener\n    Properties:\n      DefaultActions:\n        - TargetGroupArn: !Ref publicAlbTargetGroup\n          Type: forward\n      Certificates:\n        - CertificateArn: !Ref certificate\n      LoadBalancerArn: !Ref publicAlb\n      Port: 443\n      Protocol: HTTPS\n\nOutputs:\n  publicAlbSecuritygroup:\n    Value: !Ref publicAlbSecuritygroup\n    Export:\n      Name: !Sub ${apiName}-albSecuritygroup\n  publicAlbTargetGroup:\n    Value: !Ref publicAlbTargetGroup\n    Export:\n      Name: !Sub ${apiName}-publicTargetGroup\n  publicAlb:\n    Value: !Ref publicAlb\n    Export:\n      Name: !Sub ${apiName}-alb\n  publicAlblistnener:\n    Value: !Ref publicAlblistnener\n    Export:\n      Name: !Sub ${apiName}-alblistnener\n"
}
INV-ver-rmt01-remoteapp-web
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: public security group and alb\n\nParameters:\n  publicSecurityGroupCidr:\n    Type: String\n  apiName:\n    Type: String\n  certificate:\n    Type: String\n\nResources:\n  publicAlbSecuritygroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupName: !Sub ${apiName}-alb-sg\n      GroupDescription: !Sub ${apiName}-alb-sg\n      Tags:\n        - Key: Name\n          Value: !Sub ${apiName}-alb-sg\n      VpcId: !ImportValue VPC\n      SecurityGroupIngress:\n      - IpProtocol: tcp\n        FromPort: '443'\n        ToPort: '443'\n        CidrIp: !Ref publicSecurityGroupCidr\n      - IpProtocol: tcp\n        FromPort: '80'\n        ToPort: '80'\n        CidrIp: !Ref publicSecurityGroupCidr\n  publicAlbTargetGroup:\n    Type: AWS::ElasticLoadBalancingV2::TargetGroup\n    Properties:\n      HealthCheckIntervalSeconds: 30\n      HealthCheckPath: /healthcheck\n      HealthCheckPort: 80\n      HealthCheckProtocol: HTTP\n      HealthCheckTimeoutSeconds: 6\n      HealthyThresholdCount: 3\n      Name: !Sub ${apiName}-alb-tg\n      Port: 80\n      Protocol: HTTP\n      UnhealthyThresholdCount: 3\n      TargetType: ip\n      VpcId: !ImportValue VPC\n  publicAlb:\n    Type: AWS::ElasticLoadBalancingV2::LoadBalancer\n    Properties:\n      Name: !Sub ${apiName}-alb\n      Scheme: internet-facing\n      SecurityGroups:\n        - !Ref publicAlbSecuritygroup\n      Subnets:\n        - !ImportValue PublicSubnet1a\n        - !ImportValue PublicSubnet1c\n      Tags:\n        - Key: Name\n          Value: !Sub ${apiName}-alb\n      Type: application\n      LoadBalancerAttributes:\n        - Key: access_logs.s3.enabled\n          Value: true\n        - Key: access_logs.s3.bucket\n          Value: !ImportValue LogBucket\n        - Key: access_logs.s3.prefix\n          Value: !Ref apiName\n  publicAlblistnener:\n    Type: AWS::ElasticLoadBalancingV2::Listener\n    Properties:\n      DefaultActions:\n        - TargetGroupArn: !Ref publicAlbTargetGroup\n          Type: forward\n      Certificates:\n        - CertificateArn: !Ref certificate\n      LoadBalancerArn: !Ref publicAlb\n      Port: 443\n      Protocol: HTTPS\n\nOutputs:\n  publicAlbSecuritygroup:\n    Value: !Ref publicAlbSecuritygroup\n    Export:\n      Name: !Sub ${apiName}-publicAlbSecuritygroup\n  publicAlbTargetGroup:\n    Value: !Ref publicAlbTargetGroup\n    Export:\n      Name: !Sub ${apiName}-publicAlbTargetGroup\n  publicAlb:\n    Value: !Ref publicAlb\n    Export:\n      Name: !Sub ${apiName}-publicAlb\n  publicAlblistnener:\n    Value: !Ref publicAlblistnener\n    Export:\n      Name: !Sub ${apiName}-publicAlblistnener\n"
}
StackSet-cfn-exec-ec2-3698b5c8-5587-41c0-bf91-ea0e7d85ffa4
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: 2010-09-09\nDescription: CloudFormation Execute EC2\nParameters:\n  amiId:\n    Type: String\n    Default: ami-0d7ed3ddb85b521a6\n  SshCidr1:\n    Type: String\n    Default: 121.2.65.36/32\n  SshCidr2:\n    Type: String\n    Default: 39.110.201.10/32\n  SshCidr3:\n    Type: String\n    Default: 222.11.38.119/32\n  SshCidr4:\n    Type: String\n    Default: 1.21.118.25/32\n  SshCidr5:\n    Type: String\n    Default: 153.163.63.48/32\n  SshCidr6:\n    Type: String\n    Default: 13.231.11.115/32\nResources:\n  EC2Role:\n    Type: \"AWS::IAM::Role\"\n    Properties:\n      RoleName: cfn-exec-ec2-role\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/AdministratorAccess\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement:\n          -\n            Effect: \"Allow\"\n            Principal:\n              Service:\n                - \"ec2.amazonaws.com\"\n            Action:\n              - \"sts:AssumeRole\"\n      Path: \"/\"\n  Profile:\n    Type: AWS::IAM::InstanceProfile\n    Properties:\n      Roles:\n        - !Ref EC2Role\n  SSHSecurityGroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupName: cfn-exec-sg\n      GroupDescription: cfn-exec-sg\n      SecurityGroupIngress:\n      - IpProtocol: tcp\n        FromPort: '22'\n        ToPort: '22'\n        CidrIp: !Ref SshCidr1\n        Description: Classmethod\n      - IpProtocol: tcp\n        FromPort: '22'\n        ToPort: '22'\n        CidrIp: !Ref SshCidr2\n        Description: Classmethod\n      - IpProtocol: tcp\n        FromPort: '22'\n        ToPort: '22'\n        CidrIp: !Ref SshCidr3\n        Description: Classmethod\n      - IpProtocol: tcp\n        FromPort: '22'\n        ToPort: '22'\n        CidrIp: !Ref SshCidr4\n        Description: Classmethod\n      - IpProtocol: tcp\n        FromPort: '22'\n        ToPort: '22'\n        CidrIp: !Ref SshCidr5\n        Description: Classmethod\n      - IpProtocol: tcp\n        FromPort: '22'\n        ToPort: '22'\n        CidrIp: !Ref SshCidr6\n        Description: Classmethod\n      Tags:\n        - Key: Name\n          Value: cfn-exec-sg\n  EC2:\n    Type: AWS::EC2::Instance\n    Properties:\n      ImageId: !Ref amiId\n      InstanceType: t3.micro\n      KeyName: cfn-exec-key\n      IamInstanceProfile: !Ref Profile\n      NetworkInterfaces:\n        - AssociatePublicIpAddress: true\n          DeviceIndex: 0\n          GroupSet:\n            - !GetAtt SSHSecurityGroup.GroupId\n      UserData:\n        Fn::Base64: !Sub |\n          #!/bin/bash\n          yum -y update\n          yum -y install git\n      Tags:\n        - Key: Name\n          Value: cfn-exec\n  EIP:\n    Type: AWS::EC2::EIP\n    Properties:\n      Domain: vpc\n  AssociateEIP:\n    Type: AWS::EC2::EIPAssociation\n    Properties:\n      EIP: !Ref EIP\n      InstanceId: !Ref EC2\nOutputs:\n  EC2:\n    Value: !Ref EC2\n    Export:\n      Name: cfn-exex-ec2\n  EIP:\n    Value: !Ref EIP\n    Export:\n      Name: cfn-exex-IP\n"
}
StackSet-dev-rmt01-createIamRole-e1489095-e8a4-4e80-941a-0e70b8fdc678
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "{\n  \"AWSTemplateFormatVersion\" : \"2010-09-09\",\n  \"Description\" : \"Template for Creating IAM Role to Switch from Internavi Login AWS Account\",\n  \"Parameters\" : {\n    \"TrustedAWSAccountId\" : {\n      \"AllowedPattern\" : \"^[0-9]*$\",\n      \"Type\" : \"String\",\n      \"Default\" : \"975196479634\",\n      \"Description\" : \"Trusted AWS Account ID\"\n    },\n    \"IAMRoleName\": {\n      \"Type\": \"String\",\n      \"Default\": \"SolDeveloper\",\n      \"Description\": \"IAM Role Name\"\n    },\n    \"IAMPolicyType\": {\n      \"Type\": \"String\",\n      \"Default\": \"SolUser\",\n      \"Description\": \"IAM Policy Type\",\n      \"AllowedValues\": [ \"SolUser\", \"Admin\" ]\n    }\n  },\n  \"Conditions\" : {\n    \"user\"        : { \"Fn::Equals\" : [{\"Ref\" : \"IAMPolicyType\"}, \"SolUser\" ]},\n    \"admin\"        : { \"Fn::Equals\" : [{\"Ref\" : \"IAMPolicyType\"}, \"Admin\" ]}\n  },\n  \"Resources\" : {\n    \"IAMRoleForAdmin\": {\n      \"Type\": \"AWS::IAM::Role\",\n      \"Condition\" : \"admin\",\n      \"Properties\": {\n        \"AssumeRolePolicyDocument\": {\n          \"Version\": \"2012-10-17\",\n          \"Statement\": [\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV020001\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV020002\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV020003\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV020004\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV020011\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV020012\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV020013\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV020015\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV020016\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ]\n            }\n          ]\n        },\n        \"ManagedPolicyArns\": [\n          \"arn:aws:iam::aws:policy/AdministratorAccess\"\n        ],\n        \"Path\": \"/\",\n        \"RoleName\": { \"Ref\" : \"IAMRoleName\" }\n      }\n    },\n    \"IAMRoleForUser\": {\n      \"Type\": \"AWS::IAM::Role\",\n      \"Condition\" : \"user\",\n      \"Properties\": {\n        \"AssumeRolePolicyDocument\": {\n          \"Version\": \"2012-10-17\",\n          \"Statement\": [\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV020001\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV020002\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV020003\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV020004\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV020011\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV020012\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV020013\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV020015\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV020016\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ]\n            }\n          ]\n        },\n        \"ManagedPolicyArns\": [\n          \"arn:aws:iam::aws:policy/ReadOnlyAccess\",\n          \"arn:aws:iam::aws:policy/AWSCodeCommitPowerUser\"\n        ],\n        \"Path\": \"/\",\n        \"RoleName\": { \"Ref\" : \"IAMRoleName\" }\n      }\n    }\n  },\n  \"Outputs\" : {\n    \"IAMRoleAdminArn\": {\n      \"Value\": { \"Fn::GetAtt\" : [ \"IAMRoleForAdmin\", \"Arn\" ] },\n      \"Condition\" : \"admin\"\n    },\n    \"IAMRoleUserArn\": {\n      \"Value\": { \"Fn::GetAtt\" : [ \"IAMRoleForUser\", \"Arn\" ] },\n      \"Condition\" : \"user\"\n    },\n    \"LinkForSwitchRole\": {\n      \"Value\": { \"Fn::Join\": [ \"\", [ \"https://signin.aws.amazon.com/switchrole?roleName=\", { \"Ref\" : \"IAMRoleName\" }, \"&account=\", { \"Ref\" : \"AWS::AccountId\" } ] ] }\n    }\n  }\n}\n"
}
INV-ver-rmt01-web-ver-sub01
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: Create Service Endpoint\n\nParameters:\n  serviceAlliasLowerCase:\n    Type: String\n  serviceName:\n    Type: String\n  cidr:\n    Type: String\n\nResources:\n\n  endpointSecuritygroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupName: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      GroupDescription: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      Tags:\n        - Key: Name\n          Value: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      VpcId: !ImportValue VPC\n      SecurityGroupIngress:\n        - IpProtocol: tcp\n          FromPort: 80\n          ToPort: 80\n          CidrIp: !Ref cidr\n  endpoint:\n    Type: AWS::EC2::VPCEndpoint\n    Properties:\n      VpcEndpointType: Interface\n      VpcId: !ImportValue VPC\n      SubnetIds:\n        - !ImportValue PrivateSubnet1a\n        - !ImportValue PrivateSubnet1c\n      SecurityGroupIds:\n        - !Ref endpointSecuritygroup\n      ServiceName: !Ref serviceName\n      PrivateDnsEnabled: false\n"
}
INV-ver-rmt01-ap1-ver-ysd
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: Create Service Endpoint\n\nParameters:\n  serviceAlliasLowerCase:\n    Type: String\n  serviceName:\n    Type: String\n  cidr:\n    Type: String\n\nResources:\n\n  endpointSecuritygroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupName: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      GroupDescription: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      Tags:\n        - Key: Name\n          Value: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      VpcId: !ImportValue VPC\n      SecurityGroupIngress:\n        - IpProtocol: tcp\n          FromPort: 80\n          ToPort: 80\n          CidrIp: !Ref cidr\n  endpoint:\n    Type: AWS::EC2::VPCEndpoint\n    Properties:\n      VpcEndpointType: Interface\n      VpcId: !ImportValue VPC\n      SubnetIds:\n        - !ImportValue PrivateSubnet1a\n        - !ImportValue PrivateSubnet1c\n      SecurityGroupIds:\n        - !Ref endpointSecuritygroup\n      ServiceName: !Ref serviceName\n      PrivateDnsEnabled: false\n"
}
INV-ver-rmt01-bastion
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: 2010-09-09\nDescription: Bastion EC2\nParameters:\n  accountAllias:\n    Type: String\n  amiId:\n    Type: String\nResources:\n  SSHSecurityGroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      VpcId: !ImportValue VPC\n      GroupName: !Sub ${accountAllias}-bastion-sg\n      GroupDescription: !Sub ${accountAllias}-bastion-sg\n      Tags:\n        - Key: Name\n          Value: !Sub ${accountAllias}-bastion-sg\n  EC2:\n    Type: AWS::EC2::Instance\n    Properties:\n      ImageId: !Ref amiId\n      InstanceType: t3.micro\n      KeyName: !Sub ${accountAllias}-bastion-key\n      NetworkInterfaces:\n        - AssociatePublicIpAddress: true\n          SubnetId: !ImportValue PublicSubnet1a\n          DeviceIndex: 0\n          GroupSet:\n            - !Ref SSHSecurityGroup\n      UserData:\n        Fn::Base64: !Sub |\n          #!/bin/bash\n          yum -y update\n      Tags:\n        - Key: Name\n          Value: !Sub ${accountAllias}-bastion\n  EIP:\n    Type: AWS::EC2::EIP\n    Properties:\n      Domain: vpc\n  AssociateEIP:\n    Type: AWS::EC2::EIPAssociation\n    Properties:\n      EIP: !Ref EIP\n      InstanceId: !Ref EC2\nOutputs:\n  EC2:\n    Value: !Ref EC2\n    Export:\n      Name: BastionEC2\n  EIP:\n    Value: !Ref EIP\n    Export:\n      Name: BastionIP\n"
}
INV-ver-rmt01-vpc-base
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "---\nAWSTemplateFormatVersion: '2010-09-09'\nDescription: VPC Network Template\nParameters:\n  SolName:\n    Type: String\n    Default: base01\n    Description: Solution Name.\n  SubSolName:\n    Type: String\n    Default: base\n    Description: Solution Name.\n  EnvName:\n    Type: String\n    Default: dev\n    Description: Env Name.\n  VPCCIDR:\n    Description: First and Second Octet of VPC, For example xxx.xxx\n    Type: String\n    Default: '10.0'\n    AllowedPattern: \"^(10\\\\.([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])|172\\\\.(1[6-9]|2[0-9]|3[0-1])|192\\\\.168)$\"\n    ConstraintDescription: xxx.xxx\nMappings:\n  StackConfig:\n    VPC:\n      CIDR: \".0.0/16\"\n    PublicSubnet1:\n      CIDR: \".0.0/24\"\n    PublicSubnet2:\n      CIDR: \".1.0/24\"\n    PrivateSubnet1:\n      CIDR: \".10.0/24\"\n    PrivateSubnet2:\n      CIDR: \".11.0/24\"\n\nResources:\n  VPC:\n    Type: AWS::EC2::VPC\n    Properties:\n      CidrBlock: !Sub\n        - ${VPCCIDR}${SubCIDR}\n        - SubCIDR: {\"Fn::FindInMap\": [ StackConfig, VPC, CIDR ]}\n      EnableDnsSupport: 'true'\n      EnableDnsHostnames: 'true'\n      InstanceTenancy: default\n      Tags:\n      - Key: Name\n        Value: !Sub INV-${EnvName}-${SolName}\n  InternetGateway:\n    Type: AWS::EC2::InternetGateway\n    Properties:\n      Tags:\n      - Key: Name\n        Value: !Sub INV-${EnvName}-${SolName}\n  AttachGateway:\n    Type: AWS::EC2::VPCGatewayAttachment\n    Properties:\n      VpcId: !Ref VPC\n      InternetGatewayId: !Ref InternetGateway\n\n  PublicSubnet1a:\n    Type: AWS::EC2::Subnet\n    DependsOn: AttachGateway\n    Properties:\n      AvailabilityZone: !Select [ 0, \"Fn::GetAZs\": {Ref: \"AWS::Region\"}]\n      CidrBlock: !Sub\n        - ${VPCCIDR}${SubCIDR}\n        - SubCIDR: {\"Fn::FindInMap\": [ StackConfig, PublicSubnet1, CIDR ]}\n      MapPublicIpOnLaunch: 'true'\n      Tags:\n      - Key: Name\n        Value: !Sub INV-${EnvName}-${SolName}-PublicSubnet1a\n      VpcId: !Ref VPC\n  PublicSubnet1c:\n    Type: AWS::EC2::Subnet\n    DependsOn: AttachGateway\n    Properties:\n      AvailabilityZone: !Select [ 1, \"Fn::GetAZs\": {Ref: \"AWS::Region\"}]\n      CidrBlock: !Sub\n        - ${VPCCIDR}${SubCIDR}\n        - SubCIDR: {\"Fn::FindInMap\": [ StackConfig, PublicSubnet2, CIDR ]}\n      MapPublicIpOnLaunch: 'true'\n      Tags:\n      - Key: Name\n        Value: !Sub INV-${EnvName}-${SolName}-PublicSubnet1c\n      VpcId: !Ref VPC\n  PrivateSubnet1a:\n    Type: AWS::EC2::Subnet\n    DependsOn: AttachGateway\n    Properties:\n      AvailabilityZone: !Select [ 0, \"Fn::GetAZs\": {Ref: \"AWS::Region\"}]\n      CidrBlock: !Sub\n        - ${VPCCIDR}${SubCIDR}\n        - SubCIDR: {\"Fn::FindInMap\": [ StackConfig, PrivateSubnet1, CIDR ]}\n      MapPublicIpOnLaunch: 'true'\n      Tags:\n      - Key: Name\n        Value: !Sub INV-${EnvName}-${SolName}-PrivateSubnet1a\n      VpcId: !Ref VPC\n  PrivateSubnet1c:\n    Type: AWS::EC2::Subnet\n    DependsOn: AttachGateway\n    Properties:\n      AvailabilityZone: !Select [ 1, \"Fn::GetAZs\": {Ref: \"AWS::Region\"}]\n      CidrBlock: !Sub\n        - ${VPCCIDR}${SubCIDR}\n        - SubCIDR: {\"Fn::FindInMap\": [ StackConfig, PrivateSubnet2, CIDR ]}\n      MapPublicIpOnLaunch: 'true'\n      Tags:\n      - Key: Name\n        Value: !Sub INV-${EnvName}-${SolName}-PrivateSubnet1c\n      VpcId: !Ref VPC\n\n  EIP1a:\n    Type: AWS::EC2::EIP\n    Properties:\n      Domain: vpc\n  NAT1a:\n    Type: AWS::EC2::NatGateway\n    Properties:\n      AllocationId:\n        Fn::GetAtt:\n          - EIP1a\n          - AllocationId\n      SubnetId: !Ref PublicSubnet1a\n      Tags:\n        - Key: Name\n          Value: !Sub INV-${EnvName}-${SolName}-NGW1a\n\n  EIP1c:\n    Type: AWS::EC2::EIP\n    Properties:\n      Domain: vpc\n  NAT1c:\n    Type: AWS::EC2::NatGateway\n    Properties:\n      AllocationId:\n        Fn::GetAtt:\n          - EIP1c\n          - AllocationId\n      SubnetId: !Ref PublicSubnet1c\n      Tags:\n        - Key: Name\n          Value: !Sub INV-${EnvName}-${SolName}-NGW1c\n\n  PublicRouteTable:\n    Type: AWS::EC2::RouteTable\n    DependsOn: AttachGateway\n    Properties:\n      VpcId: !Ref VPC\n      Tags:\n      - Key: Name\n        Value: !Sub INV-${EnvName}-${SolName}-PublicRoute\n  PublicRoute:\n    Type: AWS::EC2::Route\n    DependsOn: AttachGateway\n    Properties:\n      RouteTableId: !Ref PublicRouteTable\n      DestinationCidrBlock: 0.0.0.0/0\n      GatewayId: !Ref InternetGateway\n  PrivateRouteTable1a:\n    Type: AWS::EC2::RouteTable\n    DependsOn: NAT1a\n    Properties:\n      VpcId: !Ref VPC\n      Tags:\n      - Key: Name\n        Value: !Sub INV-${EnvName}-${SolName}-PrivateRoute1a\n  PrivateRoute1a:\n    Type: AWS::EC2::Route\n    DependsOn: NAT1a\n    Properties:\n      RouteTableId: !Ref PrivateRouteTable1a\n      DestinationCidrBlock: 0.0.0.0/0\n      NatGatewayId: !Ref NAT1a\n  PrivateRouteTable1c:\n    Type: AWS::EC2::RouteTable\n    DependsOn: NAT1c\n    Properties:\n      VpcId: !Ref VPC\n      Tags:\n      - Key: Name\n        Value: !Sub INV-${EnvName}-${SolName}-PrivateRoute1c\n  PrivateRoute1c:\n    Type: AWS::EC2::Route\n    DependsOn: NAT1c\n    Properties:\n      RouteTableId: !Ref PrivateRouteTable1c\n      DestinationCidrBlock: 0.0.0.0/0\n      NatGatewayId: !Ref NAT1c\n\n  PublicSubnet1aRouteTableAssociation:\n    Type: AWS::EC2::SubnetRouteTableAssociation\n    Properties:\n      SubnetId: !Ref PublicSubnet1a\n      RouteTableId: !Ref PublicRouteTable\n  PublicSubnet1cRouteTableAssociation:\n    Type: AWS::EC2::SubnetRouteTableAssociation\n    Properties:\n      SubnetId: !Ref PublicSubnet1c\n      RouteTableId: !Ref PublicRouteTable\n  PrivateSubnet1aRouteTableAssociation:\n    Type: AWS::EC2::SubnetRouteTableAssociation\n    Properties:\n      SubnetId: !Ref PrivateSubnet1a\n      RouteTableId: !Ref PrivateRouteTable1a\n  PrivateSubnet1cRouteTableAssociation:\n    Type: AWS::EC2::SubnetRouteTableAssociation\n    Properties:\n      SubnetId: !Ref PrivateSubnet1c\n      RouteTableId: !Ref PrivateRouteTable1c\n\n  DNS1:\n    Type: \"AWS::Route53::HostedZone\"\n    Properties:\n      HostedZoneConfig:\n        Comment: INV-LocalDomain\n      Name: internal-internavi\n      VPCs:\n        -\n          VPCId: !Ref VPC\n          VPCRegion: !Ref AWS::Region\n      HostedZoneTags:\n        -\n          Key: \"Name\"\n          Value: !Sub INV-${EnvName}-${SolName}\n\n  FlowLogBucket:\n    Type: AWS::S3::Bucket\n    Properties:\n        BucketName: !Join\n          - \"-\"\n          -\n            - inv\n            - !Ref EnvName\n            - !Ref SolName\n            - !Ref VPC\n  FlowLogBucketPolicy:\n    Type: AWS::S3::BucketPolicy\n    DependsOn: NAT1c\n    Properties:\n      Bucket: !Ref FlowLogBucket\n      PolicyDocument:\n        Statement:\n          -\n            Action:\n              - \"s3:PutObject\"\n            Effect: \"Allow\"\n            Resource:\n              Fn::Join:\n                - \"\"\n                -\n                  - \"arn:aws:s3:::\"\n                  - !Ref FlowLogBucket\n                  - \"/*\"\n            Principal:\n              AWS: \"arn:aws:iam::582318560864:root\"\n          -\n            Action:\n              - \"s3:PutObject\"\n            Effect: \"Allow\"\n            Resource:\n              Fn::Join:\n                - \"\"\n                -\n                  - \"arn:aws:s3:::\"\n                  - !Ref FlowLogBucket\n                  - \"/*\"\n            Principal:\n              Service: \"delivery.logs.amazonaws.com\"\n            Condition:\n              StringEquals:\n                s3:x-amz-acl: bucket-owner-full-control\n          -\n            Action:\n              - \"s3:GetBucketAcl\"\n            Effect: \"Allow\"\n            Resource:\n              Fn::Join:\n                - \"\"\n                -\n                  - \"arn:aws:s3:::\"\n                  - !Ref FlowLogBucket\n            Principal:\n              Service: \"delivery.logs.amazonaws.com\"\n  FlowLog:\n    Type: AWS::EC2::FlowLog\n    DependsOn: FlowLogBucketPolicy\n    Properties:\n      LogDestinationType : \"s3\"\n      LogDestination : !Join\n        - \"\"\n        -\n          - \"arn:aws:s3:::\"\n          - !Ref FlowLogBucket\n          - /FlowLogs/\n      ResourceType : VPC\n      ResourceId : !Ref VPC\n      TrafficType : ALL\n\n  S3Endpoint:\n    Type: AWS::EC2::VPCEndpoint\n    Properties:\n      RouteTableIds:\n        - !Ref PublicRouteTable\n        - !Ref PrivateRouteTable1a\n        - !Ref PrivateRouteTable1c\n      ServiceName: !Join\n        - ''\n        - - com.amazonaws.\n          - !Ref 'AWS::Region'\n          - .s3\n      VpcId: !Ref VPC\n  DynamoEndpoint:\n    Type: AWS::EC2::VPCEndpoint\n    Properties:\n      RouteTableIds:\n        - !Ref PublicRouteTable\n        - !Ref PrivateRouteTable1a\n        - !Ref PrivateRouteTable1c\n      ServiceName: !Join\n        - ''\n        - - com.amazonaws.\n          - !Ref 'AWS::Region'\n          - .dynamodb\n      VpcId: !Ref VPC\n  Certificate:\n    Type: AWS::CertificateManager::Certificate\n    Properties:\n      DomainName: !Sub '*.${EnvName}-${SubSolName}.cloud.internavi.ne.jp'\n      SubjectAlternativeNames:\n        - '*.cloud.internavi.ne.jp'\n      ValidationMethod: DNS\n\nOutputs:\n  VPC:\n    Value: !Ref VPC\n    Export:\n      Name: VPC\n  PublicSubnet1a:\n    Value: !Ref PublicSubnet1a\n    Export:\n      Name: PublicSubnet1a\n  PublicSubnet1c:\n    Value: !Ref PublicSubnet1c\n    Export:\n      Name: PublicSubnet1c\n  PrivateSubnet1a:\n    Value: !Ref PrivateSubnet1a\n    Export:\n      Name: PrivateSubnet1a\n  PrivateSubnet1c:\n    Value: !Ref PrivateSubnet1c\n    Export:\n      Name: PrivateSubnet1c\n  PublicRouteTable:\n    Value: !Ref PublicRouteTable\n    Export:\n      Name: PublicRouteTable\n  PrivateRouteTable1a:\n    Value: !Ref PrivateRouteTable1a\n    Export:\n      Name: PrivateRouteTable1a\n  PrivateRouteTable1c:\n    Value: !Ref PrivateRouteTable1c\n    Export:\n      Name: PrivateRouteTable1c\n  LogBucket:\n    Value: !Ref FlowLogBucket\n    Export:\n      Name: LogBucket\n  DNS1:\n    Value: !Ref DNS1\n    Export:\n      Name: DNS1\n"
}
StackSet-HmAdmin-createIamRole-b71eea74-513d-4a0d-8625-a1f6b2364bb6
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "{\n  \"AWSTemplateFormatVersion\" : \"2010-09-09\",\n  \"Description\" : \"Template for Creating IAM Role to Switch from Internavi Login AWS Account\",\n  \"Parameters\" : {\n    \"TrustedAWSAccountId\" : {\n      \"AllowedPattern\" : \"^[0-9]*$\",\n      \"Type\" : \"String\",\n      \"Default\" : \"975196479634\",\n      \"Description\" : \"Trusted AWS Account ID\"\n    },\n    \"IAMRoleName\": {\n      \"Type\": \"String\",\n      \"Default\": \"HmAdmin\",\n      \"Description\": \"IAM Role Name\"\n    }\n  },\n  \"Resources\" : {\n    \"IAMRoleForEngineer\": {\n      \"Type\": \"AWS::IAM::Role\",\n      \"Properties\": {\n        \"AssumeRolePolicyDocument\": {\n          \"Version\": \"2012-10-17\",\n          \"Statement\": [\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"J0322720\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"J0116063\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JP300063\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JP310643\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JP311734\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            }\n          ]\n        },\n        \"ManagedPolicyArns\": [\n          \"arn:aws:iam::aws:policy/AdministratorAccess\"\n        ],\n        \"Path\": \"/\",\n        \"RoleName\": { \"Ref\" : \"IAMRoleName\" }\n      }\n    }\n  },\n  \"Outputs\" : {\n    \"IAMRoleArn\": {\n      \"Value\": { \"Fn::GetAtt\" : [ \"IAMRoleForEngineer\", \"Arn\" ] }\n    },\n    \"LinkForSwitchRole\": {\n      \"Value\": { \"Fn::Join\": [ \"\", [ \"https://signin.aws.amazon.com/switchrole?roleName=\", { \"Ref\" : \"IAMRoleName\" }, \"&account=\", { \"Ref\" : \"AWS::AccountId\" } ] ] }\n    }\n  }\n}\n"
}
StackSetsExecutionRole
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: 2010-09-09\nDescription: Configure the AWSCloudFormationStackSetExecutionRole to support AWS CloudFormation StackSets in a managed account.\n\nParameters:\n  MasterAccountId:\n    Type: String\n    Description: AWS Account Id of the master account (the account in which StackSets will be created).\n    MaxLength: 12\n    MinLength: 12\n\nResources:\n  ExecutionRole:\n    Type: AWS::IAM::Role\n    Properties:\n      RoleName: AWSCloudFormationStackSetExecutionRole\n      AssumeRolePolicyDocument: \n        Version: 2012-10-17\n        Statement: \n          - Effect: Allow\n            Principal: \n              AWS:\n                - !Ref MasterAccountId\n            Action: \n              - sts:AssumeRole\n      Path: /\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/AdministratorAccess\n"
}
cm-hamada-koji-iamRole
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": {
        "AWSTemplateFormatVersion": "2010-09-09", 
        "Description": "Template for Creating IAM Role to Switch from Classmethod AWS Account", 
        "Parameters": {
            "TrustedAWSAccountId": {
                "AllowedPattern": "^[0-9]*$", 
                "Type": "String", 
                "Default": "", 
                "Description": "Trusted AWS Account ID"
            }, 
            "IAMUserName": {
                "AllowedPattern": "^cm-[a-z.]*$", 
                "Type": "String", 
                "Default": "cm-xxx.xxx", 
                "Description": "IAM Role Name"
            }
        }, 
        "Resources": {
            "IAMRoleForCmEngineer": {
                "Type": "AWS::IAM::Role", 
                "Properties": {
                    "AssumeRolePolicyDocument": {
                        "Version": "2012-10-17", 
                        "Statement": [
                            {
                                "Effect": "Allow", 
                                "Principal": {
                                    "AWS": {
                                        "Fn::Join": [
                                            "", 
                                            [
                                                "arn:aws:iam::", 
                                                {
                                                    "Ref": "TrustedAWSAccountId"
                                                }, 
                                                ":user/", 
                                                {
                                                    "Ref": "IAMUserName"
                                                }
                                            ]
                                        ]
                                    }
                                }, 
                                "Action": [
                                    "sts:AssumeRole"
                                ], 
                                "Condition": {
                                    "Bool": {
                                        "aws:MultiFactorAuthPresent": "true"
                                    }
                                }
                            }
                        ]
                    }, 
                    "ManagedPolicyArns": [
                        "arn:aws:iam::aws:policy/AdministratorAccess"
                    ], 
                    "Path": "/", 
                    "RoleName": {
                        "Ref": "IAMUserName"
                    }
                }
            }
        }, 
        "Outputs": {
            "IAMRoleArn": {
                "Value": {
                    "Fn::GetAtt": [
                        "IAMRoleForCmEngineer", 
                        "Arn"
                    ]
                }
            }, 
            "LinkForSwitchRole": {
                "Value": {
                    "Fn::Join": [
                        "", 
                        [
                            "https://signin.aws.amazon.com/switchrole?roleName=", 
                            {
                                "Ref": "IAMUserName"
                            }, 
                            "&account=", 
                            {
                                "Ref": "AWS::AccountId"
                            }
                        ]
                    ]
                }
            }
        }
    }
}
cm-kikuchi-shuji-iamRole
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": {
        "AWSTemplateFormatVersion": "2010-09-09", 
        "Description": "Template for Creating IAM Role to Switch from Classmethod AWS Account", 
        "Parameters": {
            "TrustedAWSAccountId": {
                "AllowedPattern": "^[0-9]*$", 
                "Type": "String", 
                "Default": "", 
                "Description": "Trusted AWS Account ID"
            }, 
            "IAMUserName": {
                "AllowedPattern": "^cm-[a-z.]*$", 
                "Type": "String", 
                "Default": "cm-xxx.xxx", 
                "Description": "IAM Role Name"
            }
        }, 
        "Resources": {
            "IAMRoleForCmEngineer": {
                "Type": "AWS::IAM::Role", 
                "Properties": {
                    "AssumeRolePolicyDocument": {
                        "Version": "2012-10-17", 
                        "Statement": [
                            {
                                "Effect": "Allow", 
                                "Principal": {
                                    "AWS": {
                                        "Fn::Join": [
                                            "", 
                                            [
                                                "arn:aws:iam::", 
                                                {
                                                    "Ref": "TrustedAWSAccountId"
                                                }, 
                                                ":user/", 
                                                {
                                                    "Ref": "IAMUserName"
                                                }
                                            ]
                                        ]
                                    }
                                }, 
                                "Action": [
                                    "sts:AssumeRole"
                                ], 
                                "Condition": {
                                    "Bool": {
                                        "aws:MultiFactorAuthPresent": "true"
                                    }
                                }
                            }
                        ]
                    }, 
                    "ManagedPolicyArns": [
                        "arn:aws:iam::aws:policy/AdministratorAccess"
                    ], 
                    "Path": "/", 
                    "RoleName": {
                        "Ref": "IAMUserName"
                    }
                }
            }
        }, 
        "Outputs": {
            "IAMRoleArn": {
                "Value": {
                    "Fn::GetAtt": [
                        "IAMRoleForCmEngineer", 
                        "Arn"
                    ]
                }
            }, 
            "LinkForSwitchRole": {
                "Value": {
                    "Fn::Join": [
                        "", 
                        [
                            "https://signin.aws.amazon.com/switchrole?roleName=", 
                            {
                                "Ref": "IAMUserName"
                            }, 
                            "&account=", 
                            {
                                "Ref": "AWS::AccountId"
                            }
                        ]
                    ]
                }
            }
        }
    }
}
]
スクリプトを終了します
  1- INV-ver-htc01:arn:aws:iam::686753218709:role/OpeAdminRole
  2- INV-ver-sub01:arn:aws:iam::495152581087:role/OpeAdminRole
  3- INV-ver-cer01:arn:aws:iam::339311866652:role/OpeAdminRole
  4- INV-ver-des01:arn:aws:iam::302986797475:role/OpeAdminRole
  5- INV-ver-agw01:arn:aws:iam::859823971378:role/OpeAdminRole
  6- INV-ver-vdm01:arn:aws:iam::497617980196:role/OpeAdminRole
  7- INV-ver-wfi01:arn:aws:iam::932204081418:role/OpeAdminRole
  8- INV-ver-esp01:arn:aws:iam::131000633826:role/OpeAdminRole
  9- INV-ver-rmt01:arn:aws:iam::604584103104:role/OpeAdminRole
 10- INV-ver-esw01:arn:aws:iam::170541451228:role/OpeAdminRole
 11- INV-ver-tcu01:arn:aws:iam::951453431396:role/OpeAdminRole
 12- INV-ver-vky01:arn:aws:iam::207429400733:role/OpeAdminRole
     all- All Environments:select all environments
スクリプトを実行します。
aws cloudformation describe-stacks --query Stacks[*].StackName
{
    "Account": "975196479634", 
    "UserId": "AIDA6GDR5MCJLYN4JQRFZ", 
    "Arn": "arn:aws:iam::975196479634:user/JV010028"
}
{
    "Account": "170541451228", 
    "UserId": "AROASPNIQA7ODXGNGOXU7:inv-20190702041045", 
    "Arn": "arn:aws:sts::170541451228:assumed-role/OpeAdminRole/inv-20190702041045"
}
[
inv-ver-esw01-monitoring-lambda
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: \"2010-09-09\"\r\nDescription: \"monitoring-lambda.yml\"\r\nParameters: \r\n  EnvironmentName: \r\n    Default: ver\r\n    Description: \"Environment Name\"\r\n    Type: String\r\n  MicroServiceName: \r\n    Default: cer01\r\n    Description: \"MicroService Name\"\r\n    Type: String\r\n  S3Buckets: \r\n    Default: \"inv-ver-cer01-cfn\"\r\n    Description: \"source s3 backet name\"\r\n    Type: String\r\n  S3Prefix:\r\n    Default: \"monitor-config/\"\r\n    Description: \"source s3 backet file prefix\"\r\n    Type: String\r\n  iniFileName: \r\n    Default: \"monitor.json\"\r\n    Description: \"scenario file name\"\r\n    Type: String\r\n  scenarioSourceLogGroup:\r\n    Description: \"Scenario CWL log group name\"\r\n    Type: \"String\"\r\n  scenarioFilterPattern:\r\n    Default: \"\"\r\n    Description: \"Scenario Monitor CWL log FilterPattern\"\r\n    Type: \"String\"\r\n  programSourceLogGroup:\r\n    Description: \"program CWL log group name\"\r\n    Type: \"String\"\r\n  programFilterPattern:\r\n    Default: ?\"ERROR\" ?\"FATAL\" ?\"WARN\"\r\n    Description: \"program Monitor CWL log FilterPattern\"\r\n    Type: \"String\"\r\nResources:\r\n  IAMRole:\r\n    Type: \"AWS::IAM::Role\"\r\n    Properties: \r\n      AssumeRolePolicyDocument: \r\n        Version: \"2012-10-17\"\r\n        Statement: \r\n          - Effect: Allow\r\n            Principal: \r\n              Service: \"lambda.amazonaws.com\"\r\n            Action: \"sts:AssumeRole\"\r\n      ManagedPolicyArns: \r\n        - \"arn:aws:iam::aws:policy/AmazonSNSFullAccess\"\r\n      Path: \"/\"\r\n      Policies:\r\n        - PolicyName: monitor_lambda_policy\r\n          PolicyDocument:\r\n            Version: '2012-10-17'\r\n            Statement:\r\n              - Effect: Allow\r\n                Action:\r\n                  - cloudwatch:*\r\n                  - logs:*\r\n                  - s3:Get*\r\n                  - s3:List*\r\n                Resource: \"*\"\r\n      RoleName: !Sub inv-${EnvironmentName}-${MicroServiceName}-monitoring-lambda-role\r\n  LambdaLayer:\r\n    Type: \"AWS::Lambda::LayerVersion\"\r\n    Properties:\r\n      CompatibleRuntimes: \r\n        - python3.6\r\n      Content: \r\n        S3Bucket:\r\n          Ref: S3Buckets\r\n        S3Key: CloudwatchAlarm/metrics_mod.zip\r\n      Description: \"monitor_lambda_modules\"\r\n      LayerName: monitor_module\r\n  LambdaFunction: \r\n    DependsOn: \r\n      - IAMRole\r\n    Type: \"AWS::Lambda::Function\"\r\n    Properties: \r\n      Code: \r\n        S3Bucket: \r\n          Ref: S3Buckets\r\n        S3Key: CloudwatchAlarm/monitoring_common_lambda_src.zip           \r\n      FunctionName: !Sub inv-${EnvironmentName}-${MicroServiceName}-monitoring_common_lambda\r\n      Handler: lambda_function.lambda_handler\r\n      Environment: \r\n        Variables: \r\n          ENV: \r\n            Ref: EnvironmentName\r\n          STG: \r\n            Ref: MicroServiceName\r\n          fileName:\r\n            Ref: iniFileName\r\n          s3Bucket:\r\n            Ref: S3Buckets\r\n          s3keyPrefix:\r\n            Ref: S3Prefix\r\n      Role: \r\n        \"Fn::GetAtt\": \r\n          - IAMRole\r\n          - Arn\r\n      Runtime: \"python3.6\"\r\n      MemorySize: 512\r\n      Timeout: 300\r\n      Layers:\r\n        - !Ref LambdaLayer\r\n  LambdaPermission: \r\n    Type: \"AWS::Lambda::Permission\"\r\n    Properties: \r\n      Action: \"lambda:InvokeFunction\"\r\n      FunctionName: \r\n        \"Fn::GetAtt\": \r\n          - LambdaFunction\r\n          - Arn\r\n      Principal: !Sub \"sns.amazonaws.com\"\r\n      SourceArn: !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:inv-${EnvironmentName}-${MicroServiceName}\r\n  ScenarioSubscriptionFilter:\r\n    DependsOn:\r\n      - ScenarioLambdaInvokePermission\r\n    Type: \"AWS::Logs::SubscriptionFilter\"\r\n    Properties:\r\n      LogGroupName: !Ref scenarioSourceLogGroup\r\n      FilterPattern: !Ref scenarioFilterPattern\r\n      DestinationArn: !Join\r\n        - ''\r\n        - - !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:'\r\n          - !Sub inv-${EnvironmentName}-${MicroServiceName}-monitoring_common_lambda\r\n  ScenarioLambdaInvokePermission:\r\n    Type: 'AWS::Lambda::Permission'\r\n    Properties:\r\n      FunctionName:\r\n        \"Fn::GetAtt\": \r\n          - LambdaFunction\r\n          - Arn\r\n      Action: \"lambda:InvokeFunction\"\r\n      Principal: !Sub \"logs.amazonaws.com\"\r\n      SourceAccount: !Ref AWS::AccountId\r\n      SourceArn: !Sub \"arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${scenarioSourceLogGroup}:*\"\r\n  ProgramSubscriptionFilter:\r\n    DependsOn:\r\n      - ProgramLambdaInvokePermission\r\n    Type: \"AWS::Logs::SubscriptionFilter\"\r\n    Properties:\r\n      LogGroupName: !Ref programSourceLogGroup\r\n      FilterPattern: !Ref programFilterPattern\r\n      DestinationArn: !Join\r\n        - ''\r\n        - - !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:'\r\n          - !Sub inv-${EnvironmentName}-${MicroServiceName}-monitoring_common_lambda\r\n  ProgramLambdaInvokePermission:\r\n    Type: 'AWS::Lambda::Permission'\r\n    Properties:\r\n      FunctionName:\r\n        \"Fn::GetAtt\": \r\n          - LambdaFunction\r\n          - Arn\r\n      Action: \"lambda:InvokeFunction\"\r\n      Principal: !Sub \"logs.amazonaws.com\"\r\n      SourceAccount: !Ref AWS::AccountId\r\n      SourceArn: !Sub \"arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${programSourceLogGroup}:*\"\r\nOutputs: \r\n  IAMRole: \r\n    Description: \"IAM Role Name\"\r\n    Value: \r\n      Ref: IAMRole\r\n  SNSTopic: \r\n    Description: \"SNS Topic Name\"\r\n    Value: \r\n      !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:inv-${EnvironmentName}-${MicroServiceName}\r\n  LambdaFunction: \r\n    Description: \"Lambda Function Name\"\r\n    Value: \r\n      Ref: LambdaFunction"
}
enable-guardduty
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: 2010-09-09\nDescription:\n  \"enable guardduty\"\nResources:\n  GDD:\n    Type: \"AWS::GuardDuty::Detector\"\n    Properties:\n      Enable: true"
}
INV-ver-esw01-manage-metrics-alarm
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: \"2010-09-09\"\r\nDescription: \"create_metrics_alarm.yaml\"\r\nParameters:\r\n  EnvironmentName:\r\n    Default: \"ver\"\r\n    Description: \"EnvironmentName\"\r\n    Type: String\r\n  MicroServiceName: \r\n    Default: \"cer01\"\r\n    Description: \"MicroServiceName\"\r\n    Type: String\r\n  s3keyprefix: \r\n    Default: \"_manage_metrics_alarm.xlsx\"\r\n    Description: \"excel s3 keys prefix\"\r\n    Type: String\r\n  S3Buckets: \r\n    Default: \"inv-ver-cer01-cfn\"\r\n    Description: \"source s3 backet name\"\r\n    Type: String\r\nResources: \r\n  IAMRole: \r\n    Type: \"AWS::IAM::Role\"\r\n    Properties: \r\n      AssumeRolePolicyDocument: \r\n        Version: \"2012-10-17\"\r\n        Statement: \r\n          - Effect: Allow\r\n            Principal: \r\n              Service: \"lambda.amazonaws.com\"\r\n            Action: \"sts:AssumeRole\"\r\n      ManagedPolicyArns: \r\n        - \"arn:aws:iam::aws:policy/AmazonS3FullAccess\"\r\n      Path: \"/\"\r\n      Policies:\r\n        - PolicyName: manage_metrics_alarm_lambda_policy\r\n          PolicyDocument:\r\n            Version: '2012-10-17'\r\n            Statement:\r\n              - Effect: Allow\r\n                Action:\r\n                  - cloudwatch:*\r\n                  - logs:*\r\n                Resource: \"*\"\r\n      RoleName: !Sub inv-${EnvironmentName}-${MicroServiceName}-manage-metrics-alarm-lambda-role\r\n  LambdaLayer:\r\n    Type: \"AWS::Lambda::LayerVersion\"\r\n    Properties:\r\n      CompatibleRuntimes: \r\n        - python3.6\r\n      Content: \r\n        S3Bucket:\r\n          Ref: S3Buckets\r\n        S3Key: CloudwatchAlarm/metrics_mod.zip\r\n      Description: \"manage_cloudwatch metrics alarm modules\"\r\n      LayerName: metrics_module\r\n  LambdaFunction: \r\n    DependsOn: \r\n      - IAMRole\r\n    Type: \"AWS::Lambda::Function\"\r\n    Properties: \r\n      Code: \r\n        S3Bucket: \r\n          Ref: S3Buckets\r\n        S3Key: CloudwatchAlarm/manage_metrics_alarm_src.zip\r\n      FunctionName: !Sub inv-${EnvironmentName}-${MicroServiceName}-manage-metrics-alarm-lambda\r\n      Handler: lambda_function.lambda_handler\r\n      Environment: \r\n        Variables: \r\n          fileprefix: \r\n            Ref: s3keyprefix\r\n          s3Bucket: !Sub inv-${EnvironmentName}-${MicroServiceName}-manage-metrics-alarm\r\n      Role: \r\n        \"Fn::GetAtt\": \r\n          - IAMRole\r\n          - Arn\r\n      Runtime: \"python3.6\"\r\n      MemorySize: 512\r\n      Timeout: 300\r\n      Layers:\r\n        - !Ref LambdaLayer\r\n  LambdaPermission: \r\n    Type: \"AWS::Lambda::Permission\"\r\n    Properties: \r\n      Action: \"lambda:InvokeFunction\"\r\n      FunctionName: \r\n        \"Fn::GetAtt\": \r\n          - LambdaFunction\r\n          - Arn\r\n      Principal: s3.amazonaws.com\r\n      SourceAccount: !Ref 'AWS::AccountId'\r\n      SourceArn: !Join\r\n        - ''\r\n        - - 'arn:aws:s3:::'\r\n          - !Sub inv-${EnvironmentName}-${MicroServiceName}-manage-metrics-alarm\r\n  S3Bucket:\r\n    Type: \"AWS::S3::Bucket\"\r\n    DependsOn: \r\n      - LambdaPermission\r\n    Properties:\r\n      BucketName: !Sub inv-${EnvironmentName}-${MicroServiceName}-manage-metrics-alarm\r\n      AccessControl: Private\r\n      PublicAccessBlockConfiguration:\r\n        BlockPublicAcls: True\r\n        BlockPublicPolicy: True\r\n        IgnorePublicAcls: True\r\n        RestrictPublicBuckets: True\r\n      NotificationConfiguration:\r\n        LambdaConfigurations:\r\n          - Event: \"s3:ObjectCreated:*\"\r\n            Filter:\r\n              S3Key:\r\n                Rules:\r\n                  - Name: suffix\r\n                    Value: xlsx\r\n            Function: !GetAtt\r\n              - LambdaFunction\r\n              - Arn\r\n  S3BucketPolicy:\r\n    Type: AWS::S3::BucketPolicy\r\n    Properties: \r\n      Bucket: \r\n        Ref: \"S3Bucket\"\r\n      PolicyDocument: \r\n        Version: \"2012-10-17\"\r\n        Statement: \r\n          - \r\n            Action: \r\n              - \"s3:GetObject\"\r\n            Effect: \"Allow\"\r\n            Resource: \r\n              Fn::Join: \r\n                - \"\"\r\n                - \r\n                  - \"arn:aws:s3:::\"\r\n                  - \r\n                    Ref: \"S3Bucket\"\r\n                  - \"/*\"\r\n            Principal: \r\n              AWS:\r\n                Fn::Join:\r\n                  - \"\"\r\n                  - \r\n                    - \"arn:aws:iam::\"\r\n                    - Ref: \"AWS::AccountId\"\r\n                    - \":root\"\r\nOutputs: \r\n  IAMRole: \r\n    Description: \"IAM Role Name\"\r\n    Value: \r\n      Ref: IAMRole\r\n  S3BucketName:\r\n    Value:\r\n      Ref S3BucketName\r\n  LambdaFunction: \r\n    Description: \"Lambda Function Name\"\r\n    Value: \r\n      Ref: LambdaFunction"
}
INV-ver-esw01-ver-htc01-connected-api
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: Create Service Endpoint\n\nParameters:\n  serviceAlliasLowerCase:\n    Type: String\n  serviceName:\n    Type: String\n  cidr:\n    Type: String\n\nResources:\n\n  endpointSecuritygroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupName: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      GroupDescription: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      Tags:\n        - Key: Name\n          Value: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      VpcId: !ImportValue VPC\n      SecurityGroupIngress:\n        - IpProtocol: tcp\n          FromPort: 80\n          ToPort: 80\n          CidrIp: !Ref cidr\n  endpoint:\n    Type: AWS::EC2::VPCEndpoint\n    Properties:\n      VpcEndpointType: Interface\n      VpcId: !ImportValue VPC\n      SubnetIds:\n        - !ImportValue PrivateSubnet1a\n        - !ImportValue PrivateSubnet1c\n      SecurityGroupIds:\n        - !Ref endpointSecuritygroup\n      ServiceName: !Ref serviceName\n      PrivateDnsEnabled: false\n"
}
INV-ver-esw01-ap1-ver-ysd
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: Create Service Endpoint\n\nParameters:\n  serviceAlliasLowerCase:\n    Type: String\n  serviceName:\n    Type: String\n  cidr:\n    Type: String\n\nResources:\n\n  endpointSecuritygroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupName: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      GroupDescription: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      Tags:\n        - Key: Name\n          Value: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      VpcId: !ImportValue VPC\n      SecurityGroupIngress:\n        - IpProtocol: tcp\n          FromPort: 80\n          ToPort: 80\n          CidrIp: !Ref cidr\n  endpoint:\n    Type: AWS::EC2::VPCEndpoint\n    Properties:\n      VpcEndpointType: Interface\n      VpcId: !ImportValue VPC\n      SubnetIds:\n        - !ImportValue PrivateSubnet1a\n        - !ImportValue PrivateSubnet1c\n      SecurityGroupIds:\n        - !Ref endpointSecuritygroup\n      ServiceName: !Ref serviceName\n      PrivateDnsEnabled: false\n"
}
INV-ver-esw01-roadservice-codepipeline-ver
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: codepipeline\n\n# ------------------------------------------------------------#\n#  Parameters\n# ------------------------------------------------------------#\nParameters:\n  accountAllias:\n    Type: String\n  accountAlliasLowerCase:\n    Type: String\n\nResources:\n# ------------------------------------------------------------#\n#  Role\n# ------------------------------------------------------------#\n  roadserviceCodeBuildRoleVer:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement: \n          - Effect: \"Allow\"\n            Principal: \n              Service: \n                - \"codebuild.amazonaws.com\"\n            Action: \n              - \"sts:AssumeRole\"\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess\n        - arn:aws:iam::aws:policy/AmazonS3FullAccess\n        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess\n  roadserviceCodePipelineRoleVer:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement: \n          - Effect: \"Allow\"\n            Principal: \n              Service: \n                - \"codepipeline.amazonaws.com\"\n            Action: \n              - \"sts:AssumeRole\"\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess\n        - arn:aws:iam::aws:policy/AWSCodeCommitFullAccess\n        - arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess\n        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess\n        - arn:aws:iam::aws:policy/AmazonS3FullAccess\n        - arn:aws:iam::aws:policy/CloudWatchFullAccess\n        - arn:aws:iam::aws:policy/AmazonEC2ContainerServiceFullAccess\n\n# ------------------------------------------------------------#\n#  CodeBuild\n# ------------------------------------------------------------#\n  roadserviceCodeBuildProjectVer:\n    Type: AWS::CodeBuild::Project\n    Properties:\n      Name: !Sub ${accountAlliasLowerCase}-roadservice-api-build-project-ver\n      Artifacts:\n        Type: CODEPIPELINE\n      Description: !Sub Building stage for ${accountAlliasLowerCase}-ver\n      Environment:\n        ComputeType: BUILD_GENERAL1_SMALL\n        EnvironmentVariables:\n          - Name: AWS_ACCOUNT_ID\n            Value: !Ref AWS::AccountId\n          - Name: IMAGE_NAME_nginx\n            Value: !Sub ${accountAlliasLowerCase}-road_service-nginx-ecr\n          - Name: IMAGE_NAME_php\n            Value: !Sub ${accountAlliasLowerCase}-road_service-php-ecr\n          - Name: CONTAINER_NAME_nginx\n            Value: !Sub ${accountAlliasLowerCase}-road_service-nginx-container\n          - Name: CONTAINER_NAME_php\n            Value: !Sub ${accountAlliasLowerCase}-road_service-php-container\n        Image: aws/codebuild/docker:18.09.0\n        Type: LINUX_CONTAINER\n        PrivilegedMode: True\n      ServiceRole: !Ref roadserviceCodeBuildRoleVer\n      Source:\n        Type: CODEPIPELINE\n        BuildSpec: |\n          version: 0.2 \n          phases:\n            build:\n              commands:\n                - REPOSITORY_URI_NGINX=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_NAME_nginx}\n                - REPOSITORY_URI_PHP=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_NAME_php}\n                - IMAGE_TAG=latest\n                - echo \"[{\\\"name\\\":\\\"${CONTAINER_NAME_nginx}\\\",\\\"imageUri\\\":\\\"${REPOSITORY_URI_NGINX}:${IMAGE_TAG}\\\"}, {\\\"name\\\":\\\"${CONTAINER_NAME_php}\\\",\\\"imageUri\\\":\\\"${REPOSITORY_URI_PHP}:${IMAGE_TAG}\\\"}]\"\n                - echo \"[{\\\"name\\\":\\\"${CONTAINER_NAME_nginx}\\\",\\\"imageUri\\\":\\\"${REPOSITORY_URI_NGINX}:${IMAGE_TAG}\\\"}, {\\\"name\\\":\\\"${CONTAINER_NAME_php}\\\",\\\"imageUri\\\":\\\"${REPOSITORY_URI_PHP}:${IMAGE_TAG}\\\"}]\" > imagedefinitions.json\n          artifacts:\n              files:\n                - imagedefinitions.json\n      TimeoutInMinutes: 30\n# ------------------------------------------------------------#\n#  S3\n# ------------------------------------------------------------#\n  roadserviceS3bucketforcodepipelineVer:\n    Type: AWS::S3::Bucket\n    Properties:\n      BucketName: !Sub ${accountAlliasLowerCase}-roadservice-codepipeline-ver\n# ------------------------------------------------------------#\n#  CodePipeline\n# ------------------------------------------------------------#\n  roadserviceCodePipelineVer:\n    Type: AWS::CodePipeline::Pipeline\n    DependsOn: roadserviceS3bucketforcodepipelineVer\n    Properties:\n      ArtifactStore:\n        Location: !Ref roadserviceS3bucketforcodepipelineVer \n        Type: S3\n      Name: !Sub ${accountAlliasLowerCase}-road_service-codepipeline-ver\n      RestartExecutionOnUpdate: false\n      RoleArn: !GetAtt roadserviceCodePipelineRoleVer.Arn\n      Stages:\n        - Name: Source\n          Actions:\n            - Name: SourceAction\n              ActionTypeId: \n                Category: Source\n                Owner: AWS\n                Provider: ECR\n                Version: 1\n              OutputArtifacts: \n                - Name: SourceArtifact\n              Configuration: \n                RepositoryName: !Sub ${accountAlliasLowerCase}-road_service-nginx-ecr\n              RunOrder: 1\n        - Name: Build\n          Actions:\n            - Name: CodeBuild\n              InputArtifacts:\n                - Name: SourceArtifact\n              ActionTypeId: \n                Category: Build\n                Owner: AWS\n                Provider: CodeBuild\n                Version: 1\n              Configuration: \n                ProjectName: !Ref roadserviceCodeBuildProjectVer\n              OutputArtifacts: \n                - Name: CodebuildOutput\n              RunOrder: 1\n        - Name: Staging\n          Actions:\n            - Name: Deploy2roadserviceService\n              InputArtifacts:\n                - Name: CodebuildOutput\n              ActionTypeId: \n                Category: Deploy\n                Owner: AWS\n                Provider: ECS\n                Version: 1\n              Configuration:\n                ClusterName: !ImportValue cluster\n                FileName: imagedefinitions.json\n                ServiceName: !ImportValue roadserviceService\n              OutputArtifacts: []\n              RunOrder: 1\n# ------------------------------------------------------------#\n#  CloudWatch Event\n# ------------------------------------------------------------#\n  roadserviceCloudWatchEventRoleVer:\n    Type: 'AWS::IAM::Role'\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service:\n                - events.amazonaws.com\n            Action: 'sts:AssumeRole'\n      Path: /\n      Policies:\n        - PolicyName: cwe-pipeline-execution\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Effect: Allow\n                Action: 'codepipeline:StartPipelineExecution'\n                Resource: !Join \n                  - ''\n                  - - 'arn:aws:codepipeline:'\n                    - !Ref 'AWS::Region'\n                    - ':'\n                    - !Ref 'AWS::AccountId'\n                    - ':'\n                    - !Ref roadserviceCodePipelineVer\n  roadserviceCloudwatchEventsRuleVer:\n    Type: AWS::Events::Rule\n    Properties:\n      EventPattern:\n        source:\n          - aws.ecr\n        detail:\n          eventName:\n            - PutImage\n          requestParameters:\n            repositoryName: \n              - !Sub ${accountAlliasLowerCase}-road_service-nginx-ecr\n            imageTag: \n              - latest\n      Targets:\n        - Arn:  !Join \n          - ''\n          - - 'arn:aws:codepipeline:'\n            - !Ref 'AWS::Region'\n            - ':'\n            - !Ref 'AWS::AccountId'\n            - ':'\n            - !Ref roadserviceCodePipelineVer\n          Id: !Sub ${accountAlliasLowerCase}-road_service-nginx-ecr\n          RoleArn: !GetAtt roadserviceCloudWatchEventRoleVer.Arn\n\n# ------------------------------------------------------------#\n#  Outputs\n# ------------------------------------------------------------#\nOutputs:\n  roadserviceCodeBuildRoleVer:\n    Value: !Ref roadserviceCodeBuildRoleVer\n    Export:\n      Name: roadserviceCodeBuildRoleVer\n  roadserviceCodePipelineRoleVer:\n    Value: !Ref roadserviceCodePipelineRoleVer\n    Export:\n      Name: roadserviceCodePipelineRoleVer\n  roadserviceCodeBuildProjectVer:\n    Value: !Ref roadserviceCodeBuildProjectVer\n    Export:\n      Name: roadserviceCodeBuildProjectVer\n  roadserviceS3bucketforcodepipelineVer:\n    Value: !Ref roadserviceS3bucketforcodepipelineVer\n    Export:\n      Name: roadserviceS3bucketforcodepipelineVer\n  roadserviceCodePipelineVer:\n    Value: !Ref roadserviceCodePipelineVer\n    Export:\n      Name: roadserviceCodePipelineVer\n  roadserviceCloudWatchEventRoleVer:\n    Value: !Ref roadserviceCloudWatchEventRoleVer\n    Export:\n      Name: roadserviceCloudWatchEventRoleVer\n  roadserviceCloudwatchEventsRuleVer:\n    Value: !Ref roadserviceCloudwatchEventsRuleVer\n    Export:\n      Name: roadserviceCloudwatchEventsRuleVer\n\n"
}
INV-ver-esw01-roadservice-service
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: ecs service\n\nParameters:\n  accountAllias:\n    Type: String\n  accountAlliasLowerCase:\n    Type: String\n  apName:\n    Type: String\n  taskdefinition:\n    Type: String\n  desiredCount:\n    Type: Number\n\nResources:\n  ApiService:\n    Type: AWS::ECS::Service\n    Properties:\n      Cluster: !ImportValue cluster\n      DeploymentConfiguration:\n        MaximumPercent: 200\n        MinimumHealthyPercent: 100\n      DesiredCount: !Ref desiredCount\n      LaunchType: FARGATE\n      LoadBalancers:\n        - ContainerName: !Sub ${accountAlliasLowerCase}-${apName}-nginx-container\n          ContainerPort: 80\n          TargetGroupArn: !ImportValue roadservice-internalTargetGroup\n      NetworkConfiguration:\n        AwsvpcConfiguration:\n          AssignPublicIp: DISABLED\n          SecurityGroups:\n            - !ImportValue internalApplicationSecuritygroup\n          Subnets:\n            - !ImportValue PrivateSubnet1a\n            - !ImportValue PrivateSubnet1c\n      ServiceName: !Sub ${accountAlliasLowerCase}-${apName}-service\n      TaskDefinition: !Ref taskdefinition\n\nOutputs:\n  Service:\n    Value: !Ref ApiService\n    Export:\n      Name: roadserviceService\n"
}
INV-ver-esw01-roadservice-role
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: ecs task exec role\n\nParameters:\n  accountAllias:\n    Type: String\n  accountAlliasLowerCase:\n    Type: String\n\nResources:\n  ecsTaskExecutionRoleRoadservice:\n    Type: AWS::IAM::Role\n    Properties:\n      RoleName: !Sub \"${accountAllias}-roadservice-ecsTaskExecutionRole\"\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement:\n          - Effect: \"Allow\"\n            Principal:\n              Service:\n                - \"ecs-tasks.amazonaws.com\"\n            Action:\n              - \"sts:AssumeRole\"\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy\n      Policies:\n        -\n          PolicyName: read_params\n          PolicyDocument:\n            Version: \"2012-10-17\"\n            Statement:\n              -\n                Effect: Allow\n                Action:\n                  - \"ssm:GetParameters\"\n                Resource:\n                  - \"*\"\n\nOutputs:\n  roadserviceTaskRole:\n    Value: !Ref ecsTaskExecutionRoleRoadservice\n    Export:\n      Name: roadserviceTaskRole\n"
}
INV-ver-esw01-rouadservice-ecs-loggroup
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: ecs and loggroup\n\nParameters:\n  accountAllias:\n    Type: String\n  accountAlliasLowerCase:\n    Type: String\n  logGroupNameRoadservice:\n    Type: String\n\nResources:\n  logGroupRoadservice:\n    Type: AWS::Logs::LogGroup\n    Properties:\n      LogGroupName: !Ref logGroupNameRoadservice\n\nOutputs:\n  logGroupRoadservice:\n    Value: !Ref logGroupRoadservice\n    Export:\n      Name: logGroupRoadservice\n"
}
INV-ver-esw01-roadservice-ecr
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: codecommit and ecr\n\nParameters:\n  accountAllias:\n    Type: String\n  accountAlliasLowerCase:\n    Type: String\n\n\nResources:\n  ecrRoadserviceNginx:\n    Type: AWS::ECR::Repository\n    Properties:\n      RepositoryName: !Sub ${accountAlliasLowerCase}-road_service-nginx-ecr\n  ecrRoadservicePhp:\n    Type: AWS::ECR::Repository\n    Properties:\n      RepositoryName: !Sub ${accountAlliasLowerCase}-road_service-php-ecr\n\nOutputs:\n  ecrRoadserviceNginx:\n    Value: !Ref ecrRoadserviceNginx\n    Export:\n      Name: ecrRoadserviceNginx\n  ecrRoadserviceNginxArn:\n    Value: !GetAtt ecrRoadserviceNginx.Arn\n    Export:\n      Name: ecrRoadserviceNginxArn\n  ecrRoadservicePhp:\n    Value: !Ref ecrRoadservicePhp\n    Export:\n      Name: ecrRoadservicePhp\n  ecrRoadserviceArn:\n    Value: !GetAtt ecrRoadservicePhp.Arn\n    Export:\n      Name: ecrRoadservicePhpArn\n"
}
INV-ver-esw01-thirdperson-codepipeline-ver
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: codepipeline\n\n# ------------------------------------------------------------#\n#  Parameters\n# ------------------------------------------------------------#\nParameters:\n  accountAllias:\n    Type: String\n  accountAlliasLowerCase:\n    Type: String\n\nResources:\n# ------------------------------------------------------------#\n#  Role\n# ------------------------------------------------------------#\n  thirdpersonCodeBuildRoleVer:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement: \n          - Effect: \"Allow\"\n            Principal: \n              Service: \n                - \"codebuild.amazonaws.com\"\n            Action: \n              - \"sts:AssumeRole\"\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess\n        - arn:aws:iam::aws:policy/AmazonS3FullAccess\n        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess\n  thirdpersonCodePipelineRoleVer:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement: \n          - Effect: \"Allow\"\n            Principal: \n              Service: \n                - \"codepipeline.amazonaws.com\"\n            Action: \n              - \"sts:AssumeRole\"\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess\n        - arn:aws:iam::aws:policy/AWSCodeCommitFullAccess\n        - arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess\n        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess\n        - arn:aws:iam::aws:policy/AmazonS3FullAccess\n        - arn:aws:iam::aws:policy/CloudWatchFullAccess\n        - arn:aws:iam::aws:policy/AmazonEC2ContainerServiceFullAccess\n\n# ------------------------------------------------------------#\n#  CodeBuild\n# ------------------------------------------------------------#\n  thirdpersonCodeBuildProjectVer:\n    Type: AWS::CodeBuild::Project\n    Properties:\n      Name: !Sub ${accountAlliasLowerCase}-thirdperson-api-build-project-ver\n      Artifacts:\n        Type: CODEPIPELINE\n      Description: !Sub Building stage for ${accountAlliasLowerCase}-ver\n      Environment:\n        ComputeType: BUILD_GENERAL1_SMALL\n        EnvironmentVariables:\n          - Name: AWS_ACCOUNT_ID\n            Value: !Ref AWS::AccountId\n          - Name: IMAGE_NAME_nginx\n            Value: !Sub ${accountAlliasLowerCase}-thirdperson-nginx-ecr\n          - Name: IMAGE_NAME_php\n            Value: !Sub ${accountAlliasLowerCase}-thirdperson-php-ecr\n          - Name: CONTAINER_NAME_api_nginx\n            Value: !Sub ${accountAlliasLowerCase}-thirdperson-api-nginx-container\n          - Name: CONTAINER_NAME_api_php\n            Value: !Sub ${accountAlliasLowerCase}-thirdperson-api-php-container\n          - Name: CONTAINER_NAME_web_nginx\n            Value: !Sub ${accountAlliasLowerCase}-thirdperson-web-nginx-container\n          - Name: CONTAINER_NAME_web_php\n            Value: !Sub ${accountAlliasLowerCase}-thirdperson-web-php-container\n        Image: aws/codebuild/docker:18.09.0\n        Type: LINUX_CONTAINER\n        PrivilegedMode: True\n      ServiceRole: !Ref thirdpersonCodeBuildRoleVer\n      Source:\n        Type: CODEPIPELINE\n        BuildSpec: |\n          version: 0.2 \n          phases:\n            build:\n              commands:\n                - REPOSITORY_URI_NGINX=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_NAME_nginx}\n                - REPOSITORY_URI_PHP=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_NAME_php}\n                - IMAGE_TAG=latest\n                - echo \"[{\\\"name\\\":\\\"${CONTAINER_NAME_api_nginx}\\\",\\\"imageUri\\\":\\\"${REPOSITORY_URI_NGINX}:${IMAGE_TAG}\\\"}, {\\\"name\\\":\\\"${CONTAINER_NAME_api_php}\\\",\\\"imageUri\\\":\\\"${REPOSITORY_URI_PHP}:${IMAGE_TAG}\\\"}]\"\n                - echo \"[{\\\"name\\\":\\\"${CONTAINER_NAME_api_nginx}\\\",\\\"imageUri\\\":\\\"${REPOSITORY_URI_NGINX}:${IMAGE_TAG}\\\"}, {\\\"name\\\":\\\"${CONTAINER_NAME_api_php}\\\",\\\"imageUri\\\":\\\"${REPOSITORY_URI_PHP}:${IMAGE_TAG}\\\"}]\" > imagedefinitions-api.json\n                - echo \"[{\\\"name\\\":\\\"${CONTAINER_NAME_web_nginx}\\\",\\\"imageUri\\\":\\\"${REPOSITORY_URI_NGINX}:${IMAGE_TAG}\\\"}, {\\\"name\\\":\\\"${CONTAINER_NAME_web_php}\\\",\\\"imageUri\\\":\\\"${REPOSITORY_URI_PHP}:${IMAGE_TAG}\\\"}]\"\n                - echo \"[{\\\"name\\\":\\\"${CONTAINER_NAME_web_nginx}\\\",\\\"imageUri\\\":\\\"${REPOSITORY_URI_NGINX}:${IMAGE_TAG}\\\"}, {\\\"name\\\":\\\"${CONTAINER_NAME_web_php}\\\",\\\"imageUri\\\":\\\"${REPOSITORY_URI_PHP}:${IMAGE_TAG}\\\"}]\" > imagedefinitions-web.json\n          artifacts:\n              files:\n                - imagedefinitions-api.json\n                - imagedefinitions-web.json\n      TimeoutInMinutes: 30\n# ------------------------------------------------------------#\n#  S3\n# ------------------------------------------------------------#\n  thirdpersonS3bucketforcodepipelineVer:\n    Type: AWS::S3::Bucket\n    Properties:\n      BucketName: !Sub ${accountAlliasLowerCase}-thirdperson-codepipeline-ver\n# ------------------------------------------------------------#\n#  CodePipeline\n# ------------------------------------------------------------#\n  thirdpersonCodePipelineVer:\n    Type: AWS::CodePipeline::Pipeline\n    DependsOn: thirdpersonS3bucketforcodepipelineVer\n    Properties:\n      ArtifactStore:\n        Location: !Ref thirdpersonS3bucketforcodepipelineVer \n        Type: S3\n      Name: !Sub ${accountAlliasLowerCase}-thirdperson-codepipeline-ver\n      RestartExecutionOnUpdate: false\n      RoleArn: !GetAtt thirdpersonCodePipelineRoleVer.Arn\n      Stages:\n        - Name: Source\n          Actions:\n            - Name: SourceAction\n              ActionTypeId: \n                Category: Source\n                Owner: AWS\n                Provider: ECR\n                Version: 1\n              OutputArtifacts: \n                - Name: SourceArtifact\n              Configuration: \n                RepositoryName: !Sub ${accountAlliasLowerCase}-thirdperson-nginx-ecr\n              RunOrder: 1\n        - Name: Build\n          Actions:\n            - Name: CodeBuild\n              InputArtifacts:\n                - Name: SourceArtifact\n              ActionTypeId: \n                Category: Build\n                Owner: AWS\n                Provider: CodeBuild\n                Version: 1\n              Configuration: \n                ProjectName: !Ref thirdpersonCodeBuildProjectVer\n              OutputArtifacts: \n                - Name: CodebuildOutput\n              RunOrder: 1\n        - Name: Staging\n          Actions:\n            - Name: Deploy2thirdpersonApiService\n              InputArtifacts:\n                - Name: CodebuildOutput\n              ActionTypeId: \n                Category: Deploy\n                Owner: AWS\n                Provider: ECS\n                Version: 1\n              Configuration:\n                ClusterName: !ImportValue cluster\n                FileName: imagedefinitions-api.json\n                ServiceName: !ImportValue thirdpersonApiService\n              OutputArtifacts: []\n              RunOrder: 1\n            - Name: Deploy2thirdpersonWebService\n              InputArtifacts:\n                - Name: CodebuildOutput\n              ActionTypeId: \n                Category: Deploy\n                Owner: AWS\n                Provider: ECS\n                Version: 1\n              Configuration:\n                ClusterName: !ImportValue cluster\n                FileName: imagedefinitions-web.json\n                ServiceName: !ImportValue thirdpersonWebService\n              OutputArtifacts: []\n              RunOrder: 1\n# ------------------------------------------------------------#\n#  CloudWatch Event\n# ------------------------------------------------------------#\n  thirdpersonCloudWatchEventRoleVer:\n    Type: 'AWS::IAM::Role'\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service:\n                - events.amazonaws.com\n            Action: 'sts:AssumeRole'\n      Path: /\n      Policies:\n        - PolicyName: cwe-pipeline-execution\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Effect: Allow\n                Action: 'codepipeline:StartPipelineExecution'\n                Resource: !Join \n                  - ''\n                  - - 'arn:aws:codepipeline:'\n                    - !Ref 'AWS::Region'\n                    - ':'\n                    - !Ref 'AWS::AccountId'\n                    - ':'\n                    - !Ref thirdpersonCodePipelineVer\n  thirdpersonCloudwatchEventsRuleVer:\n    Type: AWS::Events::Rule\n    Properties:\n      EventPattern:\n        source:\n          - aws.ecr\n        detail:\n          eventName:\n            - PutImage\n          requestParameters:\n            repositoryName: \n              - !Sub ${accountAlliasLowerCase}-thirdperson-nginx-ecr\n            imageTag: \n              - latest\n      Targets:\n        - Arn:  !Join \n          - ''\n          - - 'arn:aws:codepipeline:'\n            - !Ref 'AWS::Region'\n            - ':'\n            - !Ref 'AWS::AccountId'\n            - ':'\n            - !Ref thirdpersonCodePipelineVer\n          Id: !Sub ${accountAlliasLowerCase}-thirdperson-codepipeline-ver\n          RoleArn: !GetAtt thirdpersonCloudWatchEventRoleVer.Arn\n\n# ------------------------------------------------------------#\n#  Outputs\n# ------------------------------------------------------------#\nOutputs:\n  thirdpersonCodeBuildRoleVer:\n    Value: !Ref thirdpersonCodeBuildRoleVer\n    Export:\n      Name: thirdpersonCodeBuildRoleVer\n  thirdpersonCodePipelineRoleVer:\n    Value: !Ref thirdpersonCodePipelineRoleVer\n    Export:\n      Name: thirdpersonCodePipelineRoleVer\n  thirdpersonCodeBuildProjectVer:\n    Value: !Ref thirdpersonCodeBuildProjectVer\n    Export:\n      Name: thirdpersonCodeBuildProjectVer\n  thirdpersonS3bucketforcodepipelineVer:\n    Value: !Ref thirdpersonS3bucketforcodepipelineVer\n    Export:\n      Name: thirdpersonS3bucketforcodepipelineVer\n  thirdpersonCodePipelineVer:\n    Value: !Ref thirdpersonCodePipelineVer\n    Export:\n      Name: thirdpersonCodePipelineVer\n  thirdpersonCloudWatchEventRoleVer:\n    Value: !Ref thirdpersonCloudWatchEventRoleVer\n    Export:\n      Name: thirdpersonCloudWatchEventRoleVer\n  thirdpersonCloudwatchEventsRuleVer:\n    Value: !Ref thirdpersonCloudwatchEventsRuleVer\n    Export:\n      Name: thirdpersonCloudwatchEventsRuleVer\n\n"
}
INV-ver-esw01-ver-ecr-access-role
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: codepipeline\n\n# ------------------------------------------------------------#\n#  Parameters\n# ------------------------------------------------------------#\nParameters:\n  accountAllias:\n    Type: String\n  accountAlliasLowerCase:\n    Type: String\n  devAwsAccountId:\n    Type: String\n\nResources:\n# ------------------------------------------------------------#\n#  Role\n# ------------------------------------------------------------#\n  verEcrAccessRole:\n    Type: AWS::IAM::Role\n    Properties:\n      RoleName: ver-ecr-access-role\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement: \n          - Effect: \"Allow\"\n            Principal: \n              AWS: \n                - !Sub arn:aws:iam::${devAwsAccountId}:root\n            Action: \n              - \"sts:AssumeRole\"\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess\n\n# ------------------------------------------------------------#\n#  Outputs\n# ------------------------------------------------------------#\nOutputs:\n  verEcrAccessRole:\n    Value: !Ref verEcrAccessRole\n    Export:\n      Name: verEcrAccessRole"
}
StackSet-J0126970-createIamRole-41468ceb-19cc-4171-8a42-13abae29408a
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "{\n  \"AWSTemplateFormatVersion\" : \"2010-09-09\",\n  \"Description\" : \"Template for Creating IAM Role to Switch from Internavi Login AWS Account\",\n  \"Parameters\" : {\n    \"TrustedAWSAccountId\" : {\n      \"AllowedPattern\" : \"^[0-9]*$\",\n      \"Type\" : \"String\",\n      \"Default\" : \"975196479634\",\n      \"Description\" : \"Trusted AWS Account ID\"\n    },\n    \"IAMRoleName\": {\n      \"Type\": \"String\",\n      \"Default\": \"HmSolUser\",\n      \"Description\": \"IAM Role Name\"\n    },\n    \"IAMPolicyType\": {\n      \"Type\": \"String\",\n      \"Default\": \"HmSolUser\",\n      \"Description\": \"IAM Policy Type\",\n      \"AllowedValues\": [ \"HmSolUser\", \"HmAdmin\" ]\n    },\n    \"IAMUserName\": {\n      \"Type\": \"String\",\n      \"Default\": \"\",\n      \"Description\": \"IAM User Name\"\n    }\n  },\n  \"Conditions\" : {\n    \"user\"        : { \"Fn::Equals\" : [{\"Ref\" : \"IAMPolicyType\"}, \"HmSolUser\" ]},\n    \"admin\"        : { \"Fn::Equals\" : [{\"Ref\" : \"IAMPolicyType\"}, \"HmAdmin\" ]}\n  },\n  \"Resources\" : {\n    \"IAMRoleForAdmin\": {\n      \"Type\": \"AWS::IAM::Role\",\n      \"Condition\" : \"admin\",\n      \"Properties\": {\n        \"AssumeRolePolicyDocument\": {\n          \"Version\": \"2012-10-17\",\n          \"Statement\": [\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", { \"Ref\" : \"IAMUserName\" } ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            }\n          ]\n        },\n        \"ManagedPolicyArns\": [\n          \"arn:aws:iam::aws:policy/AdministratorAccess\"\n        ],\n        \"Path\": \"/\",\n        \"RoleName\": { \"Ref\" : \"IAMRoleName\" }\n      }\n    },\n    \"IAMRoleForUser\": {\n      \"Type\": \"AWS::IAM::Role\",\n      \"Condition\" : \"user\",\n      \"Properties\": {\n        \"AssumeRolePolicyDocument\": {\n          \"Version\": \"2012-10-17\",\n          \"Statement\": [\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", { \"Ref\" : \"IAMUserName\" } ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            }\n          ]\n        },\n        \"ManagedPolicyArns\": [\n          \"arn:aws:iam::aws:policy/AdministratorAccess\"\n        ],\n        \"Path\": \"/\",\n        \"RoleName\": { \"Ref\" : \"IAMRoleName\" }\n      }\n    }\n  },\n  \"Outputs\" : {\n    \"IAMRoleAdminArn\": {\n      \"Value\": { \"Fn::GetAtt\" : [ \"IAMRoleForAdmin\", \"Arn\" ] },\n      \"Condition\" : \"admin\"\n    },\n    \"IAMRoleUserArn\": {\n      \"Value\": { \"Fn::GetAtt\" : [ \"IAMRoleForUser\", \"Arn\" ] },\n      \"Condition\" : \"user\"\n    },\n    \"LinkForSwitchRole\": {\n      \"Value\": { \"Fn::Join\": [ \"\", [ \"https://signin.aws.amazon.com/switchrole?roleName=\", { \"Ref\" : \"IAMRoleName\" }, \"&account=\", { \"Ref\" : \"AWS::AccountId\" } ] ] }\n    }\n  }\n}\n"
}
StackSet-InfraAdmin-CreateIamRole-9de8a261-5876-4fd1-9ba9-bfaf48d12872
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": {
        "AWSTemplateFormatVersion": "2010-09-09", 
        "Description": "Template for Creating IAM Role to Switch from Internavi Login AWS Account", 
        "Parameters": {
            "TrustedAWSAccountId": {
                "AllowedPattern": "^[0-9]*$", 
                "Type": "String", 
                "Default": "975196479634", 
                "Description": "Trusted AWS Account ID"
            }, 
            "IAMRoleName": {
                "Type": "String", 
                "Default": "InfraAdmin", 
                "Description": "IAM Role Name"
            }
        }, 
        "Resources": {
            "IAMRoleForEngineer": {
                "Type": "AWS::IAM::Role", 
                "Properties": {
                    "AssumeRolePolicyDocument": {
                        "Version": "2012-10-17", 
                        "Statement": [
                            {
                                "Effect": "Allow", 
                                "Principal": {
                                    "AWS": {
                                        "Fn::Join": [
                                            "", 
                                            [
                                                "arn:aws:iam::", 
                                                {
                                                    "Ref": "TrustedAWSAccountId"
                                                }, 
                                                ":user/", 
                                                "JV010031"
                                            ]
                                        ]
                                    }
                                }, 
                                "Action": [
                                    "sts:AssumeRole"
                                ], 
                                "Condition": {
                                    "Bool": {
                                        "aws:MultiFactorAuthPresent": "true"
                                    }
                                }
                            }, 
                            {
                                "Effect": "Allow", 
                                "Principal": {
                                    "AWS": {
                                        "Fn::Join": [
                                            "", 
                                            [
                                                "arn:aws:iam::", 
                                                {
                                                    "Ref": "TrustedAWSAccountId"
                                                }, 
                                                ":user/", 
                                                "JV010024"
                                            ]
                                        ]
                                    }
                                }, 
                                "Action": [
                                    "sts:AssumeRole"
                                ], 
                                "Condition": {
                                    "Bool": {
                                        "aws:MultiFactorAuthPresent": "true"
                                    }
                                }
                            }
                        ]
                    }, 
                    "ManagedPolicyArns": [
                        "arn:aws:iam::aws:policy/AdministratorAccess"
                    ], 
                    "Path": "/", 
                    "RoleName": {
                        "Ref": "IAMRoleName"
                    }
                }
            }
        }, 
        "Outputs": {
            "IAMRoleArn": {
                "Value": {
                    "Fn::GetAtt": [
                        "IAMRoleForEngineer", 
                        "Arn"
                    ]
                }
            }, 
            "LinkForSwitchRole": {
                "Value": {
                    "Fn::Join": [
                        "", 
                        [
                            "https://signin.aws.amazon.com/switchrole?roleName=", 
                            {
                                "Ref": "IAMRoleName"
                            }, 
                            "&account=", 
                            {
                                "Ref": "AWS::AccountId"
                            }
                        ]
                    ]
                }
            }
        }
    }
}
INV-ver-esw01-thirdperson-api-task
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: ecs task definition and internal service\n\nParameters:\n  accountAllias:\n    Type: String\n  accountAlliasLowerCase:\n    Type: String\n  cpu:\n    Type: Number\n  memory:\n    Type: Number\n  desiredCount:\n    Type: Number\n\nResources:\n  ecsTaskExecutionRoleThirdpersonApi:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement:\n          - Effect: \"Allow\"\n            Principal:\n              Service:\n                - \"ecs-tasks.amazonaws.com\"\n            Action:\n              - \"sts:AssumeRole\"\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy\n      Policies:\n        -\n          PolicyName: !Sub \"PolicyforDynamoDB-${accountAllias}-app-DynamoDBAccessRole\"\n          PolicyDocument:\n            Version: \"2012-10-17\"\n            Statement:\n              -\n                Effect: Allow\n                Action:\n                  - \"dynamodb:*\"\n                Resource:\n                  - Fn::Join:\n                    - \"\"\n                    -\n                      - \"arn:aws:dynamodb:ap-northeast-1:\"\n                      - !Ref AWS::AccountId\n                      - \":table/\"\n                      - !ImportValue UserTable\n                  - Fn::Join:\n                    - \"\"\n                    -\n                      - \"arn:aws:dynamodb:ap-northeast-1:\"\n                      - !Ref AWS::AccountId\n                      - \":table/\"\n                      - !ImportValue UserTable\n                      - \"/index/*\"\n  TaskdefinitionThirdpersonApi:\n    Type: AWS::ECS::TaskDefinition\n    DependsOn: ecsTaskExecutionRoleThirdpersonApi\n    Properties:\n      Family: !Sub ${accountAlliasLowerCase}-thirdperson-api-task\n      RequiresCompatibilities:\n        - FARGATE\n      Cpu: !Ref cpu\n      Memory: !Ref memory\n      NetworkMode: awsvpc\n      ExecutionRoleArn: !GetAtt ecsTaskExecutionRoleThirdpersonApi.Arn\n      TaskRoleArn: !GetAtt ecsTaskExecutionRoleThirdpersonApi.Arn\n      ContainerDefinitions:\n        - Name: !Sub ${accountAlliasLowerCase}-thirdperson-api-nginx-container\n          Image:\n            Fn::Join:\n              - \"\"\n              -\n                - !Ref AWS::AccountId\n                - \".dkr.ecr.ap-northeast-1.amazonaws.com/\"\n                - Fn::ImportValue: ecrThirdpersonNginx\n                - \":latest\"\n          PortMappings:\n            - ContainerPort: 80\n          Environment:\n            - Name: PHP_APP_HOST\n              Value: 127.0.0.1\n            - Name: TZ\n              Value: Asia/Tokyo\n          LogConfiguration:\n            LogDriver: awslogs\n            Options:\n              awslogs-region: !Ref AWS::Region\n              awslogs-group: !ImportValue logGroupThirdpersonApi\n              awslogs-stream-prefix: !Sub ${accountAlliasLowerCase}\n        - Name: !Sub ${accountAlliasLowerCase}-thirdperson-api-php-container\n          Image:\n            Fn::Join:\n              - \"\"\n              -\n                - !Ref AWS::AccountId\n                - \".dkr.ecr.ap-northeast-1.amazonaws.com/\"\n                - Fn::ImportValue: ecrThirdpersonPhp\n                - \":latest\"\n          Environment:\n            - Name: APP_ENV\n              Value: ver\n            - Name: TZ\n              Value: Asia/Tokyo\n            - Name: APP_ROUTE\n              Value: api\n          LogConfiguration:\n            LogDriver: awslogs\n            Options:\n              awslogs-region: !Ref AWS::Region\n              awslogs-group: !ImportValue logGroupThirdpersonApi\n              awslogs-stream-prefix: !Sub ${accountAlliasLowerCase}\n          HealthCheck:\n            Command:\n              - \"CMD-SHELL\"\n              - \"/usr/local/bin/php-fpm-healthcheck\"\n            Interval: 30\n            Retries: 5\n            StartPeriod: 60\n            Timeout: 5\n  thirdpersonApiService:\n    Type: AWS::ECS::Service\n    DependsOn: TaskdefinitionThirdpersonApi\n    Properties:\n      Cluster: !ImportValue cluster\n      DeploymentConfiguration:\n        MaximumPercent: 200\n        MinimumHealthyPercent: 50\n      DesiredCount: !Ref desiredCount\n      LaunchType: FARGATE\n      LoadBalancers:\n        - ContainerName: !Sub ${accountAlliasLowerCase}-thirdperson-api-nginx-container\n          ContainerPort: 80\n          TargetGroupArn: !ImportValue thirdperson-api-internalTargetGroup\n      NetworkConfiguration:\n        AwsvpcConfiguration:\n          AssignPublicIp: DISABLED\n          SecurityGroups:\n            - !ImportValue internalApplicationSecuritygroup\n          Subnets:\n            - !ImportValue PrivateSubnet1a\n            - !ImportValue PrivateSubnet1c\n      ServiceName: !Sub ${accountAlliasLowerCase}-thirdperson-api-service\n      TaskDefinition: !Ref TaskdefinitionThirdpersonApi\n\nOutputs:\n  thirdpersonApiService:\n    Value: !Ref thirdpersonApiService\n    Export:\n      Name: thirdpersonApiService\n  ecsTaskExecutionRoleThirdpersonApi:\n    Value: !Ref ecsTaskExecutionRoleThirdpersonApi\n    Export:\n      Name: ecsTaskExecutionRoleThirdpersonApi\n  TaskdefinitionThirdpersonApi:\n    Value: !Ref TaskdefinitionThirdpersonApi\n    Export:\n      Name: TaskdefinitionThirdpersonApi\n"
}
INV-ver-esw01-thirdperson-web-task
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: ecs task definition and internal service\n\nParameters:\n  accountAllias:\n    Type: String\n  accountAlliasLowerCase:\n    Type: String\n  cpu:\n    Type: Number\n  memory:\n    Type: Number\n  desiredCount:\n    Type: Number\n\nResources:\n  ecsTaskExecutionRoleThirdpersonWeb:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement:\n          - Effect: \"Allow\"\n            Principal:\n              Service:\n                - \"ecs-tasks.amazonaws.com\"\n            Action:\n              - \"sts:AssumeRole\"\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy\n  TaskdefinitionThirdpersonWeb:\n    Type: AWS::ECS::TaskDefinition\n    DependsOn: ecsTaskExecutionRoleThirdpersonWeb\n    Properties:\n      Family: !Sub ${accountAlliasLowerCase}-thirdperson-web-task\n      RequiresCompatibilities:\n        - FARGATE\n      Cpu: !Ref cpu\n      Memory: !Ref memory\n      NetworkMode: awsvpc\n      ExecutionRoleArn: !GetAtt ecsTaskExecutionRoleThirdpersonWeb.Arn\n      TaskRoleArn: !GetAtt ecsTaskExecutionRoleThirdpersonWeb.Arn\n      ContainerDefinitions:\n        - Name: !Sub ${accountAlliasLowerCase}-thirdperson-web-nginx-container\n          Image:\n            Fn::Join:\n              - \"\"\n              -\n                - !Ref AWS::AccountId\n                - \".dkr.ecr.ap-northeast-1.amazonaws.com/\"\n                - Fn::ImportValue: ecrThirdpersonNginx\n                - \":latest\"\n          PortMappings:\n            - ContainerPort: 80\n          Environment:\n            - Name: PHP_APP_HOST\n              Value: 127.0.0.1\n            - Name: TZ\n              Value: Asia/Tokyo\n          LogConfiguration:\n            LogDriver: awslogs\n            Options:\n              awslogs-region: !Ref AWS::Region\n              awslogs-group: !ImportValue logGroupThirdpersonWeb\n              awslogs-stream-prefix: !Sub ${accountAlliasLowerCase}\n        - Name: !Sub ${accountAlliasLowerCase}-thirdperson-web-php-container\n          Image:\n            Fn::Join:\n              - \"\"\n              -\n                - !Ref AWS::AccountId\n                - \".dkr.ecr.ap-northeast-1.amazonaws.com/\"\n                - Fn::ImportValue: ecrThirdpersonPhp\n                - \":latest\"\n          Environment:\n            - Name: APP_ENV\n              Value: ver\n            - Name: TZ\n              Value: Asia/Tokyo\n            - Name: APP_ROUTE\n              Value: web\n          LogConfiguration:\n            LogDriver: awslogs\n            Options:\n              awslogs-region: !Ref AWS::Region\n              awslogs-group: !ImportValue logGroupThirdpersonWeb\n              awslogs-stream-prefix: !Sub ${accountAlliasLowerCase}\n          HealthCheck:\n            Command:\n              - \"CMD-SHELL\"\n              - \"/usr/local/bin/php-fpm-healthcheck\"\n            Interval: 30\n            Retries: 5\n            StartPeriod: 60\n            Timeout: 5\n  thirdpersonWebService:\n    Type: AWS::ECS::Service\n    DependsOn: TaskdefinitionThirdpersonWeb\n    Properties:\n      Cluster: !ImportValue cluster\n      DeploymentConfiguration:\n        MaximumPercent: 200\n        MinimumHealthyPercent: 50\n      DesiredCount: !Ref desiredCount\n      LaunchType: FARGATE\n      LoadBalancers:\n        - ContainerName: !Sub ${accountAlliasLowerCase}-thirdperson-web-nginx-container\n          ContainerPort: 80\n          TargetGroupArn: !ImportValue thirdperson-web-internalTargetGroup\n      NetworkConfiguration:\n        AwsvpcConfiguration:\n          AssignPublicIp: DISABLED\n          SecurityGroups:\n            - !ImportValue internalApplicationSecuritygroup\n          Subnets:\n            - !ImportValue PrivateSubnet1a\n            - !ImportValue PrivateSubnet1c\n      ServiceName: !Sub ${accountAlliasLowerCase}-thirdperson-web-service\n      TaskDefinition: !Ref TaskdefinitionThirdpersonWeb\n\nOutputs:\n  thirdpersonWebService:\n    Value: !Ref thirdpersonWebService\n    Export:\n      Name: thirdpersonWebService\n  ecsTaskExecutionRoleThirdpersonWeb:\n    Value: !Ref ecsTaskExecutionRoleThirdpersonWeb\n    Export:\n      Name: ecsTaskExecutionRoleThirdpersonWeb\n  TaskdefinitionThirdpersonWeb:\n    Value: !Ref TaskdefinitionThirdpersonWeb\n    Export:\n      Name: TaskdefinitionThirdpersonWeb\n"
}
INV-ver-esw01-ecs-cluster
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: ecs cluster\n\nParameters:\n  accountAllias:\n    Type: String\n  accountAlliasLowerCase:\n    Type: String\n\nResources:\n  ecs:\n    Type: AWS::ECS::Cluster\n    Properties:\n      ClusterName: !Sub ${accountAlliasLowerCase}-cluster\n\nOutputs:\n  cluster:\n    Value: !Ref ecs\n    Export:\n      Name: cluster\n"
}
INV-ver-esw01-thirdperson-ecs-loggroup
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: ecs and loggroup\n\nParameters:\n  accountAllias:\n    Type: String\n  accountAlliasLowerCase:\n    Type: String\n  logGroupNameThirdpersonWeb:\n    Type: String\n  logGroupNameThirdpersonApi:\n    Type: String\n\nResources:\n  logGroupThirdpersonWeb:\n    Type: AWS::Logs::LogGroup\n    Properties: \n      LogGroupName: !Ref logGroupNameThirdpersonWeb\n  logGroupThirdpersonApi:\n    Type: AWS::Logs::LogGroup\n    Properties: \n      LogGroupName: !Ref logGroupNameThirdpersonApi\n\nOutputs:\n  logGroupThirdpersonWeb:\n    Value: !Ref logGroupThirdpersonWeb\n    Export:\n      Name: logGroupThirdpersonWeb\n  logGroupThirdpersonApi:\n    Value: !Ref logGroupThirdpersonApi\n    Export:\n      Name: logGroupThirdpersonApi\n"
}
INV-ver-esw01-thirdperson-ecr
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: codecommit and ecr\n\nParameters:\n  accountAllias:\n    Type: String\n  accountAlliasLowerCase:\n    Type: String\n\n\nResources:\n  ecrThirdpersonNginx:\n    Type: AWS::ECR::Repository\n    Properties: \n      RepositoryName: !Sub ${accountAlliasLowerCase}-thirdperson-nginx-ecr\n  ecrThirdpersonPhp:\n    Type: AWS::ECR::Repository\n    Properties: \n      RepositoryName: !Sub ${accountAlliasLowerCase}-thirdperson-php-ecr\n\nOutputs:\n  ecrThirdpersonNginx:\n    Value: !Ref ecrThirdpersonNginx\n    Export:\n      Name: ecrThirdpersonNginx\n  ecrThirdpersonNginxArn:\n    Value: !GetAtt ecrThirdpersonNginx.Arn\n    Export:\n      Name: ecrThirdpersonNginxArn\n  ecrThirdpersonPhp:\n    Value: !Ref ecrThirdpersonPhp\n    Export:\n      Name: ecrThirdpersonPhp\n  ecrThirdpersonArn:\n    Value: !GetAtt ecrThirdpersonPhp.Arn\n    Export:\n      Name: ecrThirdpersonPhpArn\n"
}
INV-ver-esw01-resource-DynamoDBStack-FZPMYDRC5IGO
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "---\nAWSTemplateFormatVersion: \"2010-09-09\"\nDescription: 7-1_dynamodb.txt\nParameters: \n  ServiceName:\n    Type: String\n  SystemEnvironment:\n    Type: String\n  ReadCapacitymin:\n    Type: String\n  ReadCapacitymax:\n    Type: String\n  WriteCapacitymin:\n    Type: String\n  WriteCapacitymax:\n    Type: String\n  GSIReadCapacitymin:\n    Type: String\n  GSIReadCapacitymax:\n    Type: String\n  GSIWriteCapacitymin:\n    Type: String\n  GSIWriteCapacitymax:\n    Type: String\n  DynamoDBScalingRole:\n    Type: String\nResources:\n  UserTable:\n    Type: 'AWS::DynamoDB::Table'\n    Properties:\n      TableName: third_party_contract_mail_temporarily\n      AttributeDefinitions:\n        - AttributeName: HTC_ID\n          AttributeType: S\n        - AttributeName: HASH\n          AttributeType: S\n      KeySchema:\n        - AttributeName: HTC_ID\n          KeyType: HASH\n      ProvisionedThroughput:\n        ReadCapacityUnits: !Ref ReadCapacitymin\n        WriteCapacityUnits: !Ref WriteCapacitymin\n      GlobalSecondaryIndexes:\n      - IndexName: subkey\n        KeySchema:\n        - AttributeName: HASH\n          KeyType: HASH\n        Projection:\n          ProjectionType: KEYS_ONLY\n        ProvisionedThroughput:\n          ReadCapacityUnits: !Ref ReadCapacitymin\n          WriteCapacityUnits: !Ref WriteCapacitymin\n      TimeToLiveSpecification:\n        AttributeName: TTL\n        Enabled: true\n  UserTableWriteCapacityScalableTarget: \n    Type: \"AWS::ApplicationAutoScaling::ScalableTarget\"\n    DependsOn: UserTable\n    Properties: \n       MaxCapacity: !Ref WriteCapacitymax\n       MinCapacity: !Ref WriteCapacitymin\n       ResourceId: !Sub table/third_party_contract_mail_temporarily\n       RoleARN: !Ref DynamoDBScalingRole\n       ScalableDimension: \"dynamodb:table:WriteCapacityUnits\"\n       ServiceNamespace: dynamodb\n  UserTableReadCapacityScalableTarget: \n    Type: \"AWS::ApplicationAutoScaling::ScalableTarget\"\n    DependsOn: UserTable\n    Properties: \n       MaxCapacity: !Ref ReadCapacitymax\n       MinCapacity: !Ref ReadCapacitymin\n       ResourceId: !Sub table/third_party_contract_mail_temporarily\n       RoleARN: !Ref DynamoDBScalingRole\n       ScalableDimension: \"dynamodb:table:ReadCapacityUnits\"\n       ServiceNamespace: dynamodb\n  UserTableWriteScalingPolicy: \n    Type: \"AWS::ApplicationAutoScaling::ScalingPolicy\"\n    DependsOn: UserTableWriteCapacityScalableTarget\n    Properties: \n       PolicyName: DynamoDBWriteAutoScalingPolicy\n       PolicyType: TargetTrackingScaling\n       ScalingTargetId: \n         Ref: UserTableWriteCapacityScalableTarget\n       TargetTrackingScalingPolicyConfiguration: \n         TargetValue: 70\n         ScaleInCooldown: 60\n         ScaleOutCooldown: 60\n         PredefinedMetricSpecification: \n           PredefinedMetricType: DynamoDBWriteCapacityUtilization\n  UserTableReadScalingPolicy: \n    Type: \"AWS::ApplicationAutoScaling::ScalingPolicy\"\n    DependsOn: UserTableReadCapacityScalableTarget\n    Properties: \n       PolicyName: DynamoDBReadAutoScalingPolicy\n       PolicyType: TargetTrackingScaling\n       ScalingTargetId: \n         Ref: UserTableReadCapacityScalableTarget\n       TargetTrackingScalingPolicyConfiguration: \n         TargetValue: 70\n         ScaleInCooldown: 60\n         ScaleOutCooldown: 60\n         PredefinedMetricSpecification: \n           PredefinedMetricType: DynamoDBReadCapacityUtilization\n  UserTableGSIWriteCapacityScalableTarget: \n    Type: \"AWS::ApplicationAutoScaling::ScalableTarget\"\n    DependsOn: UserTable\n    Properties: \n       MaxCapacity: !Ref GSIWriteCapacitymax\n       MinCapacity: !Ref GSIWriteCapacitymin\n       ResourceId: !Sub table/third_party_contract_mail_temporarily/index/subkey\n       RoleARN: !Ref DynamoDBScalingRole\n       ScalableDimension: \"dynamodb:index:WriteCapacityUnits\"\n       ServiceNamespace: dynamodb\n  UserTableGSIReadCapacityScalableTarget: \n    Type: \"AWS::ApplicationAutoScaling::ScalableTarget\"\n    DependsOn: UserTable\n    Properties: \n       MaxCapacity: !Ref GSIReadCapacitymax\n       MinCapacity: !Ref GSIReadCapacitymin\n       ResourceId: !Sub table/third_party_contract_mail_temporarily/index/subkey\n       RoleARN: !Ref DynamoDBScalingRole\n       ScalableDimension: \"dynamodb:index:ReadCapacityUnits\"\n       ServiceNamespace: dynamodb\n  UserTableGSIWriteScalingPolicy: \n    Type: \"AWS::ApplicationAutoScaling::ScalingPolicy\"\n    DependsOn: UserTableGSIWriteCapacityScalableTarget\n    Properties: \n       PolicyName: DynamoDBWriteAutoScalingPolicy\n       PolicyType: TargetTrackingScaling\n       ScalingTargetId: \n         Ref: UserTableGSIWriteCapacityScalableTarget\n       TargetTrackingScalingPolicyConfiguration: \n         TargetValue: 70\n         ScaleInCooldown: 60\n         ScaleOutCooldown: 60\n         PredefinedMetricSpecification: \n           PredefinedMetricType: DynamoDBWriteCapacityUtilization\n  UserTableGSIReadScalingPolicy: \n    Type: \"AWS::ApplicationAutoScaling::ScalingPolicy\"\n    DependsOn: UserTableGSIReadCapacityScalableTarget\n    Properties: \n       PolicyName: DynamoDBReadAutoScalingPolicy\n       PolicyType: TargetTrackingScaling\n       ScalingTargetId: \n         Ref: UserTableGSIReadCapacityScalableTarget\n       TargetTrackingScalingPolicyConfiguration: \n         TargetValue: 70\n         ScaleInCooldown: 60\n         ScaleOutCooldown: 60\n         PredefinedMetricSpecification: \n           PredefinedMetricType: DynamoDBReadCapacityUtilization\nOutputs:\n  endpoint:\n    Value: !Sub https://dynamodb.${AWS::Region}.amazonaws.com\n  region:\n    Value: !Ref AWS::Region\n  version:\n    Value: latest\n  UserTable:\n    Value: !Ref UserTable\n    Export:\n      Name: UserTable\n"
}
INV-ver-esw01-resource-ElastiCacheStack-M287D20THQ05
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "---\nAWSTemplateFormatVersion: \"2010-09-09\"\nDescription: 5-1_Elasticache.txt\nParameters:\n  SystemEnvironment:\n    Type: String\n  ServiceName:\n    Type: String\n  SubnetIDA:\n    Type: String\n  SubnetIDC:\n    Type: String\n  SecurityGroup:\n    Type: String\n  ElastiCacheRedisNodeType:\n    Type: String\n  ElastiCacheRedisReplicationCount:\n    Type: String\n  ElastiCacheRedisMultiAZ:\n    Type: String\n  ElastiCacheRedisBackupCount:\n    Type: String\n  ElastiCacheRedisBackupWindow:\n    Type: String\n  ElastiCacheRedisMaintenanceWindow:\n    Type: String\nConditions:\n  MultiAZcluster-enabled: !Equals [!Ref ElastiCacheRedisReplicationCount, 1]\nResources:\n  ECacheSubnet:\n    Type: 'AWS::ElastiCache::SubnetGroup'\n    Properties:\n      Description: !Sub \"inv-${SystemEnvironment}-${ServiceName}-cachesubnetgroup\"\n      SubnetIds:\n        - !Ref SubnetIDA\n        - !Ref SubnetIDC\n  ECacheRedisPG:\n    Type: 'AWS::ElastiCache::ParameterGroup'\n    Properties:\n      CacheParameterGroupFamily: redis5.0\n      Description: \"redis cluster Params\"\n  ECacheRedis:\n    Type: 'AWS::ElastiCache::ReplicationGroup'\n    Properties:\n      AutomaticFailoverEnabled: !Ref ElastiCacheRedisMultiAZ\n      AutoMinorVersionUpgrade: false\n      CacheNodeType: !Ref ElastiCacheRedisNodeType\n      CacheParameterGroupName: !Ref ECacheRedisPG\n      CacheSubnetGroupName: !Ref ECacheSubnet\n      Engine: redis\n      EngineVersion: 5.0.0\n      NumCacheClusters: !Ref ElastiCacheRedisReplicationCount\n      Port: 6379\n      SnapshotRetentionLimit: !Ref ElastiCacheRedisBackupCount\n      SnapshotWindow: !Ref ElastiCacheRedisBackupWindow\n      PreferredMaintenanceWindow: !Ref ElastiCacheRedisMaintenanceWindow\n      ReplicationGroupDescription: !Sub \"inv-${SystemEnvironment}-${ServiceName}-rg\"\n      ReplicationGroupId: !Sub \"inv-${SystemEnvironment}-${ServiceName}-rg\"\n      SecurityGroupIds:\n        - !Ref SecurityGroup\nOutputs:\n  EndpointAddress:\n    Value: !GetAtt\n        - ECacheRedis\n        - PrimaryEndPoint.Address\n  EndpointPort:\n    Value: !GetAtt\n        - ECacheRedis\n        - PrimaryEndPoint.Port\n...\n"
}
INV-ver-esw01-resource-SecurityGroupStack-9VES5MJW2PWE
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "---\r\nAWSTemplateFormatVersion: 2010-09-09\r\nDescription: 3-1_securitygroup.txt\r\nParameters:\r\n  VpcId:\r\n    Type: String\r\n  PublicAppSg:\r\n    Type: AWS::EC2::SecurityGroup::Id\r\n  InternalAppSg:\r\n    Type: AWS::EC2::SecurityGroup::Id\r\nResources:\r\n  SgElastiCacheAccess:\r\n    Type: 'AWS::EC2::SecurityGroup'\r\n    Properties:\r\n      GroupDescription: HTC Redis Security Group\r\n      VpcId:\r\n        Ref: VpcId\r\n  InternalAppSgElastiCacheAccessIngress:\r\n    Type: 'AWS::EC2::SecurityGroupIngress'\r\n    Properties:\r\n      IpProtocol: tcp\r\n      FromPort: '6379'\r\n      ToPort: '6379'\r\n      SourceSecurityGroupId: !Ref InternalAppSg\r\n      GroupId:\r\n        !GetAtt\r\n          - SgElastiCacheAccess\r\n          - GroupId\r\n  PublicAppSgElastiCacheAccessIngress:\r\n    Type: 'AWS::EC2::SecurityGroupIngress'\r\n    Properties:\r\n      IpProtocol: tcp\r\n      FromPort: '6379'\r\n      ToPort: '6379'\r\n      SourceSecurityGroupId: !Ref PublicAppSg\r\n      GroupId:\r\n        !GetAtt\r\n          - SgElastiCacheAccess\r\n          - GroupId\r\nOutputs:\n  ElastiCacheAccessInstance:\r\n    Value:\r\n      Ref: SgElastiCacheAccess\n...\r\n"
}
INV-ver-esw01-resource-IAMRoleStack-11EX8WDY445WT
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "---\nAWSTemplateFormatVersion: \"2010-09-09\"\nDescription: 1-1_iam.txt\nParameters:\n  ServiceName:\n    Type: String\n  SystemEnvironment:\n    Type: String\nResources:\n DynamoDBScalingRole: \n  Type: \"AWS::IAM::Role\"\n  Properties: \n   RoleName: !Sub \"inv-${SystemEnvironment}-${ServiceName}-app-DynamoDBScalingRole\"\n   AssumeRolePolicyDocument: \n    Version: \"2012-10-17\"\n    Statement: \n     - \n      Effect: Allow\n      Principal: \n       Service: \n        - \n         \"application-autoscaling.amazonaws.com\"\n      Action: \n       - \n        \"sts:AssumeRole\"\n   Path: \"/\"\n   Policies: \n    - \n     PolicyName: !Sub \"PolicyforDynamoDB-inv-${SystemEnvironment}-${ServiceName}-appScaling\"\n     PolicyDocument: \n      Version: \"2012-10-17\"\n      Statement: \n       - \n        Effect: Allow\n        Action:          \n         - \"dynamodb:DescribeTable\"\n         - \"dynamodb:UpdateTable\"\n         - \"cloudwatch:PutMetricAlarm\"\n         - \"cloudwatch:DescribeAlarms\"\n         - \"cloudwatch:GetMetricStatistics\"\n         - \"cloudwatch:SetAlarmState\"\n         - \"cloudwatch:DeleteAlarms\"\n        Resource: \"*\"\nOutputs:\n  DynamoDBScalingRole:\n    Value:\n      Ref: DynamoDBScalingRole\n  DynamoDBScalingRoleArn:\n    Value:\n      !GetAtt DynamoDBScalingRole.Arn\n...\n"
}
INV-ver-esw01-resource
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "---\r\nAWSTemplateFormatVersion: \"2010-09-09\"\r\nDescription: 0-1_base.txt\r\nMetadata:\r\n  AWS::CloudFormation::Interface:\r\n    ParameterGroups:\r\n    - Label:\r\n        default: Configuration\r\n      Parameters:\r\n      - SystemEnvironment\r\n      - ServiceName\r\n      - VpcId\r\n      - SubnetIDA\r\n      - SubnetIDC\r\n      - InternalAppSg\r\n      - PublicAppSg\r\n    - Label:\r\n        default: Configuration for DynamoDB\r\n      Parameters:\r\n      - ReadCapacitymin\r\n      - ReadCapacitymax\r\n      - WriteCapacitymin\r\n      - WriteCapacitymax\r\n      - GSIReadCapacitymin\r\n      - GSIReadCapacitymax\r\n      - GSIWriteCapacitymin\r\n      - GSIWriteCapacitymax\r\n    - Label:\r\n        default: Configuration for ElastiCache\r\n      Parameters:\r\n      - ElastiCacheRedisNodeType\r\n      - ElastiCacheRedisReplicationCount\r\n      - ElastiCacheRedisMultiAZ\r\n      - ElastiCacheRedisBackupCount\r\n      - ElastiCacheRedisBackupWindow\r\n      - ElastiCacheRedisMaintenanceWindow\r\n    ParameterLabels:\r\n      SystemEnvironment:\r\n        default: Environment\r\n      ServiceName:\r\n        default: ServiceName\r\n      VpcId:\r\n        default: VpcId\r\n      SubnetIDA:\r\n        default: SubnetIDA\r\n      SubnetIDC:\r\n        default: SubnetIDC\r\n      InternalAppSg:\r\n        default: InternalAppSg\r\n      PublicAppSg:\r\n        default: PublicAppSg\r\n      AuroraInstanceType:\r\n        default: AuroraInstanceType\r\n      ReadCapacitymin:\r\n        default: ReadCapacitymin\r\n      ReadCapacitymax:\r\n        default: ReadCapacitymax\r\n      WriteCapacitymin:\r\n        default: WriteCapacitymin\r\n      WriteCapacitymax:\r\n        default: WriteCapacitymax\r\n      GSIReadCapacitymin:\r\n        default: GlobalSecondaryIndex ReadCapacitymin\r\n      GSIReadCapacitymax:\r\n        default: GlobalSecondaryIndex ReadCapacitymax\r\n      GSIWriteCapacitymin:\r\n        default: GlobalSecondaryIndex WriteCapacitymin\r\n      GSIWriteCapacitymax:\r\n        default: GlobalSecondaryIndex WriteCapacitymax\r\n      ElastiCacheRedisNodeType:\r\n        default: ElastiCacheRedisNodeType\r\n      ElastiCacheRedisReplicationCount:\r\n        default: ElastiCacheRedisReplicationCount\r\n      ElastiCacheRedisMultiAZ:\r\n        default: ElastiCacheRedisMultiAZ\r\n      ElastiCacheRedisBackupCount:\r\n        default: ElastiCacheRedisBackupCount\r\n      ElastiCacheRedisBackupWindow:\r\n        default: ElastiCacheRedisBackupWindow\r\n      ElastiCacheRedisMaintenanceWindow:\r\n        default: ElastiCacheRedisMaintenanceWindow\r\nParameters:\r\n  SystemEnvironment:\r\n    Type: String\r\n    Default: dev\r\n    AllowedValues:\r\n    - dev\r\n    - ver\r\n    - prd\r\n    Description: '*(Required)* Environment Identifier'\r\n  ServiceName:\r\n    Type: String\r\n    Default: esw01\r\n    AllowedValues:\r\n    - esw01\r\n    Description: '*(Required)* ServiceName'\r\n  VpcId:\r\n    Type: AWS::EC2::VPC::Id\r\n    Description: '*(Required)* VPC ID'\r\n  SubnetIDA:\r\n    Type: AWS::EC2::Subnet::Id\r\n    Description: '*(Required)* Subnet ID(ap-northeast-1a)'\r\n  SubnetIDC:\r\n    Type: AWS::EC2::Subnet::Id\r\n    Description: '*(Required)* Subnet ID(ap-northeast-1c)'\r\n  InternalAppSg:\r\n    Type: AWS::EC2::SecurityGroup::Id\r\n  PublicAppSg:\r\n    Type: AWS::EC2::SecurityGroup::Id\r\n  ReadCapacitymin:\r\n    Type: String\r\n    Default: 1\r\n  ReadCapacitymax:\r\n    Type: String\r\n    Default: 50\r\n  WriteCapacitymin:\r\n    Type: String\r\n    Default: 1\r\n  WriteCapacitymax:\r\n    Type: String\r\n    Default: 50\r\n  GSIReadCapacitymin:\r\n    Type: String\r\n    Default: 1\r\n  GSIReadCapacitymax:\r\n    Type: String\r\n    Default: 50\r\n  GSIWriteCapacitymin:\r\n    Type: String\r\n    Default: 1\r\n  GSIWriteCapacitymax:\r\n    Type: String\r\n    Default: 50\r\n  ElastiCacheRedisNodeType:\r\n    Type: String\r\n    AllowedValues:\r\n    - cache.t2.micro\r\n    - cache.t2.small\r\n    - cache.t2.medium\r\n    - cache.m5.large\r\n    - cache.m5.xlarge\r\n    - cache.m5.2xlarge\r\n    - cache.m5.4xlarge\r\n    - cache.m5.12xlarge\r\n    - cache.m5.24xlarge\r\n    - cache.r5.large\r\n    - cache.r5.xlarge\r\n    - cache.r5.2xlarge\r\n    - cache.r5.4xlarge\r\n    - cache.r5.12xlarge\r\n    - cache.r5.24xlarge\r\n    Description: '*(Required)* Type and the associated memory size of the nodes to be deployed'\r\n  ElastiCacheRedisReplicationCount:\r\n    Type: String\r\n    Default: 2\r\n    AllowedPattern: '[1-5]'\r\n    Description: '*(Required)* Input number of replicas between 0 and 5. Zero replicas will not enable an enhanced cluster with primary/replica roles.'\r\n  ElastiCacheRedisMultiAZ:\r\n    Type: String\r\n    AllowedValues:\r\n    - true\r\n    - false\r\n    Description: '*(Required)* ElastiCache Multi-AZ provides enhanced High Availability through automatic failover to a read replica in case of a primary node failure.'\r\n  ElastiCacheRedisBackupCount:\r\n    Type: String\r\n    Default: 2\r\n    AllowedPattern: '[0-9]|[1-2][0-9]|3[0-5]'\r\n    Description: 'The number of days for which automated backups are retained before they are automatically deleted'\r\n  ElastiCacheRedisBackupWindow:\r\n    Type: String\n    Default: 15:00-16:00\r\n    Description: 'The time range (in UTC) when ElastiCache takes a daily snapshot of the node group that you specified in the SnapshottingClusterId property. For example, you can specify 05:00-09:00.'\r\n  ElastiCacheRedisMaintenanceWindow:\r\n    Type: String\n    Default: sat:17:00-sat:18:30\r\n    Description: 'The weekly time range during which system maintenance can occur. Use the following format to specify a time range: ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). For example, you can specify sun:22:00-sun:23:30 for Sunday from 10 PM to 11:30 PM.'\r\nResources:\r\n  IAMRoleStack:\r\n    Type: AWS::CloudFormation::Stack\r\n    Properties:\r\n      TemplateURL: !Sub \"https://s3-ap-northeast-1.amazonaws.com/inv-${SystemEnvironment}-${ServiceName}-cfn/resources/1-1_iam.txt\"\r\n      Parameters:\r\n        ServiceName: !Ref ServiceName\r\n        SystemEnvironment: !Ref SystemEnvironment\r\n      TimeoutInMinutes: \"5\"\r\n  SecurityGroupStack:\r\n    Type: AWS::CloudFormation::Stack\r\n    Properties:\r\n      TemplateURL: !Sub \"https://s3-ap-northeast-1.amazonaws.com/inv-${SystemEnvironment}-${ServiceName}-cfn/resources/3-1_securitygroup.txt\"\r\n      TimeoutInMinutes: \"10\"\r\n      Parameters:\r\n        VpcId: !Ref VpcId\r\n        PublicAppSg: !Ref PublicAppSg\r\n        InternalAppSg: !Ref InternalAppSg\r\n  DynamoDBStack:\r\n    Type: AWS::CloudFormation::Stack\r\n    DependsOn: IAMRoleStack\r\n    Properties: \r\n      Parameters:\r\n        SystemEnvironment:\r\n          !Ref SystemEnvironment\r\n        ServiceName:\r\n          !Ref ServiceName\r\n        ReadCapacitymin:\r\n          !Ref ReadCapacitymin\r\n        ReadCapacitymax:\r\n          !Ref ReadCapacitymax\r\n        WriteCapacitymin:\r\n          !Ref WriteCapacitymin\r\n        WriteCapacitymax:\r\n          !Ref WriteCapacitymax\r\n        GSIReadCapacitymin:\r\n          !Ref GSIReadCapacitymin\r\n        GSIReadCapacitymax:\r\n          !Ref GSIReadCapacitymax\r\n        GSIWriteCapacitymin:\r\n          !Ref GSIWriteCapacitymin\r\n        GSIWriteCapacitymax:\r\n          !Ref GSIWriteCapacitymax\r\n        DynamoDBScalingRole:\r\n          !GetAtt\r\n          - IAMRoleStack\r\n          - Outputs.DynamoDBScalingRoleArn\r\n        \r\n      TemplateURL: !Sub \"https://s3-ap-northeast-1.amazonaws.com/inv-${SystemEnvironment}-${ServiceName}-cfn/resources/7-1_dynamodb.txt\"\r\n  ElastiCacheStack:\r\n    Type: AWS::CloudFormation::Stack\r\n    DependsOn: SecurityGroupStack\r\n    Properties: \r\n      Parameters:\r\n        SystemEnvironment:\r\n          !Ref SystemEnvironment\r\n        ServiceName:\r\n          !Ref ServiceName\r\n        SubnetIDA:\r\n          !Ref SubnetIDA\r\n        SubnetIDC:\r\n          !Ref SubnetIDC\r\n        SecurityGroup:\r\n          !GetAtt\r\n          - SecurityGroupStack\r\n          - Outputs.ElastiCacheAccessInstance\r\n        ElastiCacheRedisNodeType:\r\n          !Ref ElastiCacheRedisNodeType\r\n        ElastiCacheRedisReplicationCount:\r\n          !Ref ElastiCacheRedisReplicationCount\r\n        ElastiCacheRedisMultiAZ:\r\n          !Ref ElastiCacheRedisMultiAZ\r\n        ElastiCacheRedisBackupCount:\r\n          !Ref ElastiCacheRedisBackupCount\r\n        ElastiCacheRedisBackupWindow:\r\n          !Ref ElastiCacheRedisBackupWindow\r\n        ElastiCacheRedisMaintenanceWindow:\r\n          !Ref ElastiCacheRedisMaintenanceWindow\r\n      TemplateURL: !Sub \"https://s3-ap-northeast-1.amazonaws.com/inv-${SystemEnvironment}-${ServiceName}-cfn/resources/5-1_elasticache.txt\"\r\n      TimeoutInMinutes: \"30\"\r\nOutputs:\r\n  ServiceNameEnvironment:\r\n    Value:\r\n      !Join\r\n      - '-'\r\n      - - !Ref ServiceName\r\n        - !Ref SystemEnvironment\r\n...\r\n"
}
INV-ver-esw01-application-sg
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: security group\n\nParameters:\n  accountAllias:\n    Type: String\n  accountAlliasLowerCase:\n    Type: String\n  securityGroupCidr:\n    Type: String\n\nResources:\n  internalApplicationSecuritygroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupName: !Sub ${accountAlliasLowerCase}-internal-application-sg\n      GroupDescription: !Sub ${accountAlliasLowerCase}-internal-application-sg\n      Tags:\n        - Key: Name\n          Value: !Sub ${accountAlliasLowerCase}-internal-application-sg\n      VpcId: !ImportValue VPC\n      SecurityGroupIngress:\n      - IpProtocol: tcp\n        FromPort: '80'\n        ToPort: '80'\n        CidrIp: !Ref securityGroupCidr\n  publicApplicationSecuritygroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupName: !Sub ${accountAlliasLowerCase}-public-application-sg\n      GroupDescription: !Sub ${accountAlliasLowerCase}-public-application-sg\n      Tags:\n        - Key: Name\n          Value: !Sub ${accountAlliasLowerCase}-public-application-sg\n      VpcId: !ImportValue VPC\n      SecurityGroupIngress:\n      - IpProtocol: tcp\n        FromPort: '80'\n        ToPort: '80'\n        CidrIp: !Ref securityGroupCidr\n\nOutputs:\n  internalApplicationSecuritygroup:\n    Value: !Ref internalApplicationSecuritygroup\n    Export:\n      Name: internalApplicationSecuritygroup\n  publicApplicationSecuritygroup:\n    Value: !Ref publicApplicationSecuritygroup\n    Export:\n      Name: publicApplicationSecuritygroup\n"
}
StackSet-OpeAdmin-CreateIamRole-2ea0b561-61c6-441a-9be1-2ac477fa3289
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "{\n  \"AWSTemplateFormatVersion\" : \"2010-09-09\",\n  \"Description\" : \"Template for Creating IAM Role to Switch from Internavi Login AWS Account\",\n  \"Parameters\" : {\n    \"TrustedAWSAccountId\" : {\n      \"AllowedPattern\" : \"^[0-9]*$\",\n      \"Type\" : \"String\",\n      \"Default\" : \"975196479634\",\n      \"Description\" : \"Trusted AWS Account ID\"\n    },\n    \"IAMRoleName\": {\n      \"Type\": \"String\",\n      \"Default\": \"OpeAdminRole\",\n      \"Description\": \"IAM Role Name\"\n    }\n  },\n  \"Resources\" : {\n    \"IAMRoleForEngineer\": {\n      \"Type\": \"AWS::IAM::Role\",\n      \"Properties\": {\n        \"AssumeRolePolicyDocument\": {\n          \"Version\": \"2012-10-17\",\n          \"Statement\": [\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010002\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010025\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010026\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010027\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010028\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010030\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            }\n          ]\n        },\n        \"ManagedPolicyArns\": [\n          \"arn:aws:iam::aws:policy/AdministratorAccess\"\n        ],\n        \"Path\": \"/\",\n        \"RoleName\": { \"Ref\" : \"IAMRoleName\" }\n      }\n    }\n  },\n  \"Outputs\" : {\n    \"IAMRoleArn\": {\n      \"Value\": { \"Fn::GetAtt\" : [ \"IAMRoleForEngineer\", \"Arn\" ] }\n    },\n    \"LinkForSwitchRole\": {\n      \"Value\": { \"Fn::Join\": [ \"\", [ \"https://signin.aws.amazon.com/switchrole?roleName=\", { \"Ref\" : \"IAMRoleName\" }, \"&account=\", { \"Ref\" : \"AWS::AccountId\" } ] ] }\n    }\n  }\n}\n"
}
StackSet-cfn-exec-ec2-2fd3ced6-8008-40ac-b569-2afe5f106441
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: 2010-09-09\nDescription: CloudFormation Execute EC2\nParameters:\n  amiId:\n    Type: String\n    Default: ami-0d7ed3ddb85b521a6\n  SshCidr1:\n    Type: String\n    Default: 121.2.65.36/32\n  SshCidr2:\n    Type: String\n    Default: 39.110.201.10/32\n  SshCidr3:\n    Type: String\n    Default: 222.11.38.119/32\n  SshCidr4:\n    Type: String\n    Default: 1.21.118.25/32\n  SshCidr5:\n    Type: String\n    Default: 153.163.63.48/32\n  SshCidr6:\n    Type: String\n    Default: 13.231.11.115/32\nResources:\n  EC2Role:\n    Type: \"AWS::IAM::Role\"\n    Properties:\n      RoleName: cfn-exec-ec2-role\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/AdministratorAccess\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement:\n          -\n            Effect: \"Allow\"\n            Principal:\n              Service:\n                - \"ec2.amazonaws.com\"\n            Action:\n              - \"sts:AssumeRole\"\n      Path: \"/\"\n  Profile:\n    Type: AWS::IAM::InstanceProfile\n    Properties:\n      Roles:\n        - !Ref EC2Role\n  SSHSecurityGroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupName: cfn-exec-sg\n      GroupDescription: cfn-exec-sg\n      SecurityGroupIngress:\n      - IpProtocol: tcp\n        FromPort: '22'\n        ToPort: '22'\n        CidrIp: !Ref SshCidr1\n        Description: Classmethod\n      - IpProtocol: tcp\n        FromPort: '22'\n        ToPort: '22'\n        CidrIp: !Ref SshCidr2\n        Description: Classmethod\n      - IpProtocol: tcp\n        FromPort: '22'\n        ToPort: '22'\n        CidrIp: !Ref SshCidr3\n        Description: Classmethod\n      - IpProtocol: tcp\n        FromPort: '22'\n        ToPort: '22'\n        CidrIp: !Ref SshCidr4\n        Description: Classmethod\n      - IpProtocol: tcp\n        FromPort: '22'\n        ToPort: '22'\n        CidrIp: !Ref SshCidr5\n        Description: Classmethod\n      - IpProtocol: tcp\n        FromPort: '22'\n        ToPort: '22'\n        CidrIp: !Ref SshCidr6\n        Description: Classmethod\n      Tags:\n        - Key: Name\n          Value: cfn-exec-sg\n  EC2:\n    Type: AWS::EC2::Instance\n    Properties:\n      ImageId: !Ref amiId\n      InstanceType: t3.micro\n      KeyName: cfn-exec-key\n      IamInstanceProfile: !Ref Profile\n      NetworkInterfaces:\n        - AssociatePublicIpAddress: true\n          DeviceIndex: 0\n          GroupSet:\n            - !GetAtt SSHSecurityGroup.GroupId\n      UserData:\n        Fn::Base64: !Sub |\n          #!/bin/bash\n          yum -y update\n          yum -y install git\n      Tags:\n        - Key: Name\n          Value: cfn-exec\n  EIP:\n    Type: AWS::EC2::EIP\n    Properties:\n      Domain: vpc\n  AssociateEIP:\n    Type: AWS::EC2::EIPAssociation\n    Properties:\n      EIP: !Ref EIP\n      InstanceId: !Ref EC2\nOutputs:\n  EC2:\n    Value: !Ref EC2\n    Export:\n      Name: cfn-exex-ec2\n  EIP:\n    Value: !Ref EIP\n    Export:\n      Name: cfn-exex-IP\n"
}
StackSet-esw01-createIamRole-49af55a9-0063-4909-a684-83d36465c666
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "{\n  \"AWSTemplateFormatVersion\" : \"2010-09-09\",\n  \"Description\" : \"Template for Creating IAM Role to Switch from Internavi Login AWS Account\",\n  \"Parameters\" : {\n    \"TrustedAWSAccountId\" : {\n      \"AllowedPattern\" : \"^[0-9]*$\",\n      \"Type\" : \"String\",\n      \"Default\" : \"975196479634\",\n      \"Description\" : \"Trusted AWS Account ID\"\n    },\n    \"IAMRoleName\": {\n      \"Type\": \"String\",\n      \"Default\": \"SolDeveloper\",\n      \"Description\": \"IAM Role Name\"\n    },\n    \"IAMPolicyType\": {\n      \"Type\": \"String\",\n      \"Default\": \"SolUser\",\n      \"Description\": \"IAM Policy Type\",\n      \"AllowedValues\": [ \"SolUser\", \"Admin\" ]\n    }\n  },\n  \"Conditions\" : {\n    \"user\"        : { \"Fn::Equals\" : [{\"Ref\" : \"IAMPolicyType\"}, \"SolUser\" ]},\n    \"admin\"        : { \"Fn::Equals\" : [{\"Ref\" : \"IAMPolicyType\"}, \"Admin\" ]}\n  },\n  \"Resources\" : {\n    \"IAMRoleForAdmin\": {\n      \"Type\": \"AWS::IAM::Role\",\n      \"Condition\" : \"admin\",\n      \"Properties\": {\n        \"AssumeRolePolicyDocument\": {\n          \"Version\": \"2012-10-17\",\n          \"Statement\": [\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV020001\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV020002\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV020008\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV020009\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV020014\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV020015\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            }\n          ]\n        },\n        \"ManagedPolicyArns\": [\n          \"arn:aws:iam::aws:policy/AdministratorAccess\"\n        ],\n        \"Path\": \"/\",\n        \"RoleName\": { \"Ref\" : \"IAMRoleName\" }\n      }\n    },\n    \"IAMRoleForUser\": {\n      \"Type\": \"AWS::IAM::Role\",\n      \"Condition\" : \"user\",\n      \"Properties\": {\n        \"AssumeRolePolicyDocument\": {\n          \"Version\": \"2012-10-17\",\n          \"Statement\": [\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV020001\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV020002\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV020008\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV020009\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV020014\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV020015\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            }\n          ]\n        },\n        \"ManagedPolicyArns\": [\n          \"arn:aws:iam::aws:policy/ReadOnlyAccess\",\n          \"arn:aws:iam::aws:policy/AWSCodeCommitPowerUser\"\n        ],\n        \"Path\": \"/\",\n        \"RoleName\": { \"Ref\" : \"IAMRoleName\" }\n      }\n    }\n  },\n  \"Outputs\" : {\n    \"IAMRoleAdminArn\": {\n      \"Value\": { \"Fn::GetAtt\" : [ \"IAMRoleForAdmin\", \"Arn\" ] },\n      \"Condition\" : \"admin\"\n    },\n    \"IAMRoleUserArn\": {\n      \"Value\": { \"Fn::GetAtt\" : [ \"IAMRoleForUser\", \"Arn\" ] },\n      \"Condition\" : \"user\"\n    },\n    \"LinkForSwitchRole\": {\n      \"Value\": { \"Fn::Join\": [ \"\", [ \"https://signin.aws.amazon.com/switchrole?roleName=\", { \"Ref\" : \"IAMRoleName\" }, \"&account=\", { \"Ref\" : \"AWS::AccountId\" } ] ] }\n    }\n  }\n}\n"
}
INV-ver-esw01-thirdperson-api
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: Create Service Endpoint\n\nParameters:\n  allowedAccountId1:\n    Type: String\n  apiName:\n    Type: String\n\nResources:\n  internalTargetGroup:\n    Type: AWS::ElasticLoadBalancingV2::TargetGroup\n    Properties:\n      HealthCheckIntervalSeconds: 30\n      HealthCheckPath: /healthcheck\n      HealthCheckPort: 80\n      HealthCheckProtocol: HTTP\n      HealthCheckTimeoutSeconds: 6\n      HealthyThresholdCount: 3\n      Name: !Sub ${apiName}-internal-tg\n      Port: 80\n      Protocol: TCP\n      UnhealthyThresholdCount: 3\n      TargetType: ip\n      VpcId: !ImportValue VPC\n  internalNlb:\n    Type: AWS::ElasticLoadBalancingV2::LoadBalancer\n    Properties:\n      Name: !Sub ${apiName}-internal-nlb\n      Scheme: internal\n      Subnets:\n        - !ImportValue PrivateSubnet1a\n        - !ImportValue PrivateSubnet1c\n      Tags:\n        - Key: Name\n          Value: !Sub ${apiName}-internal-nlb\n      Type: network\n      LoadBalancerAttributes:\n        - Key: load_balancing.cross_zone.enabled\n          Value: true\n      LoadBalancerAttributes:\n        - Key: load_balancing.cross_zone.enabled\n          Value: true\n  internallistnener:\n    Type: AWS::ElasticLoadBalancingV2::Listener\n    Properties:\n      DefaultActions:\n        - TargetGroupArn: !Ref internalTargetGroup\n          Type: forward\n      LoadBalancerArn: !Ref internalNlb\n      Port: 80\n      Protocol: TCP\n\n  endpointService:\n    Type: \"AWS::EC2::VPCEndpointService\"\n    Properties:\n      NetworkLoadBalancerArns:\n        - !Ref internalNlb\n      AcceptanceRequired: false\n  servicePermisstions:\n    Type: \"AWS::EC2::VPCEndpointServicePermissions\"\n    Properties:\n      AllowedPrincipals:\n        - !Sub arn:aws:iam::${allowedAccountId1}:root\n      ServiceId: !Ref endpointService\n\nOutputs:\n  internalTargetGroup:\n    Value: !Ref internalTargetGroup\n    Export:\n      Name: !Sub ${apiName}-internalTargetGroup\n  internalNlb:\n    Value: !Ref internalNlb\n    Export:\n      Name: !Sub ${apiName}-internalNlb\n"
}
INV-ver-esw01-thirdperson-web
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: Create Service Endpoint\n\nParameters:\n  arrowedAccountId1:\n    Type: String\n  apiName:\n    Type: String\n\nResources:\n  internalTargetGroup:\n    Type: AWS::ElasticLoadBalancingV2::TargetGroup\n    Properties:\n      HealthCheckIntervalSeconds: 30\n      HealthCheckPath: /healthcheck\n      HealthCheckPort: 80\n      HealthCheckProtocol: HTTP\n      HealthCheckTimeoutSeconds: 6\n      HealthyThresholdCount: 3\n      Name: !Sub ${apiName}-internal-tg\n      Port: 80\n      Protocol: TCP\n      UnhealthyThresholdCount: 3\n      TargetType: ip\n      VpcId: !ImportValue VPC\n  internalNlb:\n    Type: AWS::ElasticLoadBalancingV2::LoadBalancer\n    Properties:\n      Name: !Sub ${apiName}-internal-nlb\n      Scheme: internal\n      Subnets:\n        - !ImportValue PrivateSubnet1a\n        - !ImportValue PrivateSubnet1c\n      Tags:\n        - Key: Name\n          Value: !Sub ${apiName}-internal-nlb\n      Type: network\n      LoadBalancerAttributes:\n        - Key: load_balancing.cross_zone.enabled\n          Value: true\n  internallistnener:\n    Type: AWS::ElasticLoadBalancingV2::Listener\n    Properties:\n      DefaultActions:\n        - TargetGroupArn: !Ref internalTargetGroup\n          Type: forward\n      LoadBalancerArn: !Ref internalNlb\n      Port: 80\n      Protocol: TCP\n\n  endpointService:\n    Type: \"AWS::EC2::VPCEndpointService\"\n    Properties:\n      NetworkLoadBalancerArns:\n        - !Ref internalNlb\n      AcceptanceRequired: false\n  servicePermisstions:\n    Type: \"AWS::EC2::VPCEndpointServicePermissions\"\n    Properties:\n      AllowedPrincipals:\n        - !Sub arn:aws:iam::${arrowedAccountId1}:root\n      ServiceId: !Ref endpointService\n\nOutputs:\n  internalTargetGroup:\n    Value: !Ref internalTargetGroup\n    Export:\n      Name: !Sub ${apiName}-internalTargetGroup\n  internalNlb:\n    Value: !Ref internalNlb\n    Export:\n      Name: !Sub ${apiName}-internalNlb\n  endpointService:\n    Value: !Ref endpointService\n    Export:\n      Name: !Sub ${apiName}-endpointService\n"
}
INV-ver-esw01-roadservice
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: Create Service Endpoint\n\nParameters:\n  arrowedAccountId1:\n    Type: String\n  apiName:\n    Type: String\n\nResources:\n  internalTargetGroup:\n    Type: AWS::ElasticLoadBalancingV2::TargetGroup\n    Properties:\n      HealthCheckIntervalSeconds: 30\n      HealthCheckPath: /healthcheck\n      HealthCheckPort: 80\n      HealthCheckProtocol: HTTP\n      HealthCheckTimeoutSeconds: 6\n      HealthyThresholdCount: 3\n      Name: !Sub ${apiName}-internal-tg\n      Port: 80\n      Protocol: TCP\n      UnhealthyThresholdCount: 3\n      TargetType: ip\n      VpcId: !ImportValue VPC\n  internalNlb:\n    Type: AWS::ElasticLoadBalancingV2::LoadBalancer\n    Properties:\n      Name: !Sub ${apiName}-internal-nlb\n      Scheme: internal\n      Subnets:\n        - !ImportValue PrivateSubnet1a\n        - !ImportValue PrivateSubnet1c\n      Tags:\n        - Key: Name\n          Value: !Sub ${apiName}-internal-nlb\n      Type: network\n      LoadBalancerAttributes:\n        - Key: load_balancing.cross_zone.enabled\n          Value: true\n  internallistnener:\n    Type: AWS::ElasticLoadBalancingV2::Listener\n    Properties:\n      DefaultActions:\n        - TargetGroupArn: !Ref internalTargetGroup\n          Type: forward\n      LoadBalancerArn: !Ref internalNlb\n      Port: 80\n      Protocol: TCP\n\n  endpointService:\n    Type: \"AWS::EC2::VPCEndpointService\"\n    Properties:\n      NetworkLoadBalancerArns:\n        - !Ref internalNlb\n      AcceptanceRequired: false\n  servicePermisstions:\n    Type: \"AWS::EC2::VPCEndpointServicePermissions\"\n    Properties:\n      AllowedPrincipals:\n        - !Sub arn:aws:iam::${arrowedAccountId1}:root\n      ServiceId: !Ref endpointService\n\nOutputs:\n  internalTargetGroup:\n    Value: !Ref internalTargetGroup\n    Export:\n      Name: !Sub ${apiName}-internalTargetGroup\n  internalNlb:\n    Value: !Ref internalNlb\n    Export:\n      Name: !Sub ${apiName}-internalNlb\n  endpointService:\n    Value: !Ref endpointService\n    Export:\n      Name: !Sub ${apiName}-endpointService\n"
}
INV-ver-esw01-tnk401-ver1-dv
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: Create Service Endpoint\n\nParameters:\n  serviceAlliasLowerCase:\n    Type: String\n  serviceName:\n    Type: String\n  cidr:\n    Type: String\n\nResources:\n\n  endpointSecuritygroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupName: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      GroupDescription: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      Tags:\n        - Key: Name\n          Value: !Sub ${serviceAlliasLowerCase}-endpoint-sg\n      VpcId: !ImportValue VPC\n      SecurityGroupIngress:\n        - IpProtocol: tcp\n          FromPort: 80\n          ToPort: 80\n          CidrIp: !Ref cidr\n  endpoint:\n    Type: AWS::EC2::VPCEndpoint\n    Properties:\n      VpcEndpointType: Interface\n      VpcId: !ImportValue VPC\n      SubnetIds:\n        - !ImportValue PrivateSubnet1a\n        - !ImportValue PrivateSubnet1c\n      SecurityGroupIds:\n        - !Ref endpointSecuritygroup\n      ServiceName: !Ref serviceName\n      PrivateDnsEnabled: false\n"
}
INV-ver-esw01-bastion
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: 2010-09-09\nDescription: Bastion EC2\nParameters:\n  accountAllias:\n    Type: String\n  amiId:\n    Type: String\nResources:\n  SSHSecurityGroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      VpcId: !ImportValue VPC\n      GroupName: !Sub ${accountAllias}-bastion-sg\n      GroupDescription: !Sub ${accountAllias}-bastion-sg\n      Tags:\n        - Key: Name\n          Value: !Sub ${accountAllias}-bastion-sg\n  EC2:\n    Type: AWS::EC2::Instance\n    Properties:\n      ImageId: !Ref amiId\n      InstanceType: t3.micro\n      KeyName: !Sub ${accountAllias}-bastion-key\n      NetworkInterfaces:\n        - AssociatePublicIpAddress: true\n          SubnetId: !ImportValue PublicSubnet1a\n          DeviceIndex: 0\n          GroupSet:\n            - !Ref SSHSecurityGroup\n      UserData:\n        Fn::Base64: !Sub |\n          #!/bin/bash\n          yum -y update\n      Tags:\n        - Key: Name\n          Value: !Sub ${accountAllias}-bastion\n  EIP:\n    Type: AWS::EC2::EIP\n    Properties:\n      Domain: vpc\n  AssociateEIP:\n    Type: AWS::EC2::EIPAssociation\n    Properties:\n      EIP: !Ref EIP\n      InstanceId: !Ref EC2\nOutputs:\n  EC2:\n    Value: !Ref EC2\n    Export:\n      Name: BastionEC2\n  EIP:\n    Value: !Ref EIP\n    Export:\n      Name: BastionIP\n"
}
INV-ver-esw01-vpc-base
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "---\nAWSTemplateFormatVersion: '2010-09-09'\nDescription: VPC Network Template\nParameters:\n  SolName:\n    Type: String\n    Default: base01\n    Description: Solution Name.\n  SubSolName:\n    Type: String\n    Default: base\n    Description: Solution Name.\n  EnvName:\n    Type: String\n    Default: dev\n    Description: Env Name.\n  domain2:\n    Type: String\n  VPCCIDR:\n    Description: First and Second Octet of VPC, For example xxx.xxx\n    Type: String\n    Default: '10.0'\n    AllowedPattern: \"^(10\\\\.([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])|172\\\\.(1[6-9]|2[0-9]|3[0-1])|192\\\\.168)$\"\n    ConstraintDescription: xxx.xxx\nMappings:\n  StackConfig:\n    VPC:\n      CIDR: \".0.0/16\"\n    PublicSubnet1:\n      CIDR: \".0.0/24\"\n    PublicSubnet2:\n      CIDR: \".1.0/24\"\n    PrivateSubnet1:\n      CIDR: \".10.0/24\"\n    PrivateSubnet2:\n      CIDR: \".11.0/24\"\n\nResources:\n  VPC:\n    Type: AWS::EC2::VPC\n    Properties:\n      CidrBlock: !Sub\n        - ${VPCCIDR}${SubCIDR}\n        - SubCIDR: {\"Fn::FindInMap\": [ StackConfig, VPC, CIDR ]}\n      EnableDnsSupport: 'true'\n      EnableDnsHostnames: 'true'\n      InstanceTenancy: default\n      Tags:\n      - Key: Name\n        Value: !Sub INV-${EnvName}-${SolName}\n  InternetGateway:\n    Type: AWS::EC2::InternetGateway\n    Properties:\n      Tags:\n      - Key: Name\n        Value: !Sub INV-${EnvName}-${SolName}\n  AttachGateway:\n    Type: AWS::EC2::VPCGatewayAttachment\n    Properties:\n      VpcId: !Ref VPC\n      InternetGatewayId: !Ref InternetGateway\n\n  PublicSubnet1a:\n    Type: AWS::EC2::Subnet\n    DependsOn: AttachGateway\n    Properties:\n      AvailabilityZone: !Select [ 0, \"Fn::GetAZs\": {Ref: \"AWS::Region\"}]\n      CidrBlock: !Sub\n        - ${VPCCIDR}${SubCIDR}\n        - SubCIDR: {\"Fn::FindInMap\": [ StackConfig, PublicSubnet1, CIDR ]}\n      MapPublicIpOnLaunch: 'true'\n      Tags:\n      - Key: Name\n        Value: !Sub INV-${EnvName}-${SolName}-PublicSubnet1a\n      VpcId: !Ref VPC\n  PublicSubnet1c:\n    Type: AWS::EC2::Subnet\n    DependsOn: AttachGateway\n    Properties:\n      AvailabilityZone: !Select [ 1, \"Fn::GetAZs\": {Ref: \"AWS::Region\"}]\n      CidrBlock: !Sub\n        - ${VPCCIDR}${SubCIDR}\n        - SubCIDR: {\"Fn::FindInMap\": [ StackConfig, PublicSubnet2, CIDR ]}\n      MapPublicIpOnLaunch: 'true'\n      Tags:\n      - Key: Name\n        Value: !Sub INV-${EnvName}-${SolName}-PublicSubnet1c\n      VpcId: !Ref VPC\n  PrivateSubnet1a:\n    Type: AWS::EC2::Subnet\n    DependsOn: AttachGateway\n    Properties:\n      AvailabilityZone: !Select [ 0, \"Fn::GetAZs\": {Ref: \"AWS::Region\"}]\n      CidrBlock: !Sub\n        - ${VPCCIDR}${SubCIDR}\n        - SubCIDR: {\"Fn::FindInMap\": [ StackConfig, PrivateSubnet1, CIDR ]}\n      MapPublicIpOnLaunch: 'true'\n      Tags:\n      - Key: Name\n        Value: !Sub INV-${EnvName}-${SolName}-PrivateSubnet1a\n      VpcId: !Ref VPC\n  PrivateSubnet1c:\n    Type: AWS::EC2::Subnet\n    DependsOn: AttachGateway\n    Properties:\n      AvailabilityZone: !Select [ 1, \"Fn::GetAZs\": {Ref: \"AWS::Region\"}]\n      CidrBlock: !Sub\n        - ${VPCCIDR}${SubCIDR}\n        - SubCIDR: {\"Fn::FindInMap\": [ StackConfig, PrivateSubnet2, CIDR ]}\n      MapPublicIpOnLaunch: 'true'\n      Tags:\n      - Key: Name\n        Value: !Sub INV-${EnvName}-${SolName}-PrivateSubnet1c\n      VpcId: !Ref VPC\n\n  EIP1a:\n    Type: AWS::EC2::EIP\n    Properties:\n      Domain: vpc\n  NAT1a:\n    Type: AWS::EC2::NatGateway\n    Properties:\n      AllocationId:\n        Fn::GetAtt:\n          - EIP1a\n          - AllocationId\n      SubnetId: !Ref PublicSubnet1a\n      Tags:\n        - Key: Name\n          Value: !Sub INV-${EnvName}-${SolName}-NGW1a\n\n  EIP1c:\n    Type: AWS::EC2::EIP\n    Properties:\n      Domain: vpc\n  NAT1c:\n    Type: AWS::EC2::NatGateway\n    Properties:\n      AllocationId:\n        Fn::GetAtt:\n          - EIP1c\n          - AllocationId\n      SubnetId: !Ref PublicSubnet1c\n      Tags:\n        - Key: Name\n          Value: !Sub INV-${EnvName}-${SolName}-NGW1c\n\n  PublicRouteTable:\n    Type: AWS::EC2::RouteTable\n    DependsOn: AttachGateway\n    Properties:\n      VpcId: !Ref VPC\n      Tags:\n      - Key: Name\n        Value: !Sub INV-${EnvName}-${SolName}-PublicRoute\n  PublicRoute:\n    Type: AWS::EC2::Route\n    DependsOn: AttachGateway\n    Properties:\n      RouteTableId: !Ref PublicRouteTable\n      DestinationCidrBlock: 0.0.0.0/0\n      GatewayId: !Ref InternetGateway\n  PrivateRouteTable1a:\n    Type: AWS::EC2::RouteTable\n    DependsOn: NAT1a\n    Properties:\n      VpcId: !Ref VPC\n      Tags:\n      - Key: Name\n        Value: !Sub INV-${EnvName}-${SolName}-PrivateRoute1a\n  PrivateRoute1a:\n    Type: AWS::EC2::Route\n    DependsOn: NAT1a\n    Properties:\n      RouteTableId: !Ref PrivateRouteTable1a\n      DestinationCidrBlock: 0.0.0.0/0\n      NatGatewayId: !Ref NAT1a\n  PrivateRouteTable1c:\n    Type: AWS::EC2::RouteTable\n    DependsOn: NAT1c\n    Properties:\n      VpcId: !Ref VPC\n      Tags:\n      - Key: Name\n        Value: !Sub INV-${EnvName}-${SolName}-PrivateRoute1c\n  PrivateRoute1c:\n    Type: AWS::EC2::Route\n    DependsOn: NAT1c\n    Properties:\n      RouteTableId: !Ref PrivateRouteTable1c\n      DestinationCidrBlock: 0.0.0.0/0\n      NatGatewayId: !Ref NAT1c\n\n  PublicSubnet1aRouteTableAssociation:\n    Type: AWS::EC2::SubnetRouteTableAssociation\n    Properties:\n      SubnetId: !Ref PublicSubnet1a\n      RouteTableId: !Ref PublicRouteTable\n  PublicSubnet1cRouteTableAssociation:\n    Type: AWS::EC2::SubnetRouteTableAssociation\n    Properties:\n      SubnetId: !Ref PublicSubnet1c\n      RouteTableId: !Ref PublicRouteTable\n  PrivateSubnet1aRouteTableAssociation:\n    Type: AWS::EC2::SubnetRouteTableAssociation\n    Properties:\n      SubnetId: !Ref PrivateSubnet1a\n      RouteTableId: !Ref PrivateRouteTable1a\n  PrivateSubnet1cRouteTableAssociation:\n    Type: AWS::EC2::SubnetRouteTableAssociation\n    Properties:\n      SubnetId: !Ref PrivateSubnet1c\n      RouteTableId: !Ref PrivateRouteTable1c\n\n  DNS1:\n    Type: \"AWS::Route53::HostedZone\"\n    Properties:\n      HostedZoneConfig:\n        Comment: INV-LocalDomain\n      Name: internal-internavi\n      VPCs:\n        -\n          VPCId: !Ref VPC\n          VPCRegion: !Ref AWS::Region\n      HostedZoneTags:\n        -\n          Key: \"Name\"\n          Value: !Sub INV-${EnvName}-${SolName}\n\n  DNS2:\n    Type: \"AWS::Route53::HostedZone\"\n    Properties:\n      HostedZoneConfig:\n        Comment: INV-LocalDomain\n      Name: !Ref domain2\n      VPCs:\n        -\n          VPCId: !Ref VPC\n          VPCRegion: !Ref AWS::Region\n      HostedZoneTags:\n        -\n          Key: \"Name\"\n          Value: !Sub INV-${EnvName}-${SolName}\n\n  FlowLogBucket:\n    Type: AWS::S3::Bucket\n    Properties:\n        BucketName: !Join\n          - \"-\"\n          -\n            - inv\n            - !Ref EnvName\n            - !Ref SolName\n            - !Ref VPC\n  FlowLogBucketPolicy:\n    Type: AWS::S3::BucketPolicy\n    DependsOn: NAT1c\n    Properties:\n      Bucket: !Ref FlowLogBucket\n      PolicyDocument:\n        Statement:\n          -\n            Action:\n              - \"s3:PutObject\"\n            Effect: \"Allow\"\n            Resource:\n              Fn::Join:\n                - \"\"\n                -\n                  - \"arn:aws:s3:::\"\n                  - !Ref FlowLogBucket\n                  - \"/*\"\n            Principal:\n              Service: \"delivery.logs.amazonaws.com\"\n            Condition:\n              StringEquals:\n                s3:x-amz-acl: bucket-owner-full-control\n          -\n            Action:\n              - \"s3:GetBucketAcl\"\n            Effect: \"Allow\"\n            Resource:\n              Fn::Join:\n                - \"\"\n                -\n                  - \"arn:aws:s3:::\"\n                  - !Ref FlowLogBucket\n            Principal:\n              Service: \"delivery.logs.amazonaws.com\"\n  FlowLog:\n    Type: AWS::EC2::FlowLog\n    DependsOn: FlowLogBucketPolicy\n    Properties:\n      LogDestinationType : \"s3\"\n      LogDestination : !Join\n        - \"\"\n        -\n          - \"arn:aws:s3:::\"\n          - !Ref FlowLogBucket\n          - /FlowLogs/\n      ResourceType : VPC\n      ResourceId : !Ref VPC\n      TrafficType : ALL\n\n  S3Endpoint:\n    Type: AWS::EC2::VPCEndpoint\n    Properties:\n      RouteTableIds:\n        - !Ref PublicRouteTable\n        - !Ref PrivateRouteTable1a\n        - !Ref PrivateRouteTable1c\n      ServiceName: !Join\n        - ''\n        - - com.amazonaws.\n          - !Ref 'AWS::Region'\n          - .s3\n      VpcId: !Ref VPC\n  DynamoEndpoint:\n    Type: AWS::EC2::VPCEndpoint\n    Properties:\n      RouteTableIds:\n        - !Ref PublicRouteTable\n        - !Ref PrivateRouteTable1a\n        - !Ref PrivateRouteTable1c\n      ServiceName: !Join\n        - ''\n        - - com.amazonaws.\n          - !Ref 'AWS::Region'\n          - .dynamodb\n      VpcId: !Ref VPC\n  Certificate:\n    Type: AWS::CertificateManager::Certificate\n    Properties:\n      DomainName: !Sub '*.${EnvName}-${SubSolName}.cloud.internavi.ne.jp'\n      SubjectAlternativeNames:\n        - '*.cloud.internavi.ne.jp'\n      ValidationMethod: DNS\n\nOutputs:\n  VPC:\n    Value: !Ref VPC\n    Export:\n      Name: VPC\n  PublicSubnet1a:\n    Value: !Ref PublicSubnet1a\n    Export:\n      Name: PublicSubnet1a\n  PublicSubnet1c:\n    Value: !Ref PublicSubnet1c\n    Export:\n      Name: PublicSubnet1c\n  PrivateSubnet1a:\n    Value: !Ref PrivateSubnet1a\n    Export:\n      Name: PrivateSubnet1a\n  PrivateSubnet1c:\n    Value: !Ref PrivateSubnet1c\n    Export:\n      Name: PrivateSubnet1c\n  PublicRouteTable:\n    Value: !Ref PublicRouteTable\n    Export:\n      Name: PublicRouteTable\n  PrivateRouteTable1a:\n    Value: !Ref PrivateRouteTable1a\n    Export:\n      Name: PrivateRouteTable1a\n  PrivateRouteTable1c:\n    Value: !Ref PrivateRouteTable1c\n    Export:\n      Name: PrivateRouteTable1c\n  DNS1:\n    Value: !Ref DNS1\n    Export:\n      Name: DNS1\n  DNS2:\n    Value: !Ref DNS2\n    Export:\n      Name: DNS2\n"
}
StackSet-HmAdmin-createIamRole-acf5f840-458d-4f05-9bf9-e0b226a421e3
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "{\n  \"AWSTemplateFormatVersion\" : \"2010-09-09\",\n  \"Description\" : \"Template for Creating IAM Role to Switch from Internavi Login AWS Account\",\n  \"Parameters\" : {\n    \"TrustedAWSAccountId\" : {\n      \"AllowedPattern\" : \"^[0-9]*$\",\n      \"Type\" : \"String\",\n      \"Default\" : \"975196479634\",\n      \"Description\" : \"Trusted AWS Account ID\"\n    },\n    \"IAMRoleName\": {\n      \"Type\": \"String\",\n      \"Default\": \"HmAdmin\",\n      \"Description\": \"IAM Role Name\"\n    }\n  },\n  \"Resources\" : {\n    \"IAMRoleForEngineer\": {\n      \"Type\": \"AWS::IAM::Role\",\n      \"Properties\": {\n        \"AssumeRolePolicyDocument\": {\n          \"Version\": \"2012-10-17\",\n          \"Statement\": [\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"J0322720\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"J0116063\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JP300063\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JP310643\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JP311734\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            }\n          ]\n        },\n        \"ManagedPolicyArns\": [\n          \"arn:aws:iam::aws:policy/AdministratorAccess\"\n        ],\n        \"Path\": \"/\",\n        \"RoleName\": { \"Ref\" : \"IAMRoleName\" }\n      }\n    }\n  },\n  \"Outputs\" : {\n    \"IAMRoleArn\": {\n      \"Value\": { \"Fn::GetAtt\" : [ \"IAMRoleForEngineer\", \"Arn\" ] }\n    },\n    \"LinkForSwitchRole\": {\n      \"Value\": { \"Fn::Join\": [ \"\", [ \"https://signin.aws.amazon.com/switchrole?roleName=\", { \"Ref\" : \"IAMRoleName\" }, \"&account=\", { \"Ref\" : \"AWS::AccountId\" } ] ] }\n    }\n  }\n}\n"
}
StackSetsExecutionRole
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: 2010-09-09\nDescription: Configure the AWSCloudFormationStackSetExecutionRole to support AWS CloudFormation StackSets in a managed account.\n\nParameters:\n  MasterAccountId:\n    Type: String\n    Description: AWS Account Id of the master account (the account in which StackSets will be created).\n    MaxLength: 12\n    MinLength: 12\n\nResources:\n  ExecutionRole:\n    Type: AWS::IAM::Role\n    Properties:\n      RoleName: AWSCloudFormationStackSetExecutionRole\n      AssumeRolePolicyDocument: \n        Version: 2012-10-17\n        Statement: \n          - Effect: Allow\n            Principal: \n              AWS:\n                - !Ref MasterAccountId\n            Action: \n              - sts:AssumeRole\n      Path: /\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/AdministratorAccess\n"
}
cm-hamada-koji-iamRole
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": {
        "AWSTemplateFormatVersion": "2010-09-09", 
        "Description": "Template for Creating IAM Role to Switch from Classmethod AWS Account", 
        "Parameters": {
            "TrustedAWSAccountId": {
                "AllowedPattern": "^[0-9]*$", 
                "Type": "String", 
                "Default": "", 
                "Description": "Trusted AWS Account ID"
            }, 
            "IAMUserName": {
                "AllowedPattern": "^cm-[a-z.]*$", 
                "Type": "String", 
                "Default": "cm-xxx.xxx", 
                "Description": "IAM Role Name"
            }
        }, 
        "Resources": {
            "IAMRoleForCmEngineer": {
                "Type": "AWS::IAM::Role", 
                "Properties": {
                    "AssumeRolePolicyDocument": {
                        "Version": "2012-10-17", 
                        "Statement": [
                            {
                                "Effect": "Allow", 
                                "Principal": {
                                    "AWS": {
                                        "Fn::Join": [
                                            "", 
                                            [
                                                "arn:aws:iam::", 
                                                {
                                                    "Ref": "TrustedAWSAccountId"
                                                }, 
                                                ":user/", 
                                                {
                                                    "Ref": "IAMUserName"
                                                }
                                            ]
                                        ]
                                    }
                                }, 
                                "Action": [
                                    "sts:AssumeRole"
                                ], 
                                "Condition": {
                                    "Bool": {
                                        "aws:MultiFactorAuthPresent": "true"
                                    }
                                }
                            }
                        ]
                    }, 
                    "ManagedPolicyArns": [
                        "arn:aws:iam::aws:policy/AdministratorAccess"
                    ], 
                    "Path": "/", 
                    "RoleName": {
                        "Ref": "IAMUserName"
                    }
                }
            }
        }, 
        "Outputs": {
            "IAMRoleArn": {
                "Value": {
                    "Fn::GetAtt": [
                        "IAMRoleForCmEngineer", 
                        "Arn"
                    ]
                }
            }, 
            "LinkForSwitchRole": {
                "Value": {
                    "Fn::Join": [
                        "", 
                        [
                            "https://signin.aws.amazon.com/switchrole?roleName=", 
                            {
                                "Ref": "IAMUserName"
                            }, 
                            "&account=", 
                            {
                                "Ref": "AWS::AccountId"
                            }
                        ]
                    ]
                }
            }
        }
    }
}
cm-kikuchi-shuji-iamRole
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": {
        "AWSTemplateFormatVersion": "2010-09-09", 
        "Description": "Template for Creating IAM Role to Switch from Classmethod AWS Account", 
        "Parameters": {
            "TrustedAWSAccountId": {
                "AllowedPattern": "^[0-9]*$", 
                "Type": "String", 
                "Default": "", 
                "Description": "Trusted AWS Account ID"
            }, 
            "IAMUserName": {
                "AllowedPattern": "^cm-[a-z.]*$", 
                "Type": "String", 
                "Default": "cm-xxx.xxx", 
                "Description": "IAM Role Name"
            }
        }, 
        "Resources": {
            "IAMRoleForCmEngineer": {
                "Type": "AWS::IAM::Role", 
                "Properties": {
                    "AssumeRolePolicyDocument": {
                        "Version": "2012-10-17", 
                        "Statement": [
                            {
                                "Effect": "Allow", 
                                "Principal": {
                                    "AWS": {
                                        "Fn::Join": [
                                            "", 
                                            [
                                                "arn:aws:iam::", 
                                                {
                                                    "Ref": "TrustedAWSAccountId"
                                                }, 
                                                ":user/", 
                                                {
                                                    "Ref": "IAMUserName"
                                                }
                                            ]
                                        ]
                                    }
                                }, 
                                "Action": [
                                    "sts:AssumeRole"
                                ], 
                                "Condition": {
                                    "Bool": {
                                        "aws:MultiFactorAuthPresent": "true"
                                    }
                                }
                            }
                        ]
                    }, 
                    "ManagedPolicyArns": [
                        "arn:aws:iam::aws:policy/AdministratorAccess"
                    ], 
                    "Path": "/", 
                    "RoleName": {
                        "Ref": "IAMUserName"
                    }
                }
            }
        }, 
        "Outputs": {
            "IAMRoleArn": {
                "Value": {
                    "Fn::GetAtt": [
                        "IAMRoleForCmEngineer", 
                        "Arn"
                    ]
                }
            }, 
            "LinkForSwitchRole": {
                "Value": {
                    "Fn::Join": [
                        "", 
                        [
                            "https://signin.aws.amazon.com/switchrole?roleName=", 
                            {
                                "Ref": "IAMUserName"
                            }, 
                            "&account=", 
                            {
                                "Ref": "AWS::AccountId"
                            }
                        ]
                    ]
                }
            }
        }
    }
}
]
スクリプトを終了します
  1- INV-ver-htc01:arn:aws:iam::686753218709:role/OpeAdminRole
  2- INV-ver-sub01:arn:aws:iam::495152581087:role/OpeAdminRole
  3- INV-ver-cer01:arn:aws:iam::339311866652:role/OpeAdminRole
  4- INV-ver-des01:arn:aws:iam::302986797475:role/OpeAdminRole
  5- INV-ver-agw01:arn:aws:iam::859823971378:role/OpeAdminRole
  6- INV-ver-vdm01:arn:aws:iam::497617980196:role/OpeAdminRole
  7- INV-ver-wfi01:arn:aws:iam::932204081418:role/OpeAdminRole
  8- INV-ver-esp01:arn:aws:iam::131000633826:role/OpeAdminRole
  9- INV-ver-rmt01:arn:aws:iam::604584103104:role/OpeAdminRole
 10- INV-ver-esw01:arn:aws:iam::170541451228:role/OpeAdminRole
 11- INV-ver-tcu01:arn:aws:iam::951453431396:role/OpeAdminRole
 12- INV-ver-vky01:arn:aws:iam::207429400733:role/OpeAdminRole
     all- All Environments:select all environments
スクリプトを実行します。
aws cloudformation describe-stacks --query Stacks[*].StackName
{
    "Account": "975196479634", 
    "UserId": "AIDA6GDR5MCJLYN4JQRFZ", 
    "Arn": "arn:aws:iam::975196479634:user/JV010028"
}
{
    "Account": "951453431396", 
    "UserId": "AROA53BYLGZSLGTPE6C74:inv-20190702041104", 
    "Arn": "arn:aws:sts::951453431396:assumed-role/OpeAdminRole/inv-20190702041104"
}
[
inv-ver-tcu01-monitoring-lambda
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: \"2010-09-09\"\r\nDescription: \"monitoring-lambda.yml\"\r\nParameters: \r\n  EnvironmentName: \r\n    Default: ver\r\n    Description: \"Environment Name\"\r\n    Type: String\r\n  MicroServiceName: \r\n    Default: cer01\r\n    Description: \"MicroService Name\"\r\n    Type: String\r\n  S3Buckets: \r\n    Default: \"inv-ver-cer01-cfn\"\r\n    Description: \"source s3 backet name\"\r\n    Type: String\r\n  S3Prefix:\r\n    Default: \"monitor-config/\"\r\n    Description: \"source s3 backet file prefix\"\r\n    Type: String\r\n  iniFileName: \r\n    Default: \"monitor.json\"\r\n    Description: \"scenario file name\"\r\n    Type: String\r\n  scenarioSourceLogGroup:\r\n    Description: \"Scenario CWL log group name\"\r\n    Type: \"String\"\r\n  scenarioFilterPattern:\r\n    Default: \"\"\r\n    Description: \"Scenario Monitor CWL log FilterPattern\"\r\n    Type: \"String\"\r\n  programSourceLogGroup:\r\n    Description: \"program CWL log group name\"\r\n    Type: \"String\"\r\n  programFilterPattern:\r\n    Default: ?\"ERROR\" ?\"FATAL\" ?\"WARN\"\r\n    Description: \"program Monitor CWL log FilterPattern\"\r\n    Type: \"String\"\r\nResources:\r\n  IAMRole:\r\n    Type: \"AWS::IAM::Role\"\r\n    Properties: \r\n      AssumeRolePolicyDocument: \r\n        Version: \"2012-10-17\"\r\n        Statement: \r\n          - Effect: Allow\r\n            Principal: \r\n              Service: \"lambda.amazonaws.com\"\r\n            Action: \"sts:AssumeRole\"\r\n      ManagedPolicyArns: \r\n        - \"arn:aws:iam::aws:policy/AmazonSNSFullAccess\"\r\n      Path: \"/\"\r\n      Policies:\r\n        - PolicyName: monitor_lambda_policy\r\n          PolicyDocument:\r\n            Version: '2012-10-17'\r\n            Statement:\r\n              - Effect: Allow\r\n                Action:\r\n                  - cloudwatch:*\r\n                  - logs:*\r\n                  - s3:Get*\r\n                  - s3:List*\r\n                Resource: \"*\"\r\n      RoleName: !Sub inv-${EnvironmentName}-${MicroServiceName}-monitoring-lambda-role\r\n  LambdaLayer:\r\n    Type: \"AWS::Lambda::LayerVersion\"\r\n    Properties:\r\n      CompatibleRuntimes: \r\n        - python3.6\r\n      Content: \r\n        S3Bucket:\r\n          Ref: S3Buckets\r\n        S3Key: CloudwatchAlarm/metrics_mod.zip\r\n      Description: \"monitor_lambda_modules\"\r\n      LayerName: monitor_module\r\n  LambdaFunction: \r\n    DependsOn: \r\n      - IAMRole\r\n    Type: \"AWS::Lambda::Function\"\r\n    Properties: \r\n      Code: \r\n        S3Bucket: \r\n          Ref: S3Buckets\r\n        S3Key: CloudwatchAlarm/monitoring_common_lambda_src.zip           \r\n      FunctionName: !Sub inv-${EnvironmentName}-${MicroServiceName}-monitoring_common_lambda\r\n      Handler: lambda_function.lambda_handler\r\n      Environment: \r\n        Variables: \r\n          ENV: \r\n            Ref: EnvironmentName\r\n          STG: \r\n            Ref: MicroServiceName\r\n          fileName:\r\n            Ref: iniFileName\r\n          s3Bucket:\r\n            Ref: S3Buckets\r\n          s3keyPrefix:\r\n            Ref: S3Prefix\r\n      Role: \r\n        \"Fn::GetAtt\": \r\n          - IAMRole\r\n          - Arn\r\n      Runtime: \"python3.6\"\r\n      MemorySize: 512\r\n      Timeout: 300\r\n      Layers:\r\n        - !Ref LambdaLayer\r\n  LambdaPermission: \r\n    Type: \"AWS::Lambda::Permission\"\r\n    Properties: \r\n      Action: \"lambda:InvokeFunction\"\r\n      FunctionName: \r\n        \"Fn::GetAtt\": \r\n          - LambdaFunction\r\n          - Arn\r\n      Principal: !Sub \"sns.amazonaws.com\"\r\n      SourceArn: !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:inv-${EnvironmentName}-${MicroServiceName}\r\n  ScenarioSubscriptionFilter:\r\n    DependsOn:\r\n      - ScenarioLambdaInvokePermission\r\n    Type: \"AWS::Logs::SubscriptionFilter\"\r\n    Properties:\r\n      LogGroupName: !Ref scenarioSourceLogGroup\r\n      FilterPattern: !Ref scenarioFilterPattern\r\n      DestinationArn: !Join\r\n        - ''\r\n        - - !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:'\r\n          - !Sub inv-${EnvironmentName}-${MicroServiceName}-monitoring_common_lambda\r\n  ScenarioLambdaInvokePermission:\r\n    Type: 'AWS::Lambda::Permission'\r\n    Properties:\r\n      FunctionName:\r\n        \"Fn::GetAtt\": \r\n          - LambdaFunction\r\n          - Arn\r\n      Action: \"lambda:InvokeFunction\"\r\n      Principal: !Sub \"logs.amazonaws.com\"\r\n      SourceAccount: !Ref AWS::AccountId\r\n      SourceArn: !Sub \"arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${scenarioSourceLogGroup}:*\"\r\n  ProgramSubscriptionFilter:\r\n    DependsOn:\r\n      - ProgramLambdaInvokePermission\r\n    Type: \"AWS::Logs::SubscriptionFilter\"\r\n    Properties:\r\n      LogGroupName: !Ref programSourceLogGroup\r\n      FilterPattern: !Ref programFilterPattern\r\n      DestinationArn: !Join\r\n        - ''\r\n        - - !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:'\r\n          - !Sub inv-${EnvironmentName}-${MicroServiceName}-monitoring_common_lambda\r\n  ProgramLambdaInvokePermission:\r\n    Type: 'AWS::Lambda::Permission'\r\n    Properties:\r\n      FunctionName:\r\n        \"Fn::GetAtt\": \r\n          - LambdaFunction\r\n          - Arn\r\n      Action: \"lambda:InvokeFunction\"\r\n      Principal: !Sub \"logs.amazonaws.com\"\r\n      SourceAccount: !Ref AWS::AccountId\r\n      SourceArn: !Sub \"arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${programSourceLogGroup}:*\"\r\nOutputs: \r\n  IAMRole: \r\n    Description: \"IAM Role Name\"\r\n    Value: \r\n      Ref: IAMRole\r\n  SNSTopic: \r\n    Description: \"SNS Topic Name\"\r\n    Value: \r\n      !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:inv-${EnvironmentName}-${MicroServiceName}\r\n  LambdaFunction: \r\n    Description: \"Lambda Function Name\"\r\n    Value: \r\n      Ref: LambdaFunction"
}
inv-ver-tcu01-manage-metrics-alarm
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: \"2010-09-09\"\r\nDescription: \"create_metrics_alarm.yaml\"\r\nParameters:\r\n  EnvironmentName:\r\n    Default: \"ver\"\r\n    Description: \"EnvironmentName\"\r\n    Type: String\r\n  MicroServiceName: \r\n    Default: \"cer01\"\r\n    Description: \"MicroServiceName\"\r\n    Type: String\r\n  s3keyprefix: \r\n    Default: \"_manage_metrics_alarm.xlsx\"\r\n    Description: \"excel s3 keys prefix\"\r\n    Type: String\r\n  S3Buckets: \r\n    Default: \"inv-ver-cer01-cfn\"\r\n    Description: \"source s3 backet name\"\r\n    Type: String\r\nResources: \r\n  IAMRole: \r\n    Type: \"AWS::IAM::Role\"\r\n    Properties: \r\n      AssumeRolePolicyDocument: \r\n        Version: \"2012-10-17\"\r\n        Statement: \r\n          - Effect: Allow\r\n            Principal: \r\n              Service: \"lambda.amazonaws.com\"\r\n            Action: \"sts:AssumeRole\"\r\n      ManagedPolicyArns: \r\n        - \"arn:aws:iam::aws:policy/AmazonS3FullAccess\"\r\n      Path: \"/\"\r\n      Policies:\r\n        - PolicyName: manage_metrics_alarm_lambda_policy\r\n          PolicyDocument:\r\n            Version: '2012-10-17'\r\n            Statement:\r\n              - Effect: Allow\r\n                Action:\r\n                  - cloudwatch:*\r\n                  - logs:*\r\n                Resource: \"*\"\r\n      RoleName: !Sub inv-${EnvironmentName}-${MicroServiceName}-manage-metrics-alarm-lambda-role\r\n  LambdaLayer:\r\n    Type: \"AWS::Lambda::LayerVersion\"\r\n    Properties:\r\n      CompatibleRuntimes: \r\n        - python3.6\r\n      Content: \r\n        S3Bucket:\r\n          Ref: S3Buckets\r\n        S3Key: CloudwatchAlarm/metrics_mod.zip\r\n      Description: \"manage_cloudwatch metrics alarm modules\"\r\n      LayerName: metrics_module\r\n  LambdaFunction: \r\n    DependsOn: \r\n      - IAMRole\r\n    Type: \"AWS::Lambda::Function\"\r\n    Properties: \r\n      Code: \r\n        S3Bucket: \r\n          Ref: S3Buckets\r\n        S3Key: CloudwatchAlarm/manage_metrics_alarm_src.zip\r\n      FunctionName: !Sub inv-${EnvironmentName}-${MicroServiceName}-manage-metrics-alarm-lambda\r\n      Handler: lambda_function.lambda_handler\r\n      Environment: \r\n        Variables: \r\n          fileprefix: \r\n            Ref: s3keyprefix\r\n          s3Bucket: !Sub inv-${EnvironmentName}-${MicroServiceName}-manage-metrics-alarm\r\n      Role: \r\n        \"Fn::GetAtt\": \r\n          - IAMRole\r\n          - Arn\r\n      Runtime: \"python3.6\"\r\n      MemorySize: 512\r\n      Timeout: 300\r\n      Layers:\r\n        - !Ref LambdaLayer\r\n  LambdaPermission: \r\n    Type: \"AWS::Lambda::Permission\"\r\n    Properties: \r\n      Action: \"lambda:InvokeFunction\"\r\n      FunctionName: \r\n        \"Fn::GetAtt\": \r\n          - LambdaFunction\r\n          - Arn\r\n      Principal: s3.amazonaws.com\r\n      SourceAccount: !Ref 'AWS::AccountId'\r\n      SourceArn: !Join\r\n        - ''\r\n        - - 'arn:aws:s3:::'\r\n          - !Sub inv-${EnvironmentName}-${MicroServiceName}-manage-metrics-alarm\r\n  S3Bucket:\r\n    Type: \"AWS::S3::Bucket\"\r\n    DependsOn: \r\n      - LambdaPermission\r\n    Properties:\r\n      BucketName: !Sub inv-${EnvironmentName}-${MicroServiceName}-manage-metrics-alarm\r\n      AccessControl: Private\r\n      PublicAccessBlockConfiguration:\r\n        BlockPublicAcls: True\r\n        BlockPublicPolicy: True\r\n        IgnorePublicAcls: True\r\n        RestrictPublicBuckets: True\r\n      NotificationConfiguration:\r\n        LambdaConfigurations:\r\n          - Event: \"s3:ObjectCreated:*\"\r\n            Filter:\r\n              S3Key:\r\n                Rules:\r\n                  - Name: suffix\r\n                    Value: xlsx\r\n            Function: !GetAtt\r\n              - LambdaFunction\r\n              - Arn\r\n  S3BucketPolicy:\r\n    Type: AWS::S3::BucketPolicy\r\n    Properties: \r\n      Bucket: \r\n        Ref: \"S3Bucket\"\r\n      PolicyDocument: \r\n        Version: \"2012-10-17\"\r\n        Statement: \r\n          - \r\n            Action: \r\n              - \"s3:GetObject\"\r\n            Effect: \"Allow\"\r\n            Resource: \r\n              Fn::Join: \r\n                - \"\"\r\n                - \r\n                  - \"arn:aws:s3:::\"\r\n                  - \r\n                    Ref: \"S3Bucket\"\r\n                  - \"/*\"\r\n            Principal: \r\n              AWS:\r\n                Fn::Join:\r\n                  - \"\"\r\n                  - \r\n                    - \"arn:aws:iam::\"\r\n                    - Ref: \"AWS::AccountId\"\r\n                    - \":root\"\r\nOutputs: \r\n  IAMRole: \r\n    Description: \"IAM Role Name\"\r\n    Value: \r\n      Ref: IAMRole\r\n  S3BucketName:\r\n    Value:\r\n      Ref S3BucketName\r\n  LambdaFunction: \r\n    Description: \"Lambda Function Name\"\r\n    Value: \r\n      Ref: LambdaFunction"
}
enable-guardduty
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: 2010-09-09\nDescription:\n  \"enable guardduty\"\nResources:\n  GDD:\n    Type: \"AWS::GuardDuty::Detector\"\n    Properties:\n      Enable: true"
}
StackSet-InfraAdmin-CreateIamRole-d3e825cf-8640-4267-8766-33ba4a1392f8
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": {
        "AWSTemplateFormatVersion": "2010-09-09", 
        "Description": "Template for Creating IAM Role to Switch from Internavi Login AWS Account", 
        "Parameters": {
            "TrustedAWSAccountId": {
                "AllowedPattern": "^[0-9]*$", 
                "Type": "String", 
                "Default": "975196479634", 
                "Description": "Trusted AWS Account ID"
            }, 
            "IAMRoleName": {
                "Type": "String", 
                "Default": "InfraAdmin", 
                "Description": "IAM Role Name"
            }
        }, 
        "Resources": {
            "IAMRoleForEngineer": {
                "Type": "AWS::IAM::Role", 
                "Properties": {
                    "AssumeRolePolicyDocument": {
                        "Version": "2012-10-17", 
                        "Statement": [
                            {
                                "Effect": "Allow", 
                                "Principal": {
                                    "AWS": {
                                        "Fn::Join": [
                                            "", 
                                            [
                                                "arn:aws:iam::", 
                                                {
                                                    "Ref": "TrustedAWSAccountId"
                                                }, 
                                                ":user/", 
                                                "JV010031"
                                            ]
                                        ]
                                    }
                                }, 
                                "Action": [
                                    "sts:AssumeRole"
                                ], 
                                "Condition": {
                                    "Bool": {
                                        "aws:MultiFactorAuthPresent": "true"
                                    }
                                }
                            }, 
                            {
                                "Effect": "Allow", 
                                "Principal": {
                                    "AWS": {
                                        "Fn::Join": [
                                            "", 
                                            [
                                                "arn:aws:iam::", 
                                                {
                                                    "Ref": "TrustedAWSAccountId"
                                                }, 
                                                ":user/", 
                                                "JV010024"
                                            ]
                                        ]
                                    }
                                }, 
                                "Action": [
                                    "sts:AssumeRole"
                                ], 
                                "Condition": {
                                    "Bool": {
                                        "aws:MultiFactorAuthPresent": "true"
                                    }
                                }
                            }
                        ]
                    }, 
                    "ManagedPolicyArns": [
                        "arn:aws:iam::aws:policy/AdministratorAccess"
                    ], 
                    "Path": "/", 
                    "RoleName": {
                        "Ref": "IAMRoleName"
                    }
                }
            }
        }, 
        "Outputs": {
            "IAMRoleArn": {
                "Value": {
                    "Fn::GetAtt": [
                        "IAMRoleForEngineer", 
                        "Arn"
                    ]
                }
            }, 
            "LinkForSwitchRole": {
                "Value": {
                    "Fn::Join": [
                        "", 
                        [
                            "https://signin.aws.amazon.com/switchrole?roleName=", 
                            {
                                "Ref": "IAMRoleName"
                            }, 
                            "&account=", 
                            {
                                "Ref": "AWS::AccountId"
                            }
                        ]
                    ]
                }
            }
        }
    }
}
StackSet-OpeAdmin-CreateIamRole-2b1a11a8-9428-4031-a400-2282c31832a4
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "{\n  \"AWSTemplateFormatVersion\" : \"2010-09-09\",\n  \"Description\" : \"Template for Creating IAM Role to Switch from Internavi Login AWS Account\",\n  \"Parameters\" : {\n    \"TrustedAWSAccountId\" : {\n      \"AllowedPattern\" : \"^[0-9]*$\",\n      \"Type\" : \"String\",\n      \"Default\" : \"975196479634\",\n      \"Description\" : \"Trusted AWS Account ID\"\n    },\n    \"IAMRoleName\": {\n      \"Type\": \"String\",\n      \"Default\": \"OpeAdminRole\",\n      \"Description\": \"IAM Role Name\"\n    }\n  },\n  \"Resources\" : {\n    \"IAMRoleForEngineer\": {\n      \"Type\": \"AWS::IAM::Role\",\n      \"Properties\": {\n        \"AssumeRolePolicyDocument\": {\n          \"Version\": \"2012-10-17\",\n          \"Statement\": [\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010002\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010025\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010026\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010027\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010028\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010030\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            }\n          ]\n        },\n        \"ManagedPolicyArns\": [\n          \"arn:aws:iam::aws:policy/AdministratorAccess\"\n        ],\n        \"Path\": \"/\",\n        \"RoleName\": { \"Ref\" : \"IAMRoleName\" }\n      }\n    }\n  },\n  \"Outputs\" : {\n    \"IAMRoleArn\": {\n      \"Value\": { \"Fn::GetAtt\" : [ \"IAMRoleForEngineer\", \"Arn\" ] }\n    },\n    \"LinkForSwitchRole\": {\n      \"Value\": { \"Fn::Join\": [ \"\", [ \"https://signin.aws.amazon.com/switchrole?roleName=\", { \"Ref\" : \"IAMRoleName\" }, \"&account=\", { \"Ref\" : \"AWS::AccountId\" } ] ] }\n    }\n  }\n}\n"
}
StackSet-HmAdmin-createIamRole-c8c3e668-99c8-41c8-a8e7-cba4a99cb7cb
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "{\n  \"AWSTemplateFormatVersion\" : \"2010-09-09\",\n  \"Description\" : \"Template for Creating IAM Role to Switch from Internavi Login AWS Account\",\n  \"Parameters\" : {\n    \"TrustedAWSAccountId\" : {\n      \"AllowedPattern\" : \"^[0-9]*$\",\n      \"Type\" : \"String\",\n      \"Default\" : \"975196479634\",\n      \"Description\" : \"Trusted AWS Account ID\"\n    },\n    \"IAMRoleName\": {\n      \"Type\": \"String\",\n      \"Default\": \"HmAdmin\",\n      \"Description\": \"IAM Role Name\"\n    }\n  },\n  \"Resources\" : {\n    \"IAMRoleForEngineer\": {\n      \"Type\": \"AWS::IAM::Role\",\n      \"Properties\": {\n        \"AssumeRolePolicyDocument\": {\n          \"Version\": \"2012-10-17\",\n          \"Statement\": [\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"J0322720\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"J0116063\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JP300063\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JP310643\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JP311734\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            }\n          ]\n        },\n        \"ManagedPolicyArns\": [\n          \"arn:aws:iam::aws:policy/AdministratorAccess\"\n        ],\n        \"Path\": \"/\",\n        \"RoleName\": { \"Ref\" : \"IAMRoleName\" }\n      }\n    }\n  },\n  \"Outputs\" : {\n    \"IAMRoleArn\": {\n      \"Value\": { \"Fn::GetAtt\" : [ \"IAMRoleForEngineer\", \"Arn\" ] }\n    },\n    \"LinkForSwitchRole\": {\n      \"Value\": { \"Fn::Join\": [ \"\", [ \"https://signin.aws.amazon.com/switchrole?roleName=\", { \"Ref\" : \"IAMRoleName\" }, \"&account=\", { \"Ref\" : \"AWS::AccountId\" } ] ] }\n    }\n  }\n}\n"
}
StackSet-cm-cm-hamada-koji-iamRole-db139dbc-72f8-48da-9271-5d1cc112723d
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": {
        "AWSTemplateFormatVersion": "2010-09-09", 
        "Description": "Template for Creating IAM Role to Switch from Classmethod AWS Account", 
        "Parameters": {
            "TrustedAWSAccountId": {
                "AllowedPattern": "^[0-9]*$", 
                "Type": "String", 
                "Default": "", 
                "Description": "Trusted AWS Account ID"
            }, 
            "IAMUserName": {
                "AllowedPattern": "^cm-[a-z.]*$", 
                "Type": "String", 
                "Default": "cm-xxx.xxx", 
                "Description": "IAM Role Name"
            }
        }, 
        "Resources": {
            "IAMRoleForCmEngineer": {
                "Type": "AWS::IAM::Role", 
                "Properties": {
                    "AssumeRolePolicyDocument": {
                        "Version": "2012-10-17", 
                        "Statement": [
                            {
                                "Effect": "Allow", 
                                "Principal": {
                                    "AWS": {
                                        "Fn::Join": [
                                            "", 
                                            [
                                                "arn:aws:iam::", 
                                                {
                                                    "Ref": "TrustedAWSAccountId"
                                                }, 
                                                ":user/", 
                                                {
                                                    "Ref": "IAMUserName"
                                                }
                                            ]
                                        ]
                                    }
                                }, 
                                "Action": [
                                    "sts:AssumeRole"
                                ], 
                                "Condition": {
                                    "Bool": {
                                        "aws:MultiFactorAuthPresent": "true"
                                    }
                                }
                            }
                        ]
                    }, 
                    "ManagedPolicyArns": [
                        "arn:aws:iam::aws:policy/AdministratorAccess"
                    ], 
                    "Path": "/", 
                    "RoleName": {
                        "Ref": "IAMUserName"
                    }
                }
            }
        }, 
        "Outputs": {
            "IAMRoleArn": {
                "Value": {
                    "Fn::GetAtt": [
                        "IAMRoleForCmEngineer", 
                        "Arn"
                    ]
                }
            }, 
            "LinkForSwitchRole": {
                "Value": {
                    "Fn::Join": [
                        "", 
                        [
                            "https://signin.aws.amazon.com/switchrole?roleName=", 
                            {
                                "Ref": "IAMUserName"
                            }, 
                            "&account=", 
                            {
                                "Ref": "AWS::AccountId"
                            }
                        ]
                    ]
                }
            }
        }
    }
}
StackSetsExecutionRole
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: 2010-09-09\nDescription: Configure the AWSCloudFormationStackSetExecutionRole to support AWS CloudFormation StackSets in a managed account.\n\nParameters:\n  MasterAccountId:\n    Type: String\n    Description: AWS Account Id of the master account (the account in which StackSets will be created).\n    MaxLength: 12\n    MinLength: 12\n\nResources:\n  ExecutionRole:\n    Type: AWS::IAM::Role\n    Properties:\n      RoleName: AWSCloudFormationStackSetExecutionRole\n      AssumeRolePolicyDocument: \n        Version: 2012-10-17\n        Statement: \n          - Effect: Allow\n            Principal: \n              AWS:\n                - !Ref MasterAccountId\n            Action: \n              - sts:AssumeRole\n      Path: /\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/AdministratorAccess\n"
}
cm-kikuchi-shuji-iamRole
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": {
        "AWSTemplateFormatVersion": "2010-09-09", 
        "Description": "Template for Creating IAM Role to Switch from Classmethod AWS Account", 
        "Parameters": {
            "TrustedAWSAccountId": {
                "AllowedPattern": "^[0-9]*$", 
                "Type": "String", 
                "Default": "", 
                "Description": "Trusted AWS Account ID"
            }, 
            "IAMUserName": {
                "AllowedPattern": "^cm-[a-z.]*$", 
                "Type": "String", 
                "Default": "cm-xxx.xxx", 
                "Description": "IAM Role Name"
            }
        }, 
        "Resources": {
            "IAMRoleForCmEngineer": {
                "Type": "AWS::IAM::Role", 
                "Properties": {
                    "AssumeRolePolicyDocument": {
                        "Version": "2012-10-17", 
                        "Statement": [
                            {
                                "Effect": "Allow", 
                                "Principal": {
                                    "AWS": {
                                        "Fn::Join": [
                                            "", 
                                            [
                                                "arn:aws:iam::", 
                                                {
                                                    "Ref": "TrustedAWSAccountId"
                                                }, 
                                                ":user/", 
                                                {
                                                    "Ref": "IAMUserName"
                                                }
                                            ]
                                        ]
                                    }
                                }, 
                                "Action": [
                                    "sts:AssumeRole"
                                ], 
                                "Condition": {
                                    "Bool": {
                                        "aws:MultiFactorAuthPresent": "true"
                                    }
                                }
                            }
                        ]
                    }, 
                    "ManagedPolicyArns": [
                        "arn:aws:iam::aws:policy/AdministratorAccess"
                    ], 
                    "Path": "/", 
                    "RoleName": {
                        "Ref": "IAMUserName"
                    }
                }
            }
        }, 
        "Outputs": {
            "IAMRoleArn": {
                "Value": {
                    "Fn::GetAtt": [
                        "IAMRoleForCmEngineer", 
                        "Arn"
                    ]
                }
            }, 
            "LinkForSwitchRole": {
                "Value": {
                    "Fn::Join": [
                        "", 
                        [
                            "https://signin.aws.amazon.com/switchrole?roleName=", 
                            {
                                "Ref": "IAMUserName"
                            }, 
                            "&account=", 
                            {
                                "Ref": "AWS::AccountId"
                            }
                        ]
                    ]
                }
            }
        }
    }
}
]
スクリプトを終了します
  1- INV-ver-htc01:arn:aws:iam::686753218709:role/OpeAdminRole
  2- INV-ver-sub01:arn:aws:iam::495152581087:role/OpeAdminRole
  3- INV-ver-cer01:arn:aws:iam::339311866652:role/OpeAdminRole
  4- INV-ver-des01:arn:aws:iam::302986797475:role/OpeAdminRole
  5- INV-ver-agw01:arn:aws:iam::859823971378:role/OpeAdminRole
  6- INV-ver-vdm01:arn:aws:iam::497617980196:role/OpeAdminRole
  7- INV-ver-wfi01:arn:aws:iam::932204081418:role/OpeAdminRole
  8- INV-ver-esp01:arn:aws:iam::131000633826:role/OpeAdminRole
  9- INV-ver-rmt01:arn:aws:iam::604584103104:role/OpeAdminRole
 10- INV-ver-esw01:arn:aws:iam::170541451228:role/OpeAdminRole
 11- INV-ver-tcu01:arn:aws:iam::951453431396:role/OpeAdminRole
 12- INV-ver-vky01:arn:aws:iam::207429400733:role/OpeAdminRole
     all- All Environments:select all environments
スクリプトを実行します。
aws cloudformation describe-stacks --query Stacks[*].StackName
{
    "Account": "975196479634", 
    "UserId": "AIDA6GDR5MCJLYN4JQRFZ", 
    "Arn": "arn:aws:iam::975196479634:user/JV010028"
}
{
    "Account": "207429400733", 
    "UserId": "AROATAS6BPCOQAM5O4MGD:inv-20190702041112", 
    "Arn": "arn:aws:sts::207429400733:assumed-role/OpeAdminRole/inv-20190702041112"
}
[
inv-ver-vky01-monitoring-lambda
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: \"2010-09-09\"\r\nDescription: \"monitoring-lambda.yml\"\r\nParameters: \r\n  EnvironmentName: \r\n    Default: ver\r\n    Description: \"Environment Name\"\r\n    Type: String\r\n  MicroServiceName: \r\n    Default: cer01\r\n    Description: \"MicroService Name\"\r\n    Type: String\r\n  S3Buckets: \r\n    Default: \"inv-ver-cer01-cfn\"\r\n    Description: \"source s3 backet name\"\r\n    Type: String\r\n  S3Prefix:\r\n    Default: \"monitor-config/\"\r\n    Description: \"source s3 backet file prefix\"\r\n    Type: String\r\n  iniFileName: \r\n    Default: \"monitor.json\"\r\n    Description: \"scenario file name\"\r\n    Type: String\r\n  scenarioSourceLogGroup:\r\n    Description: \"Scenario CWL log group name\"\r\n    Type: \"String\"\r\n  scenarioFilterPattern:\r\n    Default: \"\"\r\n    Description: \"Scenario Monitor CWL log FilterPattern\"\r\n    Type: \"String\"\r\n  programSourceLogGroup:\r\n    Description: \"program CWL log group name\"\r\n    Type: \"String\"\r\n  programFilterPattern:\r\n    Default: ?\"ERROR\" ?\"FATAL\" ?\"WARN\"\r\n    Description: \"program Monitor CWL log FilterPattern\"\r\n    Type: \"String\"\r\nResources:\r\n  IAMRole:\r\n    Type: \"AWS::IAM::Role\"\r\n    Properties: \r\n      AssumeRolePolicyDocument: \r\n        Version: \"2012-10-17\"\r\n        Statement: \r\n          - Effect: Allow\r\n            Principal: \r\n              Service: \"lambda.amazonaws.com\"\r\n            Action: \"sts:AssumeRole\"\r\n      ManagedPolicyArns: \r\n        - \"arn:aws:iam::aws:policy/AmazonSNSFullAccess\"\r\n      Path: \"/\"\r\n      Policies:\r\n        - PolicyName: monitor_lambda_policy\r\n          PolicyDocument:\r\n            Version: '2012-10-17'\r\n            Statement:\r\n              - Effect: Allow\r\n                Action:\r\n                  - cloudwatch:*\r\n                  - logs:*\r\n                  - s3:Get*\r\n                  - s3:List*\r\n                Resource: \"*\"\r\n      RoleName: !Sub inv-${EnvironmentName}-${MicroServiceName}-monitoring-lambda-role\r\n  LambdaLayer:\r\n    Type: \"AWS::Lambda::LayerVersion\"\r\n    Properties:\r\n      CompatibleRuntimes: \r\n        - python3.6\r\n      Content: \r\n        S3Bucket:\r\n          Ref: S3Buckets\r\n        S3Key: CloudwatchAlarm/metrics_mod.zip\r\n      Description: \"monitor_lambda_modules\"\r\n      LayerName: monitor_module\r\n  LambdaFunction: \r\n    DependsOn: \r\n      - IAMRole\r\n    Type: \"AWS::Lambda::Function\"\r\n    Properties: \r\n      Code: \r\n        S3Bucket: \r\n          Ref: S3Buckets\r\n        S3Key: CloudwatchAlarm/monitoring_common_lambda_src.zip           \r\n      FunctionName: !Sub inv-${EnvironmentName}-${MicroServiceName}-monitoring_common_lambda\r\n      Handler: lambda_function.lambda_handler\r\n      Environment: \r\n        Variables: \r\n          ENV: \r\n            Ref: EnvironmentName\r\n          STG: \r\n            Ref: MicroServiceName\r\n          fileName:\r\n            Ref: iniFileName\r\n          s3Bucket:\r\n            Ref: S3Buckets\r\n          s3keyPrefix:\r\n            Ref: S3Prefix\r\n      Role: \r\n        \"Fn::GetAtt\": \r\n          - IAMRole\r\n          - Arn\r\n      Runtime: \"python3.6\"\r\n      MemorySize: 512\r\n      Timeout: 300\r\n      Layers:\r\n        - !Ref LambdaLayer\r\n  LambdaPermission: \r\n    Type: \"AWS::Lambda::Permission\"\r\n    Properties: \r\n      Action: \"lambda:InvokeFunction\"\r\n      FunctionName: \r\n        \"Fn::GetAtt\": \r\n          - LambdaFunction\r\n          - Arn\r\n      Principal: !Sub \"sns.amazonaws.com\"\r\n      SourceArn: !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:inv-${EnvironmentName}-${MicroServiceName}\r\n  ScenarioSubscriptionFilter:\r\n    DependsOn:\r\n      - ScenarioLambdaInvokePermission\r\n    Type: \"AWS::Logs::SubscriptionFilter\"\r\n    Properties:\r\n      LogGroupName: !Ref scenarioSourceLogGroup\r\n      FilterPattern: !Ref scenarioFilterPattern\r\n      DestinationArn: !Join\r\n        - ''\r\n        - - !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:'\r\n          - !Sub inv-${EnvironmentName}-${MicroServiceName}-monitoring_common_lambda\r\n  ScenarioLambdaInvokePermission:\r\n    Type: 'AWS::Lambda::Permission'\r\n    Properties:\r\n      FunctionName:\r\n        \"Fn::GetAtt\": \r\n          - LambdaFunction\r\n          - Arn\r\n      Action: \"lambda:InvokeFunction\"\r\n      Principal: !Sub \"logs.amazonaws.com\"\r\n      SourceAccount: !Ref AWS::AccountId\r\n      SourceArn: !Sub \"arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${scenarioSourceLogGroup}:*\"\r\n  ProgramSubscriptionFilter:\r\n    DependsOn:\r\n      - ProgramLambdaInvokePermission\r\n    Type: \"AWS::Logs::SubscriptionFilter\"\r\n    Properties:\r\n      LogGroupName: !Ref programSourceLogGroup\r\n      FilterPattern: !Ref programFilterPattern\r\n      DestinationArn: !Join\r\n        - ''\r\n        - - !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:'\r\n          - !Sub inv-${EnvironmentName}-${MicroServiceName}-monitoring_common_lambda\r\n  ProgramLambdaInvokePermission:\r\n    Type: 'AWS::Lambda::Permission'\r\n    Properties:\r\n      FunctionName:\r\n        \"Fn::GetAtt\": \r\n          - LambdaFunction\r\n          - Arn\r\n      Action: \"lambda:InvokeFunction\"\r\n      Principal: !Sub \"logs.amazonaws.com\"\r\n      SourceAccount: !Ref AWS::AccountId\r\n      SourceArn: !Sub \"arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${programSourceLogGroup}:*\"\r\nOutputs: \r\n  IAMRole: \r\n    Description: \"IAM Role Name\"\r\n    Value: \r\n      Ref: IAMRole\r\n  SNSTopic: \r\n    Description: \"SNS Topic Name\"\r\n    Value: \r\n      !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:inv-${EnvironmentName}-${MicroServiceName}\r\n  LambdaFunction: \r\n    Description: \"Lambda Function Name\"\r\n    Value: \r\n      Ref: LambdaFunction"
}
inv-ver-vky01-manage-metrics-alarm
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: \"2010-09-09\"\r\nDescription: \"create_metrics_alarm.yaml\"\r\nParameters:\r\n  EnvironmentName:\r\n    Default: \"ver\"\r\n    Description: \"EnvironmentName\"\r\n    Type: String\r\n  MicroServiceName: \r\n    Default: \"cer01\"\r\n    Description: \"MicroServiceName\"\r\n    Type: String\r\n  s3keyprefix: \r\n    Default: \"_manage_metrics_alarm.xlsx\"\r\n    Description: \"excel s3 keys prefix\"\r\n    Type: String\r\n  S3Buckets: \r\n    Default: \"inv-ver-cer01-cfn\"\r\n    Description: \"source s3 backet name\"\r\n    Type: String\r\nResources: \r\n  IAMRole: \r\n    Type: \"AWS::IAM::Role\"\r\n    Properties: \r\n      AssumeRolePolicyDocument: \r\n        Version: \"2012-10-17\"\r\n        Statement: \r\n          - Effect: Allow\r\n            Principal: \r\n              Service: \"lambda.amazonaws.com\"\r\n            Action: \"sts:AssumeRole\"\r\n      ManagedPolicyArns: \r\n        - \"arn:aws:iam::aws:policy/AmazonS3FullAccess\"\r\n      Path: \"/\"\r\n      Policies:\r\n        - PolicyName: manage_metrics_alarm_lambda_policy\r\n          PolicyDocument:\r\n            Version: '2012-10-17'\r\n            Statement:\r\n              - Effect: Allow\r\n                Action:\r\n                  - cloudwatch:*\r\n                  - logs:*\r\n                Resource: \"*\"\r\n      RoleName: !Sub inv-${EnvironmentName}-${MicroServiceName}-manage-metrics-alarm-lambda-role\r\n  LambdaLayer:\r\n    Type: \"AWS::Lambda::LayerVersion\"\r\n    Properties:\r\n      CompatibleRuntimes: \r\n        - python3.6\r\n      Content: \r\n        S3Bucket:\r\n          Ref: S3Buckets\r\n        S3Key: CloudwatchAlarm/metrics_mod.zip\r\n      Description: \"manage_cloudwatch metrics alarm modules\"\r\n      LayerName: metrics_module\r\n  LambdaFunction: \r\n    DependsOn: \r\n      - IAMRole\r\n    Type: \"AWS::Lambda::Function\"\r\n    Properties: \r\n      Code: \r\n        S3Bucket: \r\n          Ref: S3Buckets\r\n        S3Key: CloudwatchAlarm/manage_metrics_alarm_src.zip\r\n      FunctionName: !Sub inv-${EnvironmentName}-${MicroServiceName}-manage-metrics-alarm-lambda\r\n      Handler: lambda_function.lambda_handler\r\n      Environment: \r\n        Variables: \r\n          fileprefix: \r\n            Ref: s3keyprefix\r\n          s3Bucket: !Sub inv-${EnvironmentName}-${MicroServiceName}-manage-metrics-alarm\r\n      Role: \r\n        \"Fn::GetAtt\": \r\n          - IAMRole\r\n          - Arn\r\n      Runtime: \"python3.6\"\r\n      MemorySize: 512\r\n      Timeout: 300\r\n      Layers:\r\n        - !Ref LambdaLayer\r\n  LambdaPermission: \r\n    Type: \"AWS::Lambda::Permission\"\r\n    Properties: \r\n      Action: \"lambda:InvokeFunction\"\r\n      FunctionName: \r\n        \"Fn::GetAtt\": \r\n          - LambdaFunction\r\n          - Arn\r\n      Principal: s3.amazonaws.com\r\n      SourceAccount: !Ref 'AWS::AccountId'\r\n      SourceArn: !Join\r\n        - ''\r\n        - - 'arn:aws:s3:::'\r\n          - !Sub inv-${EnvironmentName}-${MicroServiceName}-manage-metrics-alarm\r\n  S3Bucket:\r\n    Type: \"AWS::S3::Bucket\"\r\n    DependsOn: \r\n      - LambdaPermission\r\n    Properties:\r\n      BucketName: !Sub inv-${EnvironmentName}-${MicroServiceName}-manage-metrics-alarm\r\n      AccessControl: Private\r\n      PublicAccessBlockConfiguration:\r\n        BlockPublicAcls: True\r\n        BlockPublicPolicy: True\r\n        IgnorePublicAcls: True\r\n        RestrictPublicBuckets: True\r\n      NotificationConfiguration:\r\n        LambdaConfigurations:\r\n          - Event: \"s3:ObjectCreated:*\"\r\n            Filter:\r\n              S3Key:\r\n                Rules:\r\n                  - Name: suffix\r\n                    Value: xlsx\r\n            Function: !GetAtt\r\n              - LambdaFunction\r\n              - Arn\r\n  S3BucketPolicy:\r\n    Type: AWS::S3::BucketPolicy\r\n    Properties: \r\n      Bucket: \r\n        Ref: \"S3Bucket\"\r\n      PolicyDocument: \r\n        Version: \"2012-10-17\"\r\n        Statement: \r\n          - \r\n            Action: \r\n              - \"s3:GetObject\"\r\n            Effect: \"Allow\"\r\n            Resource: \r\n              Fn::Join: \r\n                - \"\"\r\n                - \r\n                  - \"arn:aws:s3:::\"\r\n                  - \r\n                    Ref: \"S3Bucket\"\r\n                  - \"/*\"\r\n            Principal: \r\n              AWS:\r\n                Fn::Join:\r\n                  - \"\"\r\n                  - \r\n                    - \"arn:aws:iam::\"\r\n                    - Ref: \"AWS::AccountId\"\r\n                    - \":root\"\r\nOutputs: \r\n  IAMRole: \r\n    Description: \"IAM Role Name\"\r\n    Value: \r\n      Ref: IAMRole\r\n  S3BucketName:\r\n    Value:\r\n      Ref S3BucketName\r\n  LambdaFunction: \r\n    Description: \"Lambda Function Name\"\r\n    Value: \r\n      Ref: LambdaFunction"
}
enable-guardduty
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: 2010-09-09\nDescription:\n  \"enable guardduty\"\nResources:\n  GDD:\n    Type: \"AWS::GuardDuty::Detector\"\n    Properties:\n      Enable: true"
}
StackSet-InfraAdmin-CreateIamRole-bc2bc2a5-7b97-4e80-8ab9-91a9a6ec1871
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": {
        "AWSTemplateFormatVersion": "2010-09-09", 
        "Description": "Template for Creating IAM Role to Switch from Internavi Login AWS Account", 
        "Parameters": {
            "TrustedAWSAccountId": {
                "AllowedPattern": "^[0-9]*$", 
                "Type": "String", 
                "Default": "975196479634", 
                "Description": "Trusted AWS Account ID"
            }, 
            "IAMRoleName": {
                "Type": "String", 
                "Default": "InfraAdmin", 
                "Description": "IAM Role Name"
            }
        }, 
        "Resources": {
            "IAMRoleForEngineer": {
                "Type": "AWS::IAM::Role", 
                "Properties": {
                    "AssumeRolePolicyDocument": {
                        "Version": "2012-10-17", 
                        "Statement": [
                            {
                                "Effect": "Allow", 
                                "Principal": {
                                    "AWS": {
                                        "Fn::Join": [
                                            "", 
                                            [
                                                "arn:aws:iam::", 
                                                {
                                                    "Ref": "TrustedAWSAccountId"
                                                }, 
                                                ":user/", 
                                                "JV010031"
                                            ]
                                        ]
                                    }
                                }, 
                                "Action": [
                                    "sts:AssumeRole"
                                ], 
                                "Condition": {
                                    "Bool": {
                                        "aws:MultiFactorAuthPresent": "true"
                                    }
                                }
                            }, 
                            {
                                "Effect": "Allow", 
                                "Principal": {
                                    "AWS": {
                                        "Fn::Join": [
                                            "", 
                                            [
                                                "arn:aws:iam::", 
                                                {
                                                    "Ref": "TrustedAWSAccountId"
                                                }, 
                                                ":user/", 
                                                "JV010024"
                                            ]
                                        ]
                                    }
                                }, 
                                "Action": [
                                    "sts:AssumeRole"
                                ], 
                                "Condition": {
                                    "Bool": {
                                        "aws:MultiFactorAuthPresent": "true"
                                    }
                                }
                            }
                        ]
                    }, 
                    "ManagedPolicyArns": [
                        "arn:aws:iam::aws:policy/AdministratorAccess"
                    ], 
                    "Path": "/", 
                    "RoleName": {
                        "Ref": "IAMRoleName"
                    }
                }
            }
        }, 
        "Outputs": {
            "IAMRoleArn": {
                "Value": {
                    "Fn::GetAtt": [
                        "IAMRoleForEngineer", 
                        "Arn"
                    ]
                }
            }, 
            "LinkForSwitchRole": {
                "Value": {
                    "Fn::Join": [
                        "", 
                        [
                            "https://signin.aws.amazon.com/switchrole?roleName=", 
                            {
                                "Ref": "IAMRoleName"
                            }, 
                            "&account=", 
                            {
                                "Ref": "AWS::AccountId"
                            }
                        ]
                    ]
                }
            }
        }
    }
}
StackSet-OpeAdmin-CreateIamRole-eb99bd20-04d6-46f3-958e-850de7114ac9
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "{\n  \"AWSTemplateFormatVersion\" : \"2010-09-09\",\n  \"Description\" : \"Template for Creating IAM Role to Switch from Internavi Login AWS Account\",\n  \"Parameters\" : {\n    \"TrustedAWSAccountId\" : {\n      \"AllowedPattern\" : \"^[0-9]*$\",\n      \"Type\" : \"String\",\n      \"Default\" : \"975196479634\",\n      \"Description\" : \"Trusted AWS Account ID\"\n    },\n    \"IAMRoleName\": {\n      \"Type\": \"String\",\n      \"Default\": \"OpeAdminRole\",\n      \"Description\": \"IAM Role Name\"\n    }\n  },\n  \"Resources\" : {\n    \"IAMRoleForEngineer\": {\n      \"Type\": \"AWS::IAM::Role\",\n      \"Properties\": {\n        \"AssumeRolePolicyDocument\": {\n          \"Version\": \"2012-10-17\",\n          \"Statement\": [\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010002\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010025\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010026\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010027\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010028\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JV010030\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            }\n          ]\n        },\n        \"ManagedPolicyArns\": [\n          \"arn:aws:iam::aws:policy/AdministratorAccess\"\n        ],\n        \"Path\": \"/\",\n        \"RoleName\": { \"Ref\" : \"IAMRoleName\" }\n      }\n    }\n  },\n  \"Outputs\" : {\n    \"IAMRoleArn\": {\n      \"Value\": { \"Fn::GetAtt\" : [ \"IAMRoleForEngineer\", \"Arn\" ] }\n    },\n    \"LinkForSwitchRole\": {\n      \"Value\": { \"Fn::Join\": [ \"\", [ \"https://signin.aws.amazon.com/switchrole?roleName=\", { \"Ref\" : \"IAMRoleName\" }, \"&account=\", { \"Ref\" : \"AWS::AccountId\" } ] ] }\n    }\n  }\n}\n"
}
StackSet-HmAdmin-createIamRole-0ee49759-449a-4e31-a131-5f916704e07d
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "{\n  \"AWSTemplateFormatVersion\" : \"2010-09-09\",\n  \"Description\" : \"Template for Creating IAM Role to Switch from Internavi Login AWS Account\",\n  \"Parameters\" : {\n    \"TrustedAWSAccountId\" : {\n      \"AllowedPattern\" : \"^[0-9]*$\",\n      \"Type\" : \"String\",\n      \"Default\" : \"975196479634\",\n      \"Description\" : \"Trusted AWS Account ID\"\n    },\n    \"IAMRoleName\": {\n      \"Type\": \"String\",\n      \"Default\": \"HmAdmin\",\n      \"Description\": \"IAM Role Name\"\n    }\n  },\n  \"Resources\" : {\n    \"IAMRoleForEngineer\": {\n      \"Type\": \"AWS::IAM::Role\",\n      \"Properties\": {\n        \"AssumeRolePolicyDocument\": {\n          \"Version\": \"2012-10-17\",\n          \"Statement\": [\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"J0322720\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"J0116063\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JP300063\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JP310643\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                \"AWS\": { \"Fn::Join\" : [ \"\", [ \"arn:aws:iam::\", { \"Ref\" : \"TrustedAWSAccountId\" }, \":user/\", \"JP311734\" ] ] }\n              },\n              \"Action\": [\n                \"sts:AssumeRole\"\n              ],\n            }\n          ]\n        },\n        \"ManagedPolicyArns\": [\n          \"arn:aws:iam::aws:policy/AdministratorAccess\"\n        ],\n        \"Path\": \"/\",\n        \"RoleName\": { \"Ref\" : \"IAMRoleName\" }\n      }\n    }\n  },\n  \"Outputs\" : {\n    \"IAMRoleArn\": {\n      \"Value\": { \"Fn::GetAtt\" : [ \"IAMRoleForEngineer\", \"Arn\" ] }\n    },\n    \"LinkForSwitchRole\": {\n      \"Value\": { \"Fn::Join\": [ \"\", [ \"https://signin.aws.amazon.com/switchrole?roleName=\", { \"Ref\" : \"IAMRoleName\" }, \"&account=\", { \"Ref\" : \"AWS::AccountId\" } ] ] }\n    }\n  }\n}\n"
}
StackSet-cm-cm-hamada-koji-iamRole-a753858a-7875-4da0-b53f-c95e9213b6fe
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": {
        "AWSTemplateFormatVersion": "2010-09-09", 
        "Description": "Template for Creating IAM Role to Switch from Classmethod AWS Account", 
        "Parameters": {
            "TrustedAWSAccountId": {
                "AllowedPattern": "^[0-9]*$", 
                "Type": "String", 
                "Default": "", 
                "Description": "Trusted AWS Account ID"
            }, 
            "IAMUserName": {
                "AllowedPattern": "^cm-[a-z.]*$", 
                "Type": "String", 
                "Default": "cm-xxx.xxx", 
                "Description": "IAM Role Name"
            }
        }, 
        "Resources": {
            "IAMRoleForCmEngineer": {
                "Type": "AWS::IAM::Role", 
                "Properties": {
                    "AssumeRolePolicyDocument": {
                        "Version": "2012-10-17", 
                        "Statement": [
                            {
                                "Effect": "Allow", 
                                "Principal": {
                                    "AWS": {
                                        "Fn::Join": [
                                            "", 
                                            [
                                                "arn:aws:iam::", 
                                                {
                                                    "Ref": "TrustedAWSAccountId"
                                                }, 
                                                ":user/", 
                                                {
                                                    "Ref": "IAMUserName"
                                                }
                                            ]
                                        ]
                                    }
                                }, 
                                "Action": [
                                    "sts:AssumeRole"
                                ], 
                                "Condition": {
                                    "Bool": {
                                        "aws:MultiFactorAuthPresent": "true"
                                    }
                                }
                            }
                        ]
                    }, 
                    "ManagedPolicyArns": [
                        "arn:aws:iam::aws:policy/AdministratorAccess"
                    ], 
                    "Path": "/", 
                    "RoleName": {
                        "Ref": "IAMUserName"
                    }
                }
            }
        }, 
        "Outputs": {
            "IAMRoleArn": {
                "Value": {
                    "Fn::GetAtt": [
                        "IAMRoleForCmEngineer", 
                        "Arn"
                    ]
                }
            }, 
            "LinkForSwitchRole": {
                "Value": {
                    "Fn::Join": [
                        "", 
                        [
                            "https://signin.aws.amazon.com/switchrole?roleName=", 
                            {
                                "Ref": "IAMUserName"
                            }, 
                            "&account=", 
                            {
                                "Ref": "AWS::AccountId"
                            }
                        ]
                    ]
                }
            }
        }
    }
}
StackSetsExecutionRole
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": "AWSTemplateFormatVersion: 2010-09-09\nDescription: Configure the AWSCloudFormationStackSetExecutionRole to support AWS CloudFormation StackSets in a managed account.\n\nParameters:\n  MasterAccountId:\n    Type: String\n    Description: AWS Account Id of the master account (the account in which StackSets will be created).\n    MaxLength: 12\n    MinLength: 12\n\nResources:\n  ExecutionRole:\n    Type: AWS::IAM::Role\n    Properties:\n      RoleName: AWSCloudFormationStackSetExecutionRole\n      AssumeRolePolicyDocument: \n        Version: 2012-10-17\n        Statement: \n          - Effect: Allow\n            Principal: \n              AWS:\n                - !Ref MasterAccountId\n            Action: \n              - sts:AssumeRole\n      Path: /\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/AdministratorAccess\n"
}
cm-kikuchi-shuji-iamRole
{
    "StagesAvailable": [
        "Original", 
        "Processed"
    ], 
    "TemplateBody": {
        "AWSTemplateFormatVersion": "2010-09-09", 
        "Description": "Template for Creating IAM Role to Switch from Classmethod AWS Account", 
        "Parameters": {
            "TrustedAWSAccountId": {
                "AllowedPattern": "^[0-9]*$", 
                "Type": "String", 
                "Default": "", 
                "Description": "Trusted AWS Account ID"
            }, 
            "IAMUserName": {
                "AllowedPattern": "^cm-[a-z.]*$", 
                "Type": "String", 
                "Default": "cm-xxx.xxx", 
                "Description": "IAM Role Name"
            }
        }, 
        "Resources": {
            "IAMRoleForCmEngineer": {
                "Type": "AWS::IAM::Role", 
                "Properties": {
                    "AssumeRolePolicyDocument": {
                        "Version": "2012-10-17", 
                        "Statement": [
                            {
                                "Effect": "Allow", 
                                "Principal": {
                                    "AWS": {
                                        "Fn::Join": [
                                            "", 
                                            [
                                                "arn:aws:iam::", 
                                                {
                                                    "Ref": "TrustedAWSAccountId"
                                                }, 
                                                ":user/", 
                                                {
                                                    "Ref": "IAMUserName"
                                                }
                                            ]
                                        ]
                                    }
                                }, 
                                "Action": [
                                    "sts:AssumeRole"
                                ], 
                                "Condition": {
                                    "Bool": {
                                        "aws:MultiFactorAuthPresent": "true"
                                    }
                                }
                            }
                        ]
                    }, 
                    "ManagedPolicyArns": [
                        "arn:aws:iam::aws:policy/AdministratorAccess"
                    ], 
                    "Path": "/", 
                    "RoleName": {
                        "Ref": "IAMUserName"
                    }
                }
            }
        }, 
        "Outputs": {
            "IAMRoleArn": {
                "Value": {
                    "Fn::GetAtt": [
                        "IAMRoleForCmEngineer", 
                        "Arn"
                    ]
                }
            }, 
            "LinkForSwitchRole": {
                "Value": {
                    "Fn::Join": [
                        "", 
                        [
                            "https://signin.aws.amazon.com/switchrole?roleName=", 
                            {
                                "Ref": "IAMUserName"
                            }, 
                            "&account=", 
                            {
                                "Ref": "AWS::AccountId"
                            }
                        ]
                    ]
                }
            }
        }
    }
}
]
スクリプトを終了します
